// Package dr provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.1-0.20240123090344-d326c01d279a DO NOT EDIT.
package dr

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/commondata"
	externalRef1 "github.com/ShouheiNishi/openapi5g/northbound/commondata"
	externalRef2 "github.com/ShouheiNishi/openapi5g/udm/pp"
	externalRef3 "github.com/ShouheiNishi/openapi5g/udm/sdm"
	externalRef4 "github.com/ShouheiNishi/openapi5g/udm/ueau"
	externalRef5 "github.com/ShouheiNishi/openapi5g/udr/application"
	externalRef6 "github.com/ShouheiNishi/openapi5g/udr/exposure"
	externalRef7 "github.com/ShouheiNishi/openapi5g/udr/policy"
	externalRef8 "github.com/ShouheiNishi/openapi5g/udr/subscription"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// ReadBdtPolicyDataParams defines parameters for ReadBdtPolicyData.
type ReadBdtPolicyDataParams struct {
	// BdtPolicyIds Each element identifies a service.
	BdtPolicyIds *[]string `form:"bdt-policy-ids,omitempty" json:"bdt-policy-ids,omitempty"`

	// InternalGroupIds Each element identifies a group of users.
	InternalGroupIds *[]externalRef0.GroupId `form:"internal-group-ids,omitempty" json:"internal-group-ids,omitempty"`

	// Supis Each element identifies the user.
	Supis *[]externalRef0.Supi `form:"supis,omitempty" json:"supis,omitempty"`
}

// ReadInfluenceDataParams defines parameters for ReadInfluenceData.
type ReadInfluenceDataParams struct {
	// InfluenceIds Each element identifies a service.
	InfluenceIds *[]string `form:"influence-Ids,omitempty" json:"influence-Ids,omitempty"`

	// Dnns Each element identifies a DNN.
	Dnns *[]externalRef0.Dnn `form:"dnns,omitempty" json:"dnns,omitempty"`

	// Snssais Each element identifies a slice.
	Snssais *[]externalRef0.Snssai `form:"snssais,omitempty" json:"snssais,omitempty"`

	// InternalGroupIds Each element identifies a group of users.
	InternalGroupIds *[]externalRef0.GroupId `form:"internal-Group-Ids,omitempty" json:"internal-Group-Ids,omitempty"`

	// Supis Each element identifies the user.
	Supis *[]externalRef0.Supi `form:"supis,omitempty" json:"supis,omitempty"`

	// SuppFeat Supported Features
	SuppFeat *externalRef0.SupportedFeatures `form:"supp-feat,omitempty" json:"supp-feat,omitempty"`
}

// ReadInfluenceDataSubscriptionsParams defines parameters for ReadInfluenceDataSubscriptions.
type ReadInfluenceDataSubscriptionsParams struct {
	// Dnn Identifies a DNN.
	Dnn *externalRef0.Dnn `form:"dnn,omitempty" json:"dnn,omitempty"`

	// Snssai Identifies a slice.
	Snssai *externalRef0.Snssai `form:"snssai,omitempty" json:"snssai,omitempty"`

	// InternalGroupId Identifies a group of users.
	InternalGroupId *externalRef0.GroupId `form:"internal-Group-Id,omitempty" json:"internal-Group-Id,omitempty"`

	// Supi Identifies a user.
	Supi *externalRef0.Supi `form:"supi,omitempty" json:"supi,omitempty"`
}

// ReadIPTVCongifurationDataParams defines parameters for ReadIPTVCongifurationData.
type ReadIPTVCongifurationDataParams struct {
	// ConfigIds Each element identifies a configuration.
	ConfigIds *[]string `form:"config-ids,omitempty" json:"config-ids,omitempty"`

	// Dnns Each element identifies a DNN.
	Dnns *[]externalRef0.Dnn `form:"dnns,omitempty" json:"dnns,omitempty"`

	// Snssais Each element identifies a slice.
	Snssais *[]externalRef0.Snssai `form:"snssais,omitempty" json:"snssais,omitempty"`

	// Supis Each element identifies the user.
	Supis *[]externalRef0.Supi `form:"supis,omitempty" json:"supis,omitempty"`

	// InterGroupIds Each element identifies a group of users.
	InterGroupIds *[]externalRef0.GroupId `form:"inter-group-ids,omitempty" json:"inter-group-ids,omitempty"`
}

// PartialReplaceIndividualIPTVConfigurationDataApplicationMergePatchPlusJSONBody defines parameters for PartialReplaceIndividualIPTVConfigurationData.
type PartialReplaceIndividualIPTVConfigurationDataApplicationMergePatchPlusJSONBody = interface{}

// ReadPFDDataParams defines parameters for ReadPFDData.
type ReadPFDDataParams struct {
	// AppId Contains the information of the application identifier(s) for the querying PFD Data resource. If none appId is included in the URI, it applies to all application identifier(s) for the querying PFD Data resource.
	AppId *[]externalRef0.ApplicationId `form:"appId,omitempty" json:"appId,omitempty"`
}

// ReadServiceParameterDataParams defines parameters for ReadServiceParameterData.
type ReadServiceParameterDataParams struct {
	// ServiceParamIds Each element identifies a service.
	ServiceParamIds *[]string `form:"service-param-ids,omitempty" json:"service-param-ids,omitempty"`

	// Dnns Each element identifies a DNN.
	Dnns *[]externalRef0.Dnn `form:"dnns,omitempty" json:"dnns,omitempty"`

	// Snssais Each element identifies a slice.
	Snssais *[]externalRef0.Snssai `form:"snssais,omitempty" json:"snssais,omitempty"`

	// InternalGroupIds Each element identifies a group of users.
	InternalGroupIds *[]externalRef0.GroupId `form:"internal-group-ids,omitempty" json:"internal-group-ids,omitempty"`

	// Supis Each element identifies the user.
	Supis *[]externalRef0.Supi `form:"supis,omitempty" json:"supis,omitempty"`

	// UeIpv4s Each element identifies the user.
	UeIpv4s *[]externalRef0.Ipv4Addr `form:"ue-ipv4s,omitempty" json:"ue-ipv4s,omitempty"`

	// UeIpv6s Each element identifies the user.
	UeIpv6s *[]externalRef0.Ipv6Addr `form:"ue-ipv6s,omitempty" json:"ue-ipv6s,omitempty"`

	// UeMacs Each element identifies the user.
	UeMacs *[]externalRef0.MacAddr48 `form:"ue-macs,omitempty" json:"ue-macs,omitempty"`

	// SuppFeat Supported Features
	SuppFeat *externalRef0.SupportedFeatures `form:"supp-feat,omitempty" json:"supp-feat,omitempty"`
}

// UpdateIndividualServiceParameterDataApplicationMergePatchPlusJSONBody defines parameters for UpdateIndividualServiceParameterData.
type UpdateIndividualServiceParameterDataApplicationMergePatchPlusJSONBody = interface{}

// ReadApplicationDataChangeSubscriptionsParams defines parameters for ReadApplicationDataChangeSubscriptions.
type ReadApplicationDataChangeSubscriptionsParams struct {
	// DataFilter The data filter for the query.
	DataFilter *externalRef5.DataFilter `form:"data-filter,omitempty" json:"data-filter,omitempty"`
}

// QueryAccessAndMobilityDataParams defines parameters for QueryAccessAndMobilityData.
type QueryAccessAndMobilityDataParams struct {
	// SuppFeat Supported Features
	SuppFeat *externalRef0.SupportedFeatures `form:"supp-feat,omitempty" json:"supp-feat,omitempty"`
}

// QuerySessionManagementDataParams defines parameters for QuerySessionManagementData.
type QuerySessionManagementDataParams struct {
	// Ipv4Addr IPv4 Address of the UE
	Ipv4Addr *externalRef0.Ipv4Addr `form:"ipv4-addr,omitempty" json:"ipv4-addr,omitempty"`

	// Ipv6Prefix IPv6 Address Prefix of the UE
	Ipv6Prefix *externalRef0.Ipv6Prefix `form:"ipv6-prefix,omitempty" json:"ipv6-prefix,omitempty"`

	// Dnn DNN of the UE
	Dnn *externalRef0.Dnn `form:"dnn,omitempty" json:"dnn,omitempty"`

	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SuppFeat Supported Features
	SuppFeat *externalRef0.SupportedFeatures `form:"supp-feat,omitempty" json:"supp-feat,omitempty"`
}

// ReadBdtDataParams defines parameters for ReadBdtData.
type ReadBdtDataParams struct {
	// BdtRefIds List of the BDT reference identifiers.
	BdtRefIds *[]externalRef1.BdtReferenceId `form:"bdt-ref-ids,omitempty" json:"bdt-ref-ids,omitempty"`

	// SuppFeat Supported Features
	SuppFeat *externalRef0.SupportedFeatures `form:"supp-feat,omitempty" json:"supp-feat,omitempty"`
}

// ReadIndividualBdtDataParams defines parameters for ReadIndividualBdtData.
type ReadIndividualBdtDataParams struct {
	// SuppFeat Supported Features
	SuppFeat *externalRef0.SupportedFeatures `form:"supp-feat,omitempty" json:"supp-feat,omitempty"`
}

// ReadOperatorSpecificDataParams defines parameters for ReadOperatorSpecificData.
type ReadOperatorSpecificDataParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SuppFeat Supported Features
	SuppFeat *externalRef0.SupportedFeatures `form:"supp-feat,omitempty" json:"supp-feat,omitempty"`
}

// UpdateOperatorSpecificDataApplicationJSONPatchPlusJSONBody defines parameters for UpdateOperatorSpecificData.
type UpdateOperatorSpecificDataApplicationJSONPatchPlusJSONBody = []externalRef0.PatchItem

// ReplaceOperatorSpecificDataJSONBody defines parameters for ReplaceOperatorSpecificData.
type ReplaceOperatorSpecificDataJSONBody map[string]interface{}

// ReadSessionManagementPolicyDataParams defines parameters for ReadSessionManagementPolicyData.
type ReadSessionManagementPolicyDataParams struct {
	Snssai *externalRef0.Snssai `form:"snssai,omitempty" json:"snssai,omitempty"`
	Dnn    *externalRef0.Dnn    `form:"dnn,omitempty" json:"dnn,omitempty"`

	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SuppFeat Supported Features
	SuppFeat *externalRef0.SupportedFeatures `form:"supp-feat,omitempty" json:"supp-feat,omitempty"`
}

// ReadUsageMonitoringInformationParams defines parameters for ReadUsageMonitoringInformation.
type ReadUsageMonitoringInformationParams struct {
	// SuppFeat Supported Features
	SuppFeat *externalRef0.SupportedFeatures `form:"supp-feat,omitempty" json:"supp-feat,omitempty"`
}

// ReadUEPolicySetParams defines parameters for ReadUEPolicySet.
type ReadUEPolicySetParams struct {
	// SuppFeat Supported Features
	SuppFeat *externalRef0.SupportedFeatures `form:"supp-feat,omitempty" json:"supp-feat,omitempty"`
}

// Query5GVnGroupParams defines parameters for Query5GVnGroup.
type Query5GVnGroupParams struct {
	// Gpsis List of GPSIs
	Gpsis *[]externalRef0.Gpsi `form:"gpsis,omitempty" json:"gpsis,omitempty"`
}

// Query5GVnGroupInternalParams defines parameters for Query5GVnGroupInternal.
type Query5GVnGroupInternalParams struct {
	// InternalGroupIds List of Internal Group IDs
	InternalGroupIds []externalRef0.GroupId `form:"internal-group-ids" json:"internal-group-ids"`
}

// Query5GVNGroupPPDataParams defines parameters for Query5GVNGroupPPData.
type Query5GVNGroupPPDataParams struct {
	// ExtGroupIds List of external VN group identifiers
	ExtGroupIds *[]externalRef3.ExtGroupId `form:"ext-group-ids,omitempty" json:"ext-group-ids,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// Modify5GVnGroupApplicationJSONPatchPlusJSONBody defines parameters for Modify5GVnGroup.
type Modify5GVnGroupApplicationJSONPatchPlusJSONBody = []externalRef0.PatchItem

// Modify5GVnGroupParams defines parameters for Modify5GVnGroup.
type Modify5GVnGroupParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// GetGroupIdentifiersParams defines parameters for GetGroupIdentifiers.
type GetGroupIdentifiersParams struct {
	// ExtGroupId External Group Identifier
	ExtGroupId *externalRef3.ExtGroupId `form:"ext-group-id,omitempty" json:"ext-group-id,omitempty"`

	// IntGroupId Internal Group Identifier
	IntGroupId *externalRef0.GroupId `form:"int-group-id,omitempty" json:"int-group-id,omitempty"`

	// UeIdInd Indication whether UE identifiers are required or not
	UeIdInd *bool `form:"ue-id-ind,omitempty" json:"ue-id-ind,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryGroupEEDataParams defines parameters for QueryGroupEEData.
type QueryGroupEEDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryEeGroupSubscriptionsParams defines parameters for QueryEeGroupSubscriptions.
type QueryEeGroupSubscriptionsParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// ModifyEeGroupSubscriptionApplicationJSONPatchPlusJSONBody defines parameters for ModifyEeGroupSubscription.
type ModifyEeGroupSubscriptionApplicationJSONPatchPlusJSONBody = []externalRef0.PatchItem

// ModifyEeGroupSubscriptionParams defines parameters for ModifyEeGroupSubscription.
type ModifyEeGroupSubscriptionParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// GetSharedDataParams defines parameters for GetSharedData.
type GetSharedDataParams struct {
	// SharedDataIds List of shared data ids
	SharedDataIds externalRef3.SharedDataIds `form:"shared-data-ids" json:"shared-data-ids"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// GetIndividualSharedDataParams defines parameters for GetIndividualSharedData.
type GetIndividualSharedDataParams struct {
	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// RemoveMultipleSubscriptionDataSubscriptionsParams defines parameters for RemoveMultipleSubscriptionDataSubscriptions.
type RemoveMultipleSubscriptionDataSubscriptionsParams struct {
	// UeId UE ID
	UeId externalRef0.VarUeId `form:"ue-id" json:"ue-id"`

	// NfInstanceId NF Instance ID
	NfInstanceId *externalRef0.NfInstanceId `form:"nf-instance-id,omitempty" json:"nf-instance-id,omitempty"`

	// DeleteAllNfs Flag to delete subscriptions from all NFs
	DeleteAllNfs *bool `form:"delete-all-nfs,omitempty" json:"delete-all-nfs,omitempty"`

	// ImplicitUnsubscribeIndication Implicit Unsubscribe Indication
	ImplicitUnsubscribeIndication *bool `form:"implicit-unsubscribe-indication,omitempty" json:"implicit-unsubscribe-indication,omitempty"`
}

// QuerySubsToNotifyParams defines parameters for QuerySubsToNotify.
type QuerySubsToNotifyParams struct {
	// UeId UE id
	UeId externalRef0.VarUeId `form:"ue-id" json:"ue-id"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// ModifysubscriptionDataSubscriptionApplicationJSONPatchPlusJSONBody defines parameters for ModifysubscriptionDataSubscription.
type ModifysubscriptionDataSubscriptionApplicationJSONPatchPlusJSONBody = []externalRef0.PatchItem

// ModifysubscriptionDataSubscriptionParams defines parameters for ModifysubscriptionDataSubscription.
type ModifysubscriptionDataSubscriptionParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryAuthenticationStatusParams defines parameters for QueryAuthenticationStatus.
type QueryAuthenticationStatusParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryIndividualAuthenticationStatusParams defines parameters for QueryIndividualAuthenticationStatus.
type QueryIndividualAuthenticationStatusParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryAuthSubsDataParams defines parameters for QueryAuthSubsData.
type QueryAuthSubsDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// ModifyAuthenticationSubscriptionApplicationJSONPatchPlusJSONBody defines parameters for ModifyAuthenticationSubscription.
type ModifyAuthenticationSubscriptionApplicationJSONPatchPlusJSONBody = []externalRef0.PatchItem

// ModifyAuthenticationSubscriptionParams defines parameters for ModifyAuthenticationSubscription.
type ModifyAuthenticationSubscriptionParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryContextDataParams defines parameters for QueryContextData.
type QueryContextDataParams struct {
	// ContextDatasetNames List of context dataset names
	ContextDatasetNames externalRef8.ContextDatasetNames `form:"context-dataset-names" json:"context-dataset-names"`
}

// QueryAmfContext3gppParams defines parameters for QueryAmfContext3gpp.
type QueryAmfContext3gppParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// AmfContext3gppApplicationJSONPatchPlusJSONBody defines parameters for AmfContext3gpp.
type AmfContext3gppApplicationJSONPatchPlusJSONBody = []externalRef0.PatchItem

// AmfContext3gppParams defines parameters for AmfContext3gpp.
type AmfContext3gppParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryAmfContextNon3gppParams defines parameters for QueryAmfContextNon3gpp.
type QueryAmfContextNon3gppParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// AmfContextNon3gppApplicationJSONPatchPlusJSONBody defines parameters for AmfContextNon3gpp.
type AmfContextNon3gppApplicationJSONPatchPlusJSONBody = []externalRef0.PatchItem

// AmfContextNon3gppParams defines parameters for AmfContextNon3gpp.
type AmfContextNon3gppParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryeesubscriptionsParams defines parameters for Queryeesubscriptions.
type QueryeesubscriptionsParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// ModifyEesubscriptionApplicationJSONPatchPlusJSONBody defines parameters for ModifyEesubscription.
type ModifyEesubscriptionApplicationJSONPatchPlusJSONBody = []externalRef0.PatchItem

// ModifyEesubscriptionParams defines parameters for ModifyEesubscription.
type ModifyEesubscriptionParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// ModifyAmfSubscriptionInfoApplicationJSONPatchPlusJSONBody defines parameters for ModifyAmfSubscriptionInfo.
type ModifyAmfSubscriptionInfoApplicationJSONPatchPlusJSONBody = []externalRef0.PatchItem

// ModifyAmfSubscriptionInfoParams defines parameters for ModifyAmfSubscriptionInfo.
type ModifyAmfSubscriptionInfoParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// CreateAMFSubscriptionsJSONBody defines parameters for CreateAMFSubscriptions.
type CreateAMFSubscriptionsJSONBody = []externalRef8.AmfSubscriptionInfo

// ModifyHssSubscriptionInfoApplicationJSONPatchPlusJSONBody defines parameters for ModifyHssSubscriptionInfo.
type ModifyHssSubscriptionInfoApplicationJSONPatchPlusJSONBody = []externalRef0.PatchItem

// ModifyHssSubscriptionInfoParams defines parameters for ModifyHssSubscriptionInfo.
type ModifyHssSubscriptionInfoParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// ModifySmfSubscriptionInfoApplicationJSONPatchPlusJSONBody defines parameters for ModifySmfSubscriptionInfo.
type ModifySmfSubscriptionInfoApplicationJSONPatchPlusJSONBody = []externalRef0.PatchItem

// ModifySmfSubscriptionInfoParams defines parameters for ModifySmfSubscriptionInfo.
type ModifySmfSubscriptionInfoParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryIpSmGwContextParams defines parameters for QueryIpSmGwContext.
type QueryIpSmGwContextParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// ModifyIpSmGwContextApplicationJSONPatchPlusJSONBody defines parameters for ModifyIpSmGwContext.
type ModifyIpSmGwContextApplicationJSONPatchPlusJSONBody = []externalRef0.PatchItem

// QueryUeLocationParams defines parameters for QueryUeLocation.
type QueryUeLocationParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryMessageWaitingDataParams defines parameters for QueryMessageWaitingData.
type QueryMessageWaitingDataParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// ModifyMessageWaitingDataApplicationJSONPatchPlusJSONBody defines parameters for ModifyMessageWaitingData.
type ModifyMessageWaitingDataApplicationJSONPatchPlusJSONBody = []externalRef0.PatchItem

// QuerysdmsubscriptionsParams defines parameters for Querysdmsubscriptions.
type QuerysdmsubscriptionsParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// ModifysdmSubscriptionApplicationJSONPatchPlusJSONBody defines parameters for ModifysdmSubscription.
type ModifysdmSubscriptionApplicationJSONPatchPlusJSONBody = []externalRef0.PatchItem

// ModifysdmSubscriptionParams defines parameters for ModifysdmSubscription.
type ModifysdmSubscriptionParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// ModifyHssSDMSubscriptionInfoApplicationJSONPatchPlusJSONBody defines parameters for ModifyHssSDMSubscriptionInfo.
type ModifyHssSDMSubscriptionInfoApplicationJSONPatchPlusJSONBody = []externalRef0.PatchItem

// ModifyHssSDMSubscriptionInfoParams defines parameters for ModifyHssSDMSubscriptionInfo.
type ModifyHssSDMSubscriptionInfoParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QuerySmfRegListParams defines parameters for QuerySmfRegList.
type QuerySmfRegListParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QuerySmfRegistrationParams defines parameters for QuerySmfRegistration.
type QuerySmfRegistrationParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QuerySmsfContext3gppParams defines parameters for QuerySmsfContext3gpp.
type QuerySmsfContext3gppParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QuerySmsfContextNon3gppParams defines parameters for QuerySmsfContextNon3gpp.
type QuerySmsfContextNon3gppParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryCoverageRestrictionDataParams defines parameters for QueryCoverageRestrictionData.
type QueryCoverageRestrictionDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// QueryEEDataParams defines parameters for QueryEEData.
type QueryEEDataParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// GetIdentityDataParams defines parameters for GetIdentityData.
type GetIdentityDataParams struct {
	// AppPortId Application port identifier
	AppPortId *externalRef3.AppPortId `form:"app-port-id,omitempty" json:"app-port-id,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// QueryLcsMoDataParams defines parameters for QueryLcsMoData.
type QueryLcsMoDataParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// QueryLcsPrivacyDataParams defines parameters for QueryLcsPrivacyData.
type QueryLcsPrivacyDataParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetNiddAuDataParams defines parameters for GetNiddAuData.
type GetNiddAuDataParams struct {
	// SingleNssai single NSSAI
	SingleNssai externalRef8.VarSnssai `form:"single-nssai" json:"single-nssai"`

	// Dnn DNN
	Dnn externalRef8.Dnn `form:"dnn" json:"dnn"`

	// MtcProviderInformation MTC Provider Information
	MtcProviderInformation externalRef0.MtcProviderInformation `form:"mtc-provider-information" json:"mtc-provider-information"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// QueryOperSpecDataParams defines parameters for QueryOperSpecData.
type QueryOperSpecDataParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// ModifyOperSpecDataApplicationJSONPatchPlusJSONBody defines parameters for ModifyOperSpecData.
type ModifyOperSpecDataApplicationJSONPatchPlusJSONBody = []externalRef0.PatchItem

// ModifyOperSpecDataParams defines parameters for ModifyOperSpecData.
type ModifyOperSpecDataParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// GetppDataParams defines parameters for GetppData.
type GetppDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// ModifyPpDataApplicationJSONPatchPlusJSONBody defines parameters for ModifyPpData.
type ModifyPpDataApplicationJSONPatchPlusJSONBody = []externalRef0.PatchItem

// ModifyPpDataParams defines parameters for ModifyPpData.
type ModifyPpDataParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryPPDataParams defines parameters for QueryPPData.
type QueryPPDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryAuthSoRParams defines parameters for QueryAuthSoR.
type QueryAuthSoRParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// CreateAuthenticationSoRParams defines parameters for CreateAuthenticationSoR.
type CreateAuthenticationSoRParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryCagAckParams defines parameters for QueryCagAck.
type QueryCagAckParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// CreateCagUpdateAckParams defines parameters for CreateCagUpdateAck.
type CreateCagUpdateAckParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryNssaiAckParams defines parameters for QueryNssaiAck.
type QueryNssaiAckParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// CreateOrUpdateNssaiAckParams defines parameters for CreateOrUpdateNssaiAck.
type CreateOrUpdateNssaiAckParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryAuthUPUParams defines parameters for QueryAuthUPU.
type QueryAuthUPUParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// CreateAuthenticationUPUParams defines parameters for CreateAuthenticationUPU.
type CreateAuthenticationUPUParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryV2xDataParams defines parameters for QueryV2xData.
type QueryV2xDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// QueryProvisionedDataParams defines parameters for QueryProvisionedData.
type QueryProvisionedDataParams struct {
	// DatasetNames List of dataset names
	DatasetNames *externalRef8.DatasetNames `form:"dataset-names,omitempty" json:"dataset-names,omitempty"`
}

// QueryAmDataParams defines parameters for QueryAmData.
type QueryAmDataParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// QueryLcsBcaDataParams defines parameters for QueryLcsBcaData.
type QueryLcsBcaDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// QuerySmDataParams defines parameters for QuerySmData.
type QuerySmDataParams struct {
	// SingleNssai single NSSAI
	SingleNssai *externalRef8.VarSnssai `form:"single-nssai,omitempty" json:"single-nssai,omitempty"`

	// Dnn DNN
	Dnn *externalRef8.Dnn `form:"dnn,omitempty" json:"dnn,omitempty"`

	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// QuerySmfSelectDataParams defines parameters for QuerySmfSelectData.
type QuerySmfSelectDataParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// QuerySmsDataParams defines parameters for QuerySmsData.
type QuerySmsDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// QuerySmsMngDataParams defines parameters for QuerySmsMngData.
type QuerySmsMngDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// QueryTraceDataParams defines parameters for QueryTraceData.
type QueryTraceDataParams struct {
	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// UpdateIndividualAppliedBdtPolicyDataApplicationMergePatchPlusJSONRequestBody defines body for UpdateIndividualAppliedBdtPolicyData for application/merge-patch+json ContentType.
type UpdateIndividualAppliedBdtPolicyDataApplicationMergePatchPlusJSONRequestBody = externalRef5.BdtPolicyDataPatch

// CreateIndividualAppliedBdtPolicyDataJSONRequestBody defines body for CreateIndividualAppliedBdtPolicyData for application/json ContentType.
type CreateIndividualAppliedBdtPolicyDataJSONRequestBody = externalRef5.BdtPolicyData

// CreateIndividualInfluenceDataSubscriptionJSONRequestBody defines body for CreateIndividualInfluenceDataSubscription for application/json ContentType.
type CreateIndividualInfluenceDataSubscriptionJSONRequestBody = externalRef5.TrafficInfluSub

// ReplaceIndividualInfluenceDataSubscriptionJSONRequestBody defines body for ReplaceIndividualInfluenceDataSubscription for application/json ContentType.
type ReplaceIndividualInfluenceDataSubscriptionJSONRequestBody = externalRef5.TrafficInfluSub

// UpdateIndividualInfluenceDataApplicationMergePatchPlusJSONRequestBody defines body for UpdateIndividualInfluenceData for application/merge-patch+json ContentType.
type UpdateIndividualInfluenceDataApplicationMergePatchPlusJSONRequestBody = externalRef5.TrafficInfluDataPatch

// CreateOrReplaceIndividualInfluenceDataJSONRequestBody defines body for CreateOrReplaceIndividualInfluenceData for application/json ContentType.
type CreateOrReplaceIndividualInfluenceDataJSONRequestBody = externalRef5.TrafficInfluData

// PartialReplaceIndividualIPTVConfigurationDataApplicationMergePatchPlusJSONRequestBody defines body for PartialReplaceIndividualIPTVConfigurationData for application/merge-patch+json ContentType.
type PartialReplaceIndividualIPTVConfigurationDataApplicationMergePatchPlusJSONRequestBody = PartialReplaceIndividualIPTVConfigurationDataApplicationMergePatchPlusJSONBody

// CreateOrReplaceIndividualIPTVConfigurationDataJSONRequestBody defines body for CreateOrReplaceIndividualIPTVConfigurationData for application/json ContentType.
type CreateOrReplaceIndividualIPTVConfigurationDataJSONRequestBody = externalRef5.IptvConfigData

// CreateOrReplaceIndividualPFDDataJSONRequestBody defines body for CreateOrReplaceIndividualPFDData for application/json ContentType.
type CreateOrReplaceIndividualPFDDataJSONRequestBody = externalRef5.PfdDataForAppExt

// UpdateIndividualServiceParameterDataApplicationMergePatchPlusJSONRequestBody defines body for UpdateIndividualServiceParameterData for application/merge-patch+json ContentType.
type UpdateIndividualServiceParameterDataApplicationMergePatchPlusJSONRequestBody = UpdateIndividualServiceParameterDataApplicationMergePatchPlusJSONBody

// CreateOrReplaceServiceParameterDataJSONRequestBody defines body for CreateOrReplaceServiceParameterData for application/json ContentType.
type CreateOrReplaceServiceParameterDataJSONRequestBody = externalRef5.ServiceParameterData

// CreateIndividualApplicationDataSubscriptionJSONRequestBody defines body for CreateIndividualApplicationDataSubscription for application/json ContentType.
type CreateIndividualApplicationDataSubscriptionJSONRequestBody = externalRef5.ApplicationDataSubs

// ReplaceIndividualApplicationDataSubscriptionJSONRequestBody defines body for ReplaceIndividualApplicationDataSubscription for application/json ContentType.
type ReplaceIndividualApplicationDataSubscriptionJSONRequestBody = externalRef5.ApplicationDataSubs

// CreateIndividualExposureDataSubscriptionJSONRequestBody defines body for CreateIndividualExposureDataSubscription for application/json ContentType.
type CreateIndividualExposureDataSubscriptionJSONRequestBody = externalRef6.ExposureDataSubscription

// ReplaceIndividualExposureDataSubscriptionJSONRequestBody defines body for ReplaceIndividualExposureDataSubscription for application/json ContentType.
type ReplaceIndividualExposureDataSubscriptionJSONRequestBody = externalRef6.ExposureDataSubscription

// UpdateAccessAndMobilityDataApplicationMergePatchPlusJSONRequestBody defines body for UpdateAccessAndMobilityData for application/merge-patch+json ContentType.
type UpdateAccessAndMobilityDataApplicationMergePatchPlusJSONRequestBody = externalRef6.AccessAndMobilityData

// CreateOrReplaceAccessAndMobilityDataJSONRequestBody defines body for CreateOrReplaceAccessAndMobilityData for application/json ContentType.
type CreateOrReplaceAccessAndMobilityDataJSONRequestBody = externalRef6.AccessAndMobilityData

// CreateOrReplaceSessionManagementDataJSONRequestBody defines body for CreateOrReplaceSessionManagementData for application/json ContentType.
type CreateOrReplaceSessionManagementDataJSONRequestBody = externalRef6.PduSessionManagementData

// UpdateIndividualBdtDataApplicationMergePatchPlusJSONRequestBody defines body for UpdateIndividualBdtData for application/merge-patch+json ContentType.
type UpdateIndividualBdtDataApplicationMergePatchPlusJSONRequestBody = externalRef7.BdtDataPatch

// CreateIndividualBdtDataJSONRequestBody defines body for CreateIndividualBdtData for application/json ContentType.
type CreateIndividualBdtDataJSONRequestBody = externalRef7.BdtData

// CreateIndividualPolicyDataSubscriptionJSONRequestBody defines body for CreateIndividualPolicyDataSubscription for application/json ContentType.
type CreateIndividualPolicyDataSubscriptionJSONRequestBody = externalRef7.PolicyDataSubscription

// ReplaceIndividualPolicyDataSubscriptionJSONRequestBody defines body for ReplaceIndividualPolicyDataSubscription for application/json ContentType.
type ReplaceIndividualPolicyDataSubscriptionJSONRequestBody = externalRef7.PolicyDataSubscription

// UpdateOperatorSpecificDataApplicationJSONPatchPlusJSONRequestBody defines body for UpdateOperatorSpecificData for application/json-patch+json ContentType.
type UpdateOperatorSpecificDataApplicationJSONPatchPlusJSONRequestBody = UpdateOperatorSpecificDataApplicationJSONPatchPlusJSONBody

// ReplaceOperatorSpecificDataJSONRequestBody defines body for ReplaceOperatorSpecificData for application/json ContentType.
type ReplaceOperatorSpecificDataJSONRequestBody ReplaceOperatorSpecificDataJSONBody

// UpdateSessionManagementPolicyDataApplicationMergePatchPlusJSONRequestBody defines body for UpdateSessionManagementPolicyData for application/merge-patch+json ContentType.
type UpdateSessionManagementPolicyDataApplicationMergePatchPlusJSONRequestBody = externalRef7.SmPolicyDataPatch

// CreateUsageMonitoringResourceJSONRequestBody defines body for CreateUsageMonitoringResource for application/json ContentType.
type CreateUsageMonitoringResourceJSONRequestBody = externalRef7.UsageMonData

// UpdateUEPolicySetApplicationMergePatchPlusJSONRequestBody defines body for UpdateUEPolicySet for application/merge-patch+json ContentType.
type UpdateUEPolicySetApplicationMergePatchPlusJSONRequestBody = externalRef7.UePolicySetPatch

// CreateOrReplaceUEPolicySetJSONRequestBody defines body for CreateOrReplaceUEPolicySet for application/json ContentType.
type CreateOrReplaceUEPolicySetJSONRequestBody = externalRef7.UePolicySet

// Modify5GVnGroupApplicationJSONPatchPlusJSONRequestBody defines body for Modify5GVnGroup for application/json-patch+json ContentType.
type Modify5GVnGroupApplicationJSONPatchPlusJSONRequestBody = Modify5GVnGroupApplicationJSONPatchPlusJSONBody

// Create5GVnGroupJSONRequestBody defines body for Create5GVnGroup for application/json ContentType.
type Create5GVnGroupJSONRequestBody = externalRef2.N5GVnGroupConfiguration

// CreateEeGroupSubscriptionsJSONRequestBody defines body for CreateEeGroupSubscriptions for application/json ContentType.
type CreateEeGroupSubscriptionsJSONRequestBody = externalRef8.EeSubscription

// ModifyEeGroupSubscriptionApplicationJSONPatchPlusJSONRequestBody defines body for ModifyEeGroupSubscription for application/json-patch+json ContentType.
type ModifyEeGroupSubscriptionApplicationJSONPatchPlusJSONRequestBody = ModifyEeGroupSubscriptionApplicationJSONPatchPlusJSONBody

// UpdateEeGroupSubscriptionsJSONRequestBody defines body for UpdateEeGroupSubscriptions for application/json ContentType.
type UpdateEeGroupSubscriptionsJSONRequestBody = externalRef8.EeSubscription

// SubscriptionDataSubscriptionsJSONRequestBody defines body for SubscriptionDataSubscriptions for application/json ContentType.
type SubscriptionDataSubscriptionsJSONRequestBody = externalRef8.SubscriptionDataSubscriptions

// ModifysubscriptionDataSubscriptionApplicationJSONPatchPlusJSONRequestBody defines body for ModifysubscriptionDataSubscription for application/json-patch+json ContentType.
type ModifysubscriptionDataSubscriptionApplicationJSONPatchPlusJSONRequestBody = ModifysubscriptionDataSubscriptionApplicationJSONPatchPlusJSONBody

// CreateAuthenticationStatusJSONRequestBody defines body for CreateAuthenticationStatus for application/json ContentType.
type CreateAuthenticationStatusJSONRequestBody = externalRef4.AuthEvent

// CreateIndividualAuthenticationStatusJSONRequestBody defines body for CreateIndividualAuthenticationStatus for application/json ContentType.
type CreateIndividualAuthenticationStatusJSONRequestBody = externalRef4.AuthEvent

// ModifyAuthenticationSubscriptionApplicationJSONPatchPlusJSONRequestBody defines body for ModifyAuthenticationSubscription for application/json-patch+json ContentType.
type ModifyAuthenticationSubscriptionApplicationJSONPatchPlusJSONRequestBody = ModifyAuthenticationSubscriptionApplicationJSONPatchPlusJSONBody

// AmfContext3gppApplicationJSONPatchPlusJSONRequestBody defines body for AmfContext3gpp for application/json-patch+json ContentType.
type AmfContext3gppApplicationJSONPatchPlusJSONRequestBody = AmfContext3gppApplicationJSONPatchPlusJSONBody

// CreateAmfContext3gppJSONRequestBody defines body for CreateAmfContext3gpp for application/json ContentType.
type CreateAmfContext3gppJSONRequestBody = externalRef8.Amf3GppAccessRegistration

// AmfContextNon3gppApplicationJSONPatchPlusJSONRequestBody defines body for AmfContextNon3gpp for application/json-patch+json ContentType.
type AmfContextNon3gppApplicationJSONPatchPlusJSONRequestBody = AmfContextNon3gppApplicationJSONPatchPlusJSONBody

// CreateAmfContextNon3gppJSONRequestBody defines body for CreateAmfContextNon3gpp for application/json ContentType.
type CreateAmfContextNon3gppJSONRequestBody = externalRef8.AmfNon3GppAccessRegistration

// CreateEeSubscriptionsJSONRequestBody defines body for CreateEeSubscriptions for application/json ContentType.
type CreateEeSubscriptionsJSONRequestBody = externalRef8.EeSubscription

// ModifyEesubscriptionApplicationJSONPatchPlusJSONRequestBody defines body for ModifyEesubscription for application/json-patch+json ContentType.
type ModifyEesubscriptionApplicationJSONPatchPlusJSONRequestBody = ModifyEesubscriptionApplicationJSONPatchPlusJSONBody

// UpdateEesubscriptionsJSONRequestBody defines body for UpdateEesubscriptions for application/json ContentType.
type UpdateEesubscriptionsJSONRequestBody = externalRef8.EeSubscription

// ModifyAmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody defines body for ModifyAmfSubscriptionInfo for application/json-patch+json ContentType.
type ModifyAmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody = ModifyAmfSubscriptionInfoApplicationJSONPatchPlusJSONBody

// CreateAMFSubscriptionsJSONRequestBody defines body for CreateAMFSubscriptions for application/json ContentType.
type CreateAMFSubscriptionsJSONRequestBody = CreateAMFSubscriptionsJSONBody

// ModifyHssSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody defines body for ModifyHssSubscriptionInfo for application/json-patch+json ContentType.
type ModifyHssSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody = ModifyHssSubscriptionInfoApplicationJSONPatchPlusJSONBody

// CreateHSSSubscriptionsJSONRequestBody defines body for CreateHSSSubscriptions for application/json ContentType.
type CreateHSSSubscriptionsJSONRequestBody = externalRef8.HssSubscriptionInfo

// ModifySmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody defines body for ModifySmfSubscriptionInfo for application/json-patch+json ContentType.
type ModifySmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody = ModifySmfSubscriptionInfoApplicationJSONPatchPlusJSONBody

// CreateSMFSubscriptionsJSONRequestBody defines body for CreateSMFSubscriptions for application/json ContentType.
type CreateSMFSubscriptionsJSONRequestBody = externalRef8.SmfSubscriptionInfo

// ModifyIpSmGwContextApplicationJSONPatchPlusJSONRequestBody defines body for ModifyIpSmGwContext for application/json-patch+json ContentType.
type ModifyIpSmGwContextApplicationJSONPatchPlusJSONRequestBody = ModifyIpSmGwContextApplicationJSONPatchPlusJSONBody

// CreateIpSmGwContextJSONRequestBody defines body for CreateIpSmGwContext for application/json ContentType.
type CreateIpSmGwContextJSONRequestBody = externalRef8.IpSmGwRegistration

// ModifyMessageWaitingDataApplicationJSONPatchPlusJSONRequestBody defines body for ModifyMessageWaitingData for application/json-patch+json ContentType.
type ModifyMessageWaitingDataApplicationJSONPatchPlusJSONRequestBody = ModifyMessageWaitingDataApplicationJSONPatchPlusJSONBody

// CreateMessageWaitingDataJSONRequestBody defines body for CreateMessageWaitingData for application/json ContentType.
type CreateMessageWaitingDataJSONRequestBody = externalRef8.MessageWaitingData

// CreateSdmSubscriptionsJSONRequestBody defines body for CreateSdmSubscriptions for application/json ContentType.
type CreateSdmSubscriptionsJSONRequestBody = externalRef8.SdmSubscription

// ModifysdmSubscriptionApplicationJSONPatchPlusJSONRequestBody defines body for ModifysdmSubscription for application/json-patch+json ContentType.
type ModifysdmSubscriptionApplicationJSONPatchPlusJSONRequestBody = ModifysdmSubscriptionApplicationJSONPatchPlusJSONBody

// UpdatesdmsubscriptionsJSONRequestBody defines body for Updatesdmsubscriptions for application/json ContentType.
type UpdatesdmsubscriptionsJSONRequestBody = externalRef8.SdmSubscription

// ModifyHssSDMSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody defines body for ModifyHssSDMSubscriptionInfo for application/json-patch+json ContentType.
type ModifyHssSDMSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody = ModifyHssSDMSubscriptionInfoApplicationJSONPatchPlusJSONBody

// CreateHSSSDMSubscriptionsJSONRequestBody defines body for CreateHSSSDMSubscriptions for application/json ContentType.
type CreateHSSSDMSubscriptionsJSONRequestBody = externalRef8.HssSubscriptionInfo

// CreateOrUpdateSmfRegistrationJSONRequestBody defines body for CreateOrUpdateSmfRegistration for application/json ContentType.
type CreateOrUpdateSmfRegistrationJSONRequestBody = externalRef8.SmfRegistration

// CreateSmsfContext3gppJSONRequestBody defines body for CreateSmsfContext3gpp for application/json ContentType.
type CreateSmsfContext3gppJSONRequestBody = externalRef8.SmsfRegistration

// CreateSmsfContextNon3gppJSONRequestBody defines body for CreateSmsfContextNon3gpp for application/json ContentType.
type CreateSmsfContextNon3gppJSONRequestBody = externalRef8.SmsfRegistration

// ModifyOperSpecDataApplicationJSONPatchPlusJSONRequestBody defines body for ModifyOperSpecData for application/json-patch+json ContentType.
type ModifyOperSpecDataApplicationJSONPatchPlusJSONRequestBody = ModifyOperSpecDataApplicationJSONPatchPlusJSONBody

// ModifyPpDataApplicationJSONPatchPlusJSONRequestBody defines body for ModifyPpData for application/json-patch+json ContentType.
type ModifyPpDataApplicationJSONPatchPlusJSONRequestBody = ModifyPpDataApplicationJSONPatchPlusJSONBody

// CreateAuthenticationSoRJSONRequestBody defines body for CreateAuthenticationSoR for application/json ContentType.
type CreateAuthenticationSoRJSONRequestBody = externalRef8.SorData

// CreateCagUpdateAckJSONRequestBody defines body for CreateCagUpdateAck for application/json ContentType.
type CreateCagUpdateAckJSONRequestBody = externalRef8.CagAckData

// CreateOrUpdateNssaiAckJSONRequestBody defines body for CreateOrUpdateNssaiAck for application/json ContentType.
type CreateOrUpdateNssaiAckJSONRequestBody = externalRef8.NssaiAckData

// CreateAuthenticationUPUJSONRequestBody defines body for CreateAuthenticationUPU for application/json ContentType.
type CreateAuthenticationUPUJSONRequestBody = externalRef8.UpuData

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ReadBdtPolicyData request
	ReadBdtPolicyData(ctx context.Context, params *ReadBdtPolicyDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndividualAppliedBdtPolicyData request
	DeleteIndividualAppliedBdtPolicyData(ctx context.Context, bdtPolicyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIndividualAppliedBdtPolicyDataWithBody request with any body
	UpdateIndividualAppliedBdtPolicyDataWithBody(ctx context.Context, bdtPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIndividualAppliedBdtPolicyDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, bdtPolicyId string, body UpdateIndividualAppliedBdtPolicyDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIndividualAppliedBdtPolicyDataWithBody request with any body
	CreateIndividualAppliedBdtPolicyDataWithBody(ctx context.Context, bdtPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIndividualAppliedBdtPolicyData(ctx context.Context, bdtPolicyId string, body CreateIndividualAppliedBdtPolicyDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadInfluenceData request
	ReadInfluenceData(ctx context.Context, params *ReadInfluenceDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadInfluenceDataSubscriptions request
	ReadInfluenceDataSubscriptions(ctx context.Context, params *ReadInfluenceDataSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIndividualInfluenceDataSubscriptionWithBody request with any body
	CreateIndividualInfluenceDataSubscriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIndividualInfluenceDataSubscription(ctx context.Context, body CreateIndividualInfluenceDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndividualInfluenceDataSubscription request
	DeleteIndividualInfluenceDataSubscription(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadIndividualInfluenceDataSubscription request
	ReadIndividualInfluenceDataSubscription(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceIndividualInfluenceDataSubscriptionWithBody request with any body
	ReplaceIndividualInfluenceDataSubscriptionWithBody(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceIndividualInfluenceDataSubscription(ctx context.Context, subscriptionId string, body ReplaceIndividualInfluenceDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndividualInfluenceData request
	DeleteIndividualInfluenceData(ctx context.Context, influenceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIndividualInfluenceDataWithBody request with any body
	UpdateIndividualInfluenceDataWithBody(ctx context.Context, influenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIndividualInfluenceDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, influenceId string, body UpdateIndividualInfluenceDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrReplaceIndividualInfluenceDataWithBody request with any body
	CreateOrReplaceIndividualInfluenceDataWithBody(ctx context.Context, influenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrReplaceIndividualInfluenceData(ctx context.Context, influenceId string, body CreateOrReplaceIndividualInfluenceDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadIPTVCongifurationData request
	ReadIPTVCongifurationData(ctx context.Context, params *ReadIPTVCongifurationDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndividualIPTVConfigurationData request
	DeleteIndividualIPTVConfigurationData(ctx context.Context, configurationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PartialReplaceIndividualIPTVConfigurationDataWithBody request with any body
	PartialReplaceIndividualIPTVConfigurationDataWithBody(ctx context.Context, configurationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PartialReplaceIndividualIPTVConfigurationDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, configurationId string, body PartialReplaceIndividualIPTVConfigurationDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrReplaceIndividualIPTVConfigurationDataWithBody request with any body
	CreateOrReplaceIndividualIPTVConfigurationDataWithBody(ctx context.Context, configurationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrReplaceIndividualIPTVConfigurationData(ctx context.Context, configurationId string, body CreateOrReplaceIndividualIPTVConfigurationDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadPFDData request
	ReadPFDData(ctx context.Context, params *ReadPFDDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndividualPFDData request
	DeleteIndividualPFDData(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadIndividualPFDData request
	ReadIndividualPFDData(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrReplaceIndividualPFDDataWithBody request with any body
	CreateOrReplaceIndividualPFDDataWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrReplaceIndividualPFDData(ctx context.Context, appId string, body CreateOrReplaceIndividualPFDDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadServiceParameterData request
	ReadServiceParameterData(ctx context.Context, params *ReadServiceParameterDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndividualServiceParameterData request
	DeleteIndividualServiceParameterData(ctx context.Context, serviceParamId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIndividualServiceParameterDataWithBody request with any body
	UpdateIndividualServiceParameterDataWithBody(ctx context.Context, serviceParamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIndividualServiceParameterDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, serviceParamId string, body UpdateIndividualServiceParameterDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrReplaceServiceParameterDataWithBody request with any body
	CreateOrReplaceServiceParameterDataWithBody(ctx context.Context, serviceParamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrReplaceServiceParameterData(ctx context.Context, serviceParamId string, body CreateOrReplaceServiceParameterDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadApplicationDataChangeSubscriptions request
	ReadApplicationDataChangeSubscriptions(ctx context.Context, params *ReadApplicationDataChangeSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIndividualApplicationDataSubscriptionWithBody request with any body
	CreateIndividualApplicationDataSubscriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIndividualApplicationDataSubscription(ctx context.Context, body CreateIndividualApplicationDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndividualApplicationDataSubscription request
	DeleteIndividualApplicationDataSubscription(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadIndividualApplicationDataSubscription request
	ReadIndividualApplicationDataSubscription(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceIndividualApplicationDataSubscriptionWithBody request with any body
	ReplaceIndividualApplicationDataSubscriptionWithBody(ctx context.Context, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceIndividualApplicationDataSubscription(ctx context.Context, subsId string, body ReplaceIndividualApplicationDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIndividualExposureDataSubscriptionWithBody request with any body
	CreateIndividualExposureDataSubscriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIndividualExposureDataSubscription(ctx context.Context, body CreateIndividualExposureDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndividualExposureDataSubscription request
	DeleteIndividualExposureDataSubscription(ctx context.Context, subId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceIndividualExposureDataSubscriptionWithBody request with any body
	ReplaceIndividualExposureDataSubscriptionWithBody(ctx context.Context, subId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceIndividualExposureDataSubscription(ctx context.Context, subId string, body ReplaceIndividualExposureDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAccessAndMobilityData request
	DeleteAccessAndMobilityData(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryAccessAndMobilityData request
	QueryAccessAndMobilityData(ctx context.Context, ueId externalRef0.VarUeId, params *QueryAccessAndMobilityDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAccessAndMobilityDataWithBody request with any body
	UpdateAccessAndMobilityDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAccessAndMobilityDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, body UpdateAccessAndMobilityDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrReplaceAccessAndMobilityDataWithBody request with any body
	CreateOrReplaceAccessAndMobilityDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrReplaceAccessAndMobilityData(ctx context.Context, ueId externalRef0.VarUeId, body CreateOrReplaceAccessAndMobilityDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSessionManagementData request
	DeleteSessionManagementData(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuerySessionManagementData request
	QuerySessionManagementData(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, params *QuerySessionManagementDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrReplaceSessionManagementDataWithBody request with any body
	CreateOrReplaceSessionManagementDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrReplaceSessionManagementData(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, body CreateOrReplaceSessionManagementDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadBdtData request
	ReadBdtData(ctx context.Context, params *ReadBdtDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndividualBdtData request
	DeleteIndividualBdtData(ctx context.Context, bdtReferenceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadIndividualBdtData request
	ReadIndividualBdtData(ctx context.Context, bdtReferenceId string, params *ReadIndividualBdtDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIndividualBdtDataWithBody request with any body
	UpdateIndividualBdtDataWithBody(ctx context.Context, bdtReferenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIndividualBdtDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, bdtReferenceId string, body UpdateIndividualBdtDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIndividualBdtDataWithBody request with any body
	CreateIndividualBdtDataWithBody(ctx context.Context, bdtReferenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIndividualBdtData(ctx context.Context, bdtReferenceId string, body CreateIndividualBdtDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadPlmnUePolicySet request
	ReadPlmnUePolicySet(ctx context.Context, plmnId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadSponsorConnectivityData request
	ReadSponsorConnectivityData(ctx context.Context, sponsorId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIndividualPolicyDataSubscriptionWithBody request with any body
	CreateIndividualPolicyDataSubscriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIndividualPolicyDataSubscription(ctx context.Context, body CreateIndividualPolicyDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndividualPolicyDataSubscription request
	DeleteIndividualPolicyDataSubscription(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceIndividualPolicyDataSubscriptionWithBody request with any body
	ReplaceIndividualPolicyDataSubscriptionWithBody(ctx context.Context, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceIndividualPolicyDataSubscription(ctx context.Context, subsId string, body ReplaceIndividualPolicyDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadAccessAndMobilityPolicyData request
	ReadAccessAndMobilityPolicyData(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadOperatorSpecificData request
	ReadOperatorSpecificData(ctx context.Context, ueId externalRef0.VarUeId, params *ReadOperatorSpecificDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOperatorSpecificDataWithBody request with any body
	UpdateOperatorSpecificDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOperatorSpecificDataWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, body UpdateOperatorSpecificDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceOperatorSpecificDataWithBody request with any body
	ReplaceOperatorSpecificDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceOperatorSpecificData(ctx context.Context, ueId externalRef0.VarUeId, body ReplaceOperatorSpecificDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadSessionManagementPolicyData request
	ReadSessionManagementPolicyData(ctx context.Context, ueId externalRef0.VarUeId, params *ReadSessionManagementPolicyDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSessionManagementPolicyDataWithBody request with any body
	UpdateSessionManagementPolicyDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSessionManagementPolicyDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, body UpdateSessionManagementPolicyDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUsageMonitoringInformation request
	DeleteUsageMonitoringInformation(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadUsageMonitoringInformation request
	ReadUsageMonitoringInformation(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, params *ReadUsageMonitoringInformationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUsageMonitoringResourceWithBody request with any body
	CreateUsageMonitoringResourceWithBody(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUsageMonitoringResource(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, body CreateUsageMonitoringResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadUEPolicySet request
	ReadUEPolicySet(ctx context.Context, ueId externalRef0.VarUeId, params *ReadUEPolicySetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUEPolicySetWithBody request with any body
	UpdateUEPolicySetWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUEPolicySetWithApplicationMergePatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, body UpdateUEPolicySetApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrReplaceUEPolicySetWithBody request with any body
	CreateOrReplaceUEPolicySetWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrReplaceUEPolicySet(ctx context.Context, ueId externalRef0.VarUeId, body CreateOrReplaceUEPolicySetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Query5GVnGroup request
	Query5GVnGroup(ctx context.Context, params *Query5GVnGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Query5GVnGroupInternal request
	Query5GVnGroupInternal(ctx context.Context, params *Query5GVnGroupInternalParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Query5GVNGroupPPData request
	Query5GVNGroupPPData(ctx context.Context, params *Query5GVNGroupPPDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete5GVnGroup request
	Delete5GVnGroup(ctx context.Context, externalGroupId externalRef3.ExtGroupId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get5GVnGroupConfiguration request
	Get5GVnGroupConfiguration(ctx context.Context, externalGroupId externalRef3.ExtGroupId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Modify5GVnGroupWithBody request with any body
	Modify5GVnGroupWithBody(ctx context.Context, externalGroupId externalRef3.ExtGroupId, params *Modify5GVnGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Modify5GVnGroupWithApplicationJSONPatchPlusJSONBody(ctx context.Context, externalGroupId externalRef3.ExtGroupId, params *Modify5GVnGroupParams, body Modify5GVnGroupApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Create5GVnGroupWithBody request with any body
	Create5GVnGroupWithBody(ctx context.Context, externalGroupId externalRef3.ExtGroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Create5GVnGroup(ctx context.Context, externalGroupId externalRef3.ExtGroupId, body Create5GVnGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupIdentifiers request
	GetGroupIdentifiers(ctx context.Context, params *GetGroupIdentifiersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryGroupEEData request
	QueryGroupEEData(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, params *QueryGroupEEDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryEeGroupSubscriptions request
	QueryEeGroupSubscriptions(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, params *QueryEeGroupSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEeGroupSubscriptionsWithBody request with any body
	CreateEeGroupSubscriptionsWithBody(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEeGroupSubscriptions(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, body CreateEeGroupSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveEeGroupSubscriptions request
	RemoveEeGroupSubscriptions(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryEeGroupSubscription request
	QueryEeGroupSubscription(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyEeGroupSubscriptionWithBody request with any body
	ModifyEeGroupSubscriptionWithBody(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, subsId string, params *ModifyEeGroupSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyEeGroupSubscriptionWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, subsId string, params *ModifyEeGroupSubscriptionParams, body ModifyEeGroupSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEeGroupSubscriptionsWithBody request with any body
	UpdateEeGroupSubscriptionsWithBody(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEeGroupSubscriptions(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, subsId string, body UpdateEeGroupSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSharedData request
	GetSharedData(ctx context.Context, params *GetSharedDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndividualSharedData request
	GetIndividualSharedData(ctx context.Context, sharedDataId externalRef3.SharedDataId, params *GetIndividualSharedDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveMultipleSubscriptionDataSubscriptions request
	RemoveMultipleSubscriptionDataSubscriptions(ctx context.Context, params *RemoveMultipleSubscriptionDataSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuerySubsToNotify request
	QuerySubsToNotify(ctx context.Context, params *QuerySubsToNotifyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubscriptionDataSubscriptionsWithBody request with any body
	SubscriptionDataSubscriptionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubscriptionDataSubscriptions(ctx context.Context, body SubscriptionDataSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemovesubscriptionDataSubscriptions request
	RemovesubscriptionDataSubscriptions(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuerySubscriptionDataSubscriptions request
	QuerySubscriptionDataSubscriptions(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifysubscriptionDataSubscriptionWithBody request with any body
	ModifysubscriptionDataSubscriptionWithBody(ctx context.Context, subsId string, params *ModifysubscriptionDataSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifysubscriptionDataSubscriptionWithApplicationJSONPatchPlusJSONBody(ctx context.Context, subsId string, params *ModifysubscriptionDataSubscriptionParams, body ModifysubscriptionDataSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAuthenticationStatus request
	DeleteAuthenticationStatus(ctx context.Context, ueId externalRef0.Supi, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryAuthenticationStatus request
	QueryAuthenticationStatus(ctx context.Context, ueId externalRef0.Supi, params *QueryAuthenticationStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAuthenticationStatusWithBody request with any body
	CreateAuthenticationStatusWithBody(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAuthenticationStatus(ctx context.Context, ueId externalRef0.Supi, body CreateAuthenticationStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndividualAuthenticationStatus request
	DeleteIndividualAuthenticationStatus(ctx context.Context, ueId externalRef0.Supi, servingNetworkName externalRef4.ServingNetworkName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryIndividualAuthenticationStatus request
	QueryIndividualAuthenticationStatus(ctx context.Context, ueId externalRef0.Supi, servingNetworkName externalRef4.ServingNetworkName, params *QueryIndividualAuthenticationStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIndividualAuthenticationStatusWithBody request with any body
	CreateIndividualAuthenticationStatusWithBody(ctx context.Context, ueId externalRef0.Supi, servingNetworkName externalRef4.ServingNetworkName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIndividualAuthenticationStatus(ctx context.Context, ueId externalRef0.Supi, servingNetworkName externalRef4.ServingNetworkName, body CreateIndividualAuthenticationStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryAuthSubsData request
	QueryAuthSubsData(ctx context.Context, ueId externalRef0.Supi, params *QueryAuthSubsDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyAuthenticationSubscriptionWithBody request with any body
	ModifyAuthenticationSubscriptionWithBody(ctx context.Context, ueId externalRef0.Supi, params *ModifyAuthenticationSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyAuthenticationSubscriptionWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.Supi, params *ModifyAuthenticationSubscriptionParams, body ModifyAuthenticationSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryContextData request
	QueryContextData(ctx context.Context, ueId externalRef0.VarUeId, params *QueryContextDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryAmfContext3gpp request
	QueryAmfContext3gpp(ctx context.Context, ueId externalRef0.VarUeId, params *QueryAmfContext3gppParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AmfContext3gppWithBody request with any body
	AmfContext3gppWithBody(ctx context.Context, ueId externalRef0.VarUeId, params *AmfContext3gppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AmfContext3gppWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, params *AmfContext3gppParams, body AmfContext3gppApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAmfContext3gppWithBody request with any body
	CreateAmfContext3gppWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAmfContext3gpp(ctx context.Context, ueId externalRef0.VarUeId, body CreateAmfContext3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryAmfContextNon3gpp request
	QueryAmfContextNon3gpp(ctx context.Context, ueId externalRef0.VarUeId, params *QueryAmfContextNon3gppParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AmfContextNon3gppWithBody request with any body
	AmfContextNon3gppWithBody(ctx context.Context, ueId externalRef0.VarUeId, params *AmfContextNon3gppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AmfContextNon3gppWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, params *AmfContextNon3gppParams, body AmfContextNon3gppApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAmfContextNon3gppWithBody request with any body
	CreateAmfContextNon3gppWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAmfContextNon3gpp(ctx context.Context, ueId externalRef0.VarUeId, body CreateAmfContextNon3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Queryeesubscriptions request
	Queryeesubscriptions(ctx context.Context, ueId externalRef0.VarUeId, params *QueryeesubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEeSubscriptionsWithBody request with any body
	CreateEeSubscriptionsWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEeSubscriptions(ctx context.Context, ueId externalRef0.VarUeId, body CreateEeSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveeeSubscriptions request
	RemoveeeSubscriptions(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryeeSubscription request
	QueryeeSubscription(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyEesubscriptionWithBody request with any body
	ModifyEesubscriptionWithBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyEesubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyEesubscriptionWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyEesubscriptionParams, body ModifyEesubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEesubscriptionsWithBody request with any body
	UpdateEesubscriptionsWithBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEesubscriptions(ctx context.Context, ueId externalRef0.VarUeId, subsId string, body UpdateEesubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveAmfSubscriptionsInfo request
	RemoveAmfSubscriptionsInfo(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAmfSubscriptionInfo request
	GetAmfSubscriptionInfo(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyAmfSubscriptionInfoWithBody request with any body
	ModifyAmfSubscriptionInfoWithBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyAmfSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyAmfSubscriptionInfoWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyAmfSubscriptionInfoParams, body ModifyAmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAMFSubscriptionsWithBody request with any body
	CreateAMFSubscriptionsWithBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAMFSubscriptions(ctx context.Context, ueId externalRef0.VarUeId, subsId string, body CreateAMFSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveHssSubscriptionsInfo request
	RemoveHssSubscriptionsInfo(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHssSubscriptionInfo request
	GetHssSubscriptionInfo(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyHssSubscriptionInfoWithBody request with any body
	ModifyHssSubscriptionInfoWithBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyHssSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyHssSubscriptionInfoWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyHssSubscriptionInfoParams, body ModifyHssSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHSSSubscriptionsWithBody request with any body
	CreateHSSSubscriptionsWithBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHSSSubscriptions(ctx context.Context, ueId externalRef0.VarUeId, subsId string, body CreateHSSSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveSmfSubscriptionsInfo request
	RemoveSmfSubscriptionsInfo(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmfSubscriptionInfo request
	GetSmfSubscriptionInfo(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifySmfSubscriptionInfoWithBody request with any body
	ModifySmfSubscriptionInfoWithBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifySmfSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifySmfSubscriptionInfoWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifySmfSubscriptionInfoParams, body ModifySmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSMFSubscriptionsWithBody request with any body
	CreateSMFSubscriptionsWithBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSMFSubscriptions(ctx context.Context, ueId externalRef0.VarUeId, subsId string, body CreateSMFSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIpSmGwContext request
	DeleteIpSmGwContext(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryIpSmGwContext request
	QueryIpSmGwContext(ctx context.Context, ueId externalRef0.VarUeId, params *QueryIpSmGwContextParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyIpSmGwContextWithBody request with any body
	ModifyIpSmGwContextWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyIpSmGwContextWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, body ModifyIpSmGwContextApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIpSmGwContextWithBody request with any body
	CreateIpSmGwContextWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIpSmGwContext(ctx context.Context, ueId externalRef0.VarUeId, body CreateIpSmGwContextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryUeLocation request
	QueryUeLocation(ctx context.Context, ueId externalRef0.VarUeId, params *QueryUeLocationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMessageWaitingData request
	DeleteMessageWaitingData(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryMessageWaitingData request
	QueryMessageWaitingData(ctx context.Context, ueId externalRef0.VarUeId, params *QueryMessageWaitingDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyMessageWaitingDataWithBody request with any body
	ModifyMessageWaitingDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyMessageWaitingDataWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, body ModifyMessageWaitingDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMessageWaitingDataWithBody request with any body
	CreateMessageWaitingDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMessageWaitingData(ctx context.Context, ueId externalRef0.VarUeId, body CreateMessageWaitingDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Querysdmsubscriptions request
	Querysdmsubscriptions(ctx context.Context, ueId externalRef0.VarUeId, params *QuerysdmsubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSdmSubscriptionsWithBody request with any body
	CreateSdmSubscriptionsWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSdmSubscriptions(ctx context.Context, ueId externalRef0.VarUeId, body CreateSdmSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemovesdmSubscriptions request
	RemovesdmSubscriptions(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuerysdmSubscription request
	QuerysdmSubscription(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifysdmSubscriptionWithBody request with any body
	ModifysdmSubscriptionWithBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifysdmSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifysdmSubscriptionWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifysdmSubscriptionParams, body ModifysdmSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatesdmsubscriptionsWithBody request with any body
	UpdatesdmsubscriptionsWithBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Updatesdmsubscriptions(ctx context.Context, ueId externalRef0.VarUeId, subsId string, body UpdatesdmsubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveHssSDMSubscriptionsInfo request
	RemoveHssSDMSubscriptionsInfo(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHssSDMSubscriptionInfo request
	GetHssSDMSubscriptionInfo(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyHssSDMSubscriptionInfoWithBody request with any body
	ModifyHssSDMSubscriptionInfoWithBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyHssSDMSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyHssSDMSubscriptionInfoWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyHssSDMSubscriptionInfoParams, body ModifyHssSDMSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHSSSDMSubscriptionsWithBody request with any body
	CreateHSSSDMSubscriptionsWithBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHSSSDMSubscriptions(ctx context.Context, ueId externalRef0.VarUeId, subsId string, body CreateHSSSDMSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuerySmfRegList request
	QuerySmfRegList(ctx context.Context, ueId externalRef0.VarUeId, params *QuerySmfRegListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSmfRegistration request
	DeleteSmfRegistration(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuerySmfRegistration request
	QuerySmfRegistration(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, params *QuerySmfRegistrationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrUpdateSmfRegistrationWithBody request with any body
	CreateOrUpdateSmfRegistrationWithBody(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrUpdateSmfRegistration(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, body CreateOrUpdateSmfRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSmsfContext3gpp request
	DeleteSmsfContext3gpp(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuerySmsfContext3gpp request
	QuerySmsfContext3gpp(ctx context.Context, ueId externalRef0.VarUeId, params *QuerySmsfContext3gppParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSmsfContext3gppWithBody request with any body
	CreateSmsfContext3gppWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSmsfContext3gpp(ctx context.Context, ueId externalRef0.VarUeId, body CreateSmsfContext3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSmsfContextNon3gpp request
	DeleteSmsfContextNon3gpp(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuerySmsfContextNon3gpp request
	QuerySmsfContextNon3gpp(ctx context.Context, ueId externalRef0.VarUeId, params *QuerySmsfContextNon3gppParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSmsfContextNon3gppWithBody request with any body
	CreateSmsfContextNon3gppWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSmsfContextNon3gpp(ctx context.Context, ueId externalRef0.VarUeId, body CreateSmsfContextNon3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryCoverageRestrictionData request
	QueryCoverageRestrictionData(ctx context.Context, ueId externalRef0.VarUeId, params *QueryCoverageRestrictionDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryEEData request
	QueryEEData(ctx context.Context, ueId externalRef0.VarUeId, params *QueryEEDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdentityData request
	GetIdentityData(ctx context.Context, ueId externalRef0.VarUeId, params *GetIdentityDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryLcsMoData request
	QueryLcsMoData(ctx context.Context, ueId externalRef0.VarUeId, params *QueryLcsMoDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryLcsPrivacyData request
	QueryLcsPrivacyData(ctx context.Context, ueId externalRef0.VarUeId, params *QueryLcsPrivacyDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNiddAuData request
	GetNiddAuData(ctx context.Context, ueId string, params *GetNiddAuDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOdbData request
	GetOdbData(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryOperSpecData request
	QueryOperSpecData(ctx context.Context, ueId externalRef0.VarUeId, params *QueryOperSpecDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyOperSpecDataWithBody request with any body
	ModifyOperSpecDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, params *ModifyOperSpecDataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyOperSpecDataWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, params *ModifyOperSpecDataParams, body ModifyOperSpecDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetppData request
	GetppData(ctx context.Context, ueId externalRef0.VarUeId, params *GetppDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyPpDataWithBody request with any body
	ModifyPpDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, params *ModifyPpDataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyPpDataWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, params *ModifyPpDataParams, body ModifyPpDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryPPData request
	QueryPPData(ctx context.Context, ueId externalRef0.VarUeId, params *QueryPPDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryAuthSoR request
	QueryAuthSoR(ctx context.Context, ueId externalRef0.Supi, params *QueryAuthSoRParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAuthenticationSoRWithBody request with any body
	CreateAuthenticationSoRWithBody(ctx context.Context, ueId externalRef0.Supi, params *CreateAuthenticationSoRParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAuthenticationSoR(ctx context.Context, ueId externalRef0.Supi, params *CreateAuthenticationSoRParams, body CreateAuthenticationSoRJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryCagAck request
	QueryCagAck(ctx context.Context, ueId externalRef0.Supi, params *QueryCagAckParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCagUpdateAckWithBody request with any body
	CreateCagUpdateAckWithBody(ctx context.Context, ueId externalRef0.Supi, params *CreateCagUpdateAckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCagUpdateAck(ctx context.Context, ueId externalRef0.Supi, params *CreateCagUpdateAckParams, body CreateCagUpdateAckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryNssaiAck request
	QueryNssaiAck(ctx context.Context, ueId externalRef0.Supi, params *QueryNssaiAckParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrUpdateNssaiAckWithBody request with any body
	CreateOrUpdateNssaiAckWithBody(ctx context.Context, ueId externalRef0.Supi, params *CreateOrUpdateNssaiAckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrUpdateNssaiAck(ctx context.Context, ueId externalRef0.Supi, params *CreateOrUpdateNssaiAckParams, body CreateOrUpdateNssaiAckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryAuthUPU request
	QueryAuthUPU(ctx context.Context, ueId externalRef0.Supi, params *QueryAuthUPUParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAuthenticationUPUWithBody request with any body
	CreateAuthenticationUPUWithBody(ctx context.Context, ueId externalRef0.Supi, params *CreateAuthenticationUPUParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAuthenticationUPU(ctx context.Context, ueId externalRef0.Supi, params *CreateAuthenticationUPUParams, body CreateAuthenticationUPUJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryV2xData request
	QueryV2xData(ctx context.Context, ueId externalRef0.VarUeId, params *QueryV2xDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryProvisionedData request
	QueryProvisionedData(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QueryProvisionedDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryAmData request
	QueryAmData(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QueryAmDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryLcsBcaData request
	QueryLcsBcaData(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QueryLcsBcaDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuerySmData request
	QuerySmData(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QuerySmDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuerySmfSelectData request
	QuerySmfSelectData(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QuerySmfSelectDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuerySmsData request
	QuerySmsData(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QuerySmsDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuerySmsMngData request
	QuerySmsMngData(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QuerySmsMngDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryTraceData request
	QueryTraceData(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QueryTraceDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ReadBdtPolicyData(ctx context.Context, params *ReadBdtPolicyDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadBdtPolicyDataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndividualAppliedBdtPolicyData(ctx context.Context, bdtPolicyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndividualAppliedBdtPolicyDataRequest(c.Server, bdtPolicyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIndividualAppliedBdtPolicyDataWithBody(ctx context.Context, bdtPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIndividualAppliedBdtPolicyDataRequestWithBody(c.Server, bdtPolicyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIndividualAppliedBdtPolicyDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, bdtPolicyId string, body UpdateIndividualAppliedBdtPolicyDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIndividualAppliedBdtPolicyDataRequestWithApplicationMergePatchPlusJSONBody(c.Server, bdtPolicyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualAppliedBdtPolicyDataWithBody(ctx context.Context, bdtPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualAppliedBdtPolicyDataRequestWithBody(c.Server, bdtPolicyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualAppliedBdtPolicyData(ctx context.Context, bdtPolicyId string, body CreateIndividualAppliedBdtPolicyDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualAppliedBdtPolicyDataRequest(c.Server, bdtPolicyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadInfluenceData(ctx context.Context, params *ReadInfluenceDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadInfluenceDataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadInfluenceDataSubscriptions(ctx context.Context, params *ReadInfluenceDataSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadInfluenceDataSubscriptionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualInfluenceDataSubscriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualInfluenceDataSubscriptionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualInfluenceDataSubscription(ctx context.Context, body CreateIndividualInfluenceDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualInfluenceDataSubscriptionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndividualInfluenceDataSubscription(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndividualInfluenceDataSubscriptionRequest(c.Server, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadIndividualInfluenceDataSubscription(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadIndividualInfluenceDataSubscriptionRequest(c.Server, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceIndividualInfluenceDataSubscriptionWithBody(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceIndividualInfluenceDataSubscriptionRequestWithBody(c.Server, subscriptionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceIndividualInfluenceDataSubscription(ctx context.Context, subscriptionId string, body ReplaceIndividualInfluenceDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceIndividualInfluenceDataSubscriptionRequest(c.Server, subscriptionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndividualInfluenceData(ctx context.Context, influenceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndividualInfluenceDataRequest(c.Server, influenceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIndividualInfluenceDataWithBody(ctx context.Context, influenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIndividualInfluenceDataRequestWithBody(c.Server, influenceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIndividualInfluenceDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, influenceId string, body UpdateIndividualInfluenceDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIndividualInfluenceDataRequestWithApplicationMergePatchPlusJSONBody(c.Server, influenceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceIndividualInfluenceDataWithBody(ctx context.Context, influenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceIndividualInfluenceDataRequestWithBody(c.Server, influenceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceIndividualInfluenceData(ctx context.Context, influenceId string, body CreateOrReplaceIndividualInfluenceDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceIndividualInfluenceDataRequest(c.Server, influenceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadIPTVCongifurationData(ctx context.Context, params *ReadIPTVCongifurationDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadIPTVCongifurationDataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndividualIPTVConfigurationData(ctx context.Context, configurationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndividualIPTVConfigurationDataRequest(c.Server, configurationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PartialReplaceIndividualIPTVConfigurationDataWithBody(ctx context.Context, configurationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPartialReplaceIndividualIPTVConfigurationDataRequestWithBody(c.Server, configurationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PartialReplaceIndividualIPTVConfigurationDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, configurationId string, body PartialReplaceIndividualIPTVConfigurationDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPartialReplaceIndividualIPTVConfigurationDataRequestWithApplicationMergePatchPlusJSONBody(c.Server, configurationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceIndividualIPTVConfigurationDataWithBody(ctx context.Context, configurationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceIndividualIPTVConfigurationDataRequestWithBody(c.Server, configurationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceIndividualIPTVConfigurationData(ctx context.Context, configurationId string, body CreateOrReplaceIndividualIPTVConfigurationDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceIndividualIPTVConfigurationDataRequest(c.Server, configurationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadPFDData(ctx context.Context, params *ReadPFDDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadPFDDataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndividualPFDData(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndividualPFDDataRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadIndividualPFDData(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadIndividualPFDDataRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceIndividualPFDDataWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceIndividualPFDDataRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceIndividualPFDData(ctx context.Context, appId string, body CreateOrReplaceIndividualPFDDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceIndividualPFDDataRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadServiceParameterData(ctx context.Context, params *ReadServiceParameterDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadServiceParameterDataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndividualServiceParameterData(ctx context.Context, serviceParamId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndividualServiceParameterDataRequest(c.Server, serviceParamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIndividualServiceParameterDataWithBody(ctx context.Context, serviceParamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIndividualServiceParameterDataRequestWithBody(c.Server, serviceParamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIndividualServiceParameterDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, serviceParamId string, body UpdateIndividualServiceParameterDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIndividualServiceParameterDataRequestWithApplicationMergePatchPlusJSONBody(c.Server, serviceParamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceServiceParameterDataWithBody(ctx context.Context, serviceParamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceServiceParameterDataRequestWithBody(c.Server, serviceParamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceServiceParameterData(ctx context.Context, serviceParamId string, body CreateOrReplaceServiceParameterDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceServiceParameterDataRequest(c.Server, serviceParamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadApplicationDataChangeSubscriptions(ctx context.Context, params *ReadApplicationDataChangeSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadApplicationDataChangeSubscriptionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualApplicationDataSubscriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualApplicationDataSubscriptionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualApplicationDataSubscription(ctx context.Context, body CreateIndividualApplicationDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualApplicationDataSubscriptionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndividualApplicationDataSubscription(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndividualApplicationDataSubscriptionRequest(c.Server, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadIndividualApplicationDataSubscription(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadIndividualApplicationDataSubscriptionRequest(c.Server, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceIndividualApplicationDataSubscriptionWithBody(ctx context.Context, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceIndividualApplicationDataSubscriptionRequestWithBody(c.Server, subsId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceIndividualApplicationDataSubscription(ctx context.Context, subsId string, body ReplaceIndividualApplicationDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceIndividualApplicationDataSubscriptionRequest(c.Server, subsId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualExposureDataSubscriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualExposureDataSubscriptionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualExposureDataSubscription(ctx context.Context, body CreateIndividualExposureDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualExposureDataSubscriptionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndividualExposureDataSubscription(ctx context.Context, subId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndividualExposureDataSubscriptionRequest(c.Server, subId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceIndividualExposureDataSubscriptionWithBody(ctx context.Context, subId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceIndividualExposureDataSubscriptionRequestWithBody(c.Server, subId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceIndividualExposureDataSubscription(ctx context.Context, subId string, body ReplaceIndividualExposureDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceIndividualExposureDataSubscriptionRequest(c.Server, subId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAccessAndMobilityData(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccessAndMobilityDataRequest(c.Server, ueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryAccessAndMobilityData(ctx context.Context, ueId externalRef0.VarUeId, params *QueryAccessAndMobilityDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryAccessAndMobilityDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAccessAndMobilityDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAccessAndMobilityDataRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAccessAndMobilityDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, body UpdateAccessAndMobilityDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAccessAndMobilityDataRequestWithApplicationMergePatchPlusJSONBody(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceAccessAndMobilityDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceAccessAndMobilityDataRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceAccessAndMobilityData(ctx context.Context, ueId externalRef0.VarUeId, body CreateOrReplaceAccessAndMobilityDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceAccessAndMobilityDataRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSessionManagementData(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSessionManagementDataRequest(c.Server, ueId, pduSessionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuerySessionManagementData(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, params *QuerySessionManagementDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerySessionManagementDataRequest(c.Server, ueId, pduSessionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceSessionManagementDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceSessionManagementDataRequestWithBody(c.Server, ueId, pduSessionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceSessionManagementData(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, body CreateOrReplaceSessionManagementDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceSessionManagementDataRequest(c.Server, ueId, pduSessionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadBdtData(ctx context.Context, params *ReadBdtDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadBdtDataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndividualBdtData(ctx context.Context, bdtReferenceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndividualBdtDataRequest(c.Server, bdtReferenceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadIndividualBdtData(ctx context.Context, bdtReferenceId string, params *ReadIndividualBdtDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadIndividualBdtDataRequest(c.Server, bdtReferenceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIndividualBdtDataWithBody(ctx context.Context, bdtReferenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIndividualBdtDataRequestWithBody(c.Server, bdtReferenceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIndividualBdtDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, bdtReferenceId string, body UpdateIndividualBdtDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIndividualBdtDataRequestWithApplicationMergePatchPlusJSONBody(c.Server, bdtReferenceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualBdtDataWithBody(ctx context.Context, bdtReferenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualBdtDataRequestWithBody(c.Server, bdtReferenceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualBdtData(ctx context.Context, bdtReferenceId string, body CreateIndividualBdtDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualBdtDataRequest(c.Server, bdtReferenceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadPlmnUePolicySet(ctx context.Context, plmnId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadPlmnUePolicySetRequest(c.Server, plmnId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadSponsorConnectivityData(ctx context.Context, sponsorId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadSponsorConnectivityDataRequest(c.Server, sponsorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualPolicyDataSubscriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualPolicyDataSubscriptionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualPolicyDataSubscription(ctx context.Context, body CreateIndividualPolicyDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualPolicyDataSubscriptionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndividualPolicyDataSubscription(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndividualPolicyDataSubscriptionRequest(c.Server, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceIndividualPolicyDataSubscriptionWithBody(ctx context.Context, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceIndividualPolicyDataSubscriptionRequestWithBody(c.Server, subsId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceIndividualPolicyDataSubscription(ctx context.Context, subsId string, body ReplaceIndividualPolicyDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceIndividualPolicyDataSubscriptionRequest(c.Server, subsId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadAccessAndMobilityPolicyData(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadAccessAndMobilityPolicyDataRequest(c.Server, ueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadOperatorSpecificData(ctx context.Context, ueId externalRef0.VarUeId, params *ReadOperatorSpecificDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadOperatorSpecificDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOperatorSpecificDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOperatorSpecificDataRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOperatorSpecificDataWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, body UpdateOperatorSpecificDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOperatorSpecificDataRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceOperatorSpecificDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceOperatorSpecificDataRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceOperatorSpecificData(ctx context.Context, ueId externalRef0.VarUeId, body ReplaceOperatorSpecificDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceOperatorSpecificDataRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadSessionManagementPolicyData(ctx context.Context, ueId externalRef0.VarUeId, params *ReadSessionManagementPolicyDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadSessionManagementPolicyDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSessionManagementPolicyDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSessionManagementPolicyDataRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSessionManagementPolicyDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, body UpdateSessionManagementPolicyDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSessionManagementPolicyDataRequestWithApplicationMergePatchPlusJSONBody(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUsageMonitoringInformation(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUsageMonitoringInformationRequest(c.Server, ueId, usageMonId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadUsageMonitoringInformation(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, params *ReadUsageMonitoringInformationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadUsageMonitoringInformationRequest(c.Server, ueId, usageMonId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUsageMonitoringResourceWithBody(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUsageMonitoringResourceRequestWithBody(c.Server, ueId, usageMonId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUsageMonitoringResource(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, body CreateUsageMonitoringResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUsageMonitoringResourceRequest(c.Server, ueId, usageMonId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadUEPolicySet(ctx context.Context, ueId externalRef0.VarUeId, params *ReadUEPolicySetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadUEPolicySetRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUEPolicySetWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUEPolicySetRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUEPolicySetWithApplicationMergePatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, body UpdateUEPolicySetApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUEPolicySetRequestWithApplicationMergePatchPlusJSONBody(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceUEPolicySetWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceUEPolicySetRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceUEPolicySet(ctx context.Context, ueId externalRef0.VarUeId, body CreateOrReplaceUEPolicySetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceUEPolicySetRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Query5GVnGroup(ctx context.Context, params *Query5GVnGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuery5GVnGroupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Query5GVnGroupInternal(ctx context.Context, params *Query5GVnGroupInternalParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuery5GVnGroupInternalRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Query5GVNGroupPPData(ctx context.Context, params *Query5GVNGroupPPDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuery5GVNGroupPPDataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete5GVnGroup(ctx context.Context, externalGroupId externalRef3.ExtGroupId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelete5GVnGroupRequest(c.Server, externalGroupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get5GVnGroupConfiguration(ctx context.Context, externalGroupId externalRef3.ExtGroupId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet5GVnGroupConfigurationRequest(c.Server, externalGroupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Modify5GVnGroupWithBody(ctx context.Context, externalGroupId externalRef3.ExtGroupId, params *Modify5GVnGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModify5GVnGroupRequestWithBody(c.Server, externalGroupId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Modify5GVnGroupWithApplicationJSONPatchPlusJSONBody(ctx context.Context, externalGroupId externalRef3.ExtGroupId, params *Modify5GVnGroupParams, body Modify5GVnGroupApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModify5GVnGroupRequestWithApplicationJSONPatchPlusJSONBody(c.Server, externalGroupId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create5GVnGroupWithBody(ctx context.Context, externalGroupId externalRef3.ExtGroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate5GVnGroupRequestWithBody(c.Server, externalGroupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create5GVnGroup(ctx context.Context, externalGroupId externalRef3.ExtGroupId, body Create5GVnGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate5GVnGroupRequest(c.Server, externalGroupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupIdentifiers(ctx context.Context, params *GetGroupIdentifiersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupIdentifiersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryGroupEEData(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, params *QueryGroupEEDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryGroupEEDataRequest(c.Server, ueGroupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryEeGroupSubscriptions(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, params *QueryEeGroupSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryEeGroupSubscriptionsRequest(c.Server, ueGroupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEeGroupSubscriptionsWithBody(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEeGroupSubscriptionsRequestWithBody(c.Server, ueGroupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEeGroupSubscriptions(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, body CreateEeGroupSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEeGroupSubscriptionsRequest(c.Server, ueGroupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveEeGroupSubscriptions(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveEeGroupSubscriptionsRequest(c.Server, ueGroupId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryEeGroupSubscription(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryEeGroupSubscriptionRequest(c.Server, ueGroupId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyEeGroupSubscriptionWithBody(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, subsId string, params *ModifyEeGroupSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyEeGroupSubscriptionRequestWithBody(c.Server, ueGroupId, subsId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyEeGroupSubscriptionWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, subsId string, params *ModifyEeGroupSubscriptionParams, body ModifyEeGroupSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyEeGroupSubscriptionRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueGroupId, subsId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEeGroupSubscriptionsWithBody(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEeGroupSubscriptionsRequestWithBody(c.Server, ueGroupId, subsId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEeGroupSubscriptions(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, subsId string, body UpdateEeGroupSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEeGroupSubscriptionsRequest(c.Server, ueGroupId, subsId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSharedData(ctx context.Context, params *GetSharedDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSharedDataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndividualSharedData(ctx context.Context, sharedDataId externalRef3.SharedDataId, params *GetIndividualSharedDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndividualSharedDataRequest(c.Server, sharedDataId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveMultipleSubscriptionDataSubscriptions(ctx context.Context, params *RemoveMultipleSubscriptionDataSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveMultipleSubscriptionDataSubscriptionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuerySubsToNotify(ctx context.Context, params *QuerySubsToNotifyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerySubsToNotifyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscriptionDataSubscriptionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscriptionDataSubscriptionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscriptionDataSubscriptions(ctx context.Context, body SubscriptionDataSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscriptionDataSubscriptionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemovesubscriptionDataSubscriptions(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemovesubscriptionDataSubscriptionsRequest(c.Server, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuerySubscriptionDataSubscriptions(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerySubscriptionDataSubscriptionsRequest(c.Server, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifysubscriptionDataSubscriptionWithBody(ctx context.Context, subsId string, params *ModifysubscriptionDataSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifysubscriptionDataSubscriptionRequestWithBody(c.Server, subsId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifysubscriptionDataSubscriptionWithApplicationJSONPatchPlusJSONBody(ctx context.Context, subsId string, params *ModifysubscriptionDataSubscriptionParams, body ModifysubscriptionDataSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifysubscriptionDataSubscriptionRequestWithApplicationJSONPatchPlusJSONBody(c.Server, subsId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAuthenticationStatus(ctx context.Context, ueId externalRef0.Supi, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAuthenticationStatusRequest(c.Server, ueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryAuthenticationStatus(ctx context.Context, ueId externalRef0.Supi, params *QueryAuthenticationStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryAuthenticationStatusRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthenticationStatusWithBody(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthenticationStatusRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthenticationStatus(ctx context.Context, ueId externalRef0.Supi, body CreateAuthenticationStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthenticationStatusRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndividualAuthenticationStatus(ctx context.Context, ueId externalRef0.Supi, servingNetworkName externalRef4.ServingNetworkName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndividualAuthenticationStatusRequest(c.Server, ueId, servingNetworkName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryIndividualAuthenticationStatus(ctx context.Context, ueId externalRef0.Supi, servingNetworkName externalRef4.ServingNetworkName, params *QueryIndividualAuthenticationStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryIndividualAuthenticationStatusRequest(c.Server, ueId, servingNetworkName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualAuthenticationStatusWithBody(ctx context.Context, ueId externalRef0.Supi, servingNetworkName externalRef4.ServingNetworkName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualAuthenticationStatusRequestWithBody(c.Server, ueId, servingNetworkName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualAuthenticationStatus(ctx context.Context, ueId externalRef0.Supi, servingNetworkName externalRef4.ServingNetworkName, body CreateIndividualAuthenticationStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualAuthenticationStatusRequest(c.Server, ueId, servingNetworkName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryAuthSubsData(ctx context.Context, ueId externalRef0.Supi, params *QueryAuthSubsDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryAuthSubsDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyAuthenticationSubscriptionWithBody(ctx context.Context, ueId externalRef0.Supi, params *ModifyAuthenticationSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyAuthenticationSubscriptionRequestWithBody(c.Server, ueId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyAuthenticationSubscriptionWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.Supi, params *ModifyAuthenticationSubscriptionParams, body ModifyAuthenticationSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyAuthenticationSubscriptionRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryContextData(ctx context.Context, ueId externalRef0.VarUeId, params *QueryContextDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryContextDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryAmfContext3gpp(ctx context.Context, ueId externalRef0.VarUeId, params *QueryAmfContext3gppParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryAmfContext3gppRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AmfContext3gppWithBody(ctx context.Context, ueId externalRef0.VarUeId, params *AmfContext3gppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAmfContext3gppRequestWithBody(c.Server, ueId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AmfContext3gppWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, params *AmfContext3gppParams, body AmfContext3gppApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAmfContext3gppRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAmfContext3gppWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAmfContext3gppRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAmfContext3gpp(ctx context.Context, ueId externalRef0.VarUeId, body CreateAmfContext3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAmfContext3gppRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryAmfContextNon3gpp(ctx context.Context, ueId externalRef0.VarUeId, params *QueryAmfContextNon3gppParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryAmfContextNon3gppRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AmfContextNon3gppWithBody(ctx context.Context, ueId externalRef0.VarUeId, params *AmfContextNon3gppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAmfContextNon3gppRequestWithBody(c.Server, ueId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AmfContextNon3gppWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, params *AmfContextNon3gppParams, body AmfContextNon3gppApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAmfContextNon3gppRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAmfContextNon3gppWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAmfContextNon3gppRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAmfContextNon3gpp(ctx context.Context, ueId externalRef0.VarUeId, body CreateAmfContextNon3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAmfContextNon3gppRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Queryeesubscriptions(ctx context.Context, ueId externalRef0.VarUeId, params *QueryeesubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryeesubscriptionsRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEeSubscriptionsWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEeSubscriptionsRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEeSubscriptions(ctx context.Context, ueId externalRef0.VarUeId, body CreateEeSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEeSubscriptionsRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveeeSubscriptions(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveeeSubscriptionsRequest(c.Server, ueId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryeeSubscription(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryeeSubscriptionRequest(c.Server, ueId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyEesubscriptionWithBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyEesubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyEesubscriptionRequestWithBody(c.Server, ueId, subsId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyEesubscriptionWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyEesubscriptionParams, body ModifyEesubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyEesubscriptionRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, subsId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEesubscriptionsWithBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEesubscriptionsRequestWithBody(c.Server, ueId, subsId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEesubscriptions(ctx context.Context, ueId externalRef0.VarUeId, subsId string, body UpdateEesubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEesubscriptionsRequest(c.Server, ueId, subsId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveAmfSubscriptionsInfo(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveAmfSubscriptionsInfoRequest(c.Server, ueId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAmfSubscriptionInfo(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAmfSubscriptionInfoRequest(c.Server, ueId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyAmfSubscriptionInfoWithBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyAmfSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyAmfSubscriptionInfoRequestWithBody(c.Server, ueId, subsId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyAmfSubscriptionInfoWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyAmfSubscriptionInfoParams, body ModifyAmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyAmfSubscriptionInfoRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, subsId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAMFSubscriptionsWithBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAMFSubscriptionsRequestWithBody(c.Server, ueId, subsId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAMFSubscriptions(ctx context.Context, ueId externalRef0.VarUeId, subsId string, body CreateAMFSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAMFSubscriptionsRequest(c.Server, ueId, subsId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveHssSubscriptionsInfo(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveHssSubscriptionsInfoRequest(c.Server, ueId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHssSubscriptionInfo(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHssSubscriptionInfoRequest(c.Server, ueId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyHssSubscriptionInfoWithBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyHssSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyHssSubscriptionInfoRequestWithBody(c.Server, ueId, subsId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyHssSubscriptionInfoWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyHssSubscriptionInfoParams, body ModifyHssSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyHssSubscriptionInfoRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, subsId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHSSSubscriptionsWithBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHSSSubscriptionsRequestWithBody(c.Server, ueId, subsId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHSSSubscriptions(ctx context.Context, ueId externalRef0.VarUeId, subsId string, body CreateHSSSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHSSSubscriptionsRequest(c.Server, ueId, subsId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveSmfSubscriptionsInfo(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveSmfSubscriptionsInfoRequest(c.Server, ueId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmfSubscriptionInfo(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmfSubscriptionInfoRequest(c.Server, ueId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifySmfSubscriptionInfoWithBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifySmfSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifySmfSubscriptionInfoRequestWithBody(c.Server, ueId, subsId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifySmfSubscriptionInfoWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifySmfSubscriptionInfoParams, body ModifySmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifySmfSubscriptionInfoRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, subsId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSMFSubscriptionsWithBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSMFSubscriptionsRequestWithBody(c.Server, ueId, subsId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSMFSubscriptions(ctx context.Context, ueId externalRef0.VarUeId, subsId string, body CreateSMFSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSMFSubscriptionsRequest(c.Server, ueId, subsId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIpSmGwContext(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIpSmGwContextRequest(c.Server, ueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryIpSmGwContext(ctx context.Context, ueId externalRef0.VarUeId, params *QueryIpSmGwContextParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryIpSmGwContextRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyIpSmGwContextWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyIpSmGwContextRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyIpSmGwContextWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, body ModifyIpSmGwContextApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyIpSmGwContextRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIpSmGwContextWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIpSmGwContextRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIpSmGwContext(ctx context.Context, ueId externalRef0.VarUeId, body CreateIpSmGwContextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIpSmGwContextRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryUeLocation(ctx context.Context, ueId externalRef0.VarUeId, params *QueryUeLocationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryUeLocationRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMessageWaitingData(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMessageWaitingDataRequest(c.Server, ueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryMessageWaitingData(ctx context.Context, ueId externalRef0.VarUeId, params *QueryMessageWaitingDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryMessageWaitingDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyMessageWaitingDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyMessageWaitingDataRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyMessageWaitingDataWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, body ModifyMessageWaitingDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyMessageWaitingDataRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMessageWaitingDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMessageWaitingDataRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMessageWaitingData(ctx context.Context, ueId externalRef0.VarUeId, body CreateMessageWaitingDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMessageWaitingDataRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Querysdmsubscriptions(ctx context.Context, ueId externalRef0.VarUeId, params *QuerysdmsubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerysdmsubscriptionsRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSdmSubscriptionsWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSdmSubscriptionsRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSdmSubscriptions(ctx context.Context, ueId externalRef0.VarUeId, body CreateSdmSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSdmSubscriptionsRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemovesdmSubscriptions(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemovesdmSubscriptionsRequest(c.Server, ueId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuerysdmSubscription(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerysdmSubscriptionRequest(c.Server, ueId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifysdmSubscriptionWithBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifysdmSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifysdmSubscriptionRequestWithBody(c.Server, ueId, subsId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifysdmSubscriptionWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifysdmSubscriptionParams, body ModifysdmSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifysdmSubscriptionRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, subsId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatesdmsubscriptionsWithBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatesdmsubscriptionsRequestWithBody(c.Server, ueId, subsId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Updatesdmsubscriptions(ctx context.Context, ueId externalRef0.VarUeId, subsId string, body UpdatesdmsubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatesdmsubscriptionsRequest(c.Server, ueId, subsId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveHssSDMSubscriptionsInfo(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveHssSDMSubscriptionsInfoRequest(c.Server, ueId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHssSDMSubscriptionInfo(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHssSDMSubscriptionInfoRequest(c.Server, ueId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyHssSDMSubscriptionInfoWithBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyHssSDMSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyHssSDMSubscriptionInfoRequestWithBody(c.Server, ueId, subsId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyHssSDMSubscriptionInfoWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyHssSDMSubscriptionInfoParams, body ModifyHssSDMSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyHssSDMSubscriptionInfoRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, subsId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHSSSDMSubscriptionsWithBody(ctx context.Context, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHSSSDMSubscriptionsRequestWithBody(c.Server, ueId, subsId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHSSSDMSubscriptions(ctx context.Context, ueId externalRef0.VarUeId, subsId string, body CreateHSSSDMSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHSSSDMSubscriptionsRequest(c.Server, ueId, subsId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuerySmfRegList(ctx context.Context, ueId externalRef0.VarUeId, params *QuerySmfRegListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerySmfRegListRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSmfRegistration(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSmfRegistrationRequest(c.Server, ueId, pduSessionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuerySmfRegistration(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, params *QuerySmfRegistrationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerySmfRegistrationRequest(c.Server, ueId, pduSessionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateSmfRegistrationWithBody(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateSmfRegistrationRequestWithBody(c.Server, ueId, pduSessionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateSmfRegistration(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, body CreateOrUpdateSmfRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateSmfRegistrationRequest(c.Server, ueId, pduSessionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSmsfContext3gpp(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSmsfContext3gppRequest(c.Server, ueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuerySmsfContext3gpp(ctx context.Context, ueId externalRef0.VarUeId, params *QuerySmsfContext3gppParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerySmsfContext3gppRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSmsfContext3gppWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSmsfContext3gppRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSmsfContext3gpp(ctx context.Context, ueId externalRef0.VarUeId, body CreateSmsfContext3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSmsfContext3gppRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSmsfContextNon3gpp(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSmsfContextNon3gppRequest(c.Server, ueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuerySmsfContextNon3gpp(ctx context.Context, ueId externalRef0.VarUeId, params *QuerySmsfContextNon3gppParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerySmsfContextNon3gppRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSmsfContextNon3gppWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSmsfContextNon3gppRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSmsfContextNon3gpp(ctx context.Context, ueId externalRef0.VarUeId, body CreateSmsfContextNon3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSmsfContextNon3gppRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryCoverageRestrictionData(ctx context.Context, ueId externalRef0.VarUeId, params *QueryCoverageRestrictionDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryCoverageRestrictionDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryEEData(ctx context.Context, ueId externalRef0.VarUeId, params *QueryEEDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryEEDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdentityData(ctx context.Context, ueId externalRef0.VarUeId, params *GetIdentityDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdentityDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryLcsMoData(ctx context.Context, ueId externalRef0.VarUeId, params *QueryLcsMoDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryLcsMoDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryLcsPrivacyData(ctx context.Context, ueId externalRef0.VarUeId, params *QueryLcsPrivacyDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryLcsPrivacyDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNiddAuData(ctx context.Context, ueId string, params *GetNiddAuDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNiddAuDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOdbData(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOdbDataRequest(c.Server, ueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryOperSpecData(ctx context.Context, ueId externalRef0.VarUeId, params *QueryOperSpecDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryOperSpecDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyOperSpecDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, params *ModifyOperSpecDataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyOperSpecDataRequestWithBody(c.Server, ueId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyOperSpecDataWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, params *ModifyOperSpecDataParams, body ModifyOperSpecDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyOperSpecDataRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetppData(ctx context.Context, ueId externalRef0.VarUeId, params *GetppDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetppDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyPpDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, params *ModifyPpDataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyPpDataRequestWithBody(c.Server, ueId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyPpDataWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, params *ModifyPpDataParams, body ModifyPpDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyPpDataRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryPPData(ctx context.Context, ueId externalRef0.VarUeId, params *QueryPPDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryPPDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryAuthSoR(ctx context.Context, ueId externalRef0.Supi, params *QueryAuthSoRParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryAuthSoRRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthenticationSoRWithBody(ctx context.Context, ueId externalRef0.Supi, params *CreateAuthenticationSoRParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthenticationSoRRequestWithBody(c.Server, ueId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthenticationSoR(ctx context.Context, ueId externalRef0.Supi, params *CreateAuthenticationSoRParams, body CreateAuthenticationSoRJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthenticationSoRRequest(c.Server, ueId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryCagAck(ctx context.Context, ueId externalRef0.Supi, params *QueryCagAckParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryCagAckRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCagUpdateAckWithBody(ctx context.Context, ueId externalRef0.Supi, params *CreateCagUpdateAckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCagUpdateAckRequestWithBody(c.Server, ueId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCagUpdateAck(ctx context.Context, ueId externalRef0.Supi, params *CreateCagUpdateAckParams, body CreateCagUpdateAckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCagUpdateAckRequest(c.Server, ueId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryNssaiAck(ctx context.Context, ueId externalRef0.Supi, params *QueryNssaiAckParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryNssaiAckRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateNssaiAckWithBody(ctx context.Context, ueId externalRef0.Supi, params *CreateOrUpdateNssaiAckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateNssaiAckRequestWithBody(c.Server, ueId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateNssaiAck(ctx context.Context, ueId externalRef0.Supi, params *CreateOrUpdateNssaiAckParams, body CreateOrUpdateNssaiAckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateNssaiAckRequest(c.Server, ueId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryAuthUPU(ctx context.Context, ueId externalRef0.Supi, params *QueryAuthUPUParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryAuthUPURequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthenticationUPUWithBody(ctx context.Context, ueId externalRef0.Supi, params *CreateAuthenticationUPUParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthenticationUPURequestWithBody(c.Server, ueId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthenticationUPU(ctx context.Context, ueId externalRef0.Supi, params *CreateAuthenticationUPUParams, body CreateAuthenticationUPUJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthenticationUPURequest(c.Server, ueId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryV2xData(ctx context.Context, ueId externalRef0.VarUeId, params *QueryV2xDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryV2xDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryProvisionedData(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QueryProvisionedDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryProvisionedDataRequest(c.Server, ueId, servingPlmnId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryAmData(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QueryAmDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryAmDataRequest(c.Server, ueId, servingPlmnId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryLcsBcaData(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QueryLcsBcaDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryLcsBcaDataRequest(c.Server, ueId, servingPlmnId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuerySmData(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QuerySmDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerySmDataRequest(c.Server, ueId, servingPlmnId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuerySmfSelectData(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QuerySmfSelectDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerySmfSelectDataRequest(c.Server, ueId, servingPlmnId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuerySmsData(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QuerySmsDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerySmsDataRequest(c.Server, ueId, servingPlmnId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuerySmsMngData(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QuerySmsMngDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerySmsMngDataRequest(c.Server, ueId, servingPlmnId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryTraceData(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QueryTraceDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryTraceDataRequest(c.Server, ueId, servingPlmnId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewReadBdtPolicyDataRequest generates requests for ReadBdtPolicyData
func NewReadBdtPolicyDataRequest(server string, params *ReadBdtPolicyDataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/bdtPolicyData")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BdtPolicyIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bdt-policy-ids", runtime.ParamLocationQuery, *params.BdtPolicyIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InternalGroupIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "internal-group-ids", runtime.ParamLocationQuery, *params.InternalGroupIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Supis != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supis", runtime.ParamLocationQuery, *params.Supis); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIndividualAppliedBdtPolicyDataRequest generates requests for DeleteIndividualAppliedBdtPolicyData
func NewDeleteIndividualAppliedBdtPolicyDataRequest(server string, bdtPolicyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bdtPolicyId", runtime.ParamLocationPath, bdtPolicyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/bdtPolicyData/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIndividualAppliedBdtPolicyDataRequestWithApplicationMergePatchPlusJSONBody calls the generic UpdateIndividualAppliedBdtPolicyData builder with application/merge-patch+json body
func NewUpdateIndividualAppliedBdtPolicyDataRequestWithApplicationMergePatchPlusJSONBody(server string, bdtPolicyId string, body UpdateIndividualAppliedBdtPolicyDataApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIndividualAppliedBdtPolicyDataRequestWithBody(server, bdtPolicyId, "application/merge-patch+json", bodyReader)
}

// NewUpdateIndividualAppliedBdtPolicyDataRequestWithBody generates requests for UpdateIndividualAppliedBdtPolicyData with any type of body
func NewUpdateIndividualAppliedBdtPolicyDataRequestWithBody(server string, bdtPolicyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bdtPolicyId", runtime.ParamLocationPath, bdtPolicyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/bdtPolicyData/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateIndividualAppliedBdtPolicyDataRequest calls the generic CreateIndividualAppliedBdtPolicyData builder with application/json body
func NewCreateIndividualAppliedBdtPolicyDataRequest(server string, bdtPolicyId string, body CreateIndividualAppliedBdtPolicyDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIndividualAppliedBdtPolicyDataRequestWithBody(server, bdtPolicyId, "application/json", bodyReader)
}

// NewCreateIndividualAppliedBdtPolicyDataRequestWithBody generates requests for CreateIndividualAppliedBdtPolicyData with any type of body
func NewCreateIndividualAppliedBdtPolicyDataRequestWithBody(server string, bdtPolicyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bdtPolicyId", runtime.ParamLocationPath, bdtPolicyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/bdtPolicyData/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReadInfluenceDataRequest generates requests for ReadInfluenceData
func NewReadInfluenceDataRequest(server string, params *ReadInfluenceDataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/influenceData")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.InfluenceIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "influence-Ids", runtime.ParamLocationQuery, *params.InfluenceIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Dnns != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnns", runtime.ParamLocationQuery, *params.Dnns); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Snssais != nil {

			if queryParamBuf, err := json.Marshal(*params.Snssais); err != nil {
				return nil, err
			} else {
				queryValues.Add("snssais", string(queryParamBuf))
			}

		}

		if params.InternalGroupIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "internal-Group-Ids", runtime.ParamLocationQuery, *params.InternalGroupIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Supis != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supis", runtime.ParamLocationQuery, *params.Supis); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SuppFeat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supp-feat", runtime.ParamLocationQuery, *params.SuppFeat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadInfluenceDataSubscriptionsRequest generates requests for ReadInfluenceDataSubscriptions
func NewReadInfluenceDataSubscriptionsRequest(server string, params *ReadInfluenceDataSubscriptionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/influenceData/subs-to-notify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Dnn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnn", runtime.ParamLocationQuery, *params.Dnn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Snssai != nil {

			if queryParamBuf, err := json.Marshal(*params.Snssai); err != nil {
				return nil, err
			} else {
				queryValues.Add("snssai", string(queryParamBuf))
			}

		}

		if params.InternalGroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "internal-Group-Id", runtime.ParamLocationQuery, *params.InternalGroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Supi != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supi", runtime.ParamLocationQuery, *params.Supi); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIndividualInfluenceDataSubscriptionRequest calls the generic CreateIndividualInfluenceDataSubscription builder with application/json body
func NewCreateIndividualInfluenceDataSubscriptionRequest(server string, body CreateIndividualInfluenceDataSubscriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIndividualInfluenceDataSubscriptionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateIndividualInfluenceDataSubscriptionRequestWithBody generates requests for CreateIndividualInfluenceDataSubscription with any type of body
func NewCreateIndividualInfluenceDataSubscriptionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/influenceData/subs-to-notify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIndividualInfluenceDataSubscriptionRequest generates requests for DeleteIndividualInfluenceDataSubscription
func NewDeleteIndividualInfluenceDataSubscriptionRequest(server string, subscriptionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/influenceData/subs-to-notify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadIndividualInfluenceDataSubscriptionRequest generates requests for ReadIndividualInfluenceDataSubscription
func NewReadIndividualInfluenceDataSubscriptionRequest(server string, subscriptionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/influenceData/subs-to-notify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceIndividualInfluenceDataSubscriptionRequest calls the generic ReplaceIndividualInfluenceDataSubscription builder with application/json body
func NewReplaceIndividualInfluenceDataSubscriptionRequest(server string, subscriptionId string, body ReplaceIndividualInfluenceDataSubscriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceIndividualInfluenceDataSubscriptionRequestWithBody(server, subscriptionId, "application/json", bodyReader)
}

// NewReplaceIndividualInfluenceDataSubscriptionRequestWithBody generates requests for ReplaceIndividualInfluenceDataSubscription with any type of body
func NewReplaceIndividualInfluenceDataSubscriptionRequestWithBody(server string, subscriptionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/influenceData/subs-to-notify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIndividualInfluenceDataRequest generates requests for DeleteIndividualInfluenceData
func NewDeleteIndividualInfluenceDataRequest(server string, influenceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "influenceId", runtime.ParamLocationPath, influenceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/influenceData/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIndividualInfluenceDataRequestWithApplicationMergePatchPlusJSONBody calls the generic UpdateIndividualInfluenceData builder with application/merge-patch+json body
func NewUpdateIndividualInfluenceDataRequestWithApplicationMergePatchPlusJSONBody(server string, influenceId string, body UpdateIndividualInfluenceDataApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIndividualInfluenceDataRequestWithBody(server, influenceId, "application/merge-patch+json", bodyReader)
}

// NewUpdateIndividualInfluenceDataRequestWithBody generates requests for UpdateIndividualInfluenceData with any type of body
func NewUpdateIndividualInfluenceDataRequestWithBody(server string, influenceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "influenceId", runtime.ParamLocationPath, influenceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/influenceData/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateOrReplaceIndividualInfluenceDataRequest calls the generic CreateOrReplaceIndividualInfluenceData builder with application/json body
func NewCreateOrReplaceIndividualInfluenceDataRequest(server string, influenceId string, body CreateOrReplaceIndividualInfluenceDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrReplaceIndividualInfluenceDataRequestWithBody(server, influenceId, "application/json", bodyReader)
}

// NewCreateOrReplaceIndividualInfluenceDataRequestWithBody generates requests for CreateOrReplaceIndividualInfluenceData with any type of body
func NewCreateOrReplaceIndividualInfluenceDataRequestWithBody(server string, influenceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "influenceId", runtime.ParamLocationPath, influenceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/influenceData/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReadIPTVCongifurationDataRequest generates requests for ReadIPTVCongifurationData
func NewReadIPTVCongifurationDataRequest(server string, params *ReadIPTVCongifurationDataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/iptvConfigData")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ConfigIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "config-ids", runtime.ParamLocationQuery, *params.ConfigIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Dnns != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnns", runtime.ParamLocationQuery, *params.Dnns); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Snssais != nil {

			if queryParamBuf, err := json.Marshal(*params.Snssais); err != nil {
				return nil, err
			} else {
				queryValues.Add("snssais", string(queryParamBuf))
			}

		}

		if params.Supis != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supis", runtime.ParamLocationQuery, *params.Supis); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InterGroupIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "inter-group-ids", runtime.ParamLocationQuery, *params.InterGroupIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIndividualIPTVConfigurationDataRequest generates requests for DeleteIndividualIPTVConfigurationData
func NewDeleteIndividualIPTVConfigurationDataRequest(server string, configurationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "configurationId", runtime.ParamLocationPath, configurationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/iptvConfigData/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPartialReplaceIndividualIPTVConfigurationDataRequestWithApplicationMergePatchPlusJSONBody calls the generic PartialReplaceIndividualIPTVConfigurationData builder with application/merge-patch+json body
func NewPartialReplaceIndividualIPTVConfigurationDataRequestWithApplicationMergePatchPlusJSONBody(server string, configurationId string, body PartialReplaceIndividualIPTVConfigurationDataApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPartialReplaceIndividualIPTVConfigurationDataRequestWithBody(server, configurationId, "application/merge-patch+json", bodyReader)
}

// NewPartialReplaceIndividualIPTVConfigurationDataRequestWithBody generates requests for PartialReplaceIndividualIPTVConfigurationData with any type of body
func NewPartialReplaceIndividualIPTVConfigurationDataRequestWithBody(server string, configurationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "configurationId", runtime.ParamLocationPath, configurationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/iptvConfigData/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateOrReplaceIndividualIPTVConfigurationDataRequest calls the generic CreateOrReplaceIndividualIPTVConfigurationData builder with application/json body
func NewCreateOrReplaceIndividualIPTVConfigurationDataRequest(server string, configurationId string, body CreateOrReplaceIndividualIPTVConfigurationDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrReplaceIndividualIPTVConfigurationDataRequestWithBody(server, configurationId, "application/json", bodyReader)
}

// NewCreateOrReplaceIndividualIPTVConfigurationDataRequestWithBody generates requests for CreateOrReplaceIndividualIPTVConfigurationData with any type of body
func NewCreateOrReplaceIndividualIPTVConfigurationDataRequestWithBody(server string, configurationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "configurationId", runtime.ParamLocationPath, configurationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/iptvConfigData/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReadPFDDataRequest generates requests for ReadPFDData
func NewReadPFDDataRequest(server string, params *ReadPFDDataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/pfds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AppId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "appId", runtime.ParamLocationQuery, *params.AppId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIndividualPFDDataRequest generates requests for DeleteIndividualPFDData
func NewDeleteIndividualPFDDataRequest(server string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/pfds/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadIndividualPFDDataRequest generates requests for ReadIndividualPFDData
func NewReadIndividualPFDDataRequest(server string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/pfds/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrReplaceIndividualPFDDataRequest calls the generic CreateOrReplaceIndividualPFDData builder with application/json body
func NewCreateOrReplaceIndividualPFDDataRequest(server string, appId string, body CreateOrReplaceIndividualPFDDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrReplaceIndividualPFDDataRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewCreateOrReplaceIndividualPFDDataRequestWithBody generates requests for CreateOrReplaceIndividualPFDData with any type of body
func NewCreateOrReplaceIndividualPFDDataRequestWithBody(server string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/pfds/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReadServiceParameterDataRequest generates requests for ReadServiceParameterData
func NewReadServiceParameterDataRequest(server string, params *ReadServiceParameterDataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/serviceParamData")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ServiceParamIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service-param-ids", runtime.ParamLocationQuery, *params.ServiceParamIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Dnns != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnns", runtime.ParamLocationQuery, *params.Dnns); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Snssais != nil {

			if queryParamBuf, err := json.Marshal(*params.Snssais); err != nil {
				return nil, err
			} else {
				queryValues.Add("snssais", string(queryParamBuf))
			}

		}

		if params.InternalGroupIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "internal-group-ids", runtime.ParamLocationQuery, *params.InternalGroupIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Supis != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supis", runtime.ParamLocationQuery, *params.Supis); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UeIpv4s != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ue-ipv4s", runtime.ParamLocationQuery, *params.UeIpv4s); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UeIpv6s != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ue-ipv6s", runtime.ParamLocationQuery, *params.UeIpv6s); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UeMacs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ue-macs", runtime.ParamLocationQuery, *params.UeMacs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SuppFeat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supp-feat", runtime.ParamLocationQuery, *params.SuppFeat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIndividualServiceParameterDataRequest generates requests for DeleteIndividualServiceParameterData
func NewDeleteIndividualServiceParameterDataRequest(server string, serviceParamId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceParamId", runtime.ParamLocationPath, serviceParamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/serviceParamData/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIndividualServiceParameterDataRequestWithApplicationMergePatchPlusJSONBody calls the generic UpdateIndividualServiceParameterData builder with application/merge-patch+json body
func NewUpdateIndividualServiceParameterDataRequestWithApplicationMergePatchPlusJSONBody(server string, serviceParamId string, body UpdateIndividualServiceParameterDataApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIndividualServiceParameterDataRequestWithBody(server, serviceParamId, "application/merge-patch+json", bodyReader)
}

// NewUpdateIndividualServiceParameterDataRequestWithBody generates requests for UpdateIndividualServiceParameterData with any type of body
func NewUpdateIndividualServiceParameterDataRequestWithBody(server string, serviceParamId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceParamId", runtime.ParamLocationPath, serviceParamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/serviceParamData/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateOrReplaceServiceParameterDataRequest calls the generic CreateOrReplaceServiceParameterData builder with application/json body
func NewCreateOrReplaceServiceParameterDataRequest(server string, serviceParamId string, body CreateOrReplaceServiceParameterDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrReplaceServiceParameterDataRequestWithBody(server, serviceParamId, "application/json", bodyReader)
}

// NewCreateOrReplaceServiceParameterDataRequestWithBody generates requests for CreateOrReplaceServiceParameterData with any type of body
func NewCreateOrReplaceServiceParameterDataRequestWithBody(server string, serviceParamId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceParamId", runtime.ParamLocationPath, serviceParamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/serviceParamData/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReadApplicationDataChangeSubscriptionsRequest generates requests for ReadApplicationDataChangeSubscriptions
func NewReadApplicationDataChangeSubscriptionsRequest(server string, params *ReadApplicationDataChangeSubscriptionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/subs-to-notify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DataFilter != nil {

			if queryParamBuf, err := json.Marshal(*params.DataFilter); err != nil {
				return nil, err
			} else {
				queryValues.Add("data-filter", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIndividualApplicationDataSubscriptionRequest calls the generic CreateIndividualApplicationDataSubscription builder with application/json body
func NewCreateIndividualApplicationDataSubscriptionRequest(server string, body CreateIndividualApplicationDataSubscriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIndividualApplicationDataSubscriptionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateIndividualApplicationDataSubscriptionRequestWithBody generates requests for CreateIndividualApplicationDataSubscription with any type of body
func NewCreateIndividualApplicationDataSubscriptionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/subs-to-notify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIndividualApplicationDataSubscriptionRequest generates requests for DeleteIndividualApplicationDataSubscription
func NewDeleteIndividualApplicationDataSubscriptionRequest(server string, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/subs-to-notify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadIndividualApplicationDataSubscriptionRequest generates requests for ReadIndividualApplicationDataSubscription
func NewReadIndividualApplicationDataSubscriptionRequest(server string, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/subs-to-notify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceIndividualApplicationDataSubscriptionRequest calls the generic ReplaceIndividualApplicationDataSubscription builder with application/json body
func NewReplaceIndividualApplicationDataSubscriptionRequest(server string, subsId string, body ReplaceIndividualApplicationDataSubscriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceIndividualApplicationDataSubscriptionRequestWithBody(server, subsId, "application/json", bodyReader)
}

// NewReplaceIndividualApplicationDataSubscriptionRequestWithBody generates requests for ReplaceIndividualApplicationDataSubscription with any type of body
func NewReplaceIndividualApplicationDataSubscriptionRequestWithBody(server string, subsId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/subs-to-notify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateIndividualExposureDataSubscriptionRequest calls the generic CreateIndividualExposureDataSubscription builder with application/json body
func NewCreateIndividualExposureDataSubscriptionRequest(server string, body CreateIndividualExposureDataSubscriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIndividualExposureDataSubscriptionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateIndividualExposureDataSubscriptionRequestWithBody generates requests for CreateIndividualExposureDataSubscription with any type of body
func NewCreateIndividualExposureDataSubscriptionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/exposure-data/subs-to-notify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIndividualExposureDataSubscriptionRequest generates requests for DeleteIndividualExposureDataSubscription
func NewDeleteIndividualExposureDataSubscriptionRequest(server string, subId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subId", runtime.ParamLocationPath, subId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/exposure-data/subs-to-notify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceIndividualExposureDataSubscriptionRequest calls the generic ReplaceIndividualExposureDataSubscription builder with application/json body
func NewReplaceIndividualExposureDataSubscriptionRequest(server string, subId string, body ReplaceIndividualExposureDataSubscriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceIndividualExposureDataSubscriptionRequestWithBody(server, subId, "application/json", bodyReader)
}

// NewReplaceIndividualExposureDataSubscriptionRequestWithBody generates requests for ReplaceIndividualExposureDataSubscription with any type of body
func NewReplaceIndividualExposureDataSubscriptionRequestWithBody(server string, subId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subId", runtime.ParamLocationPath, subId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/exposure-data/subs-to-notify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAccessAndMobilityDataRequest generates requests for DeleteAccessAndMobilityData
func NewDeleteAccessAndMobilityDataRequest(server string, ueId externalRef0.VarUeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/exposure-data/%s/access-and-mobility-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryAccessAndMobilityDataRequest generates requests for QueryAccessAndMobilityData
func NewQueryAccessAndMobilityDataRequest(server string, ueId externalRef0.VarUeId, params *QueryAccessAndMobilityDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/exposure-data/%s/access-and-mobility-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SuppFeat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supp-feat", runtime.ParamLocationQuery, *params.SuppFeat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAccessAndMobilityDataRequestWithApplicationMergePatchPlusJSONBody calls the generic UpdateAccessAndMobilityData builder with application/merge-patch+json body
func NewUpdateAccessAndMobilityDataRequestWithApplicationMergePatchPlusJSONBody(server string, ueId externalRef0.VarUeId, body UpdateAccessAndMobilityDataApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAccessAndMobilityDataRequestWithBody(server, ueId, "application/merge-patch+json", bodyReader)
}

// NewUpdateAccessAndMobilityDataRequestWithBody generates requests for UpdateAccessAndMobilityData with any type of body
func NewUpdateAccessAndMobilityDataRequestWithBody(server string, ueId externalRef0.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/exposure-data/%s/access-and-mobility-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateOrReplaceAccessAndMobilityDataRequest calls the generic CreateOrReplaceAccessAndMobilityData builder with application/json body
func NewCreateOrReplaceAccessAndMobilityDataRequest(server string, ueId externalRef0.VarUeId, body CreateOrReplaceAccessAndMobilityDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrReplaceAccessAndMobilityDataRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewCreateOrReplaceAccessAndMobilityDataRequestWithBody generates requests for CreateOrReplaceAccessAndMobilityData with any type of body
func NewCreateOrReplaceAccessAndMobilityDataRequestWithBody(server string, ueId externalRef0.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/exposure-data/%s/access-and-mobility-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSessionManagementDataRequest generates requests for DeleteSessionManagementData
func NewDeleteSessionManagementDataRequest(server string, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pduSessionId", runtime.ParamLocationPath, pduSessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/exposure-data/%s/session-management-data/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuerySessionManagementDataRequest generates requests for QuerySessionManagementData
func NewQuerySessionManagementDataRequest(server string, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, params *QuerySessionManagementDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pduSessionId", runtime.ParamLocationPath, pduSessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/exposure-data/%s/session-management-data/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ipv4Addr != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ipv4-addr", runtime.ParamLocationQuery, *params.Ipv4Addr); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ipv6Prefix != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ipv6-prefix", runtime.ParamLocationQuery, *params.Ipv6Prefix); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Dnn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnn", runtime.ParamLocationQuery, *params.Dnn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SuppFeat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supp-feat", runtime.ParamLocationQuery, *params.SuppFeat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrReplaceSessionManagementDataRequest calls the generic CreateOrReplaceSessionManagementData builder with application/json body
func NewCreateOrReplaceSessionManagementDataRequest(server string, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, body CreateOrReplaceSessionManagementDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrReplaceSessionManagementDataRequestWithBody(server, ueId, pduSessionId, "application/json", bodyReader)
}

// NewCreateOrReplaceSessionManagementDataRequestWithBody generates requests for CreateOrReplaceSessionManagementData with any type of body
func NewCreateOrReplaceSessionManagementDataRequestWithBody(server string, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pduSessionId", runtime.ParamLocationPath, pduSessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/exposure-data/%s/session-management-data/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReadBdtDataRequest generates requests for ReadBdtData
func NewReadBdtDataRequest(server string, params *ReadBdtDataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/bdt-data")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BdtRefIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "bdt-ref-ids", runtime.ParamLocationQuery, *params.BdtRefIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SuppFeat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supp-feat", runtime.ParamLocationQuery, *params.SuppFeat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIndividualBdtDataRequest generates requests for DeleteIndividualBdtData
func NewDeleteIndividualBdtDataRequest(server string, bdtReferenceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bdtReferenceId", runtime.ParamLocationPath, bdtReferenceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/bdt-data/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadIndividualBdtDataRequest generates requests for ReadIndividualBdtData
func NewReadIndividualBdtDataRequest(server string, bdtReferenceId string, params *ReadIndividualBdtDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bdtReferenceId", runtime.ParamLocationPath, bdtReferenceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/bdt-data/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SuppFeat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supp-feat", runtime.ParamLocationQuery, *params.SuppFeat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIndividualBdtDataRequestWithApplicationMergePatchPlusJSONBody calls the generic UpdateIndividualBdtData builder with application/merge-patch+json body
func NewUpdateIndividualBdtDataRequestWithApplicationMergePatchPlusJSONBody(server string, bdtReferenceId string, body UpdateIndividualBdtDataApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIndividualBdtDataRequestWithBody(server, bdtReferenceId, "application/merge-patch+json", bodyReader)
}

// NewUpdateIndividualBdtDataRequestWithBody generates requests for UpdateIndividualBdtData with any type of body
func NewUpdateIndividualBdtDataRequestWithBody(server string, bdtReferenceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bdtReferenceId", runtime.ParamLocationPath, bdtReferenceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/bdt-data/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateIndividualBdtDataRequest calls the generic CreateIndividualBdtData builder with application/json body
func NewCreateIndividualBdtDataRequest(server string, bdtReferenceId string, body CreateIndividualBdtDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIndividualBdtDataRequestWithBody(server, bdtReferenceId, "application/json", bodyReader)
}

// NewCreateIndividualBdtDataRequestWithBody generates requests for CreateIndividualBdtData with any type of body
func NewCreateIndividualBdtDataRequestWithBody(server string, bdtReferenceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bdtReferenceId", runtime.ParamLocationPath, bdtReferenceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/bdt-data/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReadPlmnUePolicySetRequest generates requests for ReadPlmnUePolicySet
func NewReadPlmnUePolicySetRequest(server string, plmnId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "plmnId", runtime.ParamLocationPath, plmnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/plmns/%s/ue-policy-set", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadSponsorConnectivityDataRequest generates requests for ReadSponsorConnectivityData
func NewReadSponsorConnectivityDataRequest(server string, sponsorId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sponsorId", runtime.ParamLocationPath, sponsorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/sponsor-connectivity-data/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIndividualPolicyDataSubscriptionRequest calls the generic CreateIndividualPolicyDataSubscription builder with application/json body
func NewCreateIndividualPolicyDataSubscriptionRequest(server string, body CreateIndividualPolicyDataSubscriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIndividualPolicyDataSubscriptionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateIndividualPolicyDataSubscriptionRequestWithBody generates requests for CreateIndividualPolicyDataSubscription with any type of body
func NewCreateIndividualPolicyDataSubscriptionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/subs-to-notify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIndividualPolicyDataSubscriptionRequest generates requests for DeleteIndividualPolicyDataSubscription
func NewDeleteIndividualPolicyDataSubscriptionRequest(server string, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/subs-to-notify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceIndividualPolicyDataSubscriptionRequest calls the generic ReplaceIndividualPolicyDataSubscription builder with application/json body
func NewReplaceIndividualPolicyDataSubscriptionRequest(server string, subsId string, body ReplaceIndividualPolicyDataSubscriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceIndividualPolicyDataSubscriptionRequestWithBody(server, subsId, "application/json", bodyReader)
}

// NewReplaceIndividualPolicyDataSubscriptionRequestWithBody generates requests for ReplaceIndividualPolicyDataSubscription with any type of body
func NewReplaceIndividualPolicyDataSubscriptionRequestWithBody(server string, subsId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/subs-to-notify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReadAccessAndMobilityPolicyDataRequest generates requests for ReadAccessAndMobilityPolicyData
func NewReadAccessAndMobilityPolicyDataRequest(server string, ueId externalRef0.VarUeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/ues/%s/am-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadOperatorSpecificDataRequest generates requests for ReadOperatorSpecificData
func NewReadOperatorSpecificDataRequest(server string, ueId externalRef0.VarUeId, params *ReadOperatorSpecificDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/ues/%s/operator-specific-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SuppFeat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supp-feat", runtime.ParamLocationQuery, *params.SuppFeat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOperatorSpecificDataRequestWithApplicationJSONPatchPlusJSONBody calls the generic UpdateOperatorSpecificData builder with application/json-patch+json body
func NewUpdateOperatorSpecificDataRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef0.VarUeId, body UpdateOperatorSpecificDataApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOperatorSpecificDataRequestWithBody(server, ueId, "application/json-patch+json", bodyReader)
}

// NewUpdateOperatorSpecificDataRequestWithBody generates requests for UpdateOperatorSpecificData with any type of body
func NewUpdateOperatorSpecificDataRequestWithBody(server string, ueId externalRef0.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/ues/%s/operator-specific-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceOperatorSpecificDataRequest calls the generic ReplaceOperatorSpecificData builder with application/json body
func NewReplaceOperatorSpecificDataRequest(server string, ueId externalRef0.VarUeId, body ReplaceOperatorSpecificDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceOperatorSpecificDataRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewReplaceOperatorSpecificDataRequestWithBody generates requests for ReplaceOperatorSpecificData with any type of body
func NewReplaceOperatorSpecificDataRequestWithBody(server string, ueId externalRef0.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/ues/%s/operator-specific-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReadSessionManagementPolicyDataRequest generates requests for ReadSessionManagementPolicyData
func NewReadSessionManagementPolicyDataRequest(server string, ueId externalRef0.VarUeId, params *ReadSessionManagementPolicyDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/ues/%s/sm-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Snssai != nil {

			if queryParamBuf, err := json.Marshal(*params.Snssai); err != nil {
				return nil, err
			} else {
				queryValues.Add("snssai", string(queryParamBuf))
			}

		}

		if params.Dnn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnn", runtime.ParamLocationQuery, *params.Dnn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SuppFeat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supp-feat", runtime.ParamLocationQuery, *params.SuppFeat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSessionManagementPolicyDataRequestWithApplicationMergePatchPlusJSONBody calls the generic UpdateSessionManagementPolicyData builder with application/merge-patch+json body
func NewUpdateSessionManagementPolicyDataRequestWithApplicationMergePatchPlusJSONBody(server string, ueId externalRef0.VarUeId, body UpdateSessionManagementPolicyDataApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSessionManagementPolicyDataRequestWithBody(server, ueId, "application/merge-patch+json", bodyReader)
}

// NewUpdateSessionManagementPolicyDataRequestWithBody generates requests for UpdateSessionManagementPolicyData with any type of body
func NewUpdateSessionManagementPolicyDataRequestWithBody(server string, ueId externalRef0.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/ues/%s/sm-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUsageMonitoringInformationRequest generates requests for DeleteUsageMonitoringInformation
func NewDeleteUsageMonitoringInformationRequest(server string, ueId externalRef0.VarUeId, usageMonId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "usageMonId", runtime.ParamLocationPath, usageMonId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/ues/%s/sm-data/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadUsageMonitoringInformationRequest generates requests for ReadUsageMonitoringInformation
func NewReadUsageMonitoringInformationRequest(server string, ueId externalRef0.VarUeId, usageMonId string, params *ReadUsageMonitoringInformationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "usageMonId", runtime.ParamLocationPath, usageMonId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/ues/%s/sm-data/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SuppFeat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supp-feat", runtime.ParamLocationQuery, *params.SuppFeat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUsageMonitoringResourceRequest calls the generic CreateUsageMonitoringResource builder with application/json body
func NewCreateUsageMonitoringResourceRequest(server string, ueId externalRef0.VarUeId, usageMonId string, body CreateUsageMonitoringResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUsageMonitoringResourceRequestWithBody(server, ueId, usageMonId, "application/json", bodyReader)
}

// NewCreateUsageMonitoringResourceRequestWithBody generates requests for CreateUsageMonitoringResource with any type of body
func NewCreateUsageMonitoringResourceRequestWithBody(server string, ueId externalRef0.VarUeId, usageMonId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "usageMonId", runtime.ParamLocationPath, usageMonId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/ues/%s/sm-data/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReadUEPolicySetRequest generates requests for ReadUEPolicySet
func NewReadUEPolicySetRequest(server string, ueId externalRef0.VarUeId, params *ReadUEPolicySetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/ues/%s/ue-policy-set", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SuppFeat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supp-feat", runtime.ParamLocationQuery, *params.SuppFeat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUEPolicySetRequestWithApplicationMergePatchPlusJSONBody calls the generic UpdateUEPolicySet builder with application/merge-patch+json body
func NewUpdateUEPolicySetRequestWithApplicationMergePatchPlusJSONBody(server string, ueId externalRef0.VarUeId, body UpdateUEPolicySetApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUEPolicySetRequestWithBody(server, ueId, "application/merge-patch+json", bodyReader)
}

// NewUpdateUEPolicySetRequestWithBody generates requests for UpdateUEPolicySet with any type of body
func NewUpdateUEPolicySetRequestWithBody(server string, ueId externalRef0.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/ues/%s/ue-policy-set", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateOrReplaceUEPolicySetRequest calls the generic CreateOrReplaceUEPolicySet builder with application/json body
func NewCreateOrReplaceUEPolicySetRequest(server string, ueId externalRef0.VarUeId, body CreateOrReplaceUEPolicySetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrReplaceUEPolicySetRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewCreateOrReplaceUEPolicySetRequestWithBody generates requests for CreateOrReplaceUEPolicySet with any type of body
func NewCreateOrReplaceUEPolicySetRequestWithBody(server string, ueId externalRef0.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/ues/%s/ue-policy-set", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQuery5GVnGroupRequest generates requests for Query5GVnGroup
func NewQuery5GVnGroupRequest(server string, params *Query5GVnGroupParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/5g-vn-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Gpsis != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "gpsis", runtime.ParamLocationQuery, *params.Gpsis); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuery5GVnGroupInternalRequest generates requests for Query5GVnGroupInternal
func NewQuery5GVnGroupInternalRequest(server string, params *Query5GVnGroupInternalParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/5g-vn-groups/internal")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "internal-group-ids", runtime.ParamLocationQuery, params.InternalGroupIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuery5GVNGroupPPDataRequest generates requests for Query5GVNGroupPPData
func NewQuery5GVNGroupPPDataRequest(server string, params *Query5GVNGroupPPDataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/5g-vn-groups/pp-profile-data")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExtGroupIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "ext-group-ids", runtime.ParamLocationQuery, *params.ExtGroupIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDelete5GVnGroupRequest generates requests for Delete5GVnGroup
func NewDelete5GVnGroupRequest(server string, externalGroupId externalRef3.ExtGroupId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "externalGroupId", runtime.ParamLocationPath, externalGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/5g-vn-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet5GVnGroupConfigurationRequest generates requests for Get5GVnGroupConfiguration
func NewGet5GVnGroupConfigurationRequest(server string, externalGroupId externalRef3.ExtGroupId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "externalGroupId", runtime.ParamLocationPath, externalGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/5g-vn-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModify5GVnGroupRequestWithApplicationJSONPatchPlusJSONBody calls the generic Modify5GVnGroup builder with application/json-patch+json body
func NewModify5GVnGroupRequestWithApplicationJSONPatchPlusJSONBody(server string, externalGroupId externalRef3.ExtGroupId, params *Modify5GVnGroupParams, body Modify5GVnGroupApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModify5GVnGroupRequestWithBody(server, externalGroupId, params, "application/json-patch+json", bodyReader)
}

// NewModify5GVnGroupRequestWithBody generates requests for Modify5GVnGroup with any type of body
func NewModify5GVnGroupRequestWithBody(server string, externalGroupId externalRef3.ExtGroupId, params *Modify5GVnGroupParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "externalGroupId", runtime.ParamLocationPath, externalGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/5g-vn-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreate5GVnGroupRequest calls the generic Create5GVnGroup builder with application/json body
func NewCreate5GVnGroupRequest(server string, externalGroupId externalRef3.ExtGroupId, body Create5GVnGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreate5GVnGroupRequestWithBody(server, externalGroupId, "application/json", bodyReader)
}

// NewCreate5GVnGroupRequestWithBody generates requests for Create5GVnGroup with any type of body
func NewCreate5GVnGroupRequestWithBody(server string, externalGroupId externalRef3.ExtGroupId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "externalGroupId", runtime.ParamLocationPath, externalGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/5g-vn-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGroupIdentifiersRequest generates requests for GetGroupIdentifiers
func NewGetGroupIdentifiersRequest(server string, params *GetGroupIdentifiersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/group-identifiers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExtGroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ext-group-id", runtime.ParamLocationQuery, *params.ExtGroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IntGroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "int-group-id", runtime.ParamLocationQuery, *params.IntGroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UeIdInd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ue-id-ind", runtime.ParamLocationQuery, *params.UeIdInd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryGroupEEDataRequest generates requests for QueryGroupEEData
func NewQueryGroupEEDataRequest(server string, ueGroupId externalRef8.VarUeGroupId, params *QueryGroupEEDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueGroupId", runtime.ParamLocationPath, ueGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/%s/ee-profile-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryEeGroupSubscriptionsRequest generates requests for QueryEeGroupSubscriptions
func NewQueryEeGroupSubscriptionsRequest(server string, ueGroupId externalRef8.VarUeGroupId, params *QueryEeGroupSubscriptionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueGroupId", runtime.ParamLocationPath, ueGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/%s/ee-subscriptions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEeGroupSubscriptionsRequest calls the generic CreateEeGroupSubscriptions builder with application/json body
func NewCreateEeGroupSubscriptionsRequest(server string, ueGroupId externalRef8.VarUeGroupId, body CreateEeGroupSubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEeGroupSubscriptionsRequestWithBody(server, ueGroupId, "application/json", bodyReader)
}

// NewCreateEeGroupSubscriptionsRequestWithBody generates requests for CreateEeGroupSubscriptions with any type of body
func NewCreateEeGroupSubscriptionsRequestWithBody(server string, ueGroupId externalRef8.VarUeGroupId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueGroupId", runtime.ParamLocationPath, ueGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/%s/ee-subscriptions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveEeGroupSubscriptionsRequest generates requests for RemoveEeGroupSubscriptions
func NewRemoveEeGroupSubscriptionsRequest(server string, ueGroupId externalRef8.VarUeGroupId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueGroupId", runtime.ParamLocationPath, ueGroupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/%s/ee-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryEeGroupSubscriptionRequest generates requests for QueryEeGroupSubscription
func NewQueryEeGroupSubscriptionRequest(server string, ueGroupId externalRef8.VarUeGroupId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueGroupId", runtime.ParamLocationPath, ueGroupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/%s/ee-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyEeGroupSubscriptionRequestWithApplicationJSONPatchPlusJSONBody calls the generic ModifyEeGroupSubscription builder with application/json-patch+json body
func NewModifyEeGroupSubscriptionRequestWithApplicationJSONPatchPlusJSONBody(server string, ueGroupId externalRef8.VarUeGroupId, subsId string, params *ModifyEeGroupSubscriptionParams, body ModifyEeGroupSubscriptionApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyEeGroupSubscriptionRequestWithBody(server, ueGroupId, subsId, params, "application/json-patch+json", bodyReader)
}

// NewModifyEeGroupSubscriptionRequestWithBody generates requests for ModifyEeGroupSubscription with any type of body
func NewModifyEeGroupSubscriptionRequestWithBody(server string, ueGroupId externalRef8.VarUeGroupId, subsId string, params *ModifyEeGroupSubscriptionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueGroupId", runtime.ParamLocationPath, ueGroupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/%s/ee-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateEeGroupSubscriptionsRequest calls the generic UpdateEeGroupSubscriptions builder with application/json body
func NewUpdateEeGroupSubscriptionsRequest(server string, ueGroupId externalRef8.VarUeGroupId, subsId string, body UpdateEeGroupSubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEeGroupSubscriptionsRequestWithBody(server, ueGroupId, subsId, "application/json", bodyReader)
}

// NewUpdateEeGroupSubscriptionsRequestWithBody generates requests for UpdateEeGroupSubscriptions with any type of body
func NewUpdateEeGroupSubscriptionsRequestWithBody(server string, ueGroupId externalRef8.VarUeGroupId, subsId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueGroupId", runtime.ParamLocationPath, ueGroupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/%s/ee-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSharedDataRequest generates requests for GetSharedData
func NewGetSharedDataRequest(server string, params *GetSharedDataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/shared-data")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "shared-data-ids", runtime.ParamLocationQuery, params.SharedDataIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIndividualSharedDataRequest generates requests for GetIndividualSharedData
func NewGetIndividualSharedDataRequest(server string, sharedDataId externalRef3.SharedDataId, params *GetIndividualSharedDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sharedDataId", runtime.ParamLocationPath, sharedDataId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/shared-data/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewRemoveMultipleSubscriptionDataSubscriptionsRequest generates requests for RemoveMultipleSubscriptionDataSubscriptions
func NewRemoveMultipleSubscriptionDataSubscriptionsRequest(server string, params *RemoveMultipleSubscriptionDataSubscriptionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/subs-to-notify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ue-id", runtime.ParamLocationQuery, params.UeId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.NfInstanceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nf-instance-id", runtime.ParamLocationQuery, *params.NfInstanceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeleteAllNfs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "delete-all-nfs", runtime.ParamLocationQuery, *params.DeleteAllNfs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ImplicitUnsubscribeIndication != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "implicit-unsubscribe-indication", runtime.ParamLocationQuery, *params.ImplicitUnsubscribeIndication); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuerySubsToNotifyRequest generates requests for QuerySubsToNotify
func NewQuerySubsToNotifyRequest(server string, params *QuerySubsToNotifyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/subs-to-notify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ue-id", runtime.ParamLocationQuery, params.UeId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSubscriptionDataSubscriptionsRequest calls the generic SubscriptionDataSubscriptions builder with application/json body
func NewSubscriptionDataSubscriptionsRequest(server string, body SubscriptionDataSubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubscriptionDataSubscriptionsRequestWithBody(server, "application/json", bodyReader)
}

// NewSubscriptionDataSubscriptionsRequestWithBody generates requests for SubscriptionDataSubscriptions with any type of body
func NewSubscriptionDataSubscriptionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/subs-to-notify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemovesubscriptionDataSubscriptionsRequest generates requests for RemovesubscriptionDataSubscriptions
func NewRemovesubscriptionDataSubscriptionsRequest(server string, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/subs-to-notify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuerySubscriptionDataSubscriptionsRequest generates requests for QuerySubscriptionDataSubscriptions
func NewQuerySubscriptionDataSubscriptionsRequest(server string, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/subs-to-notify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifysubscriptionDataSubscriptionRequestWithApplicationJSONPatchPlusJSONBody calls the generic ModifysubscriptionDataSubscription builder with application/json-patch+json body
func NewModifysubscriptionDataSubscriptionRequestWithApplicationJSONPatchPlusJSONBody(server string, subsId string, params *ModifysubscriptionDataSubscriptionParams, body ModifysubscriptionDataSubscriptionApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifysubscriptionDataSubscriptionRequestWithBody(server, subsId, params, "application/json-patch+json", bodyReader)
}

// NewModifysubscriptionDataSubscriptionRequestWithBody generates requests for ModifysubscriptionDataSubscription with any type of body
func NewModifysubscriptionDataSubscriptionRequestWithBody(server string, subsId string, params *ModifysubscriptionDataSubscriptionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/subs-to-notify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAuthenticationStatusRequest generates requests for DeleteAuthenticationStatus
func NewDeleteAuthenticationStatusRequest(server string, ueId externalRef0.Supi) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/authentication-data/authentication-status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryAuthenticationStatusRequest generates requests for QueryAuthenticationStatus
func NewQueryAuthenticationStatusRequest(server string, ueId externalRef0.Supi, params *QueryAuthenticationStatusParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/authentication-data/authentication-status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAuthenticationStatusRequest calls the generic CreateAuthenticationStatus builder with application/json body
func NewCreateAuthenticationStatusRequest(server string, ueId externalRef0.Supi, body CreateAuthenticationStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAuthenticationStatusRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewCreateAuthenticationStatusRequestWithBody generates requests for CreateAuthenticationStatus with any type of body
func NewCreateAuthenticationStatusRequestWithBody(server string, ueId externalRef0.Supi, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/authentication-data/authentication-status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIndividualAuthenticationStatusRequest generates requests for DeleteIndividualAuthenticationStatus
func NewDeleteIndividualAuthenticationStatusRequest(server string, ueId externalRef0.Supi, servingNetworkName externalRef4.ServingNetworkName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "servingNetworkName", runtime.ParamLocationPath, servingNetworkName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/authentication-data/authentication-status/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryIndividualAuthenticationStatusRequest generates requests for QueryIndividualAuthenticationStatus
func NewQueryIndividualAuthenticationStatusRequest(server string, ueId externalRef0.Supi, servingNetworkName externalRef4.ServingNetworkName, params *QueryIndividualAuthenticationStatusParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "servingNetworkName", runtime.ParamLocationPath, servingNetworkName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/authentication-data/authentication-status/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIndividualAuthenticationStatusRequest calls the generic CreateIndividualAuthenticationStatus builder with application/json body
func NewCreateIndividualAuthenticationStatusRequest(server string, ueId externalRef0.Supi, servingNetworkName externalRef4.ServingNetworkName, body CreateIndividualAuthenticationStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIndividualAuthenticationStatusRequestWithBody(server, ueId, servingNetworkName, "application/json", bodyReader)
}

// NewCreateIndividualAuthenticationStatusRequestWithBody generates requests for CreateIndividualAuthenticationStatus with any type of body
func NewCreateIndividualAuthenticationStatusRequestWithBody(server string, ueId externalRef0.Supi, servingNetworkName externalRef4.ServingNetworkName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "servingNetworkName", runtime.ParamLocationPath, servingNetworkName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/authentication-data/authentication-status/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryAuthSubsDataRequest generates requests for QueryAuthSubsData
func NewQueryAuthSubsDataRequest(server string, ueId externalRef0.Supi, params *QueryAuthSubsDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/authentication-data/authentication-subscription", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyAuthenticationSubscriptionRequestWithApplicationJSONPatchPlusJSONBody calls the generic ModifyAuthenticationSubscription builder with application/json-patch+json body
func NewModifyAuthenticationSubscriptionRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef0.Supi, params *ModifyAuthenticationSubscriptionParams, body ModifyAuthenticationSubscriptionApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyAuthenticationSubscriptionRequestWithBody(server, ueId, params, "application/json-patch+json", bodyReader)
}

// NewModifyAuthenticationSubscriptionRequestWithBody generates requests for ModifyAuthenticationSubscription with any type of body
func NewModifyAuthenticationSubscriptionRequestWithBody(server string, ueId externalRef0.Supi, params *ModifyAuthenticationSubscriptionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/authentication-data/authentication-subscription", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryContextDataRequest generates requests for QueryContextData
func NewQueryContextDataRequest(server string, ueId externalRef0.VarUeId, params *QueryContextDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "context-dataset-names", runtime.ParamLocationQuery, params.ContextDatasetNames); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryAmfContext3gppRequest generates requests for QueryAmfContext3gpp
func NewQueryAmfContext3gppRequest(server string, ueId externalRef0.VarUeId, params *QueryAmfContext3gppParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/amf-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAmfContext3gppRequestWithApplicationJSONPatchPlusJSONBody calls the generic AmfContext3gpp builder with application/json-patch+json body
func NewAmfContext3gppRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef0.VarUeId, params *AmfContext3gppParams, body AmfContext3gppApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAmfContext3gppRequestWithBody(server, ueId, params, "application/json-patch+json", bodyReader)
}

// NewAmfContext3gppRequestWithBody generates requests for AmfContext3gpp with any type of body
func NewAmfContext3gppRequestWithBody(server string, ueId externalRef0.VarUeId, params *AmfContext3gppParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/amf-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateAmfContext3gppRequest calls the generic CreateAmfContext3gpp builder with application/json body
func NewCreateAmfContext3gppRequest(server string, ueId externalRef0.VarUeId, body CreateAmfContext3gppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAmfContext3gppRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewCreateAmfContext3gppRequestWithBody generates requests for CreateAmfContext3gpp with any type of body
func NewCreateAmfContext3gppRequestWithBody(server string, ueId externalRef0.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/amf-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryAmfContextNon3gppRequest generates requests for QueryAmfContextNon3gpp
func NewQueryAmfContextNon3gppRequest(server string, ueId externalRef0.VarUeId, params *QueryAmfContextNon3gppParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/amf-non-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAmfContextNon3gppRequestWithApplicationJSONPatchPlusJSONBody calls the generic AmfContextNon3gpp builder with application/json-patch+json body
func NewAmfContextNon3gppRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef0.VarUeId, params *AmfContextNon3gppParams, body AmfContextNon3gppApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAmfContextNon3gppRequestWithBody(server, ueId, params, "application/json-patch+json", bodyReader)
}

// NewAmfContextNon3gppRequestWithBody generates requests for AmfContextNon3gpp with any type of body
func NewAmfContextNon3gppRequestWithBody(server string, ueId externalRef0.VarUeId, params *AmfContextNon3gppParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/amf-non-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateAmfContextNon3gppRequest calls the generic CreateAmfContextNon3gpp builder with application/json body
func NewCreateAmfContextNon3gppRequest(server string, ueId externalRef0.VarUeId, body CreateAmfContextNon3gppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAmfContextNon3gppRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewCreateAmfContextNon3gppRequestWithBody generates requests for CreateAmfContextNon3gpp with any type of body
func NewCreateAmfContextNon3gppRequestWithBody(server string, ueId externalRef0.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/amf-non-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryeesubscriptionsRequest generates requests for Queryeesubscriptions
func NewQueryeesubscriptionsRequest(server string, ueId externalRef0.VarUeId, params *QueryeesubscriptionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEeSubscriptionsRequest calls the generic CreateEeSubscriptions builder with application/json body
func NewCreateEeSubscriptionsRequest(server string, ueId externalRef0.VarUeId, body CreateEeSubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEeSubscriptionsRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewCreateEeSubscriptionsRequestWithBody generates requests for CreateEeSubscriptions with any type of body
func NewCreateEeSubscriptionsRequestWithBody(server string, ueId externalRef0.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveeeSubscriptionsRequest generates requests for RemoveeeSubscriptions
func NewRemoveeeSubscriptionsRequest(server string, ueId externalRef0.VarUeId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryeeSubscriptionRequest generates requests for QueryeeSubscription
func NewQueryeeSubscriptionRequest(server string, ueId externalRef0.VarUeId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyEesubscriptionRequestWithApplicationJSONPatchPlusJSONBody calls the generic ModifyEesubscription builder with application/json-patch+json body
func NewModifyEesubscriptionRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef0.VarUeId, subsId string, params *ModifyEesubscriptionParams, body ModifyEesubscriptionApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyEesubscriptionRequestWithBody(server, ueId, subsId, params, "application/json-patch+json", bodyReader)
}

// NewModifyEesubscriptionRequestWithBody generates requests for ModifyEesubscription with any type of body
func NewModifyEesubscriptionRequestWithBody(server string, ueId externalRef0.VarUeId, subsId string, params *ModifyEesubscriptionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateEesubscriptionsRequest calls the generic UpdateEesubscriptions builder with application/json body
func NewUpdateEesubscriptionsRequest(server string, ueId externalRef0.VarUeId, subsId string, body UpdateEesubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEesubscriptionsRequestWithBody(server, ueId, subsId, "application/json", bodyReader)
}

// NewUpdateEesubscriptionsRequestWithBody generates requests for UpdateEesubscriptions with any type of body
func NewUpdateEesubscriptionsRequestWithBody(server string, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveAmfSubscriptionsInfoRequest generates requests for RemoveAmfSubscriptionsInfo
func NewRemoveAmfSubscriptionsInfoRequest(server string, ueId externalRef0.VarUeId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s/amf-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAmfSubscriptionInfoRequest generates requests for GetAmfSubscriptionInfo
func NewGetAmfSubscriptionInfoRequest(server string, ueId externalRef0.VarUeId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s/amf-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyAmfSubscriptionInfoRequestWithApplicationJSONPatchPlusJSONBody calls the generic ModifyAmfSubscriptionInfo builder with application/json-patch+json body
func NewModifyAmfSubscriptionInfoRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef0.VarUeId, subsId string, params *ModifyAmfSubscriptionInfoParams, body ModifyAmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyAmfSubscriptionInfoRequestWithBody(server, ueId, subsId, params, "application/json-patch+json", bodyReader)
}

// NewModifyAmfSubscriptionInfoRequestWithBody generates requests for ModifyAmfSubscriptionInfo with any type of body
func NewModifyAmfSubscriptionInfoRequestWithBody(server string, ueId externalRef0.VarUeId, subsId string, params *ModifyAmfSubscriptionInfoParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s/amf-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateAMFSubscriptionsRequest calls the generic CreateAMFSubscriptions builder with application/json body
func NewCreateAMFSubscriptionsRequest(server string, ueId externalRef0.VarUeId, subsId string, body CreateAMFSubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAMFSubscriptionsRequestWithBody(server, ueId, subsId, "application/json", bodyReader)
}

// NewCreateAMFSubscriptionsRequestWithBody generates requests for CreateAMFSubscriptions with any type of body
func NewCreateAMFSubscriptionsRequestWithBody(server string, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s/amf-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveHssSubscriptionsInfoRequest generates requests for RemoveHssSubscriptionsInfo
func NewRemoveHssSubscriptionsInfoRequest(server string, ueId externalRef0.VarUeId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s/hss-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHssSubscriptionInfoRequest generates requests for GetHssSubscriptionInfo
func NewGetHssSubscriptionInfoRequest(server string, ueId externalRef0.VarUeId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s/hss-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyHssSubscriptionInfoRequestWithApplicationJSONPatchPlusJSONBody calls the generic ModifyHssSubscriptionInfo builder with application/json-patch+json body
func NewModifyHssSubscriptionInfoRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef0.VarUeId, subsId string, params *ModifyHssSubscriptionInfoParams, body ModifyHssSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyHssSubscriptionInfoRequestWithBody(server, ueId, subsId, params, "application/json-patch+json", bodyReader)
}

// NewModifyHssSubscriptionInfoRequestWithBody generates requests for ModifyHssSubscriptionInfo with any type of body
func NewModifyHssSubscriptionInfoRequestWithBody(server string, ueId externalRef0.VarUeId, subsId string, params *ModifyHssSubscriptionInfoParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s/hss-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateHSSSubscriptionsRequest calls the generic CreateHSSSubscriptions builder with application/json body
func NewCreateHSSSubscriptionsRequest(server string, ueId externalRef0.VarUeId, subsId string, body CreateHSSSubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHSSSubscriptionsRequestWithBody(server, ueId, subsId, "application/json", bodyReader)
}

// NewCreateHSSSubscriptionsRequestWithBody generates requests for CreateHSSSubscriptions with any type of body
func NewCreateHSSSubscriptionsRequestWithBody(server string, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s/hss-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveSmfSubscriptionsInfoRequest generates requests for RemoveSmfSubscriptionsInfo
func NewRemoveSmfSubscriptionsInfoRequest(server string, ueId externalRef0.VarUeId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s/smf-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSmfSubscriptionInfoRequest generates requests for GetSmfSubscriptionInfo
func NewGetSmfSubscriptionInfoRequest(server string, ueId externalRef0.VarUeId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s/smf-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifySmfSubscriptionInfoRequestWithApplicationJSONPatchPlusJSONBody calls the generic ModifySmfSubscriptionInfo builder with application/json-patch+json body
func NewModifySmfSubscriptionInfoRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef0.VarUeId, subsId string, params *ModifySmfSubscriptionInfoParams, body ModifySmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifySmfSubscriptionInfoRequestWithBody(server, ueId, subsId, params, "application/json-patch+json", bodyReader)
}

// NewModifySmfSubscriptionInfoRequestWithBody generates requests for ModifySmfSubscriptionInfo with any type of body
func NewModifySmfSubscriptionInfoRequestWithBody(server string, ueId externalRef0.VarUeId, subsId string, params *ModifySmfSubscriptionInfoParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s/smf-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateSMFSubscriptionsRequest calls the generic CreateSMFSubscriptions builder with application/json body
func NewCreateSMFSubscriptionsRequest(server string, ueId externalRef0.VarUeId, subsId string, body CreateSMFSubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSMFSubscriptionsRequestWithBody(server, ueId, subsId, "application/json", bodyReader)
}

// NewCreateSMFSubscriptionsRequestWithBody generates requests for CreateSMFSubscriptions with any type of body
func NewCreateSMFSubscriptionsRequestWithBody(server string, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s/smf-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIpSmGwContextRequest generates requests for DeleteIpSmGwContext
func NewDeleteIpSmGwContextRequest(server string, ueId externalRef0.VarUeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ip-sm-gw", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryIpSmGwContextRequest generates requests for QueryIpSmGwContext
func NewQueryIpSmGwContextRequest(server string, ueId externalRef0.VarUeId, params *QueryIpSmGwContextParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ip-sm-gw", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyIpSmGwContextRequestWithApplicationJSONPatchPlusJSONBody calls the generic ModifyIpSmGwContext builder with application/json-patch+json body
func NewModifyIpSmGwContextRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef0.VarUeId, body ModifyIpSmGwContextApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyIpSmGwContextRequestWithBody(server, ueId, "application/json-patch+json", bodyReader)
}

// NewModifyIpSmGwContextRequestWithBody generates requests for ModifyIpSmGwContext with any type of body
func NewModifyIpSmGwContextRequestWithBody(server string, ueId externalRef0.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ip-sm-gw", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateIpSmGwContextRequest calls the generic CreateIpSmGwContext builder with application/json body
func NewCreateIpSmGwContextRequest(server string, ueId externalRef0.VarUeId, body CreateIpSmGwContextJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIpSmGwContextRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewCreateIpSmGwContextRequestWithBody generates requests for CreateIpSmGwContext with any type of body
func NewCreateIpSmGwContextRequestWithBody(server string, ueId externalRef0.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ip-sm-gw", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryUeLocationRequest generates requests for QueryUeLocation
func NewQueryUeLocationRequest(server string, ueId externalRef0.VarUeId, params *QueryUeLocationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/location", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteMessageWaitingDataRequest generates requests for DeleteMessageWaitingData
func NewDeleteMessageWaitingDataRequest(server string, ueId externalRef0.VarUeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/mwd", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryMessageWaitingDataRequest generates requests for QueryMessageWaitingData
func NewQueryMessageWaitingDataRequest(server string, ueId externalRef0.VarUeId, params *QueryMessageWaitingDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/mwd", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyMessageWaitingDataRequestWithApplicationJSONPatchPlusJSONBody calls the generic ModifyMessageWaitingData builder with application/json-patch+json body
func NewModifyMessageWaitingDataRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef0.VarUeId, body ModifyMessageWaitingDataApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyMessageWaitingDataRequestWithBody(server, ueId, "application/json-patch+json", bodyReader)
}

// NewModifyMessageWaitingDataRequestWithBody generates requests for ModifyMessageWaitingData with any type of body
func NewModifyMessageWaitingDataRequestWithBody(server string, ueId externalRef0.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/mwd", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateMessageWaitingDataRequest calls the generic CreateMessageWaitingData builder with application/json body
func NewCreateMessageWaitingDataRequest(server string, ueId externalRef0.VarUeId, body CreateMessageWaitingDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMessageWaitingDataRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewCreateMessageWaitingDataRequestWithBody generates requests for CreateMessageWaitingData with any type of body
func NewCreateMessageWaitingDataRequestWithBody(server string, ueId externalRef0.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/mwd", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQuerysdmsubscriptionsRequest generates requests for Querysdmsubscriptions
func NewQuerysdmsubscriptionsRequest(server string, ueId externalRef0.VarUeId, params *QuerysdmsubscriptionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/sdm-subscriptions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSdmSubscriptionsRequest calls the generic CreateSdmSubscriptions builder with application/json body
func NewCreateSdmSubscriptionsRequest(server string, ueId externalRef0.VarUeId, body CreateSdmSubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSdmSubscriptionsRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewCreateSdmSubscriptionsRequestWithBody generates requests for CreateSdmSubscriptions with any type of body
func NewCreateSdmSubscriptionsRequestWithBody(server string, ueId externalRef0.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/sdm-subscriptions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemovesdmSubscriptionsRequest generates requests for RemovesdmSubscriptions
func NewRemovesdmSubscriptionsRequest(server string, ueId externalRef0.VarUeId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/sdm-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuerysdmSubscriptionRequest generates requests for QuerysdmSubscription
func NewQuerysdmSubscriptionRequest(server string, ueId externalRef0.VarUeId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/sdm-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifysdmSubscriptionRequestWithApplicationJSONPatchPlusJSONBody calls the generic ModifysdmSubscription builder with application/json-patch+json body
func NewModifysdmSubscriptionRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef0.VarUeId, subsId string, params *ModifysdmSubscriptionParams, body ModifysdmSubscriptionApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifysdmSubscriptionRequestWithBody(server, ueId, subsId, params, "application/json-patch+json", bodyReader)
}

// NewModifysdmSubscriptionRequestWithBody generates requests for ModifysdmSubscription with any type of body
func NewModifysdmSubscriptionRequestWithBody(server string, ueId externalRef0.VarUeId, subsId string, params *ModifysdmSubscriptionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/sdm-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdatesdmsubscriptionsRequest calls the generic Updatesdmsubscriptions builder with application/json body
func NewUpdatesdmsubscriptionsRequest(server string, ueId externalRef0.VarUeId, subsId string, body UpdatesdmsubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatesdmsubscriptionsRequestWithBody(server, ueId, subsId, "application/json", bodyReader)
}

// NewUpdatesdmsubscriptionsRequestWithBody generates requests for Updatesdmsubscriptions with any type of body
func NewUpdatesdmsubscriptionsRequestWithBody(server string, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/sdm-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveHssSDMSubscriptionsInfoRequest generates requests for RemoveHssSDMSubscriptionsInfo
func NewRemoveHssSDMSubscriptionsInfoRequest(server string, ueId externalRef0.VarUeId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/sdm-subscriptions/%s/hss-sdm-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHssSDMSubscriptionInfoRequest generates requests for GetHssSDMSubscriptionInfo
func NewGetHssSDMSubscriptionInfoRequest(server string, ueId externalRef0.VarUeId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/sdm-subscriptions/%s/hss-sdm-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyHssSDMSubscriptionInfoRequestWithApplicationJSONPatchPlusJSONBody calls the generic ModifyHssSDMSubscriptionInfo builder with application/json-patch+json body
func NewModifyHssSDMSubscriptionInfoRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef0.VarUeId, subsId string, params *ModifyHssSDMSubscriptionInfoParams, body ModifyHssSDMSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyHssSDMSubscriptionInfoRequestWithBody(server, ueId, subsId, params, "application/json-patch+json", bodyReader)
}

// NewModifyHssSDMSubscriptionInfoRequestWithBody generates requests for ModifyHssSDMSubscriptionInfo with any type of body
func NewModifyHssSDMSubscriptionInfoRequestWithBody(server string, ueId externalRef0.VarUeId, subsId string, params *ModifyHssSDMSubscriptionInfoParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/sdm-subscriptions/%s/hss-sdm-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateHSSSDMSubscriptionsRequest calls the generic CreateHSSSDMSubscriptions builder with application/json body
func NewCreateHSSSDMSubscriptionsRequest(server string, ueId externalRef0.VarUeId, subsId string, body CreateHSSSDMSubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHSSSDMSubscriptionsRequestWithBody(server, ueId, subsId, "application/json", bodyReader)
}

// NewCreateHSSSDMSubscriptionsRequestWithBody generates requests for CreateHSSSDMSubscriptions with any type of body
func NewCreateHSSSDMSubscriptionsRequestWithBody(server string, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/sdm-subscriptions/%s/hss-sdm-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQuerySmfRegListRequest generates requests for QuerySmfRegList
func NewQuerySmfRegListRequest(server string, ueId externalRef0.VarUeId, params *QuerySmfRegListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/smf-registrations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSmfRegistrationRequest generates requests for DeleteSmfRegistration
func NewDeleteSmfRegistrationRequest(server string, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pduSessionId", runtime.ParamLocationPath, pduSessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/smf-registrations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuerySmfRegistrationRequest generates requests for QuerySmfRegistration
func NewQuerySmfRegistrationRequest(server string, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, params *QuerySmfRegistrationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pduSessionId", runtime.ParamLocationPath, pduSessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/smf-registrations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrUpdateSmfRegistrationRequest calls the generic CreateOrUpdateSmfRegistration builder with application/json body
func NewCreateOrUpdateSmfRegistrationRequest(server string, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, body CreateOrUpdateSmfRegistrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrUpdateSmfRegistrationRequestWithBody(server, ueId, pduSessionId, "application/json", bodyReader)
}

// NewCreateOrUpdateSmfRegistrationRequestWithBody generates requests for CreateOrUpdateSmfRegistration with any type of body
func NewCreateOrUpdateSmfRegistrationRequestWithBody(server string, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pduSessionId", runtime.ParamLocationPath, pduSessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/smf-registrations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSmsfContext3gppRequest generates requests for DeleteSmsfContext3gpp
func NewDeleteSmsfContext3gppRequest(server string, ueId externalRef0.VarUeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/smsf-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuerySmsfContext3gppRequest generates requests for QuerySmsfContext3gpp
func NewQuerySmsfContext3gppRequest(server string, ueId externalRef0.VarUeId, params *QuerySmsfContext3gppParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/smsf-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSmsfContext3gppRequest calls the generic CreateSmsfContext3gpp builder with application/json body
func NewCreateSmsfContext3gppRequest(server string, ueId externalRef0.VarUeId, body CreateSmsfContext3gppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSmsfContext3gppRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewCreateSmsfContext3gppRequestWithBody generates requests for CreateSmsfContext3gpp with any type of body
func NewCreateSmsfContext3gppRequestWithBody(server string, ueId externalRef0.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/smsf-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSmsfContextNon3gppRequest generates requests for DeleteSmsfContextNon3gpp
func NewDeleteSmsfContextNon3gppRequest(server string, ueId externalRef0.VarUeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/smsf-non-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuerySmsfContextNon3gppRequest generates requests for QuerySmsfContextNon3gpp
func NewQuerySmsfContextNon3gppRequest(server string, ueId externalRef0.VarUeId, params *QuerySmsfContextNon3gppParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/smsf-non-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSmsfContextNon3gppRequest calls the generic CreateSmsfContextNon3gpp builder with application/json body
func NewCreateSmsfContextNon3gppRequest(server string, ueId externalRef0.VarUeId, body CreateSmsfContextNon3gppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSmsfContextNon3gppRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewCreateSmsfContextNon3gppRequestWithBody generates requests for CreateSmsfContextNon3gpp with any type of body
func NewCreateSmsfContextNon3gppRequestWithBody(server string, ueId externalRef0.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/smsf-non-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryCoverageRestrictionDataRequest generates requests for QueryCoverageRestrictionData
func NewQueryCoverageRestrictionDataRequest(server string, ueId externalRef0.VarUeId, params *QueryCoverageRestrictionDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/coverage-restriction-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewQueryEEDataRequest generates requests for QueryEEData
func NewQueryEEDataRequest(server string, ueId externalRef0.VarUeId, params *QueryEEDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/ee-profile-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdentityDataRequest generates requests for GetIdentityData
func NewGetIdentityDataRequest(server string, ueId externalRef0.VarUeId, params *GetIdentityDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/identity-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AppPortId != nil {

			if queryParamBuf, err := json.Marshal(*params.AppPortId); err != nil {
				return nil, err
			} else {
				queryValues.Add("app-port-id", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewQueryLcsMoDataRequest generates requests for QueryLcsMoData
func NewQueryLcsMoDataRequest(server string, ueId externalRef0.VarUeId, params *QueryLcsMoDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/lcs-mo-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewQueryLcsPrivacyDataRequest generates requests for QueryLcsPrivacyData
func NewQueryLcsPrivacyDataRequest(server string, ueId externalRef0.VarUeId, params *QueryLcsPrivacyDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/lcs-privacy-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetNiddAuDataRequest generates requests for GetNiddAuData
func NewGetNiddAuDataRequest(server string, ueId string, params *GetNiddAuDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/nidd-authorization-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryParamBuf, err := json.Marshal(params.SingleNssai); err != nil {
			return nil, err
		} else {
			queryValues.Add("single-nssai", string(queryParamBuf))
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnn", runtime.ParamLocationQuery, params.Dnn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mtc-provider-information", runtime.ParamLocationQuery, params.MtcProviderInformation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetOdbDataRequest generates requests for GetOdbData
func NewGetOdbDataRequest(server string, ueId externalRef0.VarUeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/operator-determined-barring-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryOperSpecDataRequest generates requests for QueryOperSpecData
func NewQueryOperSpecDataRequest(server string, ueId externalRef0.VarUeId, params *QueryOperSpecDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/operator-specific-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewModifyOperSpecDataRequestWithApplicationJSONPatchPlusJSONBody calls the generic ModifyOperSpecData builder with application/json-patch+json body
func NewModifyOperSpecDataRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef0.VarUeId, params *ModifyOperSpecDataParams, body ModifyOperSpecDataApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyOperSpecDataRequestWithBody(server, ueId, params, "application/json-patch+json", bodyReader)
}

// NewModifyOperSpecDataRequestWithBody generates requests for ModifyOperSpecData with any type of body
func NewModifyOperSpecDataRequestWithBody(server string, ueId externalRef0.VarUeId, params *ModifyOperSpecDataParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/operator-specific-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetppDataRequest generates requests for GetppData
func NewGetppDataRequest(server string, ueId externalRef0.VarUeId, params *GetppDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/pp-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewModifyPpDataRequestWithApplicationJSONPatchPlusJSONBody calls the generic ModifyPpData builder with application/json-patch+json body
func NewModifyPpDataRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef0.VarUeId, params *ModifyPpDataParams, body ModifyPpDataApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyPpDataRequestWithBody(server, ueId, params, "application/json-patch+json", bodyReader)
}

// NewModifyPpDataRequestWithBody generates requests for ModifyPpData with any type of body
func NewModifyPpDataRequestWithBody(server string, ueId externalRef0.VarUeId, params *ModifyPpDataParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/pp-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryPPDataRequest generates requests for QueryPPData
func NewQueryPPDataRequest(server string, ueId externalRef0.VarUeId, params *QueryPPDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/pp-profile-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryAuthSoRRequest generates requests for QueryAuthSoR
func NewQueryAuthSoRRequest(server string, ueId externalRef0.Supi, params *QueryAuthSoRParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/ue-update-confirmation-data/sor-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAuthenticationSoRRequest calls the generic CreateAuthenticationSoR builder with application/json body
func NewCreateAuthenticationSoRRequest(server string, ueId externalRef0.Supi, params *CreateAuthenticationSoRParams, body CreateAuthenticationSoRJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAuthenticationSoRRequestWithBody(server, ueId, params, "application/json", bodyReader)
}

// NewCreateAuthenticationSoRRequestWithBody generates requests for CreateAuthenticationSoR with any type of body
func NewCreateAuthenticationSoRRequestWithBody(server string, ueId externalRef0.Supi, params *CreateAuthenticationSoRParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/ue-update-confirmation-data/sor-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryCagAckRequest generates requests for QueryCagAck
func NewQueryCagAckRequest(server string, ueId externalRef0.Supi, params *QueryCagAckParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/ue-update-confirmation-data/subscribed-cag", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCagUpdateAckRequest calls the generic CreateCagUpdateAck builder with application/json body
func NewCreateCagUpdateAckRequest(server string, ueId externalRef0.Supi, params *CreateCagUpdateAckParams, body CreateCagUpdateAckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCagUpdateAckRequestWithBody(server, ueId, params, "application/json", bodyReader)
}

// NewCreateCagUpdateAckRequestWithBody generates requests for CreateCagUpdateAck with any type of body
func NewCreateCagUpdateAckRequestWithBody(server string, ueId externalRef0.Supi, params *CreateCagUpdateAckParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/ue-update-confirmation-data/subscribed-cag", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryNssaiAckRequest generates requests for QueryNssaiAck
func NewQueryNssaiAckRequest(server string, ueId externalRef0.Supi, params *QueryNssaiAckParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/ue-update-confirmation-data/subscribed-snssais", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrUpdateNssaiAckRequest calls the generic CreateOrUpdateNssaiAck builder with application/json body
func NewCreateOrUpdateNssaiAckRequest(server string, ueId externalRef0.Supi, params *CreateOrUpdateNssaiAckParams, body CreateOrUpdateNssaiAckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrUpdateNssaiAckRequestWithBody(server, ueId, params, "application/json", bodyReader)
}

// NewCreateOrUpdateNssaiAckRequestWithBody generates requests for CreateOrUpdateNssaiAck with any type of body
func NewCreateOrUpdateNssaiAckRequestWithBody(server string, ueId externalRef0.Supi, params *CreateOrUpdateNssaiAckParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/ue-update-confirmation-data/subscribed-snssais", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryAuthUPURequest generates requests for QueryAuthUPU
func NewQueryAuthUPURequest(server string, ueId externalRef0.Supi, params *QueryAuthUPUParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/ue-update-confirmation-data/upu-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAuthenticationUPURequest calls the generic CreateAuthenticationUPU builder with application/json body
func NewCreateAuthenticationUPURequest(server string, ueId externalRef0.Supi, params *CreateAuthenticationUPUParams, body CreateAuthenticationUPUJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAuthenticationUPURequestWithBody(server, ueId, params, "application/json", bodyReader)
}

// NewCreateAuthenticationUPURequestWithBody generates requests for CreateAuthenticationUPU with any type of body
func NewCreateAuthenticationUPURequestWithBody(server string, ueId externalRef0.Supi, params *CreateAuthenticationUPUParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/ue-update-confirmation-data/upu-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryV2xDataRequest generates requests for QueryV2xData
func NewQueryV2xDataRequest(server string, ueId externalRef0.VarUeId, params *QueryV2xDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/v2x-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewQueryProvisionedDataRequest generates requests for QueryProvisionedData
func NewQueryProvisionedDataRequest(server string, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QueryProvisionedDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "servingPlmnId", runtime.ParamLocationPath, servingPlmnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/%s/provisioned-data", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DatasetNames != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "dataset-names", runtime.ParamLocationQuery, *params.DatasetNames); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryAmDataRequest generates requests for QueryAmData
func NewQueryAmDataRequest(server string, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QueryAmDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "servingPlmnId", runtime.ParamLocationPath, servingPlmnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/%s/provisioned-data/am-data", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewQueryLcsBcaDataRequest generates requests for QueryLcsBcaData
func NewQueryLcsBcaDataRequest(server string, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QueryLcsBcaDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "servingPlmnId", runtime.ParamLocationPath, servingPlmnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/%s/provisioned-data/lcs-bca-data", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewQuerySmDataRequest generates requests for QuerySmData
func NewQuerySmDataRequest(server string, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QuerySmDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "servingPlmnId", runtime.ParamLocationPath, servingPlmnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/%s/provisioned-data/sm-data", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SingleNssai != nil {

			if queryParamBuf, err := json.Marshal(*params.SingleNssai); err != nil {
				return nil, err
			} else {
				queryValues.Add("single-nssai", string(queryParamBuf))
			}

		}

		if params.Dnn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnn", runtime.ParamLocationQuery, *params.Dnn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewQuerySmfSelectDataRequest generates requests for QuerySmfSelectData
func NewQuerySmfSelectDataRequest(server string, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QuerySmfSelectDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "servingPlmnId", runtime.ParamLocationPath, servingPlmnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/%s/provisioned-data/smf-selection-subscription-data", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewQuerySmsDataRequest generates requests for QuerySmsData
func NewQuerySmsDataRequest(server string, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QuerySmsDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "servingPlmnId", runtime.ParamLocationPath, servingPlmnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/%s/provisioned-data/sms-data", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewQuerySmsMngDataRequest generates requests for QuerySmsMngData
func NewQuerySmsMngDataRequest(server string, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QuerySmsMngDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "servingPlmnId", runtime.ParamLocationPath, servingPlmnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/%s/provisioned-data/sms-mng-data", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewQueryTraceDataRequest generates requests for QueryTraceData
func NewQueryTraceDataRequest(server string, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QueryTraceDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "servingPlmnId", runtime.ParamLocationPath, servingPlmnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/%s/provisioned-data/trace-data", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ReadBdtPolicyDataWithResponse request
	ReadBdtPolicyDataWithResponse(ctx context.Context, params *ReadBdtPolicyDataParams, reqEditors ...RequestEditorFn) (*ReadBdtPolicyDataResponse, error)

	// DeleteIndividualAppliedBdtPolicyDataWithResponse request
	DeleteIndividualAppliedBdtPolicyDataWithResponse(ctx context.Context, bdtPolicyId string, reqEditors ...RequestEditorFn) (*DeleteIndividualAppliedBdtPolicyDataResponse, error)

	// UpdateIndividualAppliedBdtPolicyDataWithBodyWithResponse request with any body
	UpdateIndividualAppliedBdtPolicyDataWithBodyWithResponse(ctx context.Context, bdtPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIndividualAppliedBdtPolicyDataResponse, error)

	UpdateIndividualAppliedBdtPolicyDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, bdtPolicyId string, body UpdateIndividualAppliedBdtPolicyDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIndividualAppliedBdtPolicyDataResponse, error)

	// CreateIndividualAppliedBdtPolicyDataWithBodyWithResponse request with any body
	CreateIndividualAppliedBdtPolicyDataWithBodyWithResponse(ctx context.Context, bdtPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualAppliedBdtPolicyDataResponse, error)

	CreateIndividualAppliedBdtPolicyDataWithResponse(ctx context.Context, bdtPolicyId string, body CreateIndividualAppliedBdtPolicyDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualAppliedBdtPolicyDataResponse, error)

	// ReadInfluenceDataWithResponse request
	ReadInfluenceDataWithResponse(ctx context.Context, params *ReadInfluenceDataParams, reqEditors ...RequestEditorFn) (*ReadInfluenceDataResponse, error)

	// ReadInfluenceDataSubscriptionsWithResponse request
	ReadInfluenceDataSubscriptionsWithResponse(ctx context.Context, params *ReadInfluenceDataSubscriptionsParams, reqEditors ...RequestEditorFn) (*ReadInfluenceDataSubscriptionsResponse, error)

	// CreateIndividualInfluenceDataSubscriptionWithBodyWithResponse request with any body
	CreateIndividualInfluenceDataSubscriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualInfluenceDataSubscriptionResponse, error)

	CreateIndividualInfluenceDataSubscriptionWithResponse(ctx context.Context, body CreateIndividualInfluenceDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualInfluenceDataSubscriptionResponse, error)

	// DeleteIndividualInfluenceDataSubscriptionWithResponse request
	DeleteIndividualInfluenceDataSubscriptionWithResponse(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*DeleteIndividualInfluenceDataSubscriptionResponse, error)

	// ReadIndividualInfluenceDataSubscriptionWithResponse request
	ReadIndividualInfluenceDataSubscriptionWithResponse(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*ReadIndividualInfluenceDataSubscriptionResponse, error)

	// ReplaceIndividualInfluenceDataSubscriptionWithBodyWithResponse request with any body
	ReplaceIndividualInfluenceDataSubscriptionWithBodyWithResponse(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceIndividualInfluenceDataSubscriptionResponse, error)

	ReplaceIndividualInfluenceDataSubscriptionWithResponse(ctx context.Context, subscriptionId string, body ReplaceIndividualInfluenceDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceIndividualInfluenceDataSubscriptionResponse, error)

	// DeleteIndividualInfluenceDataWithResponse request
	DeleteIndividualInfluenceDataWithResponse(ctx context.Context, influenceId string, reqEditors ...RequestEditorFn) (*DeleteIndividualInfluenceDataResponse, error)

	// UpdateIndividualInfluenceDataWithBodyWithResponse request with any body
	UpdateIndividualInfluenceDataWithBodyWithResponse(ctx context.Context, influenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIndividualInfluenceDataResponse, error)

	UpdateIndividualInfluenceDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, influenceId string, body UpdateIndividualInfluenceDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIndividualInfluenceDataResponse, error)

	// CreateOrReplaceIndividualInfluenceDataWithBodyWithResponse request with any body
	CreateOrReplaceIndividualInfluenceDataWithBodyWithResponse(ctx context.Context, influenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceIndividualInfluenceDataResponse, error)

	CreateOrReplaceIndividualInfluenceDataWithResponse(ctx context.Context, influenceId string, body CreateOrReplaceIndividualInfluenceDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceIndividualInfluenceDataResponse, error)

	// ReadIPTVCongifurationDataWithResponse request
	ReadIPTVCongifurationDataWithResponse(ctx context.Context, params *ReadIPTVCongifurationDataParams, reqEditors ...RequestEditorFn) (*ReadIPTVCongifurationDataResponse, error)

	// DeleteIndividualIPTVConfigurationDataWithResponse request
	DeleteIndividualIPTVConfigurationDataWithResponse(ctx context.Context, configurationId string, reqEditors ...RequestEditorFn) (*DeleteIndividualIPTVConfigurationDataResponse, error)

	// PartialReplaceIndividualIPTVConfigurationDataWithBodyWithResponse request with any body
	PartialReplaceIndividualIPTVConfigurationDataWithBodyWithResponse(ctx context.Context, configurationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PartialReplaceIndividualIPTVConfigurationDataResponse, error)

	PartialReplaceIndividualIPTVConfigurationDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, configurationId string, body PartialReplaceIndividualIPTVConfigurationDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PartialReplaceIndividualIPTVConfigurationDataResponse, error)

	// CreateOrReplaceIndividualIPTVConfigurationDataWithBodyWithResponse request with any body
	CreateOrReplaceIndividualIPTVConfigurationDataWithBodyWithResponse(ctx context.Context, configurationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceIndividualIPTVConfigurationDataResponse, error)

	CreateOrReplaceIndividualIPTVConfigurationDataWithResponse(ctx context.Context, configurationId string, body CreateOrReplaceIndividualIPTVConfigurationDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceIndividualIPTVConfigurationDataResponse, error)

	// ReadPFDDataWithResponse request
	ReadPFDDataWithResponse(ctx context.Context, params *ReadPFDDataParams, reqEditors ...RequestEditorFn) (*ReadPFDDataResponse, error)

	// DeleteIndividualPFDDataWithResponse request
	DeleteIndividualPFDDataWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*DeleteIndividualPFDDataResponse, error)

	// ReadIndividualPFDDataWithResponse request
	ReadIndividualPFDDataWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*ReadIndividualPFDDataResponse, error)

	// CreateOrReplaceIndividualPFDDataWithBodyWithResponse request with any body
	CreateOrReplaceIndividualPFDDataWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceIndividualPFDDataResponse, error)

	CreateOrReplaceIndividualPFDDataWithResponse(ctx context.Context, appId string, body CreateOrReplaceIndividualPFDDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceIndividualPFDDataResponse, error)

	// ReadServiceParameterDataWithResponse request
	ReadServiceParameterDataWithResponse(ctx context.Context, params *ReadServiceParameterDataParams, reqEditors ...RequestEditorFn) (*ReadServiceParameterDataResponse, error)

	// DeleteIndividualServiceParameterDataWithResponse request
	DeleteIndividualServiceParameterDataWithResponse(ctx context.Context, serviceParamId string, reqEditors ...RequestEditorFn) (*DeleteIndividualServiceParameterDataResponse, error)

	// UpdateIndividualServiceParameterDataWithBodyWithResponse request with any body
	UpdateIndividualServiceParameterDataWithBodyWithResponse(ctx context.Context, serviceParamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIndividualServiceParameterDataResponse, error)

	UpdateIndividualServiceParameterDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, serviceParamId string, body UpdateIndividualServiceParameterDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIndividualServiceParameterDataResponse, error)

	// CreateOrReplaceServiceParameterDataWithBodyWithResponse request with any body
	CreateOrReplaceServiceParameterDataWithBodyWithResponse(ctx context.Context, serviceParamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceServiceParameterDataResponse, error)

	CreateOrReplaceServiceParameterDataWithResponse(ctx context.Context, serviceParamId string, body CreateOrReplaceServiceParameterDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceServiceParameterDataResponse, error)

	// ReadApplicationDataChangeSubscriptionsWithResponse request
	ReadApplicationDataChangeSubscriptionsWithResponse(ctx context.Context, params *ReadApplicationDataChangeSubscriptionsParams, reqEditors ...RequestEditorFn) (*ReadApplicationDataChangeSubscriptionsResponse, error)

	// CreateIndividualApplicationDataSubscriptionWithBodyWithResponse request with any body
	CreateIndividualApplicationDataSubscriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualApplicationDataSubscriptionResponse, error)

	CreateIndividualApplicationDataSubscriptionWithResponse(ctx context.Context, body CreateIndividualApplicationDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualApplicationDataSubscriptionResponse, error)

	// DeleteIndividualApplicationDataSubscriptionWithResponse request
	DeleteIndividualApplicationDataSubscriptionWithResponse(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*DeleteIndividualApplicationDataSubscriptionResponse, error)

	// ReadIndividualApplicationDataSubscriptionWithResponse request
	ReadIndividualApplicationDataSubscriptionWithResponse(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*ReadIndividualApplicationDataSubscriptionResponse, error)

	// ReplaceIndividualApplicationDataSubscriptionWithBodyWithResponse request with any body
	ReplaceIndividualApplicationDataSubscriptionWithBodyWithResponse(ctx context.Context, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceIndividualApplicationDataSubscriptionResponse, error)

	ReplaceIndividualApplicationDataSubscriptionWithResponse(ctx context.Context, subsId string, body ReplaceIndividualApplicationDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceIndividualApplicationDataSubscriptionResponse, error)

	// CreateIndividualExposureDataSubscriptionWithBodyWithResponse request with any body
	CreateIndividualExposureDataSubscriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualExposureDataSubscriptionResponse, error)

	CreateIndividualExposureDataSubscriptionWithResponse(ctx context.Context, body CreateIndividualExposureDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualExposureDataSubscriptionResponse, error)

	// DeleteIndividualExposureDataSubscriptionWithResponse request
	DeleteIndividualExposureDataSubscriptionWithResponse(ctx context.Context, subId string, reqEditors ...RequestEditorFn) (*DeleteIndividualExposureDataSubscriptionResponse, error)

	// ReplaceIndividualExposureDataSubscriptionWithBodyWithResponse request with any body
	ReplaceIndividualExposureDataSubscriptionWithBodyWithResponse(ctx context.Context, subId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceIndividualExposureDataSubscriptionResponse, error)

	ReplaceIndividualExposureDataSubscriptionWithResponse(ctx context.Context, subId string, body ReplaceIndividualExposureDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceIndividualExposureDataSubscriptionResponse, error)

	// DeleteAccessAndMobilityDataWithResponse request
	DeleteAccessAndMobilityDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*DeleteAccessAndMobilityDataResponse, error)

	// QueryAccessAndMobilityDataWithResponse request
	QueryAccessAndMobilityDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryAccessAndMobilityDataParams, reqEditors ...RequestEditorFn) (*QueryAccessAndMobilityDataResponse, error)

	// UpdateAccessAndMobilityDataWithBodyWithResponse request with any body
	UpdateAccessAndMobilityDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccessAndMobilityDataResponse, error)

	UpdateAccessAndMobilityDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body UpdateAccessAndMobilityDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAccessAndMobilityDataResponse, error)

	// CreateOrReplaceAccessAndMobilityDataWithBodyWithResponse request with any body
	CreateOrReplaceAccessAndMobilityDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceAccessAndMobilityDataResponse, error)

	CreateOrReplaceAccessAndMobilityDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body CreateOrReplaceAccessAndMobilityDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceAccessAndMobilityDataResponse, error)

	// DeleteSessionManagementDataWithResponse request
	DeleteSessionManagementDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, reqEditors ...RequestEditorFn) (*DeleteSessionManagementDataResponse, error)

	// QuerySessionManagementDataWithResponse request
	QuerySessionManagementDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, params *QuerySessionManagementDataParams, reqEditors ...RequestEditorFn) (*QuerySessionManagementDataResponse, error)

	// CreateOrReplaceSessionManagementDataWithBodyWithResponse request with any body
	CreateOrReplaceSessionManagementDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceSessionManagementDataResponse, error)

	CreateOrReplaceSessionManagementDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, body CreateOrReplaceSessionManagementDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceSessionManagementDataResponse, error)

	// ReadBdtDataWithResponse request
	ReadBdtDataWithResponse(ctx context.Context, params *ReadBdtDataParams, reqEditors ...RequestEditorFn) (*ReadBdtDataResponse, error)

	// DeleteIndividualBdtDataWithResponse request
	DeleteIndividualBdtDataWithResponse(ctx context.Context, bdtReferenceId string, reqEditors ...RequestEditorFn) (*DeleteIndividualBdtDataResponse, error)

	// ReadIndividualBdtDataWithResponse request
	ReadIndividualBdtDataWithResponse(ctx context.Context, bdtReferenceId string, params *ReadIndividualBdtDataParams, reqEditors ...RequestEditorFn) (*ReadIndividualBdtDataResponse, error)

	// UpdateIndividualBdtDataWithBodyWithResponse request with any body
	UpdateIndividualBdtDataWithBodyWithResponse(ctx context.Context, bdtReferenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIndividualBdtDataResponse, error)

	UpdateIndividualBdtDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, bdtReferenceId string, body UpdateIndividualBdtDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIndividualBdtDataResponse, error)

	// CreateIndividualBdtDataWithBodyWithResponse request with any body
	CreateIndividualBdtDataWithBodyWithResponse(ctx context.Context, bdtReferenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualBdtDataResponse, error)

	CreateIndividualBdtDataWithResponse(ctx context.Context, bdtReferenceId string, body CreateIndividualBdtDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualBdtDataResponse, error)

	// ReadPlmnUePolicySetWithResponse request
	ReadPlmnUePolicySetWithResponse(ctx context.Context, plmnId string, reqEditors ...RequestEditorFn) (*ReadPlmnUePolicySetResponse, error)

	// ReadSponsorConnectivityDataWithResponse request
	ReadSponsorConnectivityDataWithResponse(ctx context.Context, sponsorId string, reqEditors ...RequestEditorFn) (*ReadSponsorConnectivityDataResponse, error)

	// CreateIndividualPolicyDataSubscriptionWithBodyWithResponse request with any body
	CreateIndividualPolicyDataSubscriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualPolicyDataSubscriptionResponse, error)

	CreateIndividualPolicyDataSubscriptionWithResponse(ctx context.Context, body CreateIndividualPolicyDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualPolicyDataSubscriptionResponse, error)

	// DeleteIndividualPolicyDataSubscriptionWithResponse request
	DeleteIndividualPolicyDataSubscriptionWithResponse(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*DeleteIndividualPolicyDataSubscriptionResponse, error)

	// ReplaceIndividualPolicyDataSubscriptionWithBodyWithResponse request with any body
	ReplaceIndividualPolicyDataSubscriptionWithBodyWithResponse(ctx context.Context, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceIndividualPolicyDataSubscriptionResponse, error)

	ReplaceIndividualPolicyDataSubscriptionWithResponse(ctx context.Context, subsId string, body ReplaceIndividualPolicyDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceIndividualPolicyDataSubscriptionResponse, error)

	// ReadAccessAndMobilityPolicyDataWithResponse request
	ReadAccessAndMobilityPolicyDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*ReadAccessAndMobilityPolicyDataResponse, error)

	// ReadOperatorSpecificDataWithResponse request
	ReadOperatorSpecificDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *ReadOperatorSpecificDataParams, reqEditors ...RequestEditorFn) (*ReadOperatorSpecificDataResponse, error)

	// UpdateOperatorSpecificDataWithBodyWithResponse request with any body
	UpdateOperatorSpecificDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOperatorSpecificDataResponse, error)

	UpdateOperatorSpecificDataWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body UpdateOperatorSpecificDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOperatorSpecificDataResponse, error)

	// ReplaceOperatorSpecificDataWithBodyWithResponse request with any body
	ReplaceOperatorSpecificDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceOperatorSpecificDataResponse, error)

	ReplaceOperatorSpecificDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body ReplaceOperatorSpecificDataJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceOperatorSpecificDataResponse, error)

	// ReadSessionManagementPolicyDataWithResponse request
	ReadSessionManagementPolicyDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *ReadSessionManagementPolicyDataParams, reqEditors ...RequestEditorFn) (*ReadSessionManagementPolicyDataResponse, error)

	// UpdateSessionManagementPolicyDataWithBodyWithResponse request with any body
	UpdateSessionManagementPolicyDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSessionManagementPolicyDataResponse, error)

	UpdateSessionManagementPolicyDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body UpdateSessionManagementPolicyDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSessionManagementPolicyDataResponse, error)

	// DeleteUsageMonitoringInformationWithResponse request
	DeleteUsageMonitoringInformationWithResponse(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, reqEditors ...RequestEditorFn) (*DeleteUsageMonitoringInformationResponse, error)

	// ReadUsageMonitoringInformationWithResponse request
	ReadUsageMonitoringInformationWithResponse(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, params *ReadUsageMonitoringInformationParams, reqEditors ...RequestEditorFn) (*ReadUsageMonitoringInformationResponse, error)

	// CreateUsageMonitoringResourceWithBodyWithResponse request with any body
	CreateUsageMonitoringResourceWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUsageMonitoringResourceResponse, error)

	CreateUsageMonitoringResourceWithResponse(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, body CreateUsageMonitoringResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUsageMonitoringResourceResponse, error)

	// ReadUEPolicySetWithResponse request
	ReadUEPolicySetWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *ReadUEPolicySetParams, reqEditors ...RequestEditorFn) (*ReadUEPolicySetResponse, error)

	// UpdateUEPolicySetWithBodyWithResponse request with any body
	UpdateUEPolicySetWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUEPolicySetResponse, error)

	UpdateUEPolicySetWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body UpdateUEPolicySetApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUEPolicySetResponse, error)

	// CreateOrReplaceUEPolicySetWithBodyWithResponse request with any body
	CreateOrReplaceUEPolicySetWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceUEPolicySetResponse, error)

	CreateOrReplaceUEPolicySetWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body CreateOrReplaceUEPolicySetJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceUEPolicySetResponse, error)

	// Query5GVnGroupWithResponse request
	Query5GVnGroupWithResponse(ctx context.Context, params *Query5GVnGroupParams, reqEditors ...RequestEditorFn) (*Query5GVnGroupResponse, error)

	// Query5GVnGroupInternalWithResponse request
	Query5GVnGroupInternalWithResponse(ctx context.Context, params *Query5GVnGroupInternalParams, reqEditors ...RequestEditorFn) (*Query5GVnGroupInternalResponse, error)

	// Query5GVNGroupPPDataWithResponse request
	Query5GVNGroupPPDataWithResponse(ctx context.Context, params *Query5GVNGroupPPDataParams, reqEditors ...RequestEditorFn) (*Query5GVNGroupPPDataResponse, error)

	// Delete5GVnGroupWithResponse request
	Delete5GVnGroupWithResponse(ctx context.Context, externalGroupId externalRef3.ExtGroupId, reqEditors ...RequestEditorFn) (*Delete5GVnGroupResponse, error)

	// Get5GVnGroupConfigurationWithResponse request
	Get5GVnGroupConfigurationWithResponse(ctx context.Context, externalGroupId externalRef3.ExtGroupId, reqEditors ...RequestEditorFn) (*Get5GVnGroupConfigurationResponse, error)

	// Modify5GVnGroupWithBodyWithResponse request with any body
	Modify5GVnGroupWithBodyWithResponse(ctx context.Context, externalGroupId externalRef3.ExtGroupId, params *Modify5GVnGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Modify5GVnGroupResponse, error)

	Modify5GVnGroupWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, externalGroupId externalRef3.ExtGroupId, params *Modify5GVnGroupParams, body Modify5GVnGroupApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*Modify5GVnGroupResponse, error)

	// Create5GVnGroupWithBodyWithResponse request with any body
	Create5GVnGroupWithBodyWithResponse(ctx context.Context, externalGroupId externalRef3.ExtGroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create5GVnGroupResponse, error)

	Create5GVnGroupWithResponse(ctx context.Context, externalGroupId externalRef3.ExtGroupId, body Create5GVnGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*Create5GVnGroupResponse, error)

	// GetGroupIdentifiersWithResponse request
	GetGroupIdentifiersWithResponse(ctx context.Context, params *GetGroupIdentifiersParams, reqEditors ...RequestEditorFn) (*GetGroupIdentifiersResponse, error)

	// QueryGroupEEDataWithResponse request
	QueryGroupEEDataWithResponse(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, params *QueryGroupEEDataParams, reqEditors ...RequestEditorFn) (*QueryGroupEEDataResponse, error)

	// QueryEeGroupSubscriptionsWithResponse request
	QueryEeGroupSubscriptionsWithResponse(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, params *QueryEeGroupSubscriptionsParams, reqEditors ...RequestEditorFn) (*QueryEeGroupSubscriptionsResponse, error)

	// CreateEeGroupSubscriptionsWithBodyWithResponse request with any body
	CreateEeGroupSubscriptionsWithBodyWithResponse(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEeGroupSubscriptionsResponse, error)

	CreateEeGroupSubscriptionsWithResponse(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, body CreateEeGroupSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEeGroupSubscriptionsResponse, error)

	// RemoveEeGroupSubscriptionsWithResponse request
	RemoveEeGroupSubscriptionsWithResponse(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, subsId string, reqEditors ...RequestEditorFn) (*RemoveEeGroupSubscriptionsResponse, error)

	// QueryEeGroupSubscriptionWithResponse request
	QueryEeGroupSubscriptionWithResponse(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, subsId string, reqEditors ...RequestEditorFn) (*QueryEeGroupSubscriptionResponse, error)

	// ModifyEeGroupSubscriptionWithBodyWithResponse request with any body
	ModifyEeGroupSubscriptionWithBodyWithResponse(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, subsId string, params *ModifyEeGroupSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyEeGroupSubscriptionResponse, error)

	ModifyEeGroupSubscriptionWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, subsId string, params *ModifyEeGroupSubscriptionParams, body ModifyEeGroupSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyEeGroupSubscriptionResponse, error)

	// UpdateEeGroupSubscriptionsWithBodyWithResponse request with any body
	UpdateEeGroupSubscriptionsWithBodyWithResponse(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEeGroupSubscriptionsResponse, error)

	UpdateEeGroupSubscriptionsWithResponse(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, subsId string, body UpdateEeGroupSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEeGroupSubscriptionsResponse, error)

	// GetSharedDataWithResponse request
	GetSharedDataWithResponse(ctx context.Context, params *GetSharedDataParams, reqEditors ...RequestEditorFn) (*GetSharedDataResponse, error)

	// GetIndividualSharedDataWithResponse request
	GetIndividualSharedDataWithResponse(ctx context.Context, sharedDataId externalRef3.SharedDataId, params *GetIndividualSharedDataParams, reqEditors ...RequestEditorFn) (*GetIndividualSharedDataResponse, error)

	// RemoveMultipleSubscriptionDataSubscriptionsWithResponse request
	RemoveMultipleSubscriptionDataSubscriptionsWithResponse(ctx context.Context, params *RemoveMultipleSubscriptionDataSubscriptionsParams, reqEditors ...RequestEditorFn) (*RemoveMultipleSubscriptionDataSubscriptionsResponse, error)

	// QuerySubsToNotifyWithResponse request
	QuerySubsToNotifyWithResponse(ctx context.Context, params *QuerySubsToNotifyParams, reqEditors ...RequestEditorFn) (*QuerySubsToNotifyResponse, error)

	// SubscriptionDataSubscriptionsWithBodyWithResponse request with any body
	SubscriptionDataSubscriptionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscriptionDataSubscriptionsResponse, error)

	SubscriptionDataSubscriptionsWithResponse(ctx context.Context, body SubscriptionDataSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscriptionDataSubscriptionsResponse, error)

	// RemovesubscriptionDataSubscriptionsWithResponse request
	RemovesubscriptionDataSubscriptionsWithResponse(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*RemovesubscriptionDataSubscriptionsResponse, error)

	// QuerySubscriptionDataSubscriptionsWithResponse request
	QuerySubscriptionDataSubscriptionsWithResponse(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*QuerySubscriptionDataSubscriptionsResponse, error)

	// ModifysubscriptionDataSubscriptionWithBodyWithResponse request with any body
	ModifysubscriptionDataSubscriptionWithBodyWithResponse(ctx context.Context, subsId string, params *ModifysubscriptionDataSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifysubscriptionDataSubscriptionResponse, error)

	ModifysubscriptionDataSubscriptionWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, subsId string, params *ModifysubscriptionDataSubscriptionParams, body ModifysubscriptionDataSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifysubscriptionDataSubscriptionResponse, error)

	// DeleteAuthenticationStatusWithResponse request
	DeleteAuthenticationStatusWithResponse(ctx context.Context, ueId externalRef0.Supi, reqEditors ...RequestEditorFn) (*DeleteAuthenticationStatusResponse, error)

	// QueryAuthenticationStatusWithResponse request
	QueryAuthenticationStatusWithResponse(ctx context.Context, ueId externalRef0.Supi, params *QueryAuthenticationStatusParams, reqEditors ...RequestEditorFn) (*QueryAuthenticationStatusResponse, error)

	// CreateAuthenticationStatusWithBodyWithResponse request with any body
	CreateAuthenticationStatusWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthenticationStatusResponse, error)

	CreateAuthenticationStatusWithResponse(ctx context.Context, ueId externalRef0.Supi, body CreateAuthenticationStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthenticationStatusResponse, error)

	// DeleteIndividualAuthenticationStatusWithResponse request
	DeleteIndividualAuthenticationStatusWithResponse(ctx context.Context, ueId externalRef0.Supi, servingNetworkName externalRef4.ServingNetworkName, reqEditors ...RequestEditorFn) (*DeleteIndividualAuthenticationStatusResponse, error)

	// QueryIndividualAuthenticationStatusWithResponse request
	QueryIndividualAuthenticationStatusWithResponse(ctx context.Context, ueId externalRef0.Supi, servingNetworkName externalRef4.ServingNetworkName, params *QueryIndividualAuthenticationStatusParams, reqEditors ...RequestEditorFn) (*QueryIndividualAuthenticationStatusResponse, error)

	// CreateIndividualAuthenticationStatusWithBodyWithResponse request with any body
	CreateIndividualAuthenticationStatusWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, servingNetworkName externalRef4.ServingNetworkName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualAuthenticationStatusResponse, error)

	CreateIndividualAuthenticationStatusWithResponse(ctx context.Context, ueId externalRef0.Supi, servingNetworkName externalRef4.ServingNetworkName, body CreateIndividualAuthenticationStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualAuthenticationStatusResponse, error)

	// QueryAuthSubsDataWithResponse request
	QueryAuthSubsDataWithResponse(ctx context.Context, ueId externalRef0.Supi, params *QueryAuthSubsDataParams, reqEditors ...RequestEditorFn) (*QueryAuthSubsDataResponse, error)

	// ModifyAuthenticationSubscriptionWithBodyWithResponse request with any body
	ModifyAuthenticationSubscriptionWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, params *ModifyAuthenticationSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyAuthenticationSubscriptionResponse, error)

	ModifyAuthenticationSubscriptionWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, params *ModifyAuthenticationSubscriptionParams, body ModifyAuthenticationSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyAuthenticationSubscriptionResponse, error)

	// QueryContextDataWithResponse request
	QueryContextDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryContextDataParams, reqEditors ...RequestEditorFn) (*QueryContextDataResponse, error)

	// QueryAmfContext3gppWithResponse request
	QueryAmfContext3gppWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryAmfContext3gppParams, reqEditors ...RequestEditorFn) (*QueryAmfContext3gppResponse, error)

	// AmfContext3gppWithBodyWithResponse request with any body
	AmfContext3gppWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *AmfContext3gppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AmfContext3gppResponse, error)

	AmfContext3gppWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *AmfContext3gppParams, body AmfContext3gppApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*AmfContext3gppResponse, error)

	// CreateAmfContext3gppWithBodyWithResponse request with any body
	CreateAmfContext3gppWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAmfContext3gppResponse, error)

	CreateAmfContext3gppWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body CreateAmfContext3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAmfContext3gppResponse, error)

	// QueryAmfContextNon3gppWithResponse request
	QueryAmfContextNon3gppWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryAmfContextNon3gppParams, reqEditors ...RequestEditorFn) (*QueryAmfContextNon3gppResponse, error)

	// AmfContextNon3gppWithBodyWithResponse request with any body
	AmfContextNon3gppWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *AmfContextNon3gppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AmfContextNon3gppResponse, error)

	AmfContextNon3gppWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *AmfContextNon3gppParams, body AmfContextNon3gppApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*AmfContextNon3gppResponse, error)

	// CreateAmfContextNon3gppWithBodyWithResponse request with any body
	CreateAmfContextNon3gppWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAmfContextNon3gppResponse, error)

	CreateAmfContextNon3gppWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body CreateAmfContextNon3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAmfContextNon3gppResponse, error)

	// QueryeesubscriptionsWithResponse request
	QueryeesubscriptionsWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryeesubscriptionsParams, reqEditors ...RequestEditorFn) (*QueryeesubscriptionsResponse, error)

	// CreateEeSubscriptionsWithBodyWithResponse request with any body
	CreateEeSubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEeSubscriptionsResponse, error)

	CreateEeSubscriptionsWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body CreateEeSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEeSubscriptionsResponse, error)

	// RemoveeeSubscriptionsWithResponse request
	RemoveeeSubscriptionsWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*RemoveeeSubscriptionsResponse, error)

	// QueryeeSubscriptionWithResponse request
	QueryeeSubscriptionWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*QueryeeSubscriptionResponse, error)

	// ModifyEesubscriptionWithBodyWithResponse request with any body
	ModifyEesubscriptionWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyEesubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyEesubscriptionResponse, error)

	ModifyEesubscriptionWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyEesubscriptionParams, body ModifyEesubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyEesubscriptionResponse, error)

	// UpdateEesubscriptionsWithBodyWithResponse request with any body
	UpdateEesubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEesubscriptionsResponse, error)

	UpdateEesubscriptionsWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, body UpdateEesubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEesubscriptionsResponse, error)

	// RemoveAmfSubscriptionsInfoWithResponse request
	RemoveAmfSubscriptionsInfoWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*RemoveAmfSubscriptionsInfoResponse, error)

	// GetAmfSubscriptionInfoWithResponse request
	GetAmfSubscriptionInfoWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*GetAmfSubscriptionInfoResponse, error)

	// ModifyAmfSubscriptionInfoWithBodyWithResponse request with any body
	ModifyAmfSubscriptionInfoWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyAmfSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyAmfSubscriptionInfoResponse, error)

	ModifyAmfSubscriptionInfoWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyAmfSubscriptionInfoParams, body ModifyAmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyAmfSubscriptionInfoResponse, error)

	// CreateAMFSubscriptionsWithBodyWithResponse request with any body
	CreateAMFSubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAMFSubscriptionsResponse, error)

	CreateAMFSubscriptionsWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, body CreateAMFSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAMFSubscriptionsResponse, error)

	// RemoveHssSubscriptionsInfoWithResponse request
	RemoveHssSubscriptionsInfoWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*RemoveHssSubscriptionsInfoResponse, error)

	// GetHssSubscriptionInfoWithResponse request
	GetHssSubscriptionInfoWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*GetHssSubscriptionInfoResponse, error)

	// ModifyHssSubscriptionInfoWithBodyWithResponse request with any body
	ModifyHssSubscriptionInfoWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyHssSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyHssSubscriptionInfoResponse, error)

	ModifyHssSubscriptionInfoWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyHssSubscriptionInfoParams, body ModifyHssSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyHssSubscriptionInfoResponse, error)

	// CreateHSSSubscriptionsWithBodyWithResponse request with any body
	CreateHSSSubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHSSSubscriptionsResponse, error)

	CreateHSSSubscriptionsWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, body CreateHSSSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHSSSubscriptionsResponse, error)

	// RemoveSmfSubscriptionsInfoWithResponse request
	RemoveSmfSubscriptionsInfoWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*RemoveSmfSubscriptionsInfoResponse, error)

	// GetSmfSubscriptionInfoWithResponse request
	GetSmfSubscriptionInfoWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*GetSmfSubscriptionInfoResponse, error)

	// ModifySmfSubscriptionInfoWithBodyWithResponse request with any body
	ModifySmfSubscriptionInfoWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifySmfSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifySmfSubscriptionInfoResponse, error)

	ModifySmfSubscriptionInfoWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifySmfSubscriptionInfoParams, body ModifySmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifySmfSubscriptionInfoResponse, error)

	// CreateSMFSubscriptionsWithBodyWithResponse request with any body
	CreateSMFSubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSMFSubscriptionsResponse, error)

	CreateSMFSubscriptionsWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, body CreateSMFSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSMFSubscriptionsResponse, error)

	// DeleteIpSmGwContextWithResponse request
	DeleteIpSmGwContextWithResponse(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*DeleteIpSmGwContextResponse, error)

	// QueryIpSmGwContextWithResponse request
	QueryIpSmGwContextWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryIpSmGwContextParams, reqEditors ...RequestEditorFn) (*QueryIpSmGwContextResponse, error)

	// ModifyIpSmGwContextWithBodyWithResponse request with any body
	ModifyIpSmGwContextWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyIpSmGwContextResponse, error)

	ModifyIpSmGwContextWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body ModifyIpSmGwContextApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyIpSmGwContextResponse, error)

	// CreateIpSmGwContextWithBodyWithResponse request with any body
	CreateIpSmGwContextWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIpSmGwContextResponse, error)

	CreateIpSmGwContextWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body CreateIpSmGwContextJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIpSmGwContextResponse, error)

	// QueryUeLocationWithResponse request
	QueryUeLocationWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryUeLocationParams, reqEditors ...RequestEditorFn) (*QueryUeLocationResponse, error)

	// DeleteMessageWaitingDataWithResponse request
	DeleteMessageWaitingDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*DeleteMessageWaitingDataResponse, error)

	// QueryMessageWaitingDataWithResponse request
	QueryMessageWaitingDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryMessageWaitingDataParams, reqEditors ...RequestEditorFn) (*QueryMessageWaitingDataResponse, error)

	// ModifyMessageWaitingDataWithBodyWithResponse request with any body
	ModifyMessageWaitingDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyMessageWaitingDataResponse, error)

	ModifyMessageWaitingDataWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body ModifyMessageWaitingDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyMessageWaitingDataResponse, error)

	// CreateMessageWaitingDataWithBodyWithResponse request with any body
	CreateMessageWaitingDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMessageWaitingDataResponse, error)

	CreateMessageWaitingDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body CreateMessageWaitingDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMessageWaitingDataResponse, error)

	// QuerysdmsubscriptionsWithResponse request
	QuerysdmsubscriptionsWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QuerysdmsubscriptionsParams, reqEditors ...RequestEditorFn) (*QuerysdmsubscriptionsResponse, error)

	// CreateSdmSubscriptionsWithBodyWithResponse request with any body
	CreateSdmSubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSdmSubscriptionsResponse, error)

	CreateSdmSubscriptionsWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body CreateSdmSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSdmSubscriptionsResponse, error)

	// RemovesdmSubscriptionsWithResponse request
	RemovesdmSubscriptionsWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*RemovesdmSubscriptionsResponse, error)

	// QuerysdmSubscriptionWithResponse request
	QuerysdmSubscriptionWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*QuerysdmSubscriptionResponse, error)

	// ModifysdmSubscriptionWithBodyWithResponse request with any body
	ModifysdmSubscriptionWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifysdmSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifysdmSubscriptionResponse, error)

	ModifysdmSubscriptionWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifysdmSubscriptionParams, body ModifysdmSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifysdmSubscriptionResponse, error)

	// UpdatesdmsubscriptionsWithBodyWithResponse request with any body
	UpdatesdmsubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatesdmsubscriptionsResponse, error)

	UpdatesdmsubscriptionsWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, body UpdatesdmsubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatesdmsubscriptionsResponse, error)

	// RemoveHssSDMSubscriptionsInfoWithResponse request
	RemoveHssSDMSubscriptionsInfoWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*RemoveHssSDMSubscriptionsInfoResponse, error)

	// GetHssSDMSubscriptionInfoWithResponse request
	GetHssSDMSubscriptionInfoWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*GetHssSDMSubscriptionInfoResponse, error)

	// ModifyHssSDMSubscriptionInfoWithBodyWithResponse request with any body
	ModifyHssSDMSubscriptionInfoWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyHssSDMSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyHssSDMSubscriptionInfoResponse, error)

	ModifyHssSDMSubscriptionInfoWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyHssSDMSubscriptionInfoParams, body ModifyHssSDMSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyHssSDMSubscriptionInfoResponse, error)

	// CreateHSSSDMSubscriptionsWithBodyWithResponse request with any body
	CreateHSSSDMSubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHSSSDMSubscriptionsResponse, error)

	CreateHSSSDMSubscriptionsWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, body CreateHSSSDMSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHSSSDMSubscriptionsResponse, error)

	// QuerySmfRegListWithResponse request
	QuerySmfRegListWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QuerySmfRegListParams, reqEditors ...RequestEditorFn) (*QuerySmfRegListResponse, error)

	// DeleteSmfRegistrationWithResponse request
	DeleteSmfRegistrationWithResponse(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, reqEditors ...RequestEditorFn) (*DeleteSmfRegistrationResponse, error)

	// QuerySmfRegistrationWithResponse request
	QuerySmfRegistrationWithResponse(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, params *QuerySmfRegistrationParams, reqEditors ...RequestEditorFn) (*QuerySmfRegistrationResponse, error)

	// CreateOrUpdateSmfRegistrationWithBodyWithResponse request with any body
	CreateOrUpdateSmfRegistrationWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateSmfRegistrationResponse, error)

	CreateOrUpdateSmfRegistrationWithResponse(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, body CreateOrUpdateSmfRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateSmfRegistrationResponse, error)

	// DeleteSmsfContext3gppWithResponse request
	DeleteSmsfContext3gppWithResponse(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*DeleteSmsfContext3gppResponse, error)

	// QuerySmsfContext3gppWithResponse request
	QuerySmsfContext3gppWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QuerySmsfContext3gppParams, reqEditors ...RequestEditorFn) (*QuerySmsfContext3gppResponse, error)

	// CreateSmsfContext3gppWithBodyWithResponse request with any body
	CreateSmsfContext3gppWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSmsfContext3gppResponse, error)

	CreateSmsfContext3gppWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body CreateSmsfContext3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSmsfContext3gppResponse, error)

	// DeleteSmsfContextNon3gppWithResponse request
	DeleteSmsfContextNon3gppWithResponse(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*DeleteSmsfContextNon3gppResponse, error)

	// QuerySmsfContextNon3gppWithResponse request
	QuerySmsfContextNon3gppWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QuerySmsfContextNon3gppParams, reqEditors ...RequestEditorFn) (*QuerySmsfContextNon3gppResponse, error)

	// CreateSmsfContextNon3gppWithBodyWithResponse request with any body
	CreateSmsfContextNon3gppWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSmsfContextNon3gppResponse, error)

	CreateSmsfContextNon3gppWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body CreateSmsfContextNon3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSmsfContextNon3gppResponse, error)

	// QueryCoverageRestrictionDataWithResponse request
	QueryCoverageRestrictionDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryCoverageRestrictionDataParams, reqEditors ...RequestEditorFn) (*QueryCoverageRestrictionDataResponse, error)

	// QueryEEDataWithResponse request
	QueryEEDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryEEDataParams, reqEditors ...RequestEditorFn) (*QueryEEDataResponse, error)

	// GetIdentityDataWithResponse request
	GetIdentityDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *GetIdentityDataParams, reqEditors ...RequestEditorFn) (*GetIdentityDataResponse, error)

	// QueryLcsMoDataWithResponse request
	QueryLcsMoDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryLcsMoDataParams, reqEditors ...RequestEditorFn) (*QueryLcsMoDataResponse, error)

	// QueryLcsPrivacyDataWithResponse request
	QueryLcsPrivacyDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryLcsPrivacyDataParams, reqEditors ...RequestEditorFn) (*QueryLcsPrivacyDataResponse, error)

	// GetNiddAuDataWithResponse request
	GetNiddAuDataWithResponse(ctx context.Context, ueId string, params *GetNiddAuDataParams, reqEditors ...RequestEditorFn) (*GetNiddAuDataResponse, error)

	// GetOdbDataWithResponse request
	GetOdbDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*GetOdbDataResponse, error)

	// QueryOperSpecDataWithResponse request
	QueryOperSpecDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryOperSpecDataParams, reqEditors ...RequestEditorFn) (*QueryOperSpecDataResponse, error)

	// ModifyOperSpecDataWithBodyWithResponse request with any body
	ModifyOperSpecDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *ModifyOperSpecDataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyOperSpecDataResponse, error)

	ModifyOperSpecDataWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *ModifyOperSpecDataParams, body ModifyOperSpecDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyOperSpecDataResponse, error)

	// GetppDataWithResponse request
	GetppDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *GetppDataParams, reqEditors ...RequestEditorFn) (*GetppDataResponse, error)

	// ModifyPpDataWithBodyWithResponse request with any body
	ModifyPpDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *ModifyPpDataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyPpDataResponse, error)

	ModifyPpDataWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *ModifyPpDataParams, body ModifyPpDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyPpDataResponse, error)

	// QueryPPDataWithResponse request
	QueryPPDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryPPDataParams, reqEditors ...RequestEditorFn) (*QueryPPDataResponse, error)

	// QueryAuthSoRWithResponse request
	QueryAuthSoRWithResponse(ctx context.Context, ueId externalRef0.Supi, params *QueryAuthSoRParams, reqEditors ...RequestEditorFn) (*QueryAuthSoRResponse, error)

	// CreateAuthenticationSoRWithBodyWithResponse request with any body
	CreateAuthenticationSoRWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, params *CreateAuthenticationSoRParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthenticationSoRResponse, error)

	CreateAuthenticationSoRWithResponse(ctx context.Context, ueId externalRef0.Supi, params *CreateAuthenticationSoRParams, body CreateAuthenticationSoRJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthenticationSoRResponse, error)

	// QueryCagAckWithResponse request
	QueryCagAckWithResponse(ctx context.Context, ueId externalRef0.Supi, params *QueryCagAckParams, reqEditors ...RequestEditorFn) (*QueryCagAckResponse, error)

	// CreateCagUpdateAckWithBodyWithResponse request with any body
	CreateCagUpdateAckWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, params *CreateCagUpdateAckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCagUpdateAckResponse, error)

	CreateCagUpdateAckWithResponse(ctx context.Context, ueId externalRef0.Supi, params *CreateCagUpdateAckParams, body CreateCagUpdateAckJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCagUpdateAckResponse, error)

	// QueryNssaiAckWithResponse request
	QueryNssaiAckWithResponse(ctx context.Context, ueId externalRef0.Supi, params *QueryNssaiAckParams, reqEditors ...RequestEditorFn) (*QueryNssaiAckResponse, error)

	// CreateOrUpdateNssaiAckWithBodyWithResponse request with any body
	CreateOrUpdateNssaiAckWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, params *CreateOrUpdateNssaiAckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateNssaiAckResponse, error)

	CreateOrUpdateNssaiAckWithResponse(ctx context.Context, ueId externalRef0.Supi, params *CreateOrUpdateNssaiAckParams, body CreateOrUpdateNssaiAckJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateNssaiAckResponse, error)

	// QueryAuthUPUWithResponse request
	QueryAuthUPUWithResponse(ctx context.Context, ueId externalRef0.Supi, params *QueryAuthUPUParams, reqEditors ...RequestEditorFn) (*QueryAuthUPUResponse, error)

	// CreateAuthenticationUPUWithBodyWithResponse request with any body
	CreateAuthenticationUPUWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, params *CreateAuthenticationUPUParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthenticationUPUResponse, error)

	CreateAuthenticationUPUWithResponse(ctx context.Context, ueId externalRef0.Supi, params *CreateAuthenticationUPUParams, body CreateAuthenticationUPUJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthenticationUPUResponse, error)

	// QueryV2xDataWithResponse request
	QueryV2xDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryV2xDataParams, reqEditors ...RequestEditorFn) (*QueryV2xDataResponse, error)

	// QueryProvisionedDataWithResponse request
	QueryProvisionedDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QueryProvisionedDataParams, reqEditors ...RequestEditorFn) (*QueryProvisionedDataResponse, error)

	// QueryAmDataWithResponse request
	QueryAmDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QueryAmDataParams, reqEditors ...RequestEditorFn) (*QueryAmDataResponse, error)

	// QueryLcsBcaDataWithResponse request
	QueryLcsBcaDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QueryLcsBcaDataParams, reqEditors ...RequestEditorFn) (*QueryLcsBcaDataResponse, error)

	// QuerySmDataWithResponse request
	QuerySmDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QuerySmDataParams, reqEditors ...RequestEditorFn) (*QuerySmDataResponse, error)

	// QuerySmfSelectDataWithResponse request
	QuerySmfSelectDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QuerySmfSelectDataParams, reqEditors ...RequestEditorFn) (*QuerySmfSelectDataResponse, error)

	// QuerySmsDataWithResponse request
	QuerySmsDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QuerySmsDataParams, reqEditors ...RequestEditorFn) (*QuerySmsDataResponse, error)

	// QuerySmsMngDataWithResponse request
	QuerySmsMngDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QuerySmsMngDataParams, reqEditors ...RequestEditorFn) (*QuerySmsMngDataResponse, error)

	// QueryTraceDataWithResponse request
	QueryTraceDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QueryTraceDataParams, reqEditors ...RequestEditorFn) (*QueryTraceDataResponse, error)
}

type ReadBdtPolicyDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]externalRef5.BdtPolicyData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadBdtPolicyDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadBdtPolicyDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndividualAppliedBdtPolicyDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteIndividualAppliedBdtPolicyDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndividualAppliedBdtPolicyDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIndividualAppliedBdtPolicyDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef5.BdtPolicyData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r UpdateIndividualAppliedBdtPolicyDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIndividualAppliedBdtPolicyDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIndividualAppliedBdtPolicyDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef5.BdtPolicyData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateIndividualAppliedBdtPolicyDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIndividualAppliedBdtPolicyDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadInfluenceDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]externalRef5.TrafficInfluData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadInfluenceDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadInfluenceDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadInfluenceDataSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]externalRef5.TrafficInfluSub
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadInfluenceDataSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadInfluenceDataSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIndividualInfluenceDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef5.TrafficInfluSub
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateIndividualInfluenceDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIndividualInfluenceDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndividualInfluenceDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteIndividualInfluenceDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndividualInfluenceDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadIndividualInfluenceDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef5.TrafficInfluSub
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadIndividualInfluenceDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadIndividualInfluenceDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceIndividualInfluenceDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef5.TrafficInfluSub
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReplaceIndividualInfluenceDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceIndividualInfluenceDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndividualInfluenceDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteIndividualInfluenceDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndividualInfluenceDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIndividualInfluenceDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef5.TrafficInfluData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r UpdateIndividualInfluenceDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIndividualInfluenceDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrReplaceIndividualInfluenceDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef5.TrafficInfluData
	JSON201                       *externalRef5.TrafficInfluData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateOrReplaceIndividualInfluenceDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrReplaceIndividualInfluenceDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadIPTVCongifurationDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]externalRef5.IptvConfigData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadIPTVCongifurationDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadIPTVCongifurationDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndividualIPTVConfigurationDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteIndividualIPTVConfigurationDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndividualIPTVConfigurationDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PartialReplaceIndividualIPTVConfigurationDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef5.IptvConfigData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r PartialReplaceIndividualIPTVConfigurationDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PartialReplaceIndividualIPTVConfigurationDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrReplaceIndividualIPTVConfigurationDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef5.IptvConfigData
	JSON201                       *externalRef5.IptvConfigData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateOrReplaceIndividualIPTVConfigurationDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrReplaceIndividualIPTVConfigurationDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadPFDDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]externalRef5.PfdDataForAppExt
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadPFDDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadPFDDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndividualPFDDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteIndividualPFDDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndividualPFDDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadIndividualPFDDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef5.PfdDataForAppExt
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadIndividualPFDDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadIndividualPFDDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrReplaceIndividualPFDDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef5.PfdDataForAppExt
	JSON201                       *externalRef5.PfdDataForAppExt
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateOrReplaceIndividualPFDDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrReplaceIndividualPFDDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadServiceParameterDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]externalRef5.ServiceParameterData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadServiceParameterDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadServiceParameterDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndividualServiceParameterDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteIndividualServiceParameterDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndividualServiceParameterDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIndividualServiceParameterDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef5.ServiceParameterData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r UpdateIndividualServiceParameterDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIndividualServiceParameterDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrReplaceServiceParameterDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef5.ServiceParameterData
	JSON201                       *externalRef5.ServiceParameterData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateOrReplaceServiceParameterDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrReplaceServiceParameterDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadApplicationDataChangeSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]externalRef5.ApplicationDataSubs
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadApplicationDataChangeSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadApplicationDataChangeSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIndividualApplicationDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef5.ApplicationDataSubs
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateIndividualApplicationDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIndividualApplicationDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndividualApplicationDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteIndividualApplicationDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndividualApplicationDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadIndividualApplicationDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef5.ApplicationDataSubs
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadIndividualApplicationDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadIndividualApplicationDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceIndividualApplicationDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef5.ApplicationDataSubs
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReplaceIndividualApplicationDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceIndividualApplicationDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIndividualExposureDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef6.ExposureDataSubscription
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateIndividualExposureDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIndividualExposureDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndividualExposureDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteIndividualExposureDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndividualExposureDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceIndividualExposureDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef6.ExposureDataSubscription
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReplaceIndividualExposureDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceIndividualExposureDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAccessAndMobilityDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteAccessAndMobilityDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAccessAndMobilityDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryAccessAndMobilityDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef6.AccessAndMobilityData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryAccessAndMobilityDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryAccessAndMobilityDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAccessAndMobilityDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r UpdateAccessAndMobilityDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAccessAndMobilityDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrReplaceAccessAndMobilityDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef6.AccessAndMobilityData
	JSON201                       *externalRef6.AccessAndMobilityData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateOrReplaceAccessAndMobilityDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrReplaceAccessAndMobilityDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSessionManagementDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteSessionManagementDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSessionManagementDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerySessionManagementDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef6.PduSessionManagementData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QuerySessionManagementDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerySessionManagementDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrReplaceSessionManagementDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef6.AccessAndMobilityData
	JSON201                       *externalRef6.PduSessionManagementData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateOrReplaceSessionManagementDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrReplaceSessionManagementDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadBdtDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]externalRef7.BdtData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadBdtDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadBdtDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndividualBdtDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteIndividualBdtDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndividualBdtDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadIndividualBdtDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef7.BdtData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadIndividualBdtDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadIndividualBdtDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIndividualBdtDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef7.BdtData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r UpdateIndividualBdtDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIndividualBdtDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIndividualBdtDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef7.BdtData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateIndividualBdtDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIndividualBdtDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadPlmnUePolicySetResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef7.UePolicySet
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON412     *externalRef0.N412
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadPlmnUePolicySetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadPlmnUePolicySetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadSponsorConnectivityDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef7.SponsorConnectivityData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadSponsorConnectivityDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadSponsorConnectivityDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIndividualPolicyDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef7.PolicyDataSubscription
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateIndividualPolicyDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIndividualPolicyDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndividualPolicyDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteIndividualPolicyDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndividualPolicyDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceIndividualPolicyDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef7.PolicyDataSubscription
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReplaceIndividualPolicyDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceIndividualPolicyDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadAccessAndMobilityPolicyDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef7.AmPolicyData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadAccessAndMobilityPolicyDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadAccessAndMobilityPolicyDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadOperatorSpecificDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *map[string]interface{}
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadOperatorSpecificDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadOperatorSpecificDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOperatorSpecificDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.PatchResult
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r UpdateOperatorSpecificDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOperatorSpecificDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceOperatorSpecificDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *map[string]interface{}
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReplaceOperatorSpecificDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceOperatorSpecificDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadSessionManagementPolicyDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef7.SmPolicyData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadSessionManagementPolicyDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadSessionManagementPolicyDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSessionManagementPolicyDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef7.SmPolicyData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r UpdateSessionManagementPolicyDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSessionManagementPolicyDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUsageMonitoringInformationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteUsageMonitoringInformationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUsageMonitoringInformationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadUsageMonitoringInformationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef7.UsageMonData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadUsageMonitoringInformationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadUsageMonitoringInformationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUsageMonitoringResourceResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef7.UsageMonData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateUsageMonitoringResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUsageMonitoringResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadUEPolicySetResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef7.UePolicySet
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadUEPolicySetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadUEPolicySetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUEPolicySetResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r UpdateUEPolicySetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUEPolicySetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrReplaceUEPolicySetResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef7.UePolicySet
	JSON201                       *externalRef7.UePolicySet
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateOrReplaceUEPolicySetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrReplaceUEPolicySetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Query5GVnGroupResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *map[string]externalRef2.N5GVnGroupConfiguration
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r Query5GVnGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Query5GVnGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Query5GVnGroupInternalResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *map[string]externalRef2.N5GVnGroupConfiguration
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r Query5GVnGroupInternalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Query5GVnGroupInternalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Query5GVNGroupPPDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.Pp5gVnGroupProfileData
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r Query5GVNGroupPPDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Query5GVNGroupPPDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Delete5GVnGroupResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r Delete5GVnGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Delete5GVnGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get5GVnGroupConfigurationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef2.N5GVnGroupConfiguration
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r Get5GVnGroupConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get5GVnGroupConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Modify5GVnGroupResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.PatchResult
	ApplicationproblemJSON403     *externalRef0.ProblemDetails
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r Modify5GVnGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Modify5GVnGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Create5GVnGroupResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef2.N5GVnGroupConfiguration
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r Create5GVnGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Create5GVnGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupIdentifiersResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef3.GroupIdentifiers
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r GetGroupIdentifiersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupIdentifiersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryGroupEEDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.EeGroupProfileData
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryGroupEEDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryGroupEEDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryEeGroupSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]externalRef8.EeSubscription
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryEeGroupSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryEeGroupSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEeGroupSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef8.EeSubscription
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateEeGroupSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEeGroupSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveEeGroupSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r RemoveEeGroupSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveEeGroupSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryEeGroupSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]externalRef8.EeSubscription
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryEeGroupSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryEeGroupSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyEeGroupSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.PatchResult
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ModifyEeGroupSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyEeGroupSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEeGroupSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON404     *externalRef0.ProblemDetails
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r UpdateEeGroupSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEeGroupSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSharedDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]externalRef3.SharedData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r GetSharedDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSharedDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndividualSharedDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef3.SharedData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r GetIndividualSharedDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndividualSharedDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveMultipleSubscriptionDataSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r RemoveMultipleSubscriptionDataSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveMultipleSubscriptionDataSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerySubsToNotifyResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]externalRef8.SubscriptionDataSubscriptions
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QuerySubsToNotifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerySubsToNotifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubscriptionDataSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef8.SubscriptionDataSubscriptions
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r SubscriptionDataSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubscriptionDataSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemovesubscriptionDataSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r RemovesubscriptionDataSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemovesubscriptionDataSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerySubscriptionDataSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]externalRef8.SubscriptionDataSubscriptions
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QuerySubscriptionDataSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerySubscriptionDataSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifysubscriptionDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.PatchResult
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ModifysubscriptionDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifysubscriptionDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAuthenticationStatusResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteAuthenticationStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAuthenticationStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryAuthenticationStatusResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef4.AuthEvent
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryAuthenticationStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryAuthenticationStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAuthenticationStatusResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateAuthenticationStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAuthenticationStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndividualAuthenticationStatusResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteIndividualAuthenticationStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndividualAuthenticationStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryIndividualAuthenticationStatusResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef4.AuthEvent
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryIndividualAuthenticationStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryIndividualAuthenticationStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIndividualAuthenticationStatusResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateIndividualAuthenticationStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIndividualAuthenticationStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryAuthSubsDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.AuthenticationSubscription
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryAuthSubsDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryAuthSubsDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyAuthenticationSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.PatchResult
	ApplicationproblemJSON403     *externalRef0.ProblemDetails
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ModifyAuthenticationSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyAuthenticationSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryContextDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.ContextDataSets
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryContextDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryContextDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryAmfContext3gppResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.Amf3GppAccessRegistration
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryAmfContext3gppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryAmfContext3gppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AmfContext3gppResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.PatchResult
	ApplicationproblemJSON403     *externalRef0.ProblemDetails
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r AmfContext3gppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AmfContext3gppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAmfContext3gppResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef8.Amf3GppAccessRegistration
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateAmfContext3gppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAmfContext3gppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryAmfContextNon3gppResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.AmfNon3GppAccessRegistration
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryAmfContextNon3gppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryAmfContextNon3gppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AmfContextNon3gppResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.PatchResult
	ApplicationproblemJSON403     *externalRef0.ProblemDetails
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r AmfContextNon3gppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AmfContextNon3gppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAmfContextNon3gppResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef8.Amf3GppAccessRegistration
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateAmfContextNon3gppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAmfContextNon3gppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryeesubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]externalRef8.EeSubscription
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryeesubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryeesubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEeSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef8.EeSubscription
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateEeSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEeSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveeeSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r RemoveeeSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveeeSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryeeSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]externalRef8.EeSubscription
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryeeSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryeeSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyEesubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.PatchResult
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ModifyEesubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyEesubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEesubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON404     *externalRef0.ProblemDetails
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r UpdateEesubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEesubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveAmfSubscriptionsInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r RemoveAmfSubscriptionsInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveAmfSubscriptionsInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAmfSubscriptionInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]externalRef8.AmfSubscriptionInfo
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r GetAmfSubscriptionInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAmfSubscriptionInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyAmfSubscriptionInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.PatchResult
	ApplicationproblemJSON403     *externalRef0.ProblemDetails
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ModifyAmfSubscriptionInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyAmfSubscriptionInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAMFSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateAMFSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAMFSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveHssSubscriptionsInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r RemoveHssSubscriptionsInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveHssSubscriptionsInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHssSubscriptionInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.SmfSubscriptionInfo
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r GetHssSubscriptionInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHssSubscriptionInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyHssSubscriptionInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.PatchResult
	ApplicationproblemJSON403     *externalRef0.ProblemDetails
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ModifyHssSubscriptionInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyHssSubscriptionInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHSSSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateHSSSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHSSSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveSmfSubscriptionsInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r RemoveSmfSubscriptionsInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveSmfSubscriptionsInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmfSubscriptionInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.SmfSubscriptionInfo
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r GetSmfSubscriptionInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmfSubscriptionInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifySmfSubscriptionInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.PatchResult
	ApplicationproblemJSON403     *externalRef0.ProblemDetails
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ModifySmfSubscriptionInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifySmfSubscriptionInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSMFSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateSMFSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSMFSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIpSmGwContextResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteIpSmGwContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIpSmGwContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryIpSmGwContextResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.IpSmGwRegistration
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryIpSmGwContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryIpSmGwContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyIpSmGwContextResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ModifyIpSmGwContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyIpSmGwContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIpSmGwContextResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateIpSmGwContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIpSmGwContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryUeLocationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.LocationInfo
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryUeLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryUeLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMessageWaitingDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteMessageWaitingDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMessageWaitingDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryMessageWaitingDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.MessageWaitingData
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryMessageWaitingDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryMessageWaitingDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyMessageWaitingDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ModifyMessageWaitingDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyMessageWaitingDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMessageWaitingDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r CreateMessageWaitingDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMessageWaitingDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerysdmsubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]externalRef8.SdmSubscription
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QuerysdmsubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerysdmsubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSdmSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef8.SdmSubscription
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateSdmSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSdmSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemovesdmSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r RemovesdmSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemovesdmSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerysdmSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]externalRef8.SdmSubscription
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QuerysdmSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerysdmSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifysdmSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.PatchResult
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ModifysdmSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifysdmSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatesdmsubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON404     *externalRef0.ProblemDetails
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r UpdatesdmsubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatesdmsubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveHssSDMSubscriptionsInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r RemoveHssSDMSubscriptionsInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveHssSDMSubscriptionsInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHssSDMSubscriptionInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.SmfSubscriptionInfo
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r GetHssSDMSubscriptionInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHssSDMSubscriptionInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyHssSDMSubscriptionInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.PatchResult
	ApplicationproblemJSON403     *externalRef0.ProblemDetails
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ModifyHssSDMSubscriptionInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyHssSDMSubscriptionInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHSSSDMSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateHSSSDMSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHSSSDMSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerySmfRegListResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.SmfRegList
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QuerySmfRegListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerySmfRegListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSmfRegistrationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteSmfRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSmfRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerySmfRegistrationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.SmfRegistration
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QuerySmfRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerySmfRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrUpdateSmfRegistrationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef8.SmfRegistration
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateOrUpdateSmfRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrUpdateSmfRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSmsfContext3gppResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteSmsfContext3gppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSmsfContext3gppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerySmsfContext3gppResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.SmsfRegistration
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QuerySmsfContext3gppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerySmsfContext3gppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSmsfContext3gppResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef8.SmsfRegistration
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateSmsfContext3gppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSmsfContext3gppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSmsfContextNon3gppResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteSmsfContextNon3gppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSmsfContextNon3gppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerySmsfContextNon3gppResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.SmsfRegistration
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QuerySmsfContextNon3gppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerySmsfContextNon3gppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSmsfContextNon3gppResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef8.SmsfRegistration
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateSmsfContextNon3gppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSmsfContextNon3gppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryCoverageRestrictionDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.EnhancedCoverageRestrictionData
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryCoverageRestrictionDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryCoverageRestrictionDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryEEDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.EeProfileData
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryEEDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryEEDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdentityDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.IdentityData
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r GetIdentityDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdentityDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryLcsMoDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.LcsMoData
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryLcsMoDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryLcsMoDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryLcsPrivacyDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.LcsPrivacyData
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryLcsPrivacyDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryLcsPrivacyDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNiddAuDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.AuthorizationData
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r GetNiddAuDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNiddAuDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOdbDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.OdbData
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r GetOdbDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOdbDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryOperSpecDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *map[string]externalRef8.OperatorSpecificDataContainer
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryOperSpecDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryOperSpecDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyOperSpecDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.PatchResult
	ApplicationproblemJSON403     *externalRef0.ProblemDetails
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ModifyOperSpecDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyOperSpecDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetppDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.PpData
	ApplicationproblemJSON403     *externalRef0.ProblemDetails
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r GetppDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetppDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyPpDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.PatchResult
	ApplicationproblemJSON403     *externalRef0.ProblemDetails
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ModifyPpDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyPpDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryPPDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.PpProfileData
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryPPDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryPPDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryAuthSoRResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.SorData
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryAuthSoRResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryAuthSoRResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAuthenticationSoRResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateAuthenticationSoRResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAuthenticationSoRResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryCagAckResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.CagAckData
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryCagAckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryCagAckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCagUpdateAckResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateCagUpdateAckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCagUpdateAckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryNssaiAckResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.NssaiAckData
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryNssaiAckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryNssaiAckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrUpdateNssaiAckResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateOrUpdateNssaiAckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrUpdateNssaiAckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryAuthUPUResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.UpuData
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryAuthUPUResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryAuthUPUResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAuthenticationUPUResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateAuthenticationUPUResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAuthenticationUPUResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryV2xDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.V2xSubscriptionData
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryV2xDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryV2xDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryProvisionedDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.ProvisionedDataSets
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryProvisionedDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryProvisionedDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryAmDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.AccessAndMobilitySubscriptionData
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryAmDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryAmDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryLcsBcaDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.LcsBroadcastAssistanceTypesData
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r QueryLcsBcaDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryLcsBcaDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerySmDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]externalRef8.SessionManagementSubscriptionData
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QuerySmDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerySmDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerySmfSelectDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.SmfSelectionSubscriptionData
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QuerySmfSelectDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerySmfSelectDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerySmsDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.SmsSubscriptionData
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QuerySmsDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerySmsDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerySmsMngDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.SmsManagementSubscriptionData
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QuerySmsMngDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerySmsMngDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryTraceDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.TraceData
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryTraceDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryTraceDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ReadBdtPolicyDataWithResponse request returning *ReadBdtPolicyDataResponse
func (c *ClientWithResponses) ReadBdtPolicyDataWithResponse(ctx context.Context, params *ReadBdtPolicyDataParams, reqEditors ...RequestEditorFn) (*ReadBdtPolicyDataResponse, error) {
	rsp, err := c.ReadBdtPolicyData(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadBdtPolicyDataResponse(rsp)
}

// DeleteIndividualAppliedBdtPolicyDataWithResponse request returning *DeleteIndividualAppliedBdtPolicyDataResponse
func (c *ClientWithResponses) DeleteIndividualAppliedBdtPolicyDataWithResponse(ctx context.Context, bdtPolicyId string, reqEditors ...RequestEditorFn) (*DeleteIndividualAppliedBdtPolicyDataResponse, error) {
	rsp, err := c.DeleteIndividualAppliedBdtPolicyData(ctx, bdtPolicyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndividualAppliedBdtPolicyDataResponse(rsp)
}

// UpdateIndividualAppliedBdtPolicyDataWithBodyWithResponse request with arbitrary body returning *UpdateIndividualAppliedBdtPolicyDataResponse
func (c *ClientWithResponses) UpdateIndividualAppliedBdtPolicyDataWithBodyWithResponse(ctx context.Context, bdtPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIndividualAppliedBdtPolicyDataResponse, error) {
	rsp, err := c.UpdateIndividualAppliedBdtPolicyDataWithBody(ctx, bdtPolicyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIndividualAppliedBdtPolicyDataResponse(rsp)
}

func (c *ClientWithResponses) UpdateIndividualAppliedBdtPolicyDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, bdtPolicyId string, body UpdateIndividualAppliedBdtPolicyDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIndividualAppliedBdtPolicyDataResponse, error) {
	rsp, err := c.UpdateIndividualAppliedBdtPolicyDataWithApplicationMergePatchPlusJSONBody(ctx, bdtPolicyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIndividualAppliedBdtPolicyDataResponse(rsp)
}

// CreateIndividualAppliedBdtPolicyDataWithBodyWithResponse request with arbitrary body returning *CreateIndividualAppliedBdtPolicyDataResponse
func (c *ClientWithResponses) CreateIndividualAppliedBdtPolicyDataWithBodyWithResponse(ctx context.Context, bdtPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualAppliedBdtPolicyDataResponse, error) {
	rsp, err := c.CreateIndividualAppliedBdtPolicyDataWithBody(ctx, bdtPolicyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualAppliedBdtPolicyDataResponse(rsp)
}

func (c *ClientWithResponses) CreateIndividualAppliedBdtPolicyDataWithResponse(ctx context.Context, bdtPolicyId string, body CreateIndividualAppliedBdtPolicyDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualAppliedBdtPolicyDataResponse, error) {
	rsp, err := c.CreateIndividualAppliedBdtPolicyData(ctx, bdtPolicyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualAppliedBdtPolicyDataResponse(rsp)
}

// ReadInfluenceDataWithResponse request returning *ReadInfluenceDataResponse
func (c *ClientWithResponses) ReadInfluenceDataWithResponse(ctx context.Context, params *ReadInfluenceDataParams, reqEditors ...RequestEditorFn) (*ReadInfluenceDataResponse, error) {
	rsp, err := c.ReadInfluenceData(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadInfluenceDataResponse(rsp)
}

// ReadInfluenceDataSubscriptionsWithResponse request returning *ReadInfluenceDataSubscriptionsResponse
func (c *ClientWithResponses) ReadInfluenceDataSubscriptionsWithResponse(ctx context.Context, params *ReadInfluenceDataSubscriptionsParams, reqEditors ...RequestEditorFn) (*ReadInfluenceDataSubscriptionsResponse, error) {
	rsp, err := c.ReadInfluenceDataSubscriptions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadInfluenceDataSubscriptionsResponse(rsp)
}

// CreateIndividualInfluenceDataSubscriptionWithBodyWithResponse request with arbitrary body returning *CreateIndividualInfluenceDataSubscriptionResponse
func (c *ClientWithResponses) CreateIndividualInfluenceDataSubscriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualInfluenceDataSubscriptionResponse, error) {
	rsp, err := c.CreateIndividualInfluenceDataSubscriptionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualInfluenceDataSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) CreateIndividualInfluenceDataSubscriptionWithResponse(ctx context.Context, body CreateIndividualInfluenceDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualInfluenceDataSubscriptionResponse, error) {
	rsp, err := c.CreateIndividualInfluenceDataSubscription(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualInfluenceDataSubscriptionResponse(rsp)
}

// DeleteIndividualInfluenceDataSubscriptionWithResponse request returning *DeleteIndividualInfluenceDataSubscriptionResponse
func (c *ClientWithResponses) DeleteIndividualInfluenceDataSubscriptionWithResponse(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*DeleteIndividualInfluenceDataSubscriptionResponse, error) {
	rsp, err := c.DeleteIndividualInfluenceDataSubscription(ctx, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndividualInfluenceDataSubscriptionResponse(rsp)
}

// ReadIndividualInfluenceDataSubscriptionWithResponse request returning *ReadIndividualInfluenceDataSubscriptionResponse
func (c *ClientWithResponses) ReadIndividualInfluenceDataSubscriptionWithResponse(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*ReadIndividualInfluenceDataSubscriptionResponse, error) {
	rsp, err := c.ReadIndividualInfluenceDataSubscription(ctx, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadIndividualInfluenceDataSubscriptionResponse(rsp)
}

// ReplaceIndividualInfluenceDataSubscriptionWithBodyWithResponse request with arbitrary body returning *ReplaceIndividualInfluenceDataSubscriptionResponse
func (c *ClientWithResponses) ReplaceIndividualInfluenceDataSubscriptionWithBodyWithResponse(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceIndividualInfluenceDataSubscriptionResponse, error) {
	rsp, err := c.ReplaceIndividualInfluenceDataSubscriptionWithBody(ctx, subscriptionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceIndividualInfluenceDataSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) ReplaceIndividualInfluenceDataSubscriptionWithResponse(ctx context.Context, subscriptionId string, body ReplaceIndividualInfluenceDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceIndividualInfluenceDataSubscriptionResponse, error) {
	rsp, err := c.ReplaceIndividualInfluenceDataSubscription(ctx, subscriptionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceIndividualInfluenceDataSubscriptionResponse(rsp)
}

// DeleteIndividualInfluenceDataWithResponse request returning *DeleteIndividualInfluenceDataResponse
func (c *ClientWithResponses) DeleteIndividualInfluenceDataWithResponse(ctx context.Context, influenceId string, reqEditors ...RequestEditorFn) (*DeleteIndividualInfluenceDataResponse, error) {
	rsp, err := c.DeleteIndividualInfluenceData(ctx, influenceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndividualInfluenceDataResponse(rsp)
}

// UpdateIndividualInfluenceDataWithBodyWithResponse request with arbitrary body returning *UpdateIndividualInfluenceDataResponse
func (c *ClientWithResponses) UpdateIndividualInfluenceDataWithBodyWithResponse(ctx context.Context, influenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIndividualInfluenceDataResponse, error) {
	rsp, err := c.UpdateIndividualInfluenceDataWithBody(ctx, influenceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIndividualInfluenceDataResponse(rsp)
}

func (c *ClientWithResponses) UpdateIndividualInfluenceDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, influenceId string, body UpdateIndividualInfluenceDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIndividualInfluenceDataResponse, error) {
	rsp, err := c.UpdateIndividualInfluenceDataWithApplicationMergePatchPlusJSONBody(ctx, influenceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIndividualInfluenceDataResponse(rsp)
}

// CreateOrReplaceIndividualInfluenceDataWithBodyWithResponse request with arbitrary body returning *CreateOrReplaceIndividualInfluenceDataResponse
func (c *ClientWithResponses) CreateOrReplaceIndividualInfluenceDataWithBodyWithResponse(ctx context.Context, influenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceIndividualInfluenceDataResponse, error) {
	rsp, err := c.CreateOrReplaceIndividualInfluenceDataWithBody(ctx, influenceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceIndividualInfluenceDataResponse(rsp)
}

func (c *ClientWithResponses) CreateOrReplaceIndividualInfluenceDataWithResponse(ctx context.Context, influenceId string, body CreateOrReplaceIndividualInfluenceDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceIndividualInfluenceDataResponse, error) {
	rsp, err := c.CreateOrReplaceIndividualInfluenceData(ctx, influenceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceIndividualInfluenceDataResponse(rsp)
}

// ReadIPTVCongifurationDataWithResponse request returning *ReadIPTVCongifurationDataResponse
func (c *ClientWithResponses) ReadIPTVCongifurationDataWithResponse(ctx context.Context, params *ReadIPTVCongifurationDataParams, reqEditors ...RequestEditorFn) (*ReadIPTVCongifurationDataResponse, error) {
	rsp, err := c.ReadIPTVCongifurationData(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadIPTVCongifurationDataResponse(rsp)
}

// DeleteIndividualIPTVConfigurationDataWithResponse request returning *DeleteIndividualIPTVConfigurationDataResponse
func (c *ClientWithResponses) DeleteIndividualIPTVConfigurationDataWithResponse(ctx context.Context, configurationId string, reqEditors ...RequestEditorFn) (*DeleteIndividualIPTVConfigurationDataResponse, error) {
	rsp, err := c.DeleteIndividualIPTVConfigurationData(ctx, configurationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndividualIPTVConfigurationDataResponse(rsp)
}

// PartialReplaceIndividualIPTVConfigurationDataWithBodyWithResponse request with arbitrary body returning *PartialReplaceIndividualIPTVConfigurationDataResponse
func (c *ClientWithResponses) PartialReplaceIndividualIPTVConfigurationDataWithBodyWithResponse(ctx context.Context, configurationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PartialReplaceIndividualIPTVConfigurationDataResponse, error) {
	rsp, err := c.PartialReplaceIndividualIPTVConfigurationDataWithBody(ctx, configurationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePartialReplaceIndividualIPTVConfigurationDataResponse(rsp)
}

func (c *ClientWithResponses) PartialReplaceIndividualIPTVConfigurationDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, configurationId string, body PartialReplaceIndividualIPTVConfigurationDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PartialReplaceIndividualIPTVConfigurationDataResponse, error) {
	rsp, err := c.PartialReplaceIndividualIPTVConfigurationDataWithApplicationMergePatchPlusJSONBody(ctx, configurationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePartialReplaceIndividualIPTVConfigurationDataResponse(rsp)
}

// CreateOrReplaceIndividualIPTVConfigurationDataWithBodyWithResponse request with arbitrary body returning *CreateOrReplaceIndividualIPTVConfigurationDataResponse
func (c *ClientWithResponses) CreateOrReplaceIndividualIPTVConfigurationDataWithBodyWithResponse(ctx context.Context, configurationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceIndividualIPTVConfigurationDataResponse, error) {
	rsp, err := c.CreateOrReplaceIndividualIPTVConfigurationDataWithBody(ctx, configurationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceIndividualIPTVConfigurationDataResponse(rsp)
}

func (c *ClientWithResponses) CreateOrReplaceIndividualIPTVConfigurationDataWithResponse(ctx context.Context, configurationId string, body CreateOrReplaceIndividualIPTVConfigurationDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceIndividualIPTVConfigurationDataResponse, error) {
	rsp, err := c.CreateOrReplaceIndividualIPTVConfigurationData(ctx, configurationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceIndividualIPTVConfigurationDataResponse(rsp)
}

// ReadPFDDataWithResponse request returning *ReadPFDDataResponse
func (c *ClientWithResponses) ReadPFDDataWithResponse(ctx context.Context, params *ReadPFDDataParams, reqEditors ...RequestEditorFn) (*ReadPFDDataResponse, error) {
	rsp, err := c.ReadPFDData(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadPFDDataResponse(rsp)
}

// DeleteIndividualPFDDataWithResponse request returning *DeleteIndividualPFDDataResponse
func (c *ClientWithResponses) DeleteIndividualPFDDataWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*DeleteIndividualPFDDataResponse, error) {
	rsp, err := c.DeleteIndividualPFDData(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndividualPFDDataResponse(rsp)
}

// ReadIndividualPFDDataWithResponse request returning *ReadIndividualPFDDataResponse
func (c *ClientWithResponses) ReadIndividualPFDDataWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*ReadIndividualPFDDataResponse, error) {
	rsp, err := c.ReadIndividualPFDData(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadIndividualPFDDataResponse(rsp)
}

// CreateOrReplaceIndividualPFDDataWithBodyWithResponse request with arbitrary body returning *CreateOrReplaceIndividualPFDDataResponse
func (c *ClientWithResponses) CreateOrReplaceIndividualPFDDataWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceIndividualPFDDataResponse, error) {
	rsp, err := c.CreateOrReplaceIndividualPFDDataWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceIndividualPFDDataResponse(rsp)
}

func (c *ClientWithResponses) CreateOrReplaceIndividualPFDDataWithResponse(ctx context.Context, appId string, body CreateOrReplaceIndividualPFDDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceIndividualPFDDataResponse, error) {
	rsp, err := c.CreateOrReplaceIndividualPFDData(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceIndividualPFDDataResponse(rsp)
}

// ReadServiceParameterDataWithResponse request returning *ReadServiceParameterDataResponse
func (c *ClientWithResponses) ReadServiceParameterDataWithResponse(ctx context.Context, params *ReadServiceParameterDataParams, reqEditors ...RequestEditorFn) (*ReadServiceParameterDataResponse, error) {
	rsp, err := c.ReadServiceParameterData(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadServiceParameterDataResponse(rsp)
}

// DeleteIndividualServiceParameterDataWithResponse request returning *DeleteIndividualServiceParameterDataResponse
func (c *ClientWithResponses) DeleteIndividualServiceParameterDataWithResponse(ctx context.Context, serviceParamId string, reqEditors ...RequestEditorFn) (*DeleteIndividualServiceParameterDataResponse, error) {
	rsp, err := c.DeleteIndividualServiceParameterData(ctx, serviceParamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndividualServiceParameterDataResponse(rsp)
}

// UpdateIndividualServiceParameterDataWithBodyWithResponse request with arbitrary body returning *UpdateIndividualServiceParameterDataResponse
func (c *ClientWithResponses) UpdateIndividualServiceParameterDataWithBodyWithResponse(ctx context.Context, serviceParamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIndividualServiceParameterDataResponse, error) {
	rsp, err := c.UpdateIndividualServiceParameterDataWithBody(ctx, serviceParamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIndividualServiceParameterDataResponse(rsp)
}

func (c *ClientWithResponses) UpdateIndividualServiceParameterDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, serviceParamId string, body UpdateIndividualServiceParameterDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIndividualServiceParameterDataResponse, error) {
	rsp, err := c.UpdateIndividualServiceParameterDataWithApplicationMergePatchPlusJSONBody(ctx, serviceParamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIndividualServiceParameterDataResponse(rsp)
}

// CreateOrReplaceServiceParameterDataWithBodyWithResponse request with arbitrary body returning *CreateOrReplaceServiceParameterDataResponse
func (c *ClientWithResponses) CreateOrReplaceServiceParameterDataWithBodyWithResponse(ctx context.Context, serviceParamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceServiceParameterDataResponse, error) {
	rsp, err := c.CreateOrReplaceServiceParameterDataWithBody(ctx, serviceParamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceServiceParameterDataResponse(rsp)
}

func (c *ClientWithResponses) CreateOrReplaceServiceParameterDataWithResponse(ctx context.Context, serviceParamId string, body CreateOrReplaceServiceParameterDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceServiceParameterDataResponse, error) {
	rsp, err := c.CreateOrReplaceServiceParameterData(ctx, serviceParamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceServiceParameterDataResponse(rsp)
}

// ReadApplicationDataChangeSubscriptionsWithResponse request returning *ReadApplicationDataChangeSubscriptionsResponse
func (c *ClientWithResponses) ReadApplicationDataChangeSubscriptionsWithResponse(ctx context.Context, params *ReadApplicationDataChangeSubscriptionsParams, reqEditors ...RequestEditorFn) (*ReadApplicationDataChangeSubscriptionsResponse, error) {
	rsp, err := c.ReadApplicationDataChangeSubscriptions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadApplicationDataChangeSubscriptionsResponse(rsp)
}

// CreateIndividualApplicationDataSubscriptionWithBodyWithResponse request with arbitrary body returning *CreateIndividualApplicationDataSubscriptionResponse
func (c *ClientWithResponses) CreateIndividualApplicationDataSubscriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualApplicationDataSubscriptionResponse, error) {
	rsp, err := c.CreateIndividualApplicationDataSubscriptionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualApplicationDataSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) CreateIndividualApplicationDataSubscriptionWithResponse(ctx context.Context, body CreateIndividualApplicationDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualApplicationDataSubscriptionResponse, error) {
	rsp, err := c.CreateIndividualApplicationDataSubscription(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualApplicationDataSubscriptionResponse(rsp)
}

// DeleteIndividualApplicationDataSubscriptionWithResponse request returning *DeleteIndividualApplicationDataSubscriptionResponse
func (c *ClientWithResponses) DeleteIndividualApplicationDataSubscriptionWithResponse(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*DeleteIndividualApplicationDataSubscriptionResponse, error) {
	rsp, err := c.DeleteIndividualApplicationDataSubscription(ctx, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndividualApplicationDataSubscriptionResponse(rsp)
}

// ReadIndividualApplicationDataSubscriptionWithResponse request returning *ReadIndividualApplicationDataSubscriptionResponse
func (c *ClientWithResponses) ReadIndividualApplicationDataSubscriptionWithResponse(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*ReadIndividualApplicationDataSubscriptionResponse, error) {
	rsp, err := c.ReadIndividualApplicationDataSubscription(ctx, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadIndividualApplicationDataSubscriptionResponse(rsp)
}

// ReplaceIndividualApplicationDataSubscriptionWithBodyWithResponse request with arbitrary body returning *ReplaceIndividualApplicationDataSubscriptionResponse
func (c *ClientWithResponses) ReplaceIndividualApplicationDataSubscriptionWithBodyWithResponse(ctx context.Context, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceIndividualApplicationDataSubscriptionResponse, error) {
	rsp, err := c.ReplaceIndividualApplicationDataSubscriptionWithBody(ctx, subsId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceIndividualApplicationDataSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) ReplaceIndividualApplicationDataSubscriptionWithResponse(ctx context.Context, subsId string, body ReplaceIndividualApplicationDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceIndividualApplicationDataSubscriptionResponse, error) {
	rsp, err := c.ReplaceIndividualApplicationDataSubscription(ctx, subsId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceIndividualApplicationDataSubscriptionResponse(rsp)
}

// CreateIndividualExposureDataSubscriptionWithBodyWithResponse request with arbitrary body returning *CreateIndividualExposureDataSubscriptionResponse
func (c *ClientWithResponses) CreateIndividualExposureDataSubscriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualExposureDataSubscriptionResponse, error) {
	rsp, err := c.CreateIndividualExposureDataSubscriptionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualExposureDataSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) CreateIndividualExposureDataSubscriptionWithResponse(ctx context.Context, body CreateIndividualExposureDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualExposureDataSubscriptionResponse, error) {
	rsp, err := c.CreateIndividualExposureDataSubscription(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualExposureDataSubscriptionResponse(rsp)
}

// DeleteIndividualExposureDataSubscriptionWithResponse request returning *DeleteIndividualExposureDataSubscriptionResponse
func (c *ClientWithResponses) DeleteIndividualExposureDataSubscriptionWithResponse(ctx context.Context, subId string, reqEditors ...RequestEditorFn) (*DeleteIndividualExposureDataSubscriptionResponse, error) {
	rsp, err := c.DeleteIndividualExposureDataSubscription(ctx, subId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndividualExposureDataSubscriptionResponse(rsp)
}

// ReplaceIndividualExposureDataSubscriptionWithBodyWithResponse request with arbitrary body returning *ReplaceIndividualExposureDataSubscriptionResponse
func (c *ClientWithResponses) ReplaceIndividualExposureDataSubscriptionWithBodyWithResponse(ctx context.Context, subId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceIndividualExposureDataSubscriptionResponse, error) {
	rsp, err := c.ReplaceIndividualExposureDataSubscriptionWithBody(ctx, subId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceIndividualExposureDataSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) ReplaceIndividualExposureDataSubscriptionWithResponse(ctx context.Context, subId string, body ReplaceIndividualExposureDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceIndividualExposureDataSubscriptionResponse, error) {
	rsp, err := c.ReplaceIndividualExposureDataSubscription(ctx, subId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceIndividualExposureDataSubscriptionResponse(rsp)
}

// DeleteAccessAndMobilityDataWithResponse request returning *DeleteAccessAndMobilityDataResponse
func (c *ClientWithResponses) DeleteAccessAndMobilityDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*DeleteAccessAndMobilityDataResponse, error) {
	rsp, err := c.DeleteAccessAndMobilityData(ctx, ueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccessAndMobilityDataResponse(rsp)
}

// QueryAccessAndMobilityDataWithResponse request returning *QueryAccessAndMobilityDataResponse
func (c *ClientWithResponses) QueryAccessAndMobilityDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryAccessAndMobilityDataParams, reqEditors ...RequestEditorFn) (*QueryAccessAndMobilityDataResponse, error) {
	rsp, err := c.QueryAccessAndMobilityData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryAccessAndMobilityDataResponse(rsp)
}

// UpdateAccessAndMobilityDataWithBodyWithResponse request with arbitrary body returning *UpdateAccessAndMobilityDataResponse
func (c *ClientWithResponses) UpdateAccessAndMobilityDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccessAndMobilityDataResponse, error) {
	rsp, err := c.UpdateAccessAndMobilityDataWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccessAndMobilityDataResponse(rsp)
}

func (c *ClientWithResponses) UpdateAccessAndMobilityDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body UpdateAccessAndMobilityDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAccessAndMobilityDataResponse, error) {
	rsp, err := c.UpdateAccessAndMobilityDataWithApplicationMergePatchPlusJSONBody(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccessAndMobilityDataResponse(rsp)
}

// CreateOrReplaceAccessAndMobilityDataWithBodyWithResponse request with arbitrary body returning *CreateOrReplaceAccessAndMobilityDataResponse
func (c *ClientWithResponses) CreateOrReplaceAccessAndMobilityDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceAccessAndMobilityDataResponse, error) {
	rsp, err := c.CreateOrReplaceAccessAndMobilityDataWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceAccessAndMobilityDataResponse(rsp)
}

func (c *ClientWithResponses) CreateOrReplaceAccessAndMobilityDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body CreateOrReplaceAccessAndMobilityDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceAccessAndMobilityDataResponse, error) {
	rsp, err := c.CreateOrReplaceAccessAndMobilityData(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceAccessAndMobilityDataResponse(rsp)
}

// DeleteSessionManagementDataWithResponse request returning *DeleteSessionManagementDataResponse
func (c *ClientWithResponses) DeleteSessionManagementDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, reqEditors ...RequestEditorFn) (*DeleteSessionManagementDataResponse, error) {
	rsp, err := c.DeleteSessionManagementData(ctx, ueId, pduSessionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSessionManagementDataResponse(rsp)
}

// QuerySessionManagementDataWithResponse request returning *QuerySessionManagementDataResponse
func (c *ClientWithResponses) QuerySessionManagementDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, params *QuerySessionManagementDataParams, reqEditors ...RequestEditorFn) (*QuerySessionManagementDataResponse, error) {
	rsp, err := c.QuerySessionManagementData(ctx, ueId, pduSessionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerySessionManagementDataResponse(rsp)
}

// CreateOrReplaceSessionManagementDataWithBodyWithResponse request with arbitrary body returning *CreateOrReplaceSessionManagementDataResponse
func (c *ClientWithResponses) CreateOrReplaceSessionManagementDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceSessionManagementDataResponse, error) {
	rsp, err := c.CreateOrReplaceSessionManagementDataWithBody(ctx, ueId, pduSessionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceSessionManagementDataResponse(rsp)
}

func (c *ClientWithResponses) CreateOrReplaceSessionManagementDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, body CreateOrReplaceSessionManagementDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceSessionManagementDataResponse, error) {
	rsp, err := c.CreateOrReplaceSessionManagementData(ctx, ueId, pduSessionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceSessionManagementDataResponse(rsp)
}

// ReadBdtDataWithResponse request returning *ReadBdtDataResponse
func (c *ClientWithResponses) ReadBdtDataWithResponse(ctx context.Context, params *ReadBdtDataParams, reqEditors ...RequestEditorFn) (*ReadBdtDataResponse, error) {
	rsp, err := c.ReadBdtData(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadBdtDataResponse(rsp)
}

// DeleteIndividualBdtDataWithResponse request returning *DeleteIndividualBdtDataResponse
func (c *ClientWithResponses) DeleteIndividualBdtDataWithResponse(ctx context.Context, bdtReferenceId string, reqEditors ...RequestEditorFn) (*DeleteIndividualBdtDataResponse, error) {
	rsp, err := c.DeleteIndividualBdtData(ctx, bdtReferenceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndividualBdtDataResponse(rsp)
}

// ReadIndividualBdtDataWithResponse request returning *ReadIndividualBdtDataResponse
func (c *ClientWithResponses) ReadIndividualBdtDataWithResponse(ctx context.Context, bdtReferenceId string, params *ReadIndividualBdtDataParams, reqEditors ...RequestEditorFn) (*ReadIndividualBdtDataResponse, error) {
	rsp, err := c.ReadIndividualBdtData(ctx, bdtReferenceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadIndividualBdtDataResponse(rsp)
}

// UpdateIndividualBdtDataWithBodyWithResponse request with arbitrary body returning *UpdateIndividualBdtDataResponse
func (c *ClientWithResponses) UpdateIndividualBdtDataWithBodyWithResponse(ctx context.Context, bdtReferenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIndividualBdtDataResponse, error) {
	rsp, err := c.UpdateIndividualBdtDataWithBody(ctx, bdtReferenceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIndividualBdtDataResponse(rsp)
}

func (c *ClientWithResponses) UpdateIndividualBdtDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, bdtReferenceId string, body UpdateIndividualBdtDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIndividualBdtDataResponse, error) {
	rsp, err := c.UpdateIndividualBdtDataWithApplicationMergePatchPlusJSONBody(ctx, bdtReferenceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIndividualBdtDataResponse(rsp)
}

// CreateIndividualBdtDataWithBodyWithResponse request with arbitrary body returning *CreateIndividualBdtDataResponse
func (c *ClientWithResponses) CreateIndividualBdtDataWithBodyWithResponse(ctx context.Context, bdtReferenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualBdtDataResponse, error) {
	rsp, err := c.CreateIndividualBdtDataWithBody(ctx, bdtReferenceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualBdtDataResponse(rsp)
}

func (c *ClientWithResponses) CreateIndividualBdtDataWithResponse(ctx context.Context, bdtReferenceId string, body CreateIndividualBdtDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualBdtDataResponse, error) {
	rsp, err := c.CreateIndividualBdtData(ctx, bdtReferenceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualBdtDataResponse(rsp)
}

// ReadPlmnUePolicySetWithResponse request returning *ReadPlmnUePolicySetResponse
func (c *ClientWithResponses) ReadPlmnUePolicySetWithResponse(ctx context.Context, plmnId string, reqEditors ...RequestEditorFn) (*ReadPlmnUePolicySetResponse, error) {
	rsp, err := c.ReadPlmnUePolicySet(ctx, plmnId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadPlmnUePolicySetResponse(rsp)
}

// ReadSponsorConnectivityDataWithResponse request returning *ReadSponsorConnectivityDataResponse
func (c *ClientWithResponses) ReadSponsorConnectivityDataWithResponse(ctx context.Context, sponsorId string, reqEditors ...RequestEditorFn) (*ReadSponsorConnectivityDataResponse, error) {
	rsp, err := c.ReadSponsorConnectivityData(ctx, sponsorId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadSponsorConnectivityDataResponse(rsp)
}

// CreateIndividualPolicyDataSubscriptionWithBodyWithResponse request with arbitrary body returning *CreateIndividualPolicyDataSubscriptionResponse
func (c *ClientWithResponses) CreateIndividualPolicyDataSubscriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualPolicyDataSubscriptionResponse, error) {
	rsp, err := c.CreateIndividualPolicyDataSubscriptionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualPolicyDataSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) CreateIndividualPolicyDataSubscriptionWithResponse(ctx context.Context, body CreateIndividualPolicyDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualPolicyDataSubscriptionResponse, error) {
	rsp, err := c.CreateIndividualPolicyDataSubscription(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualPolicyDataSubscriptionResponse(rsp)
}

// DeleteIndividualPolicyDataSubscriptionWithResponse request returning *DeleteIndividualPolicyDataSubscriptionResponse
func (c *ClientWithResponses) DeleteIndividualPolicyDataSubscriptionWithResponse(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*DeleteIndividualPolicyDataSubscriptionResponse, error) {
	rsp, err := c.DeleteIndividualPolicyDataSubscription(ctx, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndividualPolicyDataSubscriptionResponse(rsp)
}

// ReplaceIndividualPolicyDataSubscriptionWithBodyWithResponse request with arbitrary body returning *ReplaceIndividualPolicyDataSubscriptionResponse
func (c *ClientWithResponses) ReplaceIndividualPolicyDataSubscriptionWithBodyWithResponse(ctx context.Context, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceIndividualPolicyDataSubscriptionResponse, error) {
	rsp, err := c.ReplaceIndividualPolicyDataSubscriptionWithBody(ctx, subsId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceIndividualPolicyDataSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) ReplaceIndividualPolicyDataSubscriptionWithResponse(ctx context.Context, subsId string, body ReplaceIndividualPolicyDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceIndividualPolicyDataSubscriptionResponse, error) {
	rsp, err := c.ReplaceIndividualPolicyDataSubscription(ctx, subsId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceIndividualPolicyDataSubscriptionResponse(rsp)
}

// ReadAccessAndMobilityPolicyDataWithResponse request returning *ReadAccessAndMobilityPolicyDataResponse
func (c *ClientWithResponses) ReadAccessAndMobilityPolicyDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*ReadAccessAndMobilityPolicyDataResponse, error) {
	rsp, err := c.ReadAccessAndMobilityPolicyData(ctx, ueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadAccessAndMobilityPolicyDataResponse(rsp)
}

// ReadOperatorSpecificDataWithResponse request returning *ReadOperatorSpecificDataResponse
func (c *ClientWithResponses) ReadOperatorSpecificDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *ReadOperatorSpecificDataParams, reqEditors ...RequestEditorFn) (*ReadOperatorSpecificDataResponse, error) {
	rsp, err := c.ReadOperatorSpecificData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadOperatorSpecificDataResponse(rsp)
}

// UpdateOperatorSpecificDataWithBodyWithResponse request with arbitrary body returning *UpdateOperatorSpecificDataResponse
func (c *ClientWithResponses) UpdateOperatorSpecificDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOperatorSpecificDataResponse, error) {
	rsp, err := c.UpdateOperatorSpecificDataWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOperatorSpecificDataResponse(rsp)
}

func (c *ClientWithResponses) UpdateOperatorSpecificDataWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body UpdateOperatorSpecificDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOperatorSpecificDataResponse, error) {
	rsp, err := c.UpdateOperatorSpecificDataWithApplicationJSONPatchPlusJSONBody(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOperatorSpecificDataResponse(rsp)
}

// ReplaceOperatorSpecificDataWithBodyWithResponse request with arbitrary body returning *ReplaceOperatorSpecificDataResponse
func (c *ClientWithResponses) ReplaceOperatorSpecificDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceOperatorSpecificDataResponse, error) {
	rsp, err := c.ReplaceOperatorSpecificDataWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceOperatorSpecificDataResponse(rsp)
}

func (c *ClientWithResponses) ReplaceOperatorSpecificDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body ReplaceOperatorSpecificDataJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceOperatorSpecificDataResponse, error) {
	rsp, err := c.ReplaceOperatorSpecificData(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceOperatorSpecificDataResponse(rsp)
}

// ReadSessionManagementPolicyDataWithResponse request returning *ReadSessionManagementPolicyDataResponse
func (c *ClientWithResponses) ReadSessionManagementPolicyDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *ReadSessionManagementPolicyDataParams, reqEditors ...RequestEditorFn) (*ReadSessionManagementPolicyDataResponse, error) {
	rsp, err := c.ReadSessionManagementPolicyData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadSessionManagementPolicyDataResponse(rsp)
}

// UpdateSessionManagementPolicyDataWithBodyWithResponse request with arbitrary body returning *UpdateSessionManagementPolicyDataResponse
func (c *ClientWithResponses) UpdateSessionManagementPolicyDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSessionManagementPolicyDataResponse, error) {
	rsp, err := c.UpdateSessionManagementPolicyDataWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSessionManagementPolicyDataResponse(rsp)
}

func (c *ClientWithResponses) UpdateSessionManagementPolicyDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body UpdateSessionManagementPolicyDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSessionManagementPolicyDataResponse, error) {
	rsp, err := c.UpdateSessionManagementPolicyDataWithApplicationMergePatchPlusJSONBody(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSessionManagementPolicyDataResponse(rsp)
}

// DeleteUsageMonitoringInformationWithResponse request returning *DeleteUsageMonitoringInformationResponse
func (c *ClientWithResponses) DeleteUsageMonitoringInformationWithResponse(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, reqEditors ...RequestEditorFn) (*DeleteUsageMonitoringInformationResponse, error) {
	rsp, err := c.DeleteUsageMonitoringInformation(ctx, ueId, usageMonId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUsageMonitoringInformationResponse(rsp)
}

// ReadUsageMonitoringInformationWithResponse request returning *ReadUsageMonitoringInformationResponse
func (c *ClientWithResponses) ReadUsageMonitoringInformationWithResponse(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, params *ReadUsageMonitoringInformationParams, reqEditors ...RequestEditorFn) (*ReadUsageMonitoringInformationResponse, error) {
	rsp, err := c.ReadUsageMonitoringInformation(ctx, ueId, usageMonId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadUsageMonitoringInformationResponse(rsp)
}

// CreateUsageMonitoringResourceWithBodyWithResponse request with arbitrary body returning *CreateUsageMonitoringResourceResponse
func (c *ClientWithResponses) CreateUsageMonitoringResourceWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUsageMonitoringResourceResponse, error) {
	rsp, err := c.CreateUsageMonitoringResourceWithBody(ctx, ueId, usageMonId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUsageMonitoringResourceResponse(rsp)
}

func (c *ClientWithResponses) CreateUsageMonitoringResourceWithResponse(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, body CreateUsageMonitoringResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUsageMonitoringResourceResponse, error) {
	rsp, err := c.CreateUsageMonitoringResource(ctx, ueId, usageMonId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUsageMonitoringResourceResponse(rsp)
}

// ReadUEPolicySetWithResponse request returning *ReadUEPolicySetResponse
func (c *ClientWithResponses) ReadUEPolicySetWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *ReadUEPolicySetParams, reqEditors ...RequestEditorFn) (*ReadUEPolicySetResponse, error) {
	rsp, err := c.ReadUEPolicySet(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadUEPolicySetResponse(rsp)
}

// UpdateUEPolicySetWithBodyWithResponse request with arbitrary body returning *UpdateUEPolicySetResponse
func (c *ClientWithResponses) UpdateUEPolicySetWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUEPolicySetResponse, error) {
	rsp, err := c.UpdateUEPolicySetWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUEPolicySetResponse(rsp)
}

func (c *ClientWithResponses) UpdateUEPolicySetWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body UpdateUEPolicySetApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUEPolicySetResponse, error) {
	rsp, err := c.UpdateUEPolicySetWithApplicationMergePatchPlusJSONBody(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUEPolicySetResponse(rsp)
}

// CreateOrReplaceUEPolicySetWithBodyWithResponse request with arbitrary body returning *CreateOrReplaceUEPolicySetResponse
func (c *ClientWithResponses) CreateOrReplaceUEPolicySetWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceUEPolicySetResponse, error) {
	rsp, err := c.CreateOrReplaceUEPolicySetWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceUEPolicySetResponse(rsp)
}

func (c *ClientWithResponses) CreateOrReplaceUEPolicySetWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body CreateOrReplaceUEPolicySetJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceUEPolicySetResponse, error) {
	rsp, err := c.CreateOrReplaceUEPolicySet(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceUEPolicySetResponse(rsp)
}

// Query5GVnGroupWithResponse request returning *Query5GVnGroupResponse
func (c *ClientWithResponses) Query5GVnGroupWithResponse(ctx context.Context, params *Query5GVnGroupParams, reqEditors ...RequestEditorFn) (*Query5GVnGroupResponse, error) {
	rsp, err := c.Query5GVnGroup(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuery5GVnGroupResponse(rsp)
}

// Query5GVnGroupInternalWithResponse request returning *Query5GVnGroupInternalResponse
func (c *ClientWithResponses) Query5GVnGroupInternalWithResponse(ctx context.Context, params *Query5GVnGroupInternalParams, reqEditors ...RequestEditorFn) (*Query5GVnGroupInternalResponse, error) {
	rsp, err := c.Query5GVnGroupInternal(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuery5GVnGroupInternalResponse(rsp)
}

// Query5GVNGroupPPDataWithResponse request returning *Query5GVNGroupPPDataResponse
func (c *ClientWithResponses) Query5GVNGroupPPDataWithResponse(ctx context.Context, params *Query5GVNGroupPPDataParams, reqEditors ...RequestEditorFn) (*Query5GVNGroupPPDataResponse, error) {
	rsp, err := c.Query5GVNGroupPPData(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuery5GVNGroupPPDataResponse(rsp)
}

// Delete5GVnGroupWithResponse request returning *Delete5GVnGroupResponse
func (c *ClientWithResponses) Delete5GVnGroupWithResponse(ctx context.Context, externalGroupId externalRef3.ExtGroupId, reqEditors ...RequestEditorFn) (*Delete5GVnGroupResponse, error) {
	rsp, err := c.Delete5GVnGroup(ctx, externalGroupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelete5GVnGroupResponse(rsp)
}

// Get5GVnGroupConfigurationWithResponse request returning *Get5GVnGroupConfigurationResponse
func (c *ClientWithResponses) Get5GVnGroupConfigurationWithResponse(ctx context.Context, externalGroupId externalRef3.ExtGroupId, reqEditors ...RequestEditorFn) (*Get5GVnGroupConfigurationResponse, error) {
	rsp, err := c.Get5GVnGroupConfiguration(ctx, externalGroupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet5GVnGroupConfigurationResponse(rsp)
}

// Modify5GVnGroupWithBodyWithResponse request with arbitrary body returning *Modify5GVnGroupResponse
func (c *ClientWithResponses) Modify5GVnGroupWithBodyWithResponse(ctx context.Context, externalGroupId externalRef3.ExtGroupId, params *Modify5GVnGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Modify5GVnGroupResponse, error) {
	rsp, err := c.Modify5GVnGroupWithBody(ctx, externalGroupId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModify5GVnGroupResponse(rsp)
}

func (c *ClientWithResponses) Modify5GVnGroupWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, externalGroupId externalRef3.ExtGroupId, params *Modify5GVnGroupParams, body Modify5GVnGroupApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*Modify5GVnGroupResponse, error) {
	rsp, err := c.Modify5GVnGroupWithApplicationJSONPatchPlusJSONBody(ctx, externalGroupId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModify5GVnGroupResponse(rsp)
}

// Create5GVnGroupWithBodyWithResponse request with arbitrary body returning *Create5GVnGroupResponse
func (c *ClientWithResponses) Create5GVnGroupWithBodyWithResponse(ctx context.Context, externalGroupId externalRef3.ExtGroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create5GVnGroupResponse, error) {
	rsp, err := c.Create5GVnGroupWithBody(ctx, externalGroupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate5GVnGroupResponse(rsp)
}

func (c *ClientWithResponses) Create5GVnGroupWithResponse(ctx context.Context, externalGroupId externalRef3.ExtGroupId, body Create5GVnGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*Create5GVnGroupResponse, error) {
	rsp, err := c.Create5GVnGroup(ctx, externalGroupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate5GVnGroupResponse(rsp)
}

// GetGroupIdentifiersWithResponse request returning *GetGroupIdentifiersResponse
func (c *ClientWithResponses) GetGroupIdentifiersWithResponse(ctx context.Context, params *GetGroupIdentifiersParams, reqEditors ...RequestEditorFn) (*GetGroupIdentifiersResponse, error) {
	rsp, err := c.GetGroupIdentifiers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupIdentifiersResponse(rsp)
}

// QueryGroupEEDataWithResponse request returning *QueryGroupEEDataResponse
func (c *ClientWithResponses) QueryGroupEEDataWithResponse(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, params *QueryGroupEEDataParams, reqEditors ...RequestEditorFn) (*QueryGroupEEDataResponse, error) {
	rsp, err := c.QueryGroupEEData(ctx, ueGroupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryGroupEEDataResponse(rsp)
}

// QueryEeGroupSubscriptionsWithResponse request returning *QueryEeGroupSubscriptionsResponse
func (c *ClientWithResponses) QueryEeGroupSubscriptionsWithResponse(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, params *QueryEeGroupSubscriptionsParams, reqEditors ...RequestEditorFn) (*QueryEeGroupSubscriptionsResponse, error) {
	rsp, err := c.QueryEeGroupSubscriptions(ctx, ueGroupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryEeGroupSubscriptionsResponse(rsp)
}

// CreateEeGroupSubscriptionsWithBodyWithResponse request with arbitrary body returning *CreateEeGroupSubscriptionsResponse
func (c *ClientWithResponses) CreateEeGroupSubscriptionsWithBodyWithResponse(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEeGroupSubscriptionsResponse, error) {
	rsp, err := c.CreateEeGroupSubscriptionsWithBody(ctx, ueGroupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEeGroupSubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) CreateEeGroupSubscriptionsWithResponse(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, body CreateEeGroupSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEeGroupSubscriptionsResponse, error) {
	rsp, err := c.CreateEeGroupSubscriptions(ctx, ueGroupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEeGroupSubscriptionsResponse(rsp)
}

// RemoveEeGroupSubscriptionsWithResponse request returning *RemoveEeGroupSubscriptionsResponse
func (c *ClientWithResponses) RemoveEeGroupSubscriptionsWithResponse(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, subsId string, reqEditors ...RequestEditorFn) (*RemoveEeGroupSubscriptionsResponse, error) {
	rsp, err := c.RemoveEeGroupSubscriptions(ctx, ueGroupId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveEeGroupSubscriptionsResponse(rsp)
}

// QueryEeGroupSubscriptionWithResponse request returning *QueryEeGroupSubscriptionResponse
func (c *ClientWithResponses) QueryEeGroupSubscriptionWithResponse(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, subsId string, reqEditors ...RequestEditorFn) (*QueryEeGroupSubscriptionResponse, error) {
	rsp, err := c.QueryEeGroupSubscription(ctx, ueGroupId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryEeGroupSubscriptionResponse(rsp)
}

// ModifyEeGroupSubscriptionWithBodyWithResponse request with arbitrary body returning *ModifyEeGroupSubscriptionResponse
func (c *ClientWithResponses) ModifyEeGroupSubscriptionWithBodyWithResponse(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, subsId string, params *ModifyEeGroupSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyEeGroupSubscriptionResponse, error) {
	rsp, err := c.ModifyEeGroupSubscriptionWithBody(ctx, ueGroupId, subsId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyEeGroupSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) ModifyEeGroupSubscriptionWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, subsId string, params *ModifyEeGroupSubscriptionParams, body ModifyEeGroupSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyEeGroupSubscriptionResponse, error) {
	rsp, err := c.ModifyEeGroupSubscriptionWithApplicationJSONPatchPlusJSONBody(ctx, ueGroupId, subsId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyEeGroupSubscriptionResponse(rsp)
}

// UpdateEeGroupSubscriptionsWithBodyWithResponse request with arbitrary body returning *UpdateEeGroupSubscriptionsResponse
func (c *ClientWithResponses) UpdateEeGroupSubscriptionsWithBodyWithResponse(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEeGroupSubscriptionsResponse, error) {
	rsp, err := c.UpdateEeGroupSubscriptionsWithBody(ctx, ueGroupId, subsId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEeGroupSubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) UpdateEeGroupSubscriptionsWithResponse(ctx context.Context, ueGroupId externalRef8.VarUeGroupId, subsId string, body UpdateEeGroupSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEeGroupSubscriptionsResponse, error) {
	rsp, err := c.UpdateEeGroupSubscriptions(ctx, ueGroupId, subsId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEeGroupSubscriptionsResponse(rsp)
}

// GetSharedDataWithResponse request returning *GetSharedDataResponse
func (c *ClientWithResponses) GetSharedDataWithResponse(ctx context.Context, params *GetSharedDataParams, reqEditors ...RequestEditorFn) (*GetSharedDataResponse, error) {
	rsp, err := c.GetSharedData(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSharedDataResponse(rsp)
}

// GetIndividualSharedDataWithResponse request returning *GetIndividualSharedDataResponse
func (c *ClientWithResponses) GetIndividualSharedDataWithResponse(ctx context.Context, sharedDataId externalRef3.SharedDataId, params *GetIndividualSharedDataParams, reqEditors ...RequestEditorFn) (*GetIndividualSharedDataResponse, error) {
	rsp, err := c.GetIndividualSharedData(ctx, sharedDataId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndividualSharedDataResponse(rsp)
}

// RemoveMultipleSubscriptionDataSubscriptionsWithResponse request returning *RemoveMultipleSubscriptionDataSubscriptionsResponse
func (c *ClientWithResponses) RemoveMultipleSubscriptionDataSubscriptionsWithResponse(ctx context.Context, params *RemoveMultipleSubscriptionDataSubscriptionsParams, reqEditors ...RequestEditorFn) (*RemoveMultipleSubscriptionDataSubscriptionsResponse, error) {
	rsp, err := c.RemoveMultipleSubscriptionDataSubscriptions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveMultipleSubscriptionDataSubscriptionsResponse(rsp)
}

// QuerySubsToNotifyWithResponse request returning *QuerySubsToNotifyResponse
func (c *ClientWithResponses) QuerySubsToNotifyWithResponse(ctx context.Context, params *QuerySubsToNotifyParams, reqEditors ...RequestEditorFn) (*QuerySubsToNotifyResponse, error) {
	rsp, err := c.QuerySubsToNotify(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerySubsToNotifyResponse(rsp)
}

// SubscriptionDataSubscriptionsWithBodyWithResponse request with arbitrary body returning *SubscriptionDataSubscriptionsResponse
func (c *ClientWithResponses) SubscriptionDataSubscriptionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscriptionDataSubscriptionsResponse, error) {
	rsp, err := c.SubscriptionDataSubscriptionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscriptionDataSubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) SubscriptionDataSubscriptionsWithResponse(ctx context.Context, body SubscriptionDataSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscriptionDataSubscriptionsResponse, error) {
	rsp, err := c.SubscriptionDataSubscriptions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscriptionDataSubscriptionsResponse(rsp)
}

// RemovesubscriptionDataSubscriptionsWithResponse request returning *RemovesubscriptionDataSubscriptionsResponse
func (c *ClientWithResponses) RemovesubscriptionDataSubscriptionsWithResponse(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*RemovesubscriptionDataSubscriptionsResponse, error) {
	rsp, err := c.RemovesubscriptionDataSubscriptions(ctx, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemovesubscriptionDataSubscriptionsResponse(rsp)
}

// QuerySubscriptionDataSubscriptionsWithResponse request returning *QuerySubscriptionDataSubscriptionsResponse
func (c *ClientWithResponses) QuerySubscriptionDataSubscriptionsWithResponse(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*QuerySubscriptionDataSubscriptionsResponse, error) {
	rsp, err := c.QuerySubscriptionDataSubscriptions(ctx, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerySubscriptionDataSubscriptionsResponse(rsp)
}

// ModifysubscriptionDataSubscriptionWithBodyWithResponse request with arbitrary body returning *ModifysubscriptionDataSubscriptionResponse
func (c *ClientWithResponses) ModifysubscriptionDataSubscriptionWithBodyWithResponse(ctx context.Context, subsId string, params *ModifysubscriptionDataSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifysubscriptionDataSubscriptionResponse, error) {
	rsp, err := c.ModifysubscriptionDataSubscriptionWithBody(ctx, subsId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifysubscriptionDataSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) ModifysubscriptionDataSubscriptionWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, subsId string, params *ModifysubscriptionDataSubscriptionParams, body ModifysubscriptionDataSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifysubscriptionDataSubscriptionResponse, error) {
	rsp, err := c.ModifysubscriptionDataSubscriptionWithApplicationJSONPatchPlusJSONBody(ctx, subsId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifysubscriptionDataSubscriptionResponse(rsp)
}

// DeleteAuthenticationStatusWithResponse request returning *DeleteAuthenticationStatusResponse
func (c *ClientWithResponses) DeleteAuthenticationStatusWithResponse(ctx context.Context, ueId externalRef0.Supi, reqEditors ...RequestEditorFn) (*DeleteAuthenticationStatusResponse, error) {
	rsp, err := c.DeleteAuthenticationStatus(ctx, ueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAuthenticationStatusResponse(rsp)
}

// QueryAuthenticationStatusWithResponse request returning *QueryAuthenticationStatusResponse
func (c *ClientWithResponses) QueryAuthenticationStatusWithResponse(ctx context.Context, ueId externalRef0.Supi, params *QueryAuthenticationStatusParams, reqEditors ...RequestEditorFn) (*QueryAuthenticationStatusResponse, error) {
	rsp, err := c.QueryAuthenticationStatus(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryAuthenticationStatusResponse(rsp)
}

// CreateAuthenticationStatusWithBodyWithResponse request with arbitrary body returning *CreateAuthenticationStatusResponse
func (c *ClientWithResponses) CreateAuthenticationStatusWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthenticationStatusResponse, error) {
	rsp, err := c.CreateAuthenticationStatusWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthenticationStatusResponse(rsp)
}

func (c *ClientWithResponses) CreateAuthenticationStatusWithResponse(ctx context.Context, ueId externalRef0.Supi, body CreateAuthenticationStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthenticationStatusResponse, error) {
	rsp, err := c.CreateAuthenticationStatus(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthenticationStatusResponse(rsp)
}

// DeleteIndividualAuthenticationStatusWithResponse request returning *DeleteIndividualAuthenticationStatusResponse
func (c *ClientWithResponses) DeleteIndividualAuthenticationStatusWithResponse(ctx context.Context, ueId externalRef0.Supi, servingNetworkName externalRef4.ServingNetworkName, reqEditors ...RequestEditorFn) (*DeleteIndividualAuthenticationStatusResponse, error) {
	rsp, err := c.DeleteIndividualAuthenticationStatus(ctx, ueId, servingNetworkName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndividualAuthenticationStatusResponse(rsp)
}

// QueryIndividualAuthenticationStatusWithResponse request returning *QueryIndividualAuthenticationStatusResponse
func (c *ClientWithResponses) QueryIndividualAuthenticationStatusWithResponse(ctx context.Context, ueId externalRef0.Supi, servingNetworkName externalRef4.ServingNetworkName, params *QueryIndividualAuthenticationStatusParams, reqEditors ...RequestEditorFn) (*QueryIndividualAuthenticationStatusResponse, error) {
	rsp, err := c.QueryIndividualAuthenticationStatus(ctx, ueId, servingNetworkName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryIndividualAuthenticationStatusResponse(rsp)
}

// CreateIndividualAuthenticationStatusWithBodyWithResponse request with arbitrary body returning *CreateIndividualAuthenticationStatusResponse
func (c *ClientWithResponses) CreateIndividualAuthenticationStatusWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, servingNetworkName externalRef4.ServingNetworkName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualAuthenticationStatusResponse, error) {
	rsp, err := c.CreateIndividualAuthenticationStatusWithBody(ctx, ueId, servingNetworkName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualAuthenticationStatusResponse(rsp)
}

func (c *ClientWithResponses) CreateIndividualAuthenticationStatusWithResponse(ctx context.Context, ueId externalRef0.Supi, servingNetworkName externalRef4.ServingNetworkName, body CreateIndividualAuthenticationStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualAuthenticationStatusResponse, error) {
	rsp, err := c.CreateIndividualAuthenticationStatus(ctx, ueId, servingNetworkName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualAuthenticationStatusResponse(rsp)
}

// QueryAuthSubsDataWithResponse request returning *QueryAuthSubsDataResponse
func (c *ClientWithResponses) QueryAuthSubsDataWithResponse(ctx context.Context, ueId externalRef0.Supi, params *QueryAuthSubsDataParams, reqEditors ...RequestEditorFn) (*QueryAuthSubsDataResponse, error) {
	rsp, err := c.QueryAuthSubsData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryAuthSubsDataResponse(rsp)
}

// ModifyAuthenticationSubscriptionWithBodyWithResponse request with arbitrary body returning *ModifyAuthenticationSubscriptionResponse
func (c *ClientWithResponses) ModifyAuthenticationSubscriptionWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, params *ModifyAuthenticationSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyAuthenticationSubscriptionResponse, error) {
	rsp, err := c.ModifyAuthenticationSubscriptionWithBody(ctx, ueId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyAuthenticationSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) ModifyAuthenticationSubscriptionWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, params *ModifyAuthenticationSubscriptionParams, body ModifyAuthenticationSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyAuthenticationSubscriptionResponse, error) {
	rsp, err := c.ModifyAuthenticationSubscriptionWithApplicationJSONPatchPlusJSONBody(ctx, ueId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyAuthenticationSubscriptionResponse(rsp)
}

// QueryContextDataWithResponse request returning *QueryContextDataResponse
func (c *ClientWithResponses) QueryContextDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryContextDataParams, reqEditors ...RequestEditorFn) (*QueryContextDataResponse, error) {
	rsp, err := c.QueryContextData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryContextDataResponse(rsp)
}

// QueryAmfContext3gppWithResponse request returning *QueryAmfContext3gppResponse
func (c *ClientWithResponses) QueryAmfContext3gppWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryAmfContext3gppParams, reqEditors ...RequestEditorFn) (*QueryAmfContext3gppResponse, error) {
	rsp, err := c.QueryAmfContext3gpp(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryAmfContext3gppResponse(rsp)
}

// AmfContext3gppWithBodyWithResponse request with arbitrary body returning *AmfContext3gppResponse
func (c *ClientWithResponses) AmfContext3gppWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *AmfContext3gppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AmfContext3gppResponse, error) {
	rsp, err := c.AmfContext3gppWithBody(ctx, ueId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAmfContext3gppResponse(rsp)
}

func (c *ClientWithResponses) AmfContext3gppWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *AmfContext3gppParams, body AmfContext3gppApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*AmfContext3gppResponse, error) {
	rsp, err := c.AmfContext3gppWithApplicationJSONPatchPlusJSONBody(ctx, ueId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAmfContext3gppResponse(rsp)
}

// CreateAmfContext3gppWithBodyWithResponse request with arbitrary body returning *CreateAmfContext3gppResponse
func (c *ClientWithResponses) CreateAmfContext3gppWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAmfContext3gppResponse, error) {
	rsp, err := c.CreateAmfContext3gppWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAmfContext3gppResponse(rsp)
}

func (c *ClientWithResponses) CreateAmfContext3gppWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body CreateAmfContext3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAmfContext3gppResponse, error) {
	rsp, err := c.CreateAmfContext3gpp(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAmfContext3gppResponse(rsp)
}

// QueryAmfContextNon3gppWithResponse request returning *QueryAmfContextNon3gppResponse
func (c *ClientWithResponses) QueryAmfContextNon3gppWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryAmfContextNon3gppParams, reqEditors ...RequestEditorFn) (*QueryAmfContextNon3gppResponse, error) {
	rsp, err := c.QueryAmfContextNon3gpp(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryAmfContextNon3gppResponse(rsp)
}

// AmfContextNon3gppWithBodyWithResponse request with arbitrary body returning *AmfContextNon3gppResponse
func (c *ClientWithResponses) AmfContextNon3gppWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *AmfContextNon3gppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AmfContextNon3gppResponse, error) {
	rsp, err := c.AmfContextNon3gppWithBody(ctx, ueId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAmfContextNon3gppResponse(rsp)
}

func (c *ClientWithResponses) AmfContextNon3gppWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *AmfContextNon3gppParams, body AmfContextNon3gppApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*AmfContextNon3gppResponse, error) {
	rsp, err := c.AmfContextNon3gppWithApplicationJSONPatchPlusJSONBody(ctx, ueId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAmfContextNon3gppResponse(rsp)
}

// CreateAmfContextNon3gppWithBodyWithResponse request with arbitrary body returning *CreateAmfContextNon3gppResponse
func (c *ClientWithResponses) CreateAmfContextNon3gppWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAmfContextNon3gppResponse, error) {
	rsp, err := c.CreateAmfContextNon3gppWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAmfContextNon3gppResponse(rsp)
}

func (c *ClientWithResponses) CreateAmfContextNon3gppWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body CreateAmfContextNon3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAmfContextNon3gppResponse, error) {
	rsp, err := c.CreateAmfContextNon3gpp(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAmfContextNon3gppResponse(rsp)
}

// QueryeesubscriptionsWithResponse request returning *QueryeesubscriptionsResponse
func (c *ClientWithResponses) QueryeesubscriptionsWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryeesubscriptionsParams, reqEditors ...RequestEditorFn) (*QueryeesubscriptionsResponse, error) {
	rsp, err := c.Queryeesubscriptions(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryeesubscriptionsResponse(rsp)
}

// CreateEeSubscriptionsWithBodyWithResponse request with arbitrary body returning *CreateEeSubscriptionsResponse
func (c *ClientWithResponses) CreateEeSubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEeSubscriptionsResponse, error) {
	rsp, err := c.CreateEeSubscriptionsWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEeSubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) CreateEeSubscriptionsWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body CreateEeSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEeSubscriptionsResponse, error) {
	rsp, err := c.CreateEeSubscriptions(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEeSubscriptionsResponse(rsp)
}

// RemoveeeSubscriptionsWithResponse request returning *RemoveeeSubscriptionsResponse
func (c *ClientWithResponses) RemoveeeSubscriptionsWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*RemoveeeSubscriptionsResponse, error) {
	rsp, err := c.RemoveeeSubscriptions(ctx, ueId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveeeSubscriptionsResponse(rsp)
}

// QueryeeSubscriptionWithResponse request returning *QueryeeSubscriptionResponse
func (c *ClientWithResponses) QueryeeSubscriptionWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*QueryeeSubscriptionResponse, error) {
	rsp, err := c.QueryeeSubscription(ctx, ueId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryeeSubscriptionResponse(rsp)
}

// ModifyEesubscriptionWithBodyWithResponse request with arbitrary body returning *ModifyEesubscriptionResponse
func (c *ClientWithResponses) ModifyEesubscriptionWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyEesubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyEesubscriptionResponse, error) {
	rsp, err := c.ModifyEesubscriptionWithBody(ctx, ueId, subsId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyEesubscriptionResponse(rsp)
}

func (c *ClientWithResponses) ModifyEesubscriptionWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyEesubscriptionParams, body ModifyEesubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyEesubscriptionResponse, error) {
	rsp, err := c.ModifyEesubscriptionWithApplicationJSONPatchPlusJSONBody(ctx, ueId, subsId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyEesubscriptionResponse(rsp)
}

// UpdateEesubscriptionsWithBodyWithResponse request with arbitrary body returning *UpdateEesubscriptionsResponse
func (c *ClientWithResponses) UpdateEesubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEesubscriptionsResponse, error) {
	rsp, err := c.UpdateEesubscriptionsWithBody(ctx, ueId, subsId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEesubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) UpdateEesubscriptionsWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, body UpdateEesubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEesubscriptionsResponse, error) {
	rsp, err := c.UpdateEesubscriptions(ctx, ueId, subsId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEesubscriptionsResponse(rsp)
}

// RemoveAmfSubscriptionsInfoWithResponse request returning *RemoveAmfSubscriptionsInfoResponse
func (c *ClientWithResponses) RemoveAmfSubscriptionsInfoWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*RemoveAmfSubscriptionsInfoResponse, error) {
	rsp, err := c.RemoveAmfSubscriptionsInfo(ctx, ueId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveAmfSubscriptionsInfoResponse(rsp)
}

// GetAmfSubscriptionInfoWithResponse request returning *GetAmfSubscriptionInfoResponse
func (c *ClientWithResponses) GetAmfSubscriptionInfoWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*GetAmfSubscriptionInfoResponse, error) {
	rsp, err := c.GetAmfSubscriptionInfo(ctx, ueId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAmfSubscriptionInfoResponse(rsp)
}

// ModifyAmfSubscriptionInfoWithBodyWithResponse request with arbitrary body returning *ModifyAmfSubscriptionInfoResponse
func (c *ClientWithResponses) ModifyAmfSubscriptionInfoWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyAmfSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyAmfSubscriptionInfoResponse, error) {
	rsp, err := c.ModifyAmfSubscriptionInfoWithBody(ctx, ueId, subsId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyAmfSubscriptionInfoResponse(rsp)
}

func (c *ClientWithResponses) ModifyAmfSubscriptionInfoWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyAmfSubscriptionInfoParams, body ModifyAmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyAmfSubscriptionInfoResponse, error) {
	rsp, err := c.ModifyAmfSubscriptionInfoWithApplicationJSONPatchPlusJSONBody(ctx, ueId, subsId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyAmfSubscriptionInfoResponse(rsp)
}

// CreateAMFSubscriptionsWithBodyWithResponse request with arbitrary body returning *CreateAMFSubscriptionsResponse
func (c *ClientWithResponses) CreateAMFSubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAMFSubscriptionsResponse, error) {
	rsp, err := c.CreateAMFSubscriptionsWithBody(ctx, ueId, subsId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAMFSubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) CreateAMFSubscriptionsWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, body CreateAMFSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAMFSubscriptionsResponse, error) {
	rsp, err := c.CreateAMFSubscriptions(ctx, ueId, subsId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAMFSubscriptionsResponse(rsp)
}

// RemoveHssSubscriptionsInfoWithResponse request returning *RemoveHssSubscriptionsInfoResponse
func (c *ClientWithResponses) RemoveHssSubscriptionsInfoWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*RemoveHssSubscriptionsInfoResponse, error) {
	rsp, err := c.RemoveHssSubscriptionsInfo(ctx, ueId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveHssSubscriptionsInfoResponse(rsp)
}

// GetHssSubscriptionInfoWithResponse request returning *GetHssSubscriptionInfoResponse
func (c *ClientWithResponses) GetHssSubscriptionInfoWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*GetHssSubscriptionInfoResponse, error) {
	rsp, err := c.GetHssSubscriptionInfo(ctx, ueId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHssSubscriptionInfoResponse(rsp)
}

// ModifyHssSubscriptionInfoWithBodyWithResponse request with arbitrary body returning *ModifyHssSubscriptionInfoResponse
func (c *ClientWithResponses) ModifyHssSubscriptionInfoWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyHssSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyHssSubscriptionInfoResponse, error) {
	rsp, err := c.ModifyHssSubscriptionInfoWithBody(ctx, ueId, subsId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyHssSubscriptionInfoResponse(rsp)
}

func (c *ClientWithResponses) ModifyHssSubscriptionInfoWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyHssSubscriptionInfoParams, body ModifyHssSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyHssSubscriptionInfoResponse, error) {
	rsp, err := c.ModifyHssSubscriptionInfoWithApplicationJSONPatchPlusJSONBody(ctx, ueId, subsId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyHssSubscriptionInfoResponse(rsp)
}

// CreateHSSSubscriptionsWithBodyWithResponse request with arbitrary body returning *CreateHSSSubscriptionsResponse
func (c *ClientWithResponses) CreateHSSSubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHSSSubscriptionsResponse, error) {
	rsp, err := c.CreateHSSSubscriptionsWithBody(ctx, ueId, subsId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHSSSubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) CreateHSSSubscriptionsWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, body CreateHSSSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHSSSubscriptionsResponse, error) {
	rsp, err := c.CreateHSSSubscriptions(ctx, ueId, subsId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHSSSubscriptionsResponse(rsp)
}

// RemoveSmfSubscriptionsInfoWithResponse request returning *RemoveSmfSubscriptionsInfoResponse
func (c *ClientWithResponses) RemoveSmfSubscriptionsInfoWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*RemoveSmfSubscriptionsInfoResponse, error) {
	rsp, err := c.RemoveSmfSubscriptionsInfo(ctx, ueId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveSmfSubscriptionsInfoResponse(rsp)
}

// GetSmfSubscriptionInfoWithResponse request returning *GetSmfSubscriptionInfoResponse
func (c *ClientWithResponses) GetSmfSubscriptionInfoWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*GetSmfSubscriptionInfoResponse, error) {
	rsp, err := c.GetSmfSubscriptionInfo(ctx, ueId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSmfSubscriptionInfoResponse(rsp)
}

// ModifySmfSubscriptionInfoWithBodyWithResponse request with arbitrary body returning *ModifySmfSubscriptionInfoResponse
func (c *ClientWithResponses) ModifySmfSubscriptionInfoWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifySmfSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifySmfSubscriptionInfoResponse, error) {
	rsp, err := c.ModifySmfSubscriptionInfoWithBody(ctx, ueId, subsId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifySmfSubscriptionInfoResponse(rsp)
}

func (c *ClientWithResponses) ModifySmfSubscriptionInfoWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifySmfSubscriptionInfoParams, body ModifySmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifySmfSubscriptionInfoResponse, error) {
	rsp, err := c.ModifySmfSubscriptionInfoWithApplicationJSONPatchPlusJSONBody(ctx, ueId, subsId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifySmfSubscriptionInfoResponse(rsp)
}

// CreateSMFSubscriptionsWithBodyWithResponse request with arbitrary body returning *CreateSMFSubscriptionsResponse
func (c *ClientWithResponses) CreateSMFSubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSMFSubscriptionsResponse, error) {
	rsp, err := c.CreateSMFSubscriptionsWithBody(ctx, ueId, subsId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSMFSubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) CreateSMFSubscriptionsWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, body CreateSMFSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSMFSubscriptionsResponse, error) {
	rsp, err := c.CreateSMFSubscriptions(ctx, ueId, subsId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSMFSubscriptionsResponse(rsp)
}

// DeleteIpSmGwContextWithResponse request returning *DeleteIpSmGwContextResponse
func (c *ClientWithResponses) DeleteIpSmGwContextWithResponse(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*DeleteIpSmGwContextResponse, error) {
	rsp, err := c.DeleteIpSmGwContext(ctx, ueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIpSmGwContextResponse(rsp)
}

// QueryIpSmGwContextWithResponse request returning *QueryIpSmGwContextResponse
func (c *ClientWithResponses) QueryIpSmGwContextWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryIpSmGwContextParams, reqEditors ...RequestEditorFn) (*QueryIpSmGwContextResponse, error) {
	rsp, err := c.QueryIpSmGwContext(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryIpSmGwContextResponse(rsp)
}

// ModifyIpSmGwContextWithBodyWithResponse request with arbitrary body returning *ModifyIpSmGwContextResponse
func (c *ClientWithResponses) ModifyIpSmGwContextWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyIpSmGwContextResponse, error) {
	rsp, err := c.ModifyIpSmGwContextWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyIpSmGwContextResponse(rsp)
}

func (c *ClientWithResponses) ModifyIpSmGwContextWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body ModifyIpSmGwContextApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyIpSmGwContextResponse, error) {
	rsp, err := c.ModifyIpSmGwContextWithApplicationJSONPatchPlusJSONBody(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyIpSmGwContextResponse(rsp)
}

// CreateIpSmGwContextWithBodyWithResponse request with arbitrary body returning *CreateIpSmGwContextResponse
func (c *ClientWithResponses) CreateIpSmGwContextWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIpSmGwContextResponse, error) {
	rsp, err := c.CreateIpSmGwContextWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIpSmGwContextResponse(rsp)
}

func (c *ClientWithResponses) CreateIpSmGwContextWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body CreateIpSmGwContextJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIpSmGwContextResponse, error) {
	rsp, err := c.CreateIpSmGwContext(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIpSmGwContextResponse(rsp)
}

// QueryUeLocationWithResponse request returning *QueryUeLocationResponse
func (c *ClientWithResponses) QueryUeLocationWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryUeLocationParams, reqEditors ...RequestEditorFn) (*QueryUeLocationResponse, error) {
	rsp, err := c.QueryUeLocation(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryUeLocationResponse(rsp)
}

// DeleteMessageWaitingDataWithResponse request returning *DeleteMessageWaitingDataResponse
func (c *ClientWithResponses) DeleteMessageWaitingDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*DeleteMessageWaitingDataResponse, error) {
	rsp, err := c.DeleteMessageWaitingData(ctx, ueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMessageWaitingDataResponse(rsp)
}

// QueryMessageWaitingDataWithResponse request returning *QueryMessageWaitingDataResponse
func (c *ClientWithResponses) QueryMessageWaitingDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryMessageWaitingDataParams, reqEditors ...RequestEditorFn) (*QueryMessageWaitingDataResponse, error) {
	rsp, err := c.QueryMessageWaitingData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryMessageWaitingDataResponse(rsp)
}

// ModifyMessageWaitingDataWithBodyWithResponse request with arbitrary body returning *ModifyMessageWaitingDataResponse
func (c *ClientWithResponses) ModifyMessageWaitingDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyMessageWaitingDataResponse, error) {
	rsp, err := c.ModifyMessageWaitingDataWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyMessageWaitingDataResponse(rsp)
}

func (c *ClientWithResponses) ModifyMessageWaitingDataWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body ModifyMessageWaitingDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyMessageWaitingDataResponse, error) {
	rsp, err := c.ModifyMessageWaitingDataWithApplicationJSONPatchPlusJSONBody(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyMessageWaitingDataResponse(rsp)
}

// CreateMessageWaitingDataWithBodyWithResponse request with arbitrary body returning *CreateMessageWaitingDataResponse
func (c *ClientWithResponses) CreateMessageWaitingDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMessageWaitingDataResponse, error) {
	rsp, err := c.CreateMessageWaitingDataWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMessageWaitingDataResponse(rsp)
}

func (c *ClientWithResponses) CreateMessageWaitingDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body CreateMessageWaitingDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMessageWaitingDataResponse, error) {
	rsp, err := c.CreateMessageWaitingData(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMessageWaitingDataResponse(rsp)
}

// QuerysdmsubscriptionsWithResponse request returning *QuerysdmsubscriptionsResponse
func (c *ClientWithResponses) QuerysdmsubscriptionsWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QuerysdmsubscriptionsParams, reqEditors ...RequestEditorFn) (*QuerysdmsubscriptionsResponse, error) {
	rsp, err := c.Querysdmsubscriptions(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerysdmsubscriptionsResponse(rsp)
}

// CreateSdmSubscriptionsWithBodyWithResponse request with arbitrary body returning *CreateSdmSubscriptionsResponse
func (c *ClientWithResponses) CreateSdmSubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSdmSubscriptionsResponse, error) {
	rsp, err := c.CreateSdmSubscriptionsWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSdmSubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) CreateSdmSubscriptionsWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body CreateSdmSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSdmSubscriptionsResponse, error) {
	rsp, err := c.CreateSdmSubscriptions(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSdmSubscriptionsResponse(rsp)
}

// RemovesdmSubscriptionsWithResponse request returning *RemovesdmSubscriptionsResponse
func (c *ClientWithResponses) RemovesdmSubscriptionsWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*RemovesdmSubscriptionsResponse, error) {
	rsp, err := c.RemovesdmSubscriptions(ctx, ueId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemovesdmSubscriptionsResponse(rsp)
}

// QuerysdmSubscriptionWithResponse request returning *QuerysdmSubscriptionResponse
func (c *ClientWithResponses) QuerysdmSubscriptionWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*QuerysdmSubscriptionResponse, error) {
	rsp, err := c.QuerysdmSubscription(ctx, ueId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerysdmSubscriptionResponse(rsp)
}

// ModifysdmSubscriptionWithBodyWithResponse request with arbitrary body returning *ModifysdmSubscriptionResponse
func (c *ClientWithResponses) ModifysdmSubscriptionWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifysdmSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifysdmSubscriptionResponse, error) {
	rsp, err := c.ModifysdmSubscriptionWithBody(ctx, ueId, subsId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifysdmSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) ModifysdmSubscriptionWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifysdmSubscriptionParams, body ModifysdmSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifysdmSubscriptionResponse, error) {
	rsp, err := c.ModifysdmSubscriptionWithApplicationJSONPatchPlusJSONBody(ctx, ueId, subsId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifysdmSubscriptionResponse(rsp)
}

// UpdatesdmsubscriptionsWithBodyWithResponse request with arbitrary body returning *UpdatesdmsubscriptionsResponse
func (c *ClientWithResponses) UpdatesdmsubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatesdmsubscriptionsResponse, error) {
	rsp, err := c.UpdatesdmsubscriptionsWithBody(ctx, ueId, subsId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatesdmsubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) UpdatesdmsubscriptionsWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, body UpdatesdmsubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatesdmsubscriptionsResponse, error) {
	rsp, err := c.Updatesdmsubscriptions(ctx, ueId, subsId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatesdmsubscriptionsResponse(rsp)
}

// RemoveHssSDMSubscriptionsInfoWithResponse request returning *RemoveHssSDMSubscriptionsInfoResponse
func (c *ClientWithResponses) RemoveHssSDMSubscriptionsInfoWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*RemoveHssSDMSubscriptionsInfoResponse, error) {
	rsp, err := c.RemoveHssSDMSubscriptionsInfo(ctx, ueId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveHssSDMSubscriptionsInfoResponse(rsp)
}

// GetHssSDMSubscriptionInfoWithResponse request returning *GetHssSDMSubscriptionInfoResponse
func (c *ClientWithResponses) GetHssSDMSubscriptionInfoWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*GetHssSDMSubscriptionInfoResponse, error) {
	rsp, err := c.GetHssSDMSubscriptionInfo(ctx, ueId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHssSDMSubscriptionInfoResponse(rsp)
}

// ModifyHssSDMSubscriptionInfoWithBodyWithResponse request with arbitrary body returning *ModifyHssSDMSubscriptionInfoResponse
func (c *ClientWithResponses) ModifyHssSDMSubscriptionInfoWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyHssSDMSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyHssSDMSubscriptionInfoResponse, error) {
	rsp, err := c.ModifyHssSDMSubscriptionInfoWithBody(ctx, ueId, subsId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyHssSDMSubscriptionInfoResponse(rsp)
}

func (c *ClientWithResponses) ModifyHssSDMSubscriptionInfoWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, params *ModifyHssSDMSubscriptionInfoParams, body ModifyHssSDMSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyHssSDMSubscriptionInfoResponse, error) {
	rsp, err := c.ModifyHssSDMSubscriptionInfoWithApplicationJSONPatchPlusJSONBody(ctx, ueId, subsId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyHssSDMSubscriptionInfoResponse(rsp)
}

// CreateHSSSDMSubscriptionsWithBodyWithResponse request with arbitrary body returning *CreateHSSSDMSubscriptionsResponse
func (c *ClientWithResponses) CreateHSSSDMSubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHSSSDMSubscriptionsResponse, error) {
	rsp, err := c.CreateHSSSDMSubscriptionsWithBody(ctx, ueId, subsId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHSSSDMSubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) CreateHSSSDMSubscriptionsWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subsId string, body CreateHSSSDMSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHSSSDMSubscriptionsResponse, error) {
	rsp, err := c.CreateHSSSDMSubscriptions(ctx, ueId, subsId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHSSSDMSubscriptionsResponse(rsp)
}

// QuerySmfRegListWithResponse request returning *QuerySmfRegListResponse
func (c *ClientWithResponses) QuerySmfRegListWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QuerySmfRegListParams, reqEditors ...RequestEditorFn) (*QuerySmfRegListResponse, error) {
	rsp, err := c.QuerySmfRegList(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerySmfRegListResponse(rsp)
}

// DeleteSmfRegistrationWithResponse request returning *DeleteSmfRegistrationResponse
func (c *ClientWithResponses) DeleteSmfRegistrationWithResponse(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, reqEditors ...RequestEditorFn) (*DeleteSmfRegistrationResponse, error) {
	rsp, err := c.DeleteSmfRegistration(ctx, ueId, pduSessionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSmfRegistrationResponse(rsp)
}

// QuerySmfRegistrationWithResponse request returning *QuerySmfRegistrationResponse
func (c *ClientWithResponses) QuerySmfRegistrationWithResponse(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, params *QuerySmfRegistrationParams, reqEditors ...RequestEditorFn) (*QuerySmfRegistrationResponse, error) {
	rsp, err := c.QuerySmfRegistration(ctx, ueId, pduSessionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerySmfRegistrationResponse(rsp)
}

// CreateOrUpdateSmfRegistrationWithBodyWithResponse request with arbitrary body returning *CreateOrUpdateSmfRegistrationResponse
func (c *ClientWithResponses) CreateOrUpdateSmfRegistrationWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateSmfRegistrationResponse, error) {
	rsp, err := c.CreateOrUpdateSmfRegistrationWithBody(ctx, ueId, pduSessionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateSmfRegistrationResponse(rsp)
}

func (c *ClientWithResponses) CreateOrUpdateSmfRegistrationWithResponse(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, body CreateOrUpdateSmfRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateSmfRegistrationResponse, error) {
	rsp, err := c.CreateOrUpdateSmfRegistration(ctx, ueId, pduSessionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateSmfRegistrationResponse(rsp)
}

// DeleteSmsfContext3gppWithResponse request returning *DeleteSmsfContext3gppResponse
func (c *ClientWithResponses) DeleteSmsfContext3gppWithResponse(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*DeleteSmsfContext3gppResponse, error) {
	rsp, err := c.DeleteSmsfContext3gpp(ctx, ueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSmsfContext3gppResponse(rsp)
}

// QuerySmsfContext3gppWithResponse request returning *QuerySmsfContext3gppResponse
func (c *ClientWithResponses) QuerySmsfContext3gppWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QuerySmsfContext3gppParams, reqEditors ...RequestEditorFn) (*QuerySmsfContext3gppResponse, error) {
	rsp, err := c.QuerySmsfContext3gpp(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerySmsfContext3gppResponse(rsp)
}

// CreateSmsfContext3gppWithBodyWithResponse request with arbitrary body returning *CreateSmsfContext3gppResponse
func (c *ClientWithResponses) CreateSmsfContext3gppWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSmsfContext3gppResponse, error) {
	rsp, err := c.CreateSmsfContext3gppWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSmsfContext3gppResponse(rsp)
}

func (c *ClientWithResponses) CreateSmsfContext3gppWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body CreateSmsfContext3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSmsfContext3gppResponse, error) {
	rsp, err := c.CreateSmsfContext3gpp(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSmsfContext3gppResponse(rsp)
}

// DeleteSmsfContextNon3gppWithResponse request returning *DeleteSmsfContextNon3gppResponse
func (c *ClientWithResponses) DeleteSmsfContextNon3gppWithResponse(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*DeleteSmsfContextNon3gppResponse, error) {
	rsp, err := c.DeleteSmsfContextNon3gpp(ctx, ueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSmsfContextNon3gppResponse(rsp)
}

// QuerySmsfContextNon3gppWithResponse request returning *QuerySmsfContextNon3gppResponse
func (c *ClientWithResponses) QuerySmsfContextNon3gppWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QuerySmsfContextNon3gppParams, reqEditors ...RequestEditorFn) (*QuerySmsfContextNon3gppResponse, error) {
	rsp, err := c.QuerySmsfContextNon3gpp(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerySmsfContextNon3gppResponse(rsp)
}

// CreateSmsfContextNon3gppWithBodyWithResponse request with arbitrary body returning *CreateSmsfContextNon3gppResponse
func (c *ClientWithResponses) CreateSmsfContextNon3gppWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSmsfContextNon3gppResponse, error) {
	rsp, err := c.CreateSmsfContextNon3gppWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSmsfContextNon3gppResponse(rsp)
}

func (c *ClientWithResponses) CreateSmsfContextNon3gppWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body CreateSmsfContextNon3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSmsfContextNon3gppResponse, error) {
	rsp, err := c.CreateSmsfContextNon3gpp(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSmsfContextNon3gppResponse(rsp)
}

// QueryCoverageRestrictionDataWithResponse request returning *QueryCoverageRestrictionDataResponse
func (c *ClientWithResponses) QueryCoverageRestrictionDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryCoverageRestrictionDataParams, reqEditors ...RequestEditorFn) (*QueryCoverageRestrictionDataResponse, error) {
	rsp, err := c.QueryCoverageRestrictionData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryCoverageRestrictionDataResponse(rsp)
}

// QueryEEDataWithResponse request returning *QueryEEDataResponse
func (c *ClientWithResponses) QueryEEDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryEEDataParams, reqEditors ...RequestEditorFn) (*QueryEEDataResponse, error) {
	rsp, err := c.QueryEEData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryEEDataResponse(rsp)
}

// GetIdentityDataWithResponse request returning *GetIdentityDataResponse
func (c *ClientWithResponses) GetIdentityDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *GetIdentityDataParams, reqEditors ...RequestEditorFn) (*GetIdentityDataResponse, error) {
	rsp, err := c.GetIdentityData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdentityDataResponse(rsp)
}

// QueryLcsMoDataWithResponse request returning *QueryLcsMoDataResponse
func (c *ClientWithResponses) QueryLcsMoDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryLcsMoDataParams, reqEditors ...RequestEditorFn) (*QueryLcsMoDataResponse, error) {
	rsp, err := c.QueryLcsMoData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryLcsMoDataResponse(rsp)
}

// QueryLcsPrivacyDataWithResponse request returning *QueryLcsPrivacyDataResponse
func (c *ClientWithResponses) QueryLcsPrivacyDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryLcsPrivacyDataParams, reqEditors ...RequestEditorFn) (*QueryLcsPrivacyDataResponse, error) {
	rsp, err := c.QueryLcsPrivacyData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryLcsPrivacyDataResponse(rsp)
}

// GetNiddAuDataWithResponse request returning *GetNiddAuDataResponse
func (c *ClientWithResponses) GetNiddAuDataWithResponse(ctx context.Context, ueId string, params *GetNiddAuDataParams, reqEditors ...RequestEditorFn) (*GetNiddAuDataResponse, error) {
	rsp, err := c.GetNiddAuData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNiddAuDataResponse(rsp)
}

// GetOdbDataWithResponse request returning *GetOdbDataResponse
func (c *ClientWithResponses) GetOdbDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*GetOdbDataResponse, error) {
	rsp, err := c.GetOdbData(ctx, ueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOdbDataResponse(rsp)
}

// QueryOperSpecDataWithResponse request returning *QueryOperSpecDataResponse
func (c *ClientWithResponses) QueryOperSpecDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryOperSpecDataParams, reqEditors ...RequestEditorFn) (*QueryOperSpecDataResponse, error) {
	rsp, err := c.QueryOperSpecData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryOperSpecDataResponse(rsp)
}

// ModifyOperSpecDataWithBodyWithResponse request with arbitrary body returning *ModifyOperSpecDataResponse
func (c *ClientWithResponses) ModifyOperSpecDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *ModifyOperSpecDataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyOperSpecDataResponse, error) {
	rsp, err := c.ModifyOperSpecDataWithBody(ctx, ueId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyOperSpecDataResponse(rsp)
}

func (c *ClientWithResponses) ModifyOperSpecDataWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *ModifyOperSpecDataParams, body ModifyOperSpecDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyOperSpecDataResponse, error) {
	rsp, err := c.ModifyOperSpecDataWithApplicationJSONPatchPlusJSONBody(ctx, ueId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyOperSpecDataResponse(rsp)
}

// GetppDataWithResponse request returning *GetppDataResponse
func (c *ClientWithResponses) GetppDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *GetppDataParams, reqEditors ...RequestEditorFn) (*GetppDataResponse, error) {
	rsp, err := c.GetppData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetppDataResponse(rsp)
}

// ModifyPpDataWithBodyWithResponse request with arbitrary body returning *ModifyPpDataResponse
func (c *ClientWithResponses) ModifyPpDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *ModifyPpDataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyPpDataResponse, error) {
	rsp, err := c.ModifyPpDataWithBody(ctx, ueId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyPpDataResponse(rsp)
}

func (c *ClientWithResponses) ModifyPpDataWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *ModifyPpDataParams, body ModifyPpDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyPpDataResponse, error) {
	rsp, err := c.ModifyPpDataWithApplicationJSONPatchPlusJSONBody(ctx, ueId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyPpDataResponse(rsp)
}

// QueryPPDataWithResponse request returning *QueryPPDataResponse
func (c *ClientWithResponses) QueryPPDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryPPDataParams, reqEditors ...RequestEditorFn) (*QueryPPDataResponse, error) {
	rsp, err := c.QueryPPData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryPPDataResponse(rsp)
}

// QueryAuthSoRWithResponse request returning *QueryAuthSoRResponse
func (c *ClientWithResponses) QueryAuthSoRWithResponse(ctx context.Context, ueId externalRef0.Supi, params *QueryAuthSoRParams, reqEditors ...RequestEditorFn) (*QueryAuthSoRResponse, error) {
	rsp, err := c.QueryAuthSoR(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryAuthSoRResponse(rsp)
}

// CreateAuthenticationSoRWithBodyWithResponse request with arbitrary body returning *CreateAuthenticationSoRResponse
func (c *ClientWithResponses) CreateAuthenticationSoRWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, params *CreateAuthenticationSoRParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthenticationSoRResponse, error) {
	rsp, err := c.CreateAuthenticationSoRWithBody(ctx, ueId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthenticationSoRResponse(rsp)
}

func (c *ClientWithResponses) CreateAuthenticationSoRWithResponse(ctx context.Context, ueId externalRef0.Supi, params *CreateAuthenticationSoRParams, body CreateAuthenticationSoRJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthenticationSoRResponse, error) {
	rsp, err := c.CreateAuthenticationSoR(ctx, ueId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthenticationSoRResponse(rsp)
}

// QueryCagAckWithResponse request returning *QueryCagAckResponse
func (c *ClientWithResponses) QueryCagAckWithResponse(ctx context.Context, ueId externalRef0.Supi, params *QueryCagAckParams, reqEditors ...RequestEditorFn) (*QueryCagAckResponse, error) {
	rsp, err := c.QueryCagAck(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryCagAckResponse(rsp)
}

// CreateCagUpdateAckWithBodyWithResponse request with arbitrary body returning *CreateCagUpdateAckResponse
func (c *ClientWithResponses) CreateCagUpdateAckWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, params *CreateCagUpdateAckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCagUpdateAckResponse, error) {
	rsp, err := c.CreateCagUpdateAckWithBody(ctx, ueId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCagUpdateAckResponse(rsp)
}

func (c *ClientWithResponses) CreateCagUpdateAckWithResponse(ctx context.Context, ueId externalRef0.Supi, params *CreateCagUpdateAckParams, body CreateCagUpdateAckJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCagUpdateAckResponse, error) {
	rsp, err := c.CreateCagUpdateAck(ctx, ueId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCagUpdateAckResponse(rsp)
}

// QueryNssaiAckWithResponse request returning *QueryNssaiAckResponse
func (c *ClientWithResponses) QueryNssaiAckWithResponse(ctx context.Context, ueId externalRef0.Supi, params *QueryNssaiAckParams, reqEditors ...RequestEditorFn) (*QueryNssaiAckResponse, error) {
	rsp, err := c.QueryNssaiAck(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryNssaiAckResponse(rsp)
}

// CreateOrUpdateNssaiAckWithBodyWithResponse request with arbitrary body returning *CreateOrUpdateNssaiAckResponse
func (c *ClientWithResponses) CreateOrUpdateNssaiAckWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, params *CreateOrUpdateNssaiAckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateNssaiAckResponse, error) {
	rsp, err := c.CreateOrUpdateNssaiAckWithBody(ctx, ueId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateNssaiAckResponse(rsp)
}

func (c *ClientWithResponses) CreateOrUpdateNssaiAckWithResponse(ctx context.Context, ueId externalRef0.Supi, params *CreateOrUpdateNssaiAckParams, body CreateOrUpdateNssaiAckJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateNssaiAckResponse, error) {
	rsp, err := c.CreateOrUpdateNssaiAck(ctx, ueId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateNssaiAckResponse(rsp)
}

// QueryAuthUPUWithResponse request returning *QueryAuthUPUResponse
func (c *ClientWithResponses) QueryAuthUPUWithResponse(ctx context.Context, ueId externalRef0.Supi, params *QueryAuthUPUParams, reqEditors ...RequestEditorFn) (*QueryAuthUPUResponse, error) {
	rsp, err := c.QueryAuthUPU(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryAuthUPUResponse(rsp)
}

// CreateAuthenticationUPUWithBodyWithResponse request with arbitrary body returning *CreateAuthenticationUPUResponse
func (c *ClientWithResponses) CreateAuthenticationUPUWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, params *CreateAuthenticationUPUParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthenticationUPUResponse, error) {
	rsp, err := c.CreateAuthenticationUPUWithBody(ctx, ueId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthenticationUPUResponse(rsp)
}

func (c *ClientWithResponses) CreateAuthenticationUPUWithResponse(ctx context.Context, ueId externalRef0.Supi, params *CreateAuthenticationUPUParams, body CreateAuthenticationUPUJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthenticationUPUResponse, error) {
	rsp, err := c.CreateAuthenticationUPU(ctx, ueId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthenticationUPUResponse(rsp)
}

// QueryV2xDataWithResponse request returning *QueryV2xDataResponse
func (c *ClientWithResponses) QueryV2xDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryV2xDataParams, reqEditors ...RequestEditorFn) (*QueryV2xDataResponse, error) {
	rsp, err := c.QueryV2xData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryV2xDataResponse(rsp)
}

// QueryProvisionedDataWithResponse request returning *QueryProvisionedDataResponse
func (c *ClientWithResponses) QueryProvisionedDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QueryProvisionedDataParams, reqEditors ...RequestEditorFn) (*QueryProvisionedDataResponse, error) {
	rsp, err := c.QueryProvisionedData(ctx, ueId, servingPlmnId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryProvisionedDataResponse(rsp)
}

// QueryAmDataWithResponse request returning *QueryAmDataResponse
func (c *ClientWithResponses) QueryAmDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QueryAmDataParams, reqEditors ...RequestEditorFn) (*QueryAmDataResponse, error) {
	rsp, err := c.QueryAmData(ctx, ueId, servingPlmnId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryAmDataResponse(rsp)
}

// QueryLcsBcaDataWithResponse request returning *QueryLcsBcaDataResponse
func (c *ClientWithResponses) QueryLcsBcaDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QueryLcsBcaDataParams, reqEditors ...RequestEditorFn) (*QueryLcsBcaDataResponse, error) {
	rsp, err := c.QueryLcsBcaData(ctx, ueId, servingPlmnId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryLcsBcaDataResponse(rsp)
}

// QuerySmDataWithResponse request returning *QuerySmDataResponse
func (c *ClientWithResponses) QuerySmDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QuerySmDataParams, reqEditors ...RequestEditorFn) (*QuerySmDataResponse, error) {
	rsp, err := c.QuerySmData(ctx, ueId, servingPlmnId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerySmDataResponse(rsp)
}

// QuerySmfSelectDataWithResponse request returning *QuerySmfSelectDataResponse
func (c *ClientWithResponses) QuerySmfSelectDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QuerySmfSelectDataParams, reqEditors ...RequestEditorFn) (*QuerySmfSelectDataResponse, error) {
	rsp, err := c.QuerySmfSelectData(ctx, ueId, servingPlmnId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerySmfSelectDataResponse(rsp)
}

// QuerySmsDataWithResponse request returning *QuerySmsDataResponse
func (c *ClientWithResponses) QuerySmsDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QuerySmsDataParams, reqEditors ...RequestEditorFn) (*QuerySmsDataResponse, error) {
	rsp, err := c.QuerySmsData(ctx, ueId, servingPlmnId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerySmsDataResponse(rsp)
}

// QuerySmsMngDataWithResponse request returning *QuerySmsMngDataResponse
func (c *ClientWithResponses) QuerySmsMngDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QuerySmsMngDataParams, reqEditors ...RequestEditorFn) (*QuerySmsMngDataResponse, error) {
	rsp, err := c.QuerySmsMngData(ctx, ueId, servingPlmnId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerySmsMngDataResponse(rsp)
}

// QueryTraceDataWithResponse request returning *QueryTraceDataResponse
func (c *ClientWithResponses) QueryTraceDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params *QueryTraceDataParams, reqEditors ...RequestEditorFn) (*QueryTraceDataResponse, error) {
	rsp, err := c.QueryTraceData(ctx, ueId, servingPlmnId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryTraceDataResponse(rsp)
}

// ParseReadBdtPolicyDataResponse parses an HTTP response from a ReadBdtPolicyDataWithResponse call
func ParseReadBdtPolicyDataResponse(rsp *http.Response) (*ReadBdtPolicyDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadBdtPolicyDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef5.BdtPolicyData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIndividualAppliedBdtPolicyDataResponse parses an HTTP response from a DeleteIndividualAppliedBdtPolicyDataWithResponse call
func ParseDeleteIndividualAppliedBdtPolicyDataResponse(rsp *http.Response) (*DeleteIndividualAppliedBdtPolicyDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndividualAppliedBdtPolicyDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateIndividualAppliedBdtPolicyDataResponse parses an HTTP response from a UpdateIndividualAppliedBdtPolicyDataWithResponse call
func ParseUpdateIndividualAppliedBdtPolicyDataResponse(rsp *http.Response) (*UpdateIndividualAppliedBdtPolicyDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIndividualAppliedBdtPolicyDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef5.BdtPolicyData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateIndividualAppliedBdtPolicyDataResponse parses an HTTP response from a CreateIndividualAppliedBdtPolicyDataWithResponse call
func ParseCreateIndividualAppliedBdtPolicyDataResponse(rsp *http.Response) (*CreateIndividualAppliedBdtPolicyDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIndividualAppliedBdtPolicyDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef5.BdtPolicyData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadInfluenceDataResponse parses an HTTP response from a ReadInfluenceDataWithResponse call
func ParseReadInfluenceDataResponse(rsp *http.Response) (*ReadInfluenceDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadInfluenceDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef5.TrafficInfluData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadInfluenceDataSubscriptionsResponse parses an HTTP response from a ReadInfluenceDataSubscriptionsWithResponse call
func ParseReadInfluenceDataSubscriptionsResponse(rsp *http.Response) (*ReadInfluenceDataSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadInfluenceDataSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef5.TrafficInfluSub
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateIndividualInfluenceDataSubscriptionResponse parses an HTTP response from a CreateIndividualInfluenceDataSubscriptionWithResponse call
func ParseCreateIndividualInfluenceDataSubscriptionResponse(rsp *http.Response) (*CreateIndividualInfluenceDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIndividualInfluenceDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef5.TrafficInfluSub
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIndividualInfluenceDataSubscriptionResponse parses an HTTP response from a DeleteIndividualInfluenceDataSubscriptionWithResponse call
func ParseDeleteIndividualInfluenceDataSubscriptionResponse(rsp *http.Response) (*DeleteIndividualInfluenceDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndividualInfluenceDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadIndividualInfluenceDataSubscriptionResponse parses an HTTP response from a ReadIndividualInfluenceDataSubscriptionWithResponse call
func ParseReadIndividualInfluenceDataSubscriptionResponse(rsp *http.Response) (*ReadIndividualInfluenceDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadIndividualInfluenceDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef5.TrafficInfluSub
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceIndividualInfluenceDataSubscriptionResponse parses an HTTP response from a ReplaceIndividualInfluenceDataSubscriptionWithResponse call
func ParseReplaceIndividualInfluenceDataSubscriptionResponse(rsp *http.Response) (*ReplaceIndividualInfluenceDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceIndividualInfluenceDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef5.TrafficInfluSub
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIndividualInfluenceDataResponse parses an HTTP response from a DeleteIndividualInfluenceDataWithResponse call
func ParseDeleteIndividualInfluenceDataResponse(rsp *http.Response) (*DeleteIndividualInfluenceDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndividualInfluenceDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateIndividualInfluenceDataResponse parses an HTTP response from a UpdateIndividualInfluenceDataWithResponse call
func ParseUpdateIndividualInfluenceDataResponse(rsp *http.Response) (*UpdateIndividualInfluenceDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIndividualInfluenceDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef5.TrafficInfluData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateOrReplaceIndividualInfluenceDataResponse parses an HTTP response from a CreateOrReplaceIndividualInfluenceDataWithResponse call
func ParseCreateOrReplaceIndividualInfluenceDataResponse(rsp *http.Response) (*CreateOrReplaceIndividualInfluenceDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrReplaceIndividualInfluenceDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef5.TrafficInfluData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef5.TrafficInfluData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadIPTVCongifurationDataResponse parses an HTTP response from a ReadIPTVCongifurationDataWithResponse call
func ParseReadIPTVCongifurationDataResponse(rsp *http.Response) (*ReadIPTVCongifurationDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadIPTVCongifurationDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef5.IptvConfigData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIndividualIPTVConfigurationDataResponse parses an HTTP response from a DeleteIndividualIPTVConfigurationDataWithResponse call
func ParseDeleteIndividualIPTVConfigurationDataResponse(rsp *http.Response) (*DeleteIndividualIPTVConfigurationDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndividualIPTVConfigurationDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParsePartialReplaceIndividualIPTVConfigurationDataResponse parses an HTTP response from a PartialReplaceIndividualIPTVConfigurationDataWithResponse call
func ParsePartialReplaceIndividualIPTVConfigurationDataResponse(rsp *http.Response) (*PartialReplaceIndividualIPTVConfigurationDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PartialReplaceIndividualIPTVConfigurationDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef5.IptvConfigData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateOrReplaceIndividualIPTVConfigurationDataResponse parses an HTTP response from a CreateOrReplaceIndividualIPTVConfigurationDataWithResponse call
func ParseCreateOrReplaceIndividualIPTVConfigurationDataResponse(rsp *http.Response) (*CreateOrReplaceIndividualIPTVConfigurationDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrReplaceIndividualIPTVConfigurationDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef5.IptvConfigData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef5.IptvConfigData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadPFDDataResponse parses an HTTP response from a ReadPFDDataWithResponse call
func ParseReadPFDDataResponse(rsp *http.Response) (*ReadPFDDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadPFDDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef5.PfdDataForAppExt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIndividualPFDDataResponse parses an HTTP response from a DeleteIndividualPFDDataWithResponse call
func ParseDeleteIndividualPFDDataResponse(rsp *http.Response) (*DeleteIndividualPFDDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndividualPFDDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadIndividualPFDDataResponse parses an HTTP response from a ReadIndividualPFDDataWithResponse call
func ParseReadIndividualPFDDataResponse(rsp *http.Response) (*ReadIndividualPFDDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadIndividualPFDDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef5.PfdDataForAppExt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateOrReplaceIndividualPFDDataResponse parses an HTTP response from a CreateOrReplaceIndividualPFDDataWithResponse call
func ParseCreateOrReplaceIndividualPFDDataResponse(rsp *http.Response) (*CreateOrReplaceIndividualPFDDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrReplaceIndividualPFDDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef5.PfdDataForAppExt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef5.PfdDataForAppExt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadServiceParameterDataResponse parses an HTTP response from a ReadServiceParameterDataWithResponse call
func ParseReadServiceParameterDataResponse(rsp *http.Response) (*ReadServiceParameterDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadServiceParameterDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef5.ServiceParameterData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIndividualServiceParameterDataResponse parses an HTTP response from a DeleteIndividualServiceParameterDataWithResponse call
func ParseDeleteIndividualServiceParameterDataResponse(rsp *http.Response) (*DeleteIndividualServiceParameterDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndividualServiceParameterDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateIndividualServiceParameterDataResponse parses an HTTP response from a UpdateIndividualServiceParameterDataWithResponse call
func ParseUpdateIndividualServiceParameterDataResponse(rsp *http.Response) (*UpdateIndividualServiceParameterDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIndividualServiceParameterDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef5.ServiceParameterData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateOrReplaceServiceParameterDataResponse parses an HTTP response from a CreateOrReplaceServiceParameterDataWithResponse call
func ParseCreateOrReplaceServiceParameterDataResponse(rsp *http.Response) (*CreateOrReplaceServiceParameterDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrReplaceServiceParameterDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef5.ServiceParameterData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef5.ServiceParameterData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadApplicationDataChangeSubscriptionsResponse parses an HTTP response from a ReadApplicationDataChangeSubscriptionsWithResponse call
func ParseReadApplicationDataChangeSubscriptionsResponse(rsp *http.Response) (*ReadApplicationDataChangeSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadApplicationDataChangeSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef5.ApplicationDataSubs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateIndividualApplicationDataSubscriptionResponse parses an HTTP response from a CreateIndividualApplicationDataSubscriptionWithResponse call
func ParseCreateIndividualApplicationDataSubscriptionResponse(rsp *http.Response) (*CreateIndividualApplicationDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIndividualApplicationDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef5.ApplicationDataSubs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIndividualApplicationDataSubscriptionResponse parses an HTTP response from a DeleteIndividualApplicationDataSubscriptionWithResponse call
func ParseDeleteIndividualApplicationDataSubscriptionResponse(rsp *http.Response) (*DeleteIndividualApplicationDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndividualApplicationDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadIndividualApplicationDataSubscriptionResponse parses an HTTP response from a ReadIndividualApplicationDataSubscriptionWithResponse call
func ParseReadIndividualApplicationDataSubscriptionResponse(rsp *http.Response) (*ReadIndividualApplicationDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadIndividualApplicationDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef5.ApplicationDataSubs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceIndividualApplicationDataSubscriptionResponse parses an HTTP response from a ReplaceIndividualApplicationDataSubscriptionWithResponse call
func ParseReplaceIndividualApplicationDataSubscriptionResponse(rsp *http.Response) (*ReplaceIndividualApplicationDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceIndividualApplicationDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef5.ApplicationDataSubs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateIndividualExposureDataSubscriptionResponse parses an HTTP response from a CreateIndividualExposureDataSubscriptionWithResponse call
func ParseCreateIndividualExposureDataSubscriptionResponse(rsp *http.Response) (*CreateIndividualExposureDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIndividualExposureDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef6.ExposureDataSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIndividualExposureDataSubscriptionResponse parses an HTTP response from a DeleteIndividualExposureDataSubscriptionWithResponse call
func ParseDeleteIndividualExposureDataSubscriptionResponse(rsp *http.Response) (*DeleteIndividualExposureDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndividualExposureDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceIndividualExposureDataSubscriptionResponse parses an HTTP response from a ReplaceIndividualExposureDataSubscriptionWithResponse call
func ParseReplaceIndividualExposureDataSubscriptionResponse(rsp *http.Response) (*ReplaceIndividualExposureDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceIndividualExposureDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef6.ExposureDataSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteAccessAndMobilityDataResponse parses an HTTP response from a DeleteAccessAndMobilityDataWithResponse call
func ParseDeleteAccessAndMobilityDataResponse(rsp *http.Response) (*DeleteAccessAndMobilityDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAccessAndMobilityDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryAccessAndMobilityDataResponse parses an HTTP response from a QueryAccessAndMobilityDataWithResponse call
func ParseQueryAccessAndMobilityDataResponse(rsp *http.Response) (*QueryAccessAndMobilityDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryAccessAndMobilityDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef6.AccessAndMobilityData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateAccessAndMobilityDataResponse parses an HTTP response from a UpdateAccessAndMobilityDataWithResponse call
func ParseUpdateAccessAndMobilityDataResponse(rsp *http.Response) (*UpdateAccessAndMobilityDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAccessAndMobilityDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateOrReplaceAccessAndMobilityDataResponse parses an HTTP response from a CreateOrReplaceAccessAndMobilityDataWithResponse call
func ParseCreateOrReplaceAccessAndMobilityDataResponse(rsp *http.Response) (*CreateOrReplaceAccessAndMobilityDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrReplaceAccessAndMobilityDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef6.AccessAndMobilityData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef6.AccessAndMobilityData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteSessionManagementDataResponse parses an HTTP response from a DeleteSessionManagementDataWithResponse call
func ParseDeleteSessionManagementDataResponse(rsp *http.Response) (*DeleteSessionManagementDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSessionManagementDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuerySessionManagementDataResponse parses an HTTP response from a QuerySessionManagementDataWithResponse call
func ParseQuerySessionManagementDataResponse(rsp *http.Response) (*QuerySessionManagementDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerySessionManagementDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef6.PduSessionManagementData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateOrReplaceSessionManagementDataResponse parses an HTTP response from a CreateOrReplaceSessionManagementDataWithResponse call
func ParseCreateOrReplaceSessionManagementDataResponse(rsp *http.Response) (*CreateOrReplaceSessionManagementDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrReplaceSessionManagementDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef6.AccessAndMobilityData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef6.PduSessionManagementData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadBdtDataResponse parses an HTTP response from a ReadBdtDataWithResponse call
func ParseReadBdtDataResponse(rsp *http.Response) (*ReadBdtDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadBdtDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef7.BdtData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIndividualBdtDataResponse parses an HTTP response from a DeleteIndividualBdtDataWithResponse call
func ParseDeleteIndividualBdtDataResponse(rsp *http.Response) (*DeleteIndividualBdtDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndividualBdtDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadIndividualBdtDataResponse parses an HTTP response from a ReadIndividualBdtDataWithResponse call
func ParseReadIndividualBdtDataResponse(rsp *http.Response) (*ReadIndividualBdtDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadIndividualBdtDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef7.BdtData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateIndividualBdtDataResponse parses an HTTP response from a UpdateIndividualBdtDataWithResponse call
func ParseUpdateIndividualBdtDataResponse(rsp *http.Response) (*UpdateIndividualBdtDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIndividualBdtDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef7.BdtData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateIndividualBdtDataResponse parses an HTTP response from a CreateIndividualBdtDataWithResponse call
func ParseCreateIndividualBdtDataResponse(rsp *http.Response) (*CreateIndividualBdtDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIndividualBdtDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef7.BdtData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadPlmnUePolicySetResponse parses an HTTP response from a ReadPlmnUePolicySetWithResponse call
func ParseReadPlmnUePolicySetResponse(rsp *http.Response) (*ReadPlmnUePolicySetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadPlmnUePolicySetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef7.UePolicySet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest externalRef0.N412
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadSponsorConnectivityDataResponse parses an HTTP response from a ReadSponsorConnectivityDataWithResponse call
func ParseReadSponsorConnectivityDataResponse(rsp *http.Response) (*ReadSponsorConnectivityDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadSponsorConnectivityDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef7.SponsorConnectivityData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateIndividualPolicyDataSubscriptionResponse parses an HTTP response from a CreateIndividualPolicyDataSubscriptionWithResponse call
func ParseCreateIndividualPolicyDataSubscriptionResponse(rsp *http.Response) (*CreateIndividualPolicyDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIndividualPolicyDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef7.PolicyDataSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIndividualPolicyDataSubscriptionResponse parses an HTTP response from a DeleteIndividualPolicyDataSubscriptionWithResponse call
func ParseDeleteIndividualPolicyDataSubscriptionResponse(rsp *http.Response) (*DeleteIndividualPolicyDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndividualPolicyDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceIndividualPolicyDataSubscriptionResponse parses an HTTP response from a ReplaceIndividualPolicyDataSubscriptionWithResponse call
func ParseReplaceIndividualPolicyDataSubscriptionResponse(rsp *http.Response) (*ReplaceIndividualPolicyDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceIndividualPolicyDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef7.PolicyDataSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadAccessAndMobilityPolicyDataResponse parses an HTTP response from a ReadAccessAndMobilityPolicyDataWithResponse call
func ParseReadAccessAndMobilityPolicyDataResponse(rsp *http.Response) (*ReadAccessAndMobilityPolicyDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadAccessAndMobilityPolicyDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef7.AmPolicyData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadOperatorSpecificDataResponse parses an HTTP response from a ReadOperatorSpecificDataWithResponse call
func ParseReadOperatorSpecificDataResponse(rsp *http.Response) (*ReadOperatorSpecificDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadOperatorSpecificDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateOperatorSpecificDataResponse parses an HTTP response from a UpdateOperatorSpecificDataWithResponse call
func ParseUpdateOperatorSpecificDataResponse(rsp *http.Response) (*UpdateOperatorSpecificDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOperatorSpecificDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceOperatorSpecificDataResponse parses an HTTP response from a ReplaceOperatorSpecificDataWithResponse call
func ParseReplaceOperatorSpecificDataResponse(rsp *http.Response) (*ReplaceOperatorSpecificDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceOperatorSpecificDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadSessionManagementPolicyDataResponse parses an HTTP response from a ReadSessionManagementPolicyDataWithResponse call
func ParseReadSessionManagementPolicyDataResponse(rsp *http.Response) (*ReadSessionManagementPolicyDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadSessionManagementPolicyDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef7.SmPolicyData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateSessionManagementPolicyDataResponse parses an HTTP response from a UpdateSessionManagementPolicyDataWithResponse call
func ParseUpdateSessionManagementPolicyDataResponse(rsp *http.Response) (*UpdateSessionManagementPolicyDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSessionManagementPolicyDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef7.SmPolicyData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteUsageMonitoringInformationResponse parses an HTTP response from a DeleteUsageMonitoringInformationWithResponse call
func ParseDeleteUsageMonitoringInformationResponse(rsp *http.Response) (*DeleteUsageMonitoringInformationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUsageMonitoringInformationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadUsageMonitoringInformationResponse parses an HTTP response from a ReadUsageMonitoringInformationWithResponse call
func ParseReadUsageMonitoringInformationResponse(rsp *http.Response) (*ReadUsageMonitoringInformationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadUsageMonitoringInformationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef7.UsageMonData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateUsageMonitoringResourceResponse parses an HTTP response from a CreateUsageMonitoringResourceWithResponse call
func ParseCreateUsageMonitoringResourceResponse(rsp *http.Response) (*CreateUsageMonitoringResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUsageMonitoringResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef7.UsageMonData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadUEPolicySetResponse parses an HTTP response from a ReadUEPolicySetWithResponse call
func ParseReadUEPolicySetResponse(rsp *http.Response) (*ReadUEPolicySetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadUEPolicySetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef7.UePolicySet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateUEPolicySetResponse parses an HTTP response from a UpdateUEPolicySetWithResponse call
func ParseUpdateUEPolicySetResponse(rsp *http.Response) (*UpdateUEPolicySetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUEPolicySetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateOrReplaceUEPolicySetResponse parses an HTTP response from a CreateOrReplaceUEPolicySetWithResponse call
func ParseCreateOrReplaceUEPolicySetResponse(rsp *http.Response) (*CreateOrReplaceUEPolicySetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrReplaceUEPolicySetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef7.UePolicySet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef7.UePolicySet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuery5GVnGroupResponse parses an HTTP response from a Query5GVnGroupWithResponse call
func ParseQuery5GVnGroupResponse(rsp *http.Response) (*Query5GVnGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Query5GVnGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]externalRef2.N5GVnGroupConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuery5GVnGroupInternalResponse parses an HTTP response from a Query5GVnGroupInternalWithResponse call
func ParseQuery5GVnGroupInternalResponse(rsp *http.Response) (*Query5GVnGroupInternalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Query5GVnGroupInternalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]externalRef2.N5GVnGroupConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuery5GVNGroupPPDataResponse parses an HTTP response from a Query5GVNGroupPPDataWithResponse call
func ParseQuery5GVNGroupPPDataResponse(rsp *http.Response) (*Query5GVNGroupPPDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Query5GVNGroupPPDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.Pp5gVnGroupProfileData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDelete5GVnGroupResponse parses an HTTP response from a Delete5GVnGroupWithResponse call
func ParseDelete5GVnGroupResponse(rsp *http.Response) (*Delete5GVnGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Delete5GVnGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGet5GVnGroupConfigurationResponse parses an HTTP response from a Get5GVnGroupConfigurationWithResponse call
func ParseGet5GVnGroupConfigurationResponse(rsp *http.Response) (*Get5GVnGroupConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get5GVnGroupConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef2.N5GVnGroupConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModify5GVnGroupResponse parses an HTTP response from a Modify5GVnGroupWithResponse call
func ParseModify5GVnGroupResponse(rsp *http.Response) (*Modify5GVnGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Modify5GVnGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreate5GVnGroupResponse parses an HTTP response from a Create5GVnGroupWithResponse call
func ParseCreate5GVnGroupResponse(rsp *http.Response) (*Create5GVnGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Create5GVnGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef2.N5GVnGroupConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetGroupIdentifiersResponse parses an HTTP response from a GetGroupIdentifiersWithResponse call
func ParseGetGroupIdentifiersResponse(rsp *http.Response) (*GetGroupIdentifiersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupIdentifiersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef3.GroupIdentifiers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryGroupEEDataResponse parses an HTTP response from a QueryGroupEEDataWithResponse call
func ParseQueryGroupEEDataResponse(rsp *http.Response) (*QueryGroupEEDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryGroupEEDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.EeGroupProfileData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryEeGroupSubscriptionsResponse parses an HTTP response from a QueryEeGroupSubscriptionsWithResponse call
func ParseQueryEeGroupSubscriptionsResponse(rsp *http.Response) (*QueryEeGroupSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryEeGroupSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef8.EeSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateEeGroupSubscriptionsResponse parses an HTTP response from a CreateEeGroupSubscriptionsWithResponse call
func ParseCreateEeGroupSubscriptionsResponse(rsp *http.Response) (*CreateEeGroupSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEeGroupSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef8.EeSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseRemoveEeGroupSubscriptionsResponse parses an HTTP response from a RemoveEeGroupSubscriptionsWithResponse call
func ParseRemoveEeGroupSubscriptionsResponse(rsp *http.Response) (*RemoveEeGroupSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveEeGroupSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryEeGroupSubscriptionResponse parses an HTTP response from a QueryEeGroupSubscriptionWithResponse call
func ParseQueryEeGroupSubscriptionResponse(rsp *http.Response) (*QueryEeGroupSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryEeGroupSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef8.EeSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifyEeGroupSubscriptionResponse parses an HTTP response from a ModifyEeGroupSubscriptionWithResponse call
func ParseModifyEeGroupSubscriptionResponse(rsp *http.Response) (*ModifyEeGroupSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyEeGroupSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateEeGroupSubscriptionsResponse parses an HTTP response from a UpdateEeGroupSubscriptionsWithResponse call
func ParseUpdateEeGroupSubscriptionsResponse(rsp *http.Response) (*UpdateEeGroupSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEeGroupSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetSharedDataResponse parses an HTTP response from a GetSharedDataWithResponse call
func ParseGetSharedDataResponse(rsp *http.Response) (*GetSharedDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSharedDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef3.SharedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetIndividualSharedDataResponse parses an HTTP response from a GetIndividualSharedDataWithResponse call
func ParseGetIndividualSharedDataResponse(rsp *http.Response) (*GetIndividualSharedDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndividualSharedDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef3.SharedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseRemoveMultipleSubscriptionDataSubscriptionsResponse parses an HTTP response from a RemoveMultipleSubscriptionDataSubscriptionsWithResponse call
func ParseRemoveMultipleSubscriptionDataSubscriptionsResponse(rsp *http.Response) (*RemoveMultipleSubscriptionDataSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveMultipleSubscriptionDataSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuerySubsToNotifyResponse parses an HTTP response from a QuerySubsToNotifyWithResponse call
func ParseQuerySubsToNotifyResponse(rsp *http.Response) (*QuerySubsToNotifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerySubsToNotifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef8.SubscriptionDataSubscriptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseSubscriptionDataSubscriptionsResponse parses an HTTP response from a SubscriptionDataSubscriptionsWithResponse call
func ParseSubscriptionDataSubscriptionsResponse(rsp *http.Response) (*SubscriptionDataSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubscriptionDataSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef8.SubscriptionDataSubscriptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseRemovesubscriptionDataSubscriptionsResponse parses an HTTP response from a RemovesubscriptionDataSubscriptionsWithResponse call
func ParseRemovesubscriptionDataSubscriptionsResponse(rsp *http.Response) (*RemovesubscriptionDataSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemovesubscriptionDataSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuerySubscriptionDataSubscriptionsResponse parses an HTTP response from a QuerySubscriptionDataSubscriptionsWithResponse call
func ParseQuerySubscriptionDataSubscriptionsResponse(rsp *http.Response) (*QuerySubscriptionDataSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerySubscriptionDataSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef8.SubscriptionDataSubscriptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifysubscriptionDataSubscriptionResponse parses an HTTP response from a ModifysubscriptionDataSubscriptionWithResponse call
func ParseModifysubscriptionDataSubscriptionResponse(rsp *http.Response) (*ModifysubscriptionDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifysubscriptionDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteAuthenticationStatusResponse parses an HTTP response from a DeleteAuthenticationStatusWithResponse call
func ParseDeleteAuthenticationStatusResponse(rsp *http.Response) (*DeleteAuthenticationStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAuthenticationStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryAuthenticationStatusResponse parses an HTTP response from a QueryAuthenticationStatusWithResponse call
func ParseQueryAuthenticationStatusResponse(rsp *http.Response) (*QueryAuthenticationStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryAuthenticationStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef4.AuthEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateAuthenticationStatusResponse parses an HTTP response from a CreateAuthenticationStatusWithResponse call
func ParseCreateAuthenticationStatusResponse(rsp *http.Response) (*CreateAuthenticationStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAuthenticationStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIndividualAuthenticationStatusResponse parses an HTTP response from a DeleteIndividualAuthenticationStatusWithResponse call
func ParseDeleteIndividualAuthenticationStatusResponse(rsp *http.Response) (*DeleteIndividualAuthenticationStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndividualAuthenticationStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryIndividualAuthenticationStatusResponse parses an HTTP response from a QueryIndividualAuthenticationStatusWithResponse call
func ParseQueryIndividualAuthenticationStatusResponse(rsp *http.Response) (*QueryIndividualAuthenticationStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryIndividualAuthenticationStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef4.AuthEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateIndividualAuthenticationStatusResponse parses an HTTP response from a CreateIndividualAuthenticationStatusWithResponse call
func ParseCreateIndividualAuthenticationStatusResponse(rsp *http.Response) (*CreateIndividualAuthenticationStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIndividualAuthenticationStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryAuthSubsDataResponse parses an HTTP response from a QueryAuthSubsDataWithResponse call
func ParseQueryAuthSubsDataResponse(rsp *http.Response) (*QueryAuthSubsDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryAuthSubsDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.AuthenticationSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifyAuthenticationSubscriptionResponse parses an HTTP response from a ModifyAuthenticationSubscriptionWithResponse call
func ParseModifyAuthenticationSubscriptionResponse(rsp *http.Response) (*ModifyAuthenticationSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyAuthenticationSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryContextDataResponse parses an HTTP response from a QueryContextDataWithResponse call
func ParseQueryContextDataResponse(rsp *http.Response) (*QueryContextDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryContextDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.ContextDataSets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryAmfContext3gppResponse parses an HTTP response from a QueryAmfContext3gppWithResponse call
func ParseQueryAmfContext3gppResponse(rsp *http.Response) (*QueryAmfContext3gppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryAmfContext3gppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.Amf3GppAccessRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseAmfContext3gppResponse parses an HTTP response from a AmfContext3gppWithResponse call
func ParseAmfContext3gppResponse(rsp *http.Response) (*AmfContext3gppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AmfContext3gppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateAmfContext3gppResponse parses an HTTP response from a CreateAmfContext3gppWithResponse call
func ParseCreateAmfContext3gppResponse(rsp *http.Response) (*CreateAmfContext3gppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAmfContext3gppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef8.Amf3GppAccessRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryAmfContextNon3gppResponse parses an HTTP response from a QueryAmfContextNon3gppWithResponse call
func ParseQueryAmfContextNon3gppResponse(rsp *http.Response) (*QueryAmfContextNon3gppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryAmfContextNon3gppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.AmfNon3GppAccessRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseAmfContextNon3gppResponse parses an HTTP response from a AmfContextNon3gppWithResponse call
func ParseAmfContextNon3gppResponse(rsp *http.Response) (*AmfContextNon3gppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AmfContextNon3gppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateAmfContextNon3gppResponse parses an HTTP response from a CreateAmfContextNon3gppWithResponse call
func ParseCreateAmfContextNon3gppResponse(rsp *http.Response) (*CreateAmfContextNon3gppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAmfContextNon3gppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef8.Amf3GppAccessRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryeesubscriptionsResponse parses an HTTP response from a QueryeesubscriptionsWithResponse call
func ParseQueryeesubscriptionsResponse(rsp *http.Response) (*QueryeesubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryeesubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef8.EeSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateEeSubscriptionsResponse parses an HTTP response from a CreateEeSubscriptionsWithResponse call
func ParseCreateEeSubscriptionsResponse(rsp *http.Response) (*CreateEeSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEeSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef8.EeSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseRemoveeeSubscriptionsResponse parses an HTTP response from a RemoveeeSubscriptionsWithResponse call
func ParseRemoveeeSubscriptionsResponse(rsp *http.Response) (*RemoveeeSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveeeSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryeeSubscriptionResponse parses an HTTP response from a QueryeeSubscriptionWithResponse call
func ParseQueryeeSubscriptionResponse(rsp *http.Response) (*QueryeeSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryeeSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef8.EeSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifyEesubscriptionResponse parses an HTTP response from a ModifyEesubscriptionWithResponse call
func ParseModifyEesubscriptionResponse(rsp *http.Response) (*ModifyEesubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyEesubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateEesubscriptionsResponse parses an HTTP response from a UpdateEesubscriptionsWithResponse call
func ParseUpdateEesubscriptionsResponse(rsp *http.Response) (*UpdateEesubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEesubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseRemoveAmfSubscriptionsInfoResponse parses an HTTP response from a RemoveAmfSubscriptionsInfoWithResponse call
func ParseRemoveAmfSubscriptionsInfoResponse(rsp *http.Response) (*RemoveAmfSubscriptionsInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveAmfSubscriptionsInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetAmfSubscriptionInfoResponse parses an HTTP response from a GetAmfSubscriptionInfoWithResponse call
func ParseGetAmfSubscriptionInfoResponse(rsp *http.Response) (*GetAmfSubscriptionInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAmfSubscriptionInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef8.AmfSubscriptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifyAmfSubscriptionInfoResponse parses an HTTP response from a ModifyAmfSubscriptionInfoWithResponse call
func ParseModifyAmfSubscriptionInfoResponse(rsp *http.Response) (*ModifyAmfSubscriptionInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyAmfSubscriptionInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateAMFSubscriptionsResponse parses an HTTP response from a CreateAMFSubscriptionsWithResponse call
func ParseCreateAMFSubscriptionsResponse(rsp *http.Response) (*CreateAMFSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAMFSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseRemoveHssSubscriptionsInfoResponse parses an HTTP response from a RemoveHssSubscriptionsInfoWithResponse call
func ParseRemoveHssSubscriptionsInfoResponse(rsp *http.Response) (*RemoveHssSubscriptionsInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveHssSubscriptionsInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetHssSubscriptionInfoResponse parses an HTTP response from a GetHssSubscriptionInfoWithResponse call
func ParseGetHssSubscriptionInfoResponse(rsp *http.Response) (*GetHssSubscriptionInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHssSubscriptionInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.SmfSubscriptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifyHssSubscriptionInfoResponse parses an HTTP response from a ModifyHssSubscriptionInfoWithResponse call
func ParseModifyHssSubscriptionInfoResponse(rsp *http.Response) (*ModifyHssSubscriptionInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyHssSubscriptionInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateHSSSubscriptionsResponse parses an HTTP response from a CreateHSSSubscriptionsWithResponse call
func ParseCreateHSSSubscriptionsResponse(rsp *http.Response) (*CreateHSSSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHSSSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseRemoveSmfSubscriptionsInfoResponse parses an HTTP response from a RemoveSmfSubscriptionsInfoWithResponse call
func ParseRemoveSmfSubscriptionsInfoResponse(rsp *http.Response) (*RemoveSmfSubscriptionsInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveSmfSubscriptionsInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetSmfSubscriptionInfoResponse parses an HTTP response from a GetSmfSubscriptionInfoWithResponse call
func ParseGetSmfSubscriptionInfoResponse(rsp *http.Response) (*GetSmfSubscriptionInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSmfSubscriptionInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.SmfSubscriptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifySmfSubscriptionInfoResponse parses an HTTP response from a ModifySmfSubscriptionInfoWithResponse call
func ParseModifySmfSubscriptionInfoResponse(rsp *http.Response) (*ModifySmfSubscriptionInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifySmfSubscriptionInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateSMFSubscriptionsResponse parses an HTTP response from a CreateSMFSubscriptionsWithResponse call
func ParseCreateSMFSubscriptionsResponse(rsp *http.Response) (*CreateSMFSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSMFSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIpSmGwContextResponse parses an HTTP response from a DeleteIpSmGwContextWithResponse call
func ParseDeleteIpSmGwContextResponse(rsp *http.Response) (*DeleteIpSmGwContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIpSmGwContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryIpSmGwContextResponse parses an HTTP response from a QueryIpSmGwContextWithResponse call
func ParseQueryIpSmGwContextResponse(rsp *http.Response) (*QueryIpSmGwContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryIpSmGwContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.IpSmGwRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifyIpSmGwContextResponse parses an HTTP response from a ModifyIpSmGwContextWithResponse call
func ParseModifyIpSmGwContextResponse(rsp *http.Response) (*ModifyIpSmGwContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyIpSmGwContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateIpSmGwContextResponse parses an HTTP response from a CreateIpSmGwContextWithResponse call
func ParseCreateIpSmGwContextResponse(rsp *http.Response) (*CreateIpSmGwContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIpSmGwContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryUeLocationResponse parses an HTTP response from a QueryUeLocationWithResponse call
func ParseQueryUeLocationResponse(rsp *http.Response) (*QueryUeLocationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryUeLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.LocationInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteMessageWaitingDataResponse parses an HTTP response from a DeleteMessageWaitingDataWithResponse call
func ParseDeleteMessageWaitingDataResponse(rsp *http.Response) (*DeleteMessageWaitingDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMessageWaitingDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryMessageWaitingDataResponse parses an HTTP response from a QueryMessageWaitingDataWithResponse call
func ParseQueryMessageWaitingDataResponse(rsp *http.Response) (*QueryMessageWaitingDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryMessageWaitingDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.MessageWaitingData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifyMessageWaitingDataResponse parses an HTTP response from a ModifyMessageWaitingDataWithResponse call
func ParseModifyMessageWaitingDataResponse(rsp *http.Response) (*ModifyMessageWaitingDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyMessageWaitingDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateMessageWaitingDataResponse parses an HTTP response from a CreateMessageWaitingDataWithResponse call
func ParseCreateMessageWaitingDataResponse(rsp *http.Response) (*CreateMessageWaitingDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMessageWaitingDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuerysdmsubscriptionsResponse parses an HTTP response from a QuerysdmsubscriptionsWithResponse call
func ParseQuerysdmsubscriptionsResponse(rsp *http.Response) (*QuerysdmsubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerysdmsubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef8.SdmSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateSdmSubscriptionsResponse parses an HTTP response from a CreateSdmSubscriptionsWithResponse call
func ParseCreateSdmSubscriptionsResponse(rsp *http.Response) (*CreateSdmSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSdmSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef8.SdmSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseRemovesdmSubscriptionsResponse parses an HTTP response from a RemovesdmSubscriptionsWithResponse call
func ParseRemovesdmSubscriptionsResponse(rsp *http.Response) (*RemovesdmSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemovesdmSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuerysdmSubscriptionResponse parses an HTTP response from a QuerysdmSubscriptionWithResponse call
func ParseQuerysdmSubscriptionResponse(rsp *http.Response) (*QuerysdmSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerysdmSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef8.SdmSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifysdmSubscriptionResponse parses an HTTP response from a ModifysdmSubscriptionWithResponse call
func ParseModifysdmSubscriptionResponse(rsp *http.Response) (*ModifysdmSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifysdmSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdatesdmsubscriptionsResponse parses an HTTP response from a UpdatesdmsubscriptionsWithResponse call
func ParseUpdatesdmsubscriptionsResponse(rsp *http.Response) (*UpdatesdmsubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatesdmsubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseRemoveHssSDMSubscriptionsInfoResponse parses an HTTP response from a RemoveHssSDMSubscriptionsInfoWithResponse call
func ParseRemoveHssSDMSubscriptionsInfoResponse(rsp *http.Response) (*RemoveHssSDMSubscriptionsInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveHssSDMSubscriptionsInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetHssSDMSubscriptionInfoResponse parses an HTTP response from a GetHssSDMSubscriptionInfoWithResponse call
func ParseGetHssSDMSubscriptionInfoResponse(rsp *http.Response) (*GetHssSDMSubscriptionInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHssSDMSubscriptionInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.SmfSubscriptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifyHssSDMSubscriptionInfoResponse parses an HTTP response from a ModifyHssSDMSubscriptionInfoWithResponse call
func ParseModifyHssSDMSubscriptionInfoResponse(rsp *http.Response) (*ModifyHssSDMSubscriptionInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyHssSDMSubscriptionInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateHSSSDMSubscriptionsResponse parses an HTTP response from a CreateHSSSDMSubscriptionsWithResponse call
func ParseCreateHSSSDMSubscriptionsResponse(rsp *http.Response) (*CreateHSSSDMSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHSSSDMSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuerySmfRegListResponse parses an HTTP response from a QuerySmfRegListWithResponse call
func ParseQuerySmfRegListResponse(rsp *http.Response) (*QuerySmfRegListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerySmfRegListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.SmfRegList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteSmfRegistrationResponse parses an HTTP response from a DeleteSmfRegistrationWithResponse call
func ParseDeleteSmfRegistrationResponse(rsp *http.Response) (*DeleteSmfRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSmfRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuerySmfRegistrationResponse parses an HTTP response from a QuerySmfRegistrationWithResponse call
func ParseQuerySmfRegistrationResponse(rsp *http.Response) (*QuerySmfRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerySmfRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.SmfRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateOrUpdateSmfRegistrationResponse parses an HTTP response from a CreateOrUpdateSmfRegistrationWithResponse call
func ParseCreateOrUpdateSmfRegistrationResponse(rsp *http.Response) (*CreateOrUpdateSmfRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrUpdateSmfRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef8.SmfRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteSmsfContext3gppResponse parses an HTTP response from a DeleteSmsfContext3gppWithResponse call
func ParseDeleteSmsfContext3gppResponse(rsp *http.Response) (*DeleteSmsfContext3gppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSmsfContext3gppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuerySmsfContext3gppResponse parses an HTTP response from a QuerySmsfContext3gppWithResponse call
func ParseQuerySmsfContext3gppResponse(rsp *http.Response) (*QuerySmsfContext3gppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerySmsfContext3gppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.SmsfRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateSmsfContext3gppResponse parses an HTTP response from a CreateSmsfContext3gppWithResponse call
func ParseCreateSmsfContext3gppResponse(rsp *http.Response) (*CreateSmsfContext3gppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSmsfContext3gppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef8.SmsfRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteSmsfContextNon3gppResponse parses an HTTP response from a DeleteSmsfContextNon3gppWithResponse call
func ParseDeleteSmsfContextNon3gppResponse(rsp *http.Response) (*DeleteSmsfContextNon3gppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSmsfContextNon3gppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuerySmsfContextNon3gppResponse parses an HTTP response from a QuerySmsfContextNon3gppWithResponse call
func ParseQuerySmsfContextNon3gppResponse(rsp *http.Response) (*QuerySmsfContextNon3gppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerySmsfContextNon3gppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.SmsfRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateSmsfContextNon3gppResponse parses an HTTP response from a CreateSmsfContextNon3gppWithResponse call
func ParseCreateSmsfContextNon3gppResponse(rsp *http.Response) (*CreateSmsfContextNon3gppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSmsfContextNon3gppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef8.SmsfRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryCoverageRestrictionDataResponse parses an HTTP response from a QueryCoverageRestrictionDataWithResponse call
func ParseQueryCoverageRestrictionDataResponse(rsp *http.Response) (*QueryCoverageRestrictionDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryCoverageRestrictionDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.EnhancedCoverageRestrictionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryEEDataResponse parses an HTTP response from a QueryEEDataWithResponse call
func ParseQueryEEDataResponse(rsp *http.Response) (*QueryEEDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryEEDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.EeProfileData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetIdentityDataResponse parses an HTTP response from a GetIdentityDataWithResponse call
func ParseGetIdentityDataResponse(rsp *http.Response) (*GetIdentityDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIdentityDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.IdentityData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryLcsMoDataResponse parses an HTTP response from a QueryLcsMoDataWithResponse call
func ParseQueryLcsMoDataResponse(rsp *http.Response) (*QueryLcsMoDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryLcsMoDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.LcsMoData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryLcsPrivacyDataResponse parses an HTTP response from a QueryLcsPrivacyDataWithResponse call
func ParseQueryLcsPrivacyDataResponse(rsp *http.Response) (*QueryLcsPrivacyDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryLcsPrivacyDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.LcsPrivacyData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetNiddAuDataResponse parses an HTTP response from a GetNiddAuDataWithResponse call
func ParseGetNiddAuDataResponse(rsp *http.Response) (*GetNiddAuDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNiddAuDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.AuthorizationData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetOdbDataResponse parses an HTTP response from a GetOdbDataWithResponse call
func ParseGetOdbDataResponse(rsp *http.Response) (*GetOdbDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOdbDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.OdbData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryOperSpecDataResponse parses an HTTP response from a QueryOperSpecDataWithResponse call
func ParseQueryOperSpecDataResponse(rsp *http.Response) (*QueryOperSpecDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryOperSpecDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]externalRef8.OperatorSpecificDataContainer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifyOperSpecDataResponse parses an HTTP response from a ModifyOperSpecDataWithResponse call
func ParseModifyOperSpecDataResponse(rsp *http.Response) (*ModifyOperSpecDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyOperSpecDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetppDataResponse parses an HTTP response from a GetppDataWithResponse call
func ParseGetppDataResponse(rsp *http.Response) (*GetppDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetppDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.PpData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifyPpDataResponse parses an HTTP response from a ModifyPpDataWithResponse call
func ParseModifyPpDataResponse(rsp *http.Response) (*ModifyPpDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyPpDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryPPDataResponse parses an HTTP response from a QueryPPDataWithResponse call
func ParseQueryPPDataResponse(rsp *http.Response) (*QueryPPDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryPPDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.PpProfileData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryAuthSoRResponse parses an HTTP response from a QueryAuthSoRWithResponse call
func ParseQueryAuthSoRResponse(rsp *http.Response) (*QueryAuthSoRResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryAuthSoRResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.SorData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateAuthenticationSoRResponse parses an HTTP response from a CreateAuthenticationSoRWithResponse call
func ParseCreateAuthenticationSoRResponse(rsp *http.Response) (*CreateAuthenticationSoRResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAuthenticationSoRResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryCagAckResponse parses an HTTP response from a QueryCagAckWithResponse call
func ParseQueryCagAckResponse(rsp *http.Response) (*QueryCagAckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryCagAckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.CagAckData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateCagUpdateAckResponse parses an HTTP response from a CreateCagUpdateAckWithResponse call
func ParseCreateCagUpdateAckResponse(rsp *http.Response) (*CreateCagUpdateAckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCagUpdateAckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryNssaiAckResponse parses an HTTP response from a QueryNssaiAckWithResponse call
func ParseQueryNssaiAckResponse(rsp *http.Response) (*QueryNssaiAckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryNssaiAckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.NssaiAckData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateOrUpdateNssaiAckResponse parses an HTTP response from a CreateOrUpdateNssaiAckWithResponse call
func ParseCreateOrUpdateNssaiAckResponse(rsp *http.Response) (*CreateOrUpdateNssaiAckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrUpdateNssaiAckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryAuthUPUResponse parses an HTTP response from a QueryAuthUPUWithResponse call
func ParseQueryAuthUPUResponse(rsp *http.Response) (*QueryAuthUPUResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryAuthUPUResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.UpuData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateAuthenticationUPUResponse parses an HTTP response from a CreateAuthenticationUPUWithResponse call
func ParseCreateAuthenticationUPUResponse(rsp *http.Response) (*CreateAuthenticationUPUResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAuthenticationUPUResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryV2xDataResponse parses an HTTP response from a QueryV2xDataWithResponse call
func ParseQueryV2xDataResponse(rsp *http.Response) (*QueryV2xDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryV2xDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.V2xSubscriptionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryProvisionedDataResponse parses an HTTP response from a QueryProvisionedDataWithResponse call
func ParseQueryProvisionedDataResponse(rsp *http.Response) (*QueryProvisionedDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryProvisionedDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.ProvisionedDataSets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryAmDataResponse parses an HTTP response from a QueryAmDataWithResponse call
func ParseQueryAmDataResponse(rsp *http.Response) (*QueryAmDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryAmDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.AccessAndMobilitySubscriptionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryLcsBcaDataResponse parses an HTTP response from a QueryLcsBcaDataWithResponse call
func ParseQueryLcsBcaDataResponse(rsp *http.Response) (*QueryLcsBcaDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryLcsBcaDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.LcsBroadcastAssistanceTypesData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuerySmDataResponse parses an HTTP response from a QuerySmDataWithResponse call
func ParseQuerySmDataResponse(rsp *http.Response) (*QuerySmDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerySmDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef8.SessionManagementSubscriptionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuerySmfSelectDataResponse parses an HTTP response from a QuerySmfSelectDataWithResponse call
func ParseQuerySmfSelectDataResponse(rsp *http.Response) (*QuerySmfSelectDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerySmfSelectDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.SmfSelectionSubscriptionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuerySmsDataResponse parses an HTTP response from a QuerySmsDataWithResponse call
func ParseQuerySmsDataResponse(rsp *http.Response) (*QuerySmsDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerySmsDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.SmsSubscriptionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuerySmsMngDataResponse parses an HTTP response from a QuerySmsMngDataWithResponse call
func ParseQuerySmsMngDataResponse(rsp *http.Response) (*QuerySmsMngDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerySmsMngDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.SmsManagementSubscriptionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryTraceDataResponse parses an HTTP response from a QueryTraceDataWithResponse call
func ParseQueryTraceDataResponse(rsp *http.Response) (*QueryTraceDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryTraceDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.TraceData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve applied BDT Policy Data
	// (GET /application-data/bdtPolicyData)
	ReadBdtPolicyData(c *gin.Context, params ReadBdtPolicyDataParams)
	// Delete an individual Applied BDT Policy Data resource
	// (DELETE /application-data/bdtPolicyData/{bdtPolicyId})
	DeleteIndividualAppliedBdtPolicyData(c *gin.Context, bdtPolicyId string)
	// Modify part of the properties of an individual Applied BDT Policy Data resource
	// (PATCH /application-data/bdtPolicyData/{bdtPolicyId})
	UpdateIndividualAppliedBdtPolicyData(c *gin.Context, bdtPolicyId string)
	// Create an individual applied BDT Policy Data resource
	// (PUT /application-data/bdtPolicyData/{bdtPolicyId})
	CreateIndividualAppliedBdtPolicyData(c *gin.Context, bdtPolicyId string)
	// Retrieve Traffic Influence Data
	// (GET /application-data/influenceData)
	ReadInfluenceData(c *gin.Context, params ReadInfluenceDataParams)
	// Read Influence Data Subscriptions
	// (GET /application-data/influenceData/subs-to-notify)
	ReadInfluenceDataSubscriptions(c *gin.Context, params ReadInfluenceDataSubscriptionsParams)
	// Create a new Individual Influence Data Subscription resource
	// (POST /application-data/influenceData/subs-to-notify)
	CreateIndividualInfluenceDataSubscription(c *gin.Context)
	// Delete an individual Influence Data Subscription resource
	// (DELETE /application-data/influenceData/subs-to-notify/{subscriptionId})
	DeleteIndividualInfluenceDataSubscription(c *gin.Context, subscriptionId string)
	// Get an existing individual Influence Data Subscription resource
	// (GET /application-data/influenceData/subs-to-notify/{subscriptionId})
	ReadIndividualInfluenceDataSubscription(c *gin.Context, subscriptionId string)
	// Modify an existing individual Influence Data Subscription resource
	// (PUT /application-data/influenceData/subs-to-notify/{subscriptionId})
	ReplaceIndividualInfluenceDataSubscription(c *gin.Context, subscriptionId string)
	// Delete an individual Influence Data resource
	// (DELETE /application-data/influenceData/{influenceId})
	DeleteIndividualInfluenceData(c *gin.Context, influenceId string)
	// Modify part of the properties of an individual Influence Data resource
	// (PATCH /application-data/influenceData/{influenceId})
	UpdateIndividualInfluenceData(c *gin.Context, influenceId string)
	// Create or update an individual Influence Data resource
	// (PUT /application-data/influenceData/{influenceId})
	CreateOrReplaceIndividualInfluenceData(c *gin.Context, influenceId string)
	// Retrieve IPTV configuration Data
	// (GET /application-data/iptvConfigData)
	ReadIPTVCongifurationData(c *gin.Context, params ReadIPTVCongifurationDataParams)
	// Delete an individual IPTV configuration resource
	// (DELETE /application-data/iptvConfigData/{configurationId})
	DeleteIndividualIPTVConfigurationData(c *gin.Context, configurationId string)
	// Partial update an individual IPTV configuration resource
	// (PATCH /application-data/iptvConfigData/{configurationId})
	PartialReplaceIndividualIPTVConfigurationData(c *gin.Context, configurationId string)
	// Create or update an individual IPTV configuration resource
	// (PUT /application-data/iptvConfigData/{configurationId})
	CreateOrReplaceIndividualIPTVConfigurationData(c *gin.Context, configurationId string)
	// Retrieve PFDs for application identifier(s)
	// (GET /application-data/pfds)
	ReadPFDData(c *gin.Context, params ReadPFDDataParams)
	// Delete the corresponding PFDs of the specified application identifier
	// (DELETE /application-data/pfds/{appId})
	DeleteIndividualPFDData(c *gin.Context, appId string)
	// Retrieve the corresponding PFDs of the specified application identifier
	// (GET /application-data/pfds/{appId})
	ReadIndividualPFDData(c *gin.Context, appId string)
	// Create or update the corresponding PFDs for the specified application identifier
	// (PUT /application-data/pfds/{appId})
	CreateOrReplaceIndividualPFDData(c *gin.Context, appId string)
	// Retrieve Service Parameter Data
	// (GET /application-data/serviceParamData)
	ReadServiceParameterData(c *gin.Context, params ReadServiceParameterDataParams)
	// Delete an individual Service Parameter Data resource
	// (DELETE /application-data/serviceParamData/{serviceParamId})
	DeleteIndividualServiceParameterData(c *gin.Context, serviceParamId string)
	// Modify part of the properties of an individual Service Parameter Data resource
	// (PATCH /application-data/serviceParamData/{serviceParamId})
	UpdateIndividualServiceParameterData(c *gin.Context, serviceParamId string)
	// Create or update an individual Service Parameter Data resource
	// (PUT /application-data/serviceParamData/{serviceParamId})
	CreateOrReplaceServiceParameterData(c *gin.Context, serviceParamId string)
	// Read Application Data change Subscriptions
	// (GET /application-data/subs-to-notify)
	ReadApplicationDataChangeSubscriptions(c *gin.Context, params ReadApplicationDataChangeSubscriptionsParams)
	// Create a subscription to receive notification of application data changes
	// (POST /application-data/subs-to-notify)
	CreateIndividualApplicationDataSubscription(c *gin.Context)
	// Delete the individual Application Data subscription
	// (DELETE /application-data/subs-to-notify/{subsId})
	DeleteIndividualApplicationDataSubscription(c *gin.Context, subsId string)
	// Get an existing individual Application Data Subscription resource
	// (GET /application-data/subs-to-notify/{subsId})
	ReadIndividualApplicationDataSubscription(c *gin.Context, subsId string)
	// Modify a subscription to receive notification of application data changes
	// (PUT /application-data/subs-to-notify/{subsId})
	ReplaceIndividualApplicationDataSubscription(c *gin.Context, subsId string)
	// Create a subscription to receive notification of exposure data changes
	// (POST /exposure-data/subs-to-notify)
	CreateIndividualExposureDataSubscription(c *gin.Context)
	// Deletes the individual Exposure Data subscription
	// (DELETE /exposure-data/subs-to-notify/{subId})
	DeleteIndividualExposureDataSubscription(c *gin.Context, subId string)
	// updates a subscription to receive notifications of exposure data changes
	// (PUT /exposure-data/subs-to-notify/{subId})
	ReplaceIndividualExposureDataSubscription(c *gin.Context, subId string)
	// Deletes the access and mobility exposure data for a UE
	// (DELETE /exposure-data/{ueId}/access-and-mobility-data)
	DeleteAccessAndMobilityData(c *gin.Context, ueId externalRef0.VarUeId)
	// Retrieves the access and mobility exposure data for a UE
	// (GET /exposure-data/{ueId}/access-and-mobility-data)
	QueryAccessAndMobilityData(c *gin.Context, ueId externalRef0.VarUeId, params QueryAccessAndMobilityDataParams)
	// Updates the access and mobility exposure data for a UE
	// (PATCH /exposure-data/{ueId}/access-and-mobility-data)
	UpdateAccessAndMobilityData(c *gin.Context, ueId externalRef0.VarUeId)
	// Creates and updates the access and mobility exposure data for a UE
	// (PUT /exposure-data/{ueId}/access-and-mobility-data)
	CreateOrReplaceAccessAndMobilityData(c *gin.Context, ueId externalRef0.VarUeId)
	// Deletes the session management data for a UE and for an individual PDU session
	// (DELETE /exposure-data/{ueId}/session-management-data/{pduSessionId})
	DeleteSessionManagementData(c *gin.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId)
	// Retrieves the session management data for a UE and for an individual PDU session
	// (GET /exposure-data/{ueId}/session-management-data/{pduSessionId})
	QuerySessionManagementData(c *gin.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, params QuerySessionManagementDataParams)
	// Creates and updates the session management data for a UE and for an individual PDU session
	// (PUT /exposure-data/{ueId}/session-management-data/{pduSessionId})
	CreateOrReplaceSessionManagementData(c *gin.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId)
	// Retrieves the BDT data collection
	// (GET /policy-data/bdt-data)
	ReadBdtData(c *gin.Context, params ReadBdtDataParams)
	// Deletes an BDT data resource associated with an BDT reference Id
	// (DELETE /policy-data/bdt-data/{bdtReferenceId})
	DeleteIndividualBdtData(c *gin.Context, bdtReferenceId string)
	// Retrieves the BDT data information associated with a BDT reference Id
	// (GET /policy-data/bdt-data/{bdtReferenceId})
	ReadIndividualBdtData(c *gin.Context, bdtReferenceId string, params ReadIndividualBdtDataParams)
	// Modifies an BDT data resource associated with an BDT reference Id
	// (PATCH /policy-data/bdt-data/{bdtReferenceId})
	UpdateIndividualBdtData(c *gin.Context, bdtReferenceId string)
	// Creates an BDT data resource associated with an BDT reference Id
	// (PUT /policy-data/bdt-data/{bdtReferenceId})
	CreateIndividualBdtData(c *gin.Context, bdtReferenceId string)
	// Retrieve the UE policy set data for an H-PLMN
	// (GET /policy-data/plmns/{plmnId}/ue-policy-set)
	ReadPlmnUePolicySet(c *gin.Context, plmnId string)
	// Retrieves the sponsored connectivity information for a given sponsorId
	// (GET /policy-data/sponsor-connectivity-data/{sponsorId})
	ReadSponsorConnectivityData(c *gin.Context, sponsorId string)
	// Create a subscription to receive notification of policy data changes
	// (POST /policy-data/subs-to-notify)
	CreateIndividualPolicyDataSubscription(c *gin.Context)
	// Delete the individual Policy Data subscription
	// (DELETE /policy-data/subs-to-notify/{subsId})
	DeleteIndividualPolicyDataSubscription(c *gin.Context, subsId string)
	// Modify a subscription to receive notification of policy data changes
	// (PUT /policy-data/subs-to-notify/{subsId})
	ReplaceIndividualPolicyDataSubscription(c *gin.Context, subsId string)
	// Retrieves the access and mobility policy data for a subscriber
	// (GET /policy-data/ues/{ueId}/am-data)
	ReadAccessAndMobilityPolicyData(c *gin.Context, ueId externalRef0.VarUeId)
	// Retrieve the operator specific policy data of an UE
	// (GET /policy-data/ues/{ueId}/operator-specific-data)
	ReadOperatorSpecificData(c *gin.Context, ueId externalRef0.VarUeId, params ReadOperatorSpecificDataParams)
	// Modify the operator specific policy data of an UE
	// (PATCH /policy-data/ues/{ueId}/operator-specific-data)
	UpdateOperatorSpecificData(c *gin.Context, ueId externalRef0.VarUeId)
	// Modify the operator specific policy data of an UE
	// (PUT /policy-data/ues/{ueId}/operator-specific-data)
	ReplaceOperatorSpecificData(c *gin.Context, ueId externalRef0.VarUeId)
	// Retrieves the session management policy data for a subscriber
	// (GET /policy-data/ues/{ueId}/sm-data)
	ReadSessionManagementPolicyData(c *gin.Context, ueId externalRef0.VarUeId, params ReadSessionManagementPolicyDataParams)
	// Modify the session management policy data for a subscriber
	// (PATCH /policy-data/ues/{ueId}/sm-data)
	UpdateSessionManagementPolicyData(c *gin.Context, ueId externalRef0.VarUeId)
	// Delete a usage monitoring resource
	// (DELETE /policy-data/ues/{ueId}/sm-data/{usageMonId})
	DeleteUsageMonitoringInformation(c *gin.Context, ueId externalRef0.VarUeId, usageMonId string)
	// Retrieve a usage monitoring resource
	// (GET /policy-data/ues/{ueId}/sm-data/{usageMonId})
	ReadUsageMonitoringInformation(c *gin.Context, ueId externalRef0.VarUeId, usageMonId string, params ReadUsageMonitoringInformationParams)
	// Create a usage monitoring resource
	// (PUT /policy-data/ues/{ueId}/sm-data/{usageMonId})
	CreateUsageMonitoringResource(c *gin.Context, ueId externalRef0.VarUeId, usageMonId string)
	// Retrieves the UE policy set data for a subscriber
	// (GET /policy-data/ues/{ueId}/ue-policy-set)
	ReadUEPolicySet(c *gin.Context, ueId externalRef0.VarUeId, params ReadUEPolicySetParams)
	// Modify the UE policy set data for a subscriber
	// (PATCH /policy-data/ues/{ueId}/ue-policy-set)
	UpdateUEPolicySet(c *gin.Context, ueId externalRef0.VarUeId)
	// Create or modify the UE policy set data for a subscriber
	// (PUT /policy-data/ues/{ueId}/ue-policy-set)
	CreateOrReplaceUEPolicySet(c *gin.Context, ueId externalRef0.VarUeId)
	// Retrieves the data of a 5G VN Group
	// (GET /subscription-data/group-data/5g-vn-groups)
	Query5GVnGroup(c *gin.Context, params Query5GVnGroupParams)
	// Retrieves the data of 5G VN Group
	// (GET /subscription-data/group-data/5g-vn-groups/internal)
	Query5GVnGroupInternal(c *gin.Context, params Query5GVnGroupInternalParams)
	// Retrieves the parameter provision profile data for 5G VN Group
	// (GET /subscription-data/group-data/5g-vn-groups/pp-profile-data)
	Query5GVNGroupPPData(c *gin.Context, params Query5GVNGroupPPDataParams)
	// Deletes the 5GVnGroup
	// (DELETE /subscription-data/group-data/5g-vn-groups/{externalGroupId})
	Delete5GVnGroup(c *gin.Context, externalGroupId externalRef3.ExtGroupId)
	// Retrieve a 5GVnGroup configuration
	// (GET /subscription-data/group-data/5g-vn-groups/{externalGroupId})
	Get5GVnGroupConfiguration(c *gin.Context, externalGroupId externalRef3.ExtGroupId)
	// modify the 5GVnGroup
	// (PATCH /subscription-data/group-data/5g-vn-groups/{externalGroupId})
	Modify5GVnGroup(c *gin.Context, externalGroupId externalRef3.ExtGroupId, params Modify5GVnGroupParams)
	// Create an individual 5G VN Grouop
	// (PUT /subscription-data/group-data/5g-vn-groups/{externalGroupId})
	Create5GVnGroup(c *gin.Context, externalGroupId externalRef3.ExtGroupId)
	// Mapping of Group Identifiers
	// (GET /subscription-data/group-data/group-identifiers)
	GetGroupIdentifiers(c *gin.Context, params GetGroupIdentifiersParams)
	// Retrieves the ee profile data profile data of a group or anyUE
	// (GET /subscription-data/group-data/{ueGroupId}/ee-profile-data)
	QueryGroupEEData(c *gin.Context, ueGroupId externalRef8.VarUeGroupId, params QueryGroupEEDataParams)
	// Retrieves the ee subscriptions of a group of UEs or any UE
	// (GET /subscription-data/group-data/{ueGroupId}/ee-subscriptions)
	QueryEeGroupSubscriptions(c *gin.Context, ueGroupId externalRef8.VarUeGroupId, params QueryEeGroupSubscriptionsParams)
	// Create individual EE subscription for a group of UEs or any UE
	// (POST /subscription-data/group-data/{ueGroupId}/ee-subscriptions)
	CreateEeGroupSubscriptions(c *gin.Context, ueGroupId externalRef8.VarUeGroupId)
	// Deletes a eeSubscription for a group of UEs or any UE
	// (DELETE /subscription-data/group-data/{ueGroupId}/ee-subscriptions/{subsId})
	RemoveEeGroupSubscriptions(c *gin.Context, ueGroupId externalRef8.VarUeGroupId, subsId string)
	// Retrieve a individual eeSubscription for a group of UEs or any UE
	// (GET /subscription-data/group-data/{ueGroupId}/ee-subscriptions/{subsId})
	QueryEeGroupSubscription(c *gin.Context, ueGroupId externalRef8.VarUeGroupId, subsId string)
	// Modify an individual ee subscription for a group of a UEs
	// (PATCH /subscription-data/group-data/{ueGroupId}/ee-subscriptions/{subsId})
	ModifyEeGroupSubscription(c *gin.Context, ueGroupId externalRef8.VarUeGroupId, subsId string, params ModifyEeGroupSubscriptionParams)
	// Update an individual ee subscription of a group of UEs or any UE
	// (PUT /subscription-data/group-data/{ueGroupId}/ee-subscriptions/{subsId})
	UpdateEeGroupSubscriptions(c *gin.Context, ueGroupId externalRef8.VarUeGroupId, subsId string)
	// retrieve shared data
	// (GET /subscription-data/shared-data)
	GetSharedData(c *gin.Context, params GetSharedDataParams)
	// retrieve individual shared data
	// (GET /subscription-data/shared-data/{sharedDataId})
	GetIndividualSharedData(c *gin.Context, sharedDataId externalRef3.SharedDataId, params GetIndividualSharedDataParams)
	// Deletes subscriptions identified by a given ue-id parameter
	// (DELETE /subscription-data/subs-to-notify)
	RemoveMultipleSubscriptionDataSubscriptions(c *gin.Context, params RemoveMultipleSubscriptionDataSubscriptionsParams)
	// Retrieves the list of subscriptions
	// (GET /subscription-data/subs-to-notify)
	QuerySubsToNotify(c *gin.Context, params QuerySubsToNotifyParams)
	// Subscription data subscriptions
	// (POST /subscription-data/subs-to-notify)
	SubscriptionDataSubscriptions(c *gin.Context)
	// Deletes a subscriptionDataSubscriptions
	// (DELETE /subscription-data/subs-to-notify/{subsId})
	RemovesubscriptionDataSubscriptions(c *gin.Context, subsId string)
	// Retrieves a individual subscriptionDataSubscription identified by subsId
	// (GET /subscription-data/subs-to-notify/{subsId})
	QuerySubscriptionDataSubscriptions(c *gin.Context, subsId string)
	// Modify an individual subscriptionDataSubscription
	// (PATCH /subscription-data/subs-to-notify/{subsId})
	ModifysubscriptionDataSubscription(c *gin.Context, subsId string, params ModifysubscriptionDataSubscriptionParams)
	// To remove the Authentication Status of a UE
	// (DELETE /subscription-data/{ueId}/authentication-data/authentication-status)
	DeleteAuthenticationStatus(c *gin.Context, ueId externalRef0.Supi)
	// Retrieves the Authentication Status of a UE
	// (GET /subscription-data/{ueId}/authentication-data/authentication-status)
	QueryAuthenticationStatus(c *gin.Context, ueId externalRef0.Supi, params QueryAuthenticationStatusParams)
	// To store the Authentication Status data of a UE
	// (PUT /subscription-data/{ueId}/authentication-data/authentication-status)
	CreateAuthenticationStatus(c *gin.Context, ueId externalRef0.Supi)
	// To remove the Individual Authentication Status of a UE
	// (DELETE /subscription-data/{ueId}/authentication-data/authentication-status/{servingNetworkName})
	DeleteIndividualAuthenticationStatus(c *gin.Context, ueId externalRef0.Supi, servingNetworkName externalRef4.ServingNetworkName)
	// Retrieves the Individual Authentication Status of a UE
	// (GET /subscription-data/{ueId}/authentication-data/authentication-status/{servingNetworkName})
	QueryIndividualAuthenticationStatus(c *gin.Context, ueId externalRef0.Supi, servingNetworkName externalRef4.ServingNetworkName, params QueryIndividualAuthenticationStatusParams)
	// To store the individual Authentication Status data of a UE
	// (PUT /subscription-data/{ueId}/authentication-data/authentication-status/{servingNetworkName})
	CreateIndividualAuthenticationStatus(c *gin.Context, ueId externalRef0.Supi, servingNetworkName externalRef4.ServingNetworkName)
	// Retrieves the authentication subscription data of a UE
	// (GET /subscription-data/{ueId}/authentication-data/authentication-subscription)
	QueryAuthSubsData(c *gin.Context, ueId externalRef0.Supi, params QueryAuthSubsDataParams)
	// modify the authentication subscription data of a UE
	// (PATCH /subscription-data/{ueId}/authentication-data/authentication-subscription)
	ModifyAuthenticationSubscription(c *gin.Context, ueId externalRef0.Supi, params ModifyAuthenticationSubscriptionParams)
	// Retrieve multiple context data sets of a UE
	// (GET /subscription-data/{ueId}/context-data)
	QueryContextData(c *gin.Context, ueId externalRef0.VarUeId, params QueryContextDataParams)
	// Retrieves the AMF context data of a UE using 3gpp access
	// (GET /subscription-data/{ueId}/context-data/amf-3gpp-access)
	QueryAmfContext3gpp(c *gin.Context, ueId externalRef0.VarUeId, params QueryAmfContext3gppParams)
	// To modify the AMF context data of a UE using 3gpp access in the UDR
	// (PATCH /subscription-data/{ueId}/context-data/amf-3gpp-access)
	AmfContext3gpp(c *gin.Context, ueId externalRef0.VarUeId, params AmfContext3gppParams)
	// To store the AMF context data of a UE using 3gpp access in the UDR
	// (PUT /subscription-data/{ueId}/context-data/amf-3gpp-access)
	CreateAmfContext3gpp(c *gin.Context, ueId externalRef0.VarUeId)
	// Retrieves the AMF context data of a UE using non-3gpp access
	// (GET /subscription-data/{ueId}/context-data/amf-non-3gpp-access)
	QueryAmfContextNon3gpp(c *gin.Context, ueId externalRef0.VarUeId, params QueryAmfContextNon3gppParams)
	// To modify the AMF context data of a UE using non 3gpp access in the UDR
	// (PATCH /subscription-data/{ueId}/context-data/amf-non-3gpp-access)
	AmfContextNon3gpp(c *gin.Context, ueId externalRef0.VarUeId, params AmfContextNon3gppParams)
	// To store the AMF context data of a UE using non-3gpp access in the UDR
	// (PUT /subscription-data/{ueId}/context-data/amf-non-3gpp-access)
	CreateAmfContextNon3gpp(c *gin.Context, ueId externalRef0.VarUeId)
	// Retrieves the ee subscriptions of a UE
	// (GET /subscription-data/{ueId}/context-data/ee-subscriptions)
	Queryeesubscriptions(c *gin.Context, ueId externalRef0.VarUeId, params QueryeesubscriptionsParams)
	// Create individual EE subscription
	// (POST /subscription-data/{ueId}/context-data/ee-subscriptions)
	CreateEeSubscriptions(c *gin.Context, ueId externalRef0.VarUeId)
	// Deletes a eeSubscription
	// (DELETE /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId})
	RemoveeeSubscriptions(c *gin.Context, ueId externalRef0.VarUeId, subsId string)
	// Retrieve a eeSubscription
	// (GET /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId})
	QueryeeSubscription(c *gin.Context, ueId externalRef0.VarUeId, subsId string)
	// Modify an individual ee subscription of a UE
	// (PATCH /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId})
	ModifyEesubscription(c *gin.Context, ueId externalRef0.VarUeId, subsId string, params ModifyEesubscriptionParams)
	// Update an individual ee subscriptions of a UE
	// (PUT /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId})
	UpdateEesubscriptions(c *gin.Context, ueId externalRef0.VarUeId, subsId string)
	// Deletes AMF Subscription Info for an eeSubscription
	// (DELETE /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/amf-subscriptions)
	RemoveAmfSubscriptionsInfo(c *gin.Context, ueId externalRef0.VarUeId, subsId string)
	// Retrieve AMF subscription Info
	// (GET /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/amf-subscriptions)
	GetAmfSubscriptionInfo(c *gin.Context, ueId externalRef0.VarUeId, subsId string)
	// modify the AMF Subscription Info
	// (PATCH /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/amf-subscriptions)
	ModifyAmfSubscriptionInfo(c *gin.Context, ueId externalRef0.VarUeId, subsId string, params ModifyAmfSubscriptionInfoParams)
	// Create AmfSubscriptions for an individual ee subscriptions of a UE
	// (PUT /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/amf-subscriptions)
	CreateAMFSubscriptions(c *gin.Context, ueId externalRef0.VarUeId, subsId string)
	// Delete HSS Subscription Info
	// (DELETE /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/hss-subscriptions)
	RemoveHssSubscriptionsInfo(c *gin.Context, ueId externalRef0.VarUeId, subsId string)
	// Retrieve HSS Subscription Info
	// (GET /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/hss-subscriptions)
	GetHssSubscriptionInfo(c *gin.Context, ueId externalRef0.VarUeId, subsId string)
	// Modify HSS Subscription Info
	// (PATCH /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/hss-subscriptions)
	ModifyHssSubscriptionInfo(c *gin.Context, ueId externalRef0.VarUeId, subsId string, params ModifyHssSubscriptionInfoParams)
	// Create HSS Subscription Info
	// (PUT /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/hss-subscriptions)
	CreateHSSSubscriptions(c *gin.Context, ueId externalRef0.VarUeId, subsId string)
	// Delete SMF Subscription Info
	// (DELETE /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/smf-subscriptions)
	RemoveSmfSubscriptionsInfo(c *gin.Context, ueId externalRef0.VarUeId, subsId string)
	// Retrieve SMF Subscription Info
	// (GET /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/smf-subscriptions)
	GetSmfSubscriptionInfo(c *gin.Context, ueId externalRef0.VarUeId, subsId string)
	// Modify SMF Subscription Info
	// (PATCH /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/smf-subscriptions)
	ModifySmfSubscriptionInfo(c *gin.Context, ueId externalRef0.VarUeId, subsId string, params ModifySmfSubscriptionInfoParams)
	// Create SMF Subscription Info
	// (PUT /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/smf-subscriptions)
	CreateSMFSubscriptions(c *gin.Context, ueId externalRef0.VarUeId, subsId string)
	// To remove the IP-SM-GW context data of a UE
	// (DELETE /subscription-data/{ueId}/context-data/ip-sm-gw)
	DeleteIpSmGwContext(c *gin.Context, ueId externalRef0.VarUeId)
	// Retrieves the IP-SM-GW context data of a UE
	// (GET /subscription-data/{ueId}/context-data/ip-sm-gw)
	QueryIpSmGwContext(c *gin.Context, ueId externalRef0.VarUeId, params QueryIpSmGwContextParams)
	// Modify the IP-SM-GW context data of a UE
	// (PATCH /subscription-data/{ueId}/context-data/ip-sm-gw)
	ModifyIpSmGwContext(c *gin.Context, ueId externalRef0.VarUeId)
	// Create the IP-SM-GW context data of a UE
	// (PUT /subscription-data/{ueId}/context-data/ip-sm-gw)
	CreateIpSmGwContext(c *gin.Context, ueId externalRef0.VarUeId)
	// Retrieves the UE's Location Information
	// (GET /subscription-data/{ueId}/context-data/location)
	QueryUeLocation(c *gin.Context, ueId externalRef0.VarUeId, params QueryUeLocationParams)
	// To remove the Message Waiting Data of the UE
	// (DELETE /subscription-data/{ueId}/context-data/mwd)
	DeleteMessageWaitingData(c *gin.Context, ueId externalRef0.VarUeId)
	// Retrieves the Message Waiting Data of the UE
	// (GET /subscription-data/{ueId}/context-data/mwd)
	QueryMessageWaitingData(c *gin.Context, ueId externalRef0.VarUeId, params QueryMessageWaitingDataParams)
	// Modify the Message Waiting Data of the UE
	// (PATCH /subscription-data/{ueId}/context-data/mwd)
	ModifyMessageWaitingData(c *gin.Context, ueId externalRef0.VarUeId)
	// Create the Message Waiting Data of the UE
	// (PUT /subscription-data/{ueId}/context-data/mwd)
	CreateMessageWaitingData(c *gin.Context, ueId externalRef0.VarUeId)
	// Retrieves the sdm subscriptions of a UE
	// (GET /subscription-data/{ueId}/context-data/sdm-subscriptions)
	Querysdmsubscriptions(c *gin.Context, ueId externalRef0.VarUeId, params QuerysdmsubscriptionsParams)
	// Create individual sdm subscription
	// (POST /subscription-data/{ueId}/context-data/sdm-subscriptions)
	CreateSdmSubscriptions(c *gin.Context, ueId externalRef0.VarUeId)
	// Deletes a sdmsubscriptions
	// (DELETE /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId})
	RemovesdmSubscriptions(c *gin.Context, ueId externalRef0.VarUeId, subsId string)
	// Retrieves a individual sdmSubscription identified by subsId
	// (GET /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId})
	QuerysdmSubscription(c *gin.Context, ueId externalRef0.VarUeId, subsId string)
	// Modify an individual sdm subscription
	// (PATCH /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId})
	ModifysdmSubscription(c *gin.Context, ueId externalRef0.VarUeId, subsId string, params ModifysdmSubscriptionParams)
	// Update an individual sdm subscriptions of a UE
	// (PUT /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId})
	Updatesdmsubscriptions(c *gin.Context, ueId externalRef0.VarUeId, subsId string)
	// Delete HSS SDM Subscription Info
	// (DELETE /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId}/hss-sdm-subscriptions)
	RemoveHssSDMSubscriptionsInfo(c *gin.Context, ueId externalRef0.VarUeId, subsId string)
	// Retrieve HSS SDM Subscription Info
	// (GET /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId}/hss-sdm-subscriptions)
	GetHssSDMSubscriptionInfo(c *gin.Context, ueId externalRef0.VarUeId, subsId string)
	// Modify HSS SDM Subscription Info
	// (PATCH /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId}/hss-sdm-subscriptions)
	ModifyHssSDMSubscriptionInfo(c *gin.Context, ueId externalRef0.VarUeId, subsId string, params ModifyHssSDMSubscriptionInfoParams)
	// Create HSS SDM Subscription Info
	// (PUT /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId}/hss-sdm-subscriptions)
	CreateHSSSDMSubscriptions(c *gin.Context, ueId externalRef0.VarUeId, subsId string)
	// Retrieves the SMF registration list of a UE
	// (GET /subscription-data/{ueId}/context-data/smf-registrations)
	QuerySmfRegList(c *gin.Context, ueId externalRef0.VarUeId, params QuerySmfRegListParams)
	// To remove an individual SMF context data of a UE the UDR
	// (DELETE /subscription-data/{ueId}/context-data/smf-registrations/{pduSessionId})
	DeleteSmfRegistration(c *gin.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId)
	// Retrieves the individual SMF registration of a UE
	// (GET /subscription-data/{ueId}/context-data/smf-registrations/{pduSessionId})
	QuerySmfRegistration(c *gin.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, params QuerySmfRegistrationParams)
	// To create an individual SMF context data of a UE in the UDR
	// (PUT /subscription-data/{ueId}/context-data/smf-registrations/{pduSessionId})
	CreateOrUpdateSmfRegistration(c *gin.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId)
	// To remove the SMSF context data of a UE via 3GPP access
	// (DELETE /subscription-data/{ueId}/context-data/smsf-3gpp-access)
	DeleteSmsfContext3gpp(c *gin.Context, ueId externalRef0.VarUeId)
	// Retrieves the SMSF context data of a UE using 3gpp access
	// (GET /subscription-data/{ueId}/context-data/smsf-3gpp-access)
	QuerySmsfContext3gpp(c *gin.Context, ueId externalRef0.VarUeId, params QuerySmsfContext3gppParams)
	// Create the SMSF context data of a UE via 3GPP access
	// (PUT /subscription-data/{ueId}/context-data/smsf-3gpp-access)
	CreateSmsfContext3gpp(c *gin.Context, ueId externalRef0.VarUeId)
	// To remove the SMSF context data of a UE via non-3GPP access
	// (DELETE /subscription-data/{ueId}/context-data/smsf-non-3gpp-access)
	DeleteSmsfContextNon3gpp(c *gin.Context, ueId externalRef0.VarUeId)
	// Retrieves the SMSF context data of a UE using non-3gpp access
	// (GET /subscription-data/{ueId}/context-data/smsf-non-3gpp-access)
	QuerySmsfContextNon3gpp(c *gin.Context, ueId externalRef0.VarUeId, params QuerySmsfContextNon3gppParams)
	// Create the SMSF context data of a UE via non-3GPP access
	// (PUT /subscription-data/{ueId}/context-data/smsf-non-3gpp-access)
	CreateSmsfContextNon3gpp(c *gin.Context, ueId externalRef0.VarUeId)
	// Retrieves the subscribed enhanced Coverage Restriction Data of a UE
	// (GET /subscription-data/{ueId}/coverage-restriction-data)
	QueryCoverageRestrictionData(c *gin.Context, ueId externalRef0.VarUeId, params QueryCoverageRestrictionDataParams)
	// Retrieves the ee profile data of a UE
	// (GET /subscription-data/{ueId}/ee-profile-data)
	QueryEEData(c *gin.Context, ueId externalRef0.VarUeId, params QueryEEDataParams)
	// Retrieve identity data by SUPI or GPSI
	// (GET /subscription-data/{ueId}/identity-data)
	GetIdentityData(c *gin.Context, ueId externalRef0.VarUeId, params GetIdentityDataParams)
	// Retrieves the LCS Mobile Originated subscription data of a UE
	// (GET /subscription-data/{ueId}/lcs-mo-data)
	QueryLcsMoData(c *gin.Context, ueId externalRef0.VarUeId, params QueryLcsMoDataParams)
	// Retrieves the LCS Privacy subscription data of a UE
	// (GET /subscription-data/{ueId}/lcs-privacy-data)
	QueryLcsPrivacyData(c *gin.Context, ueId externalRef0.VarUeId, params QueryLcsPrivacyDataParams)
	// Retrieve NIDD Authorization Data GPSI or External Group identifier
	// (GET /subscription-data/{ueId}/nidd-authorization-data)
	GetNiddAuData(c *gin.Context, ueId string, params GetNiddAuDataParams)
	// Retrieve ODB Data data by SUPI or GPSI
	// (GET /subscription-data/{ueId}/operator-determined-barring-data)
	GetOdbData(c *gin.Context, ueId externalRef0.VarUeId)
	// Retrieves the operator specific data of a UE
	// (GET /subscription-data/{ueId}/operator-specific-data)
	QueryOperSpecData(c *gin.Context, ueId externalRef0.VarUeId, params QueryOperSpecDataParams)
	// To modify operator specific data of a UE
	// (PATCH /subscription-data/{ueId}/operator-specific-data)
	ModifyOperSpecData(c *gin.Context, ueId externalRef0.VarUeId, params ModifyOperSpecDataParams)
	// Read the profile of a given UE
	// (GET /subscription-data/{ueId}/pp-data)
	GetppData(c *gin.Context, ueId externalRef0.VarUeId, params GetppDataParams)
	// modify the provisioned parameter data
	// (PATCH /subscription-data/{ueId}/pp-data)
	ModifyPpData(c *gin.Context, ueId externalRef0.VarUeId, params ModifyPpDataParams)
	// Retrieves the parameter provision profile data of a UE
	// (GET /subscription-data/{ueId}/pp-profile-data)
	QueryPPData(c *gin.Context, ueId externalRef0.VarUeId, params QueryPPDataParams)
	// Retrieves the SoR acknowledgement information of a UE
	// (GET /subscription-data/{ueId}/ue-update-confirmation-data/sor-data)
	QueryAuthSoR(c *gin.Context, ueId externalRef0.Supi, params QueryAuthSoRParams)
	// To store the SoR acknowledgement information of a UE
	// (PUT /subscription-data/{ueId}/ue-update-confirmation-data/sor-data)
	CreateAuthenticationSoR(c *gin.Context, ueId externalRef0.Supi, params CreateAuthenticationSoRParams)
	// Retrieves the CAG acknowledgement information of a UE
	// (GET /subscription-data/{ueId}/ue-update-confirmation-data/subscribed-cag)
	QueryCagAck(c *gin.Context, ueId externalRef0.Supi, params QueryCagAckParams)
	// To store the CAG update acknowledgement information of a UE
	// (PUT /subscription-data/{ueId}/ue-update-confirmation-data/subscribed-cag)
	CreateCagUpdateAck(c *gin.Context, ueId externalRef0.Supi, params CreateCagUpdateAckParams)
	// Retrieves the UPU acknowledgement information of a UE
	// (GET /subscription-data/{ueId}/ue-update-confirmation-data/subscribed-snssais)
	QueryNssaiAck(c *gin.Context, ueId externalRef0.Supi, params QueryNssaiAckParams)
	// To store the NSSAI update acknowledgement information of a UE
	// (PUT /subscription-data/{ueId}/ue-update-confirmation-data/subscribed-snssais)
	CreateOrUpdateNssaiAck(c *gin.Context, ueId externalRef0.Supi, params CreateOrUpdateNssaiAckParams)
	// Retrieves the UPU acknowledgement information of a UE
	// (GET /subscription-data/{ueId}/ue-update-confirmation-data/upu-data)
	QueryAuthUPU(c *gin.Context, ueId externalRef0.Supi, params QueryAuthUPUParams)
	// To store the UPU acknowledgement information of a UE
	// (PUT /subscription-data/{ueId}/ue-update-confirmation-data/upu-data)
	CreateAuthenticationUPU(c *gin.Context, ueId externalRef0.Supi, params CreateAuthenticationUPUParams)
	// Retrieves the subscribed V2X Data of a UE
	// (GET /subscription-data/{ueId}/v2x-data)
	QueryV2xData(c *gin.Context, ueId externalRef0.VarUeId, params QueryV2xDataParams)
	// Retrieve multiple provisioned data sets of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data)
	QueryProvisionedData(c *gin.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params QueryProvisionedDataParams)
	// Retrieves the access and mobility subscription data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/am-data)
	QueryAmData(c *gin.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params QueryAmDataParams)
	// Retrieves the LCS Broadcast Assistance subscription data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/lcs-bca-data)
	QueryLcsBcaData(c *gin.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params QueryLcsBcaDataParams)
	// Retrieves the Session Management subscription data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/sm-data)
	QuerySmData(c *gin.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params QuerySmDataParams)
	// Retrieves the SMF selection subscription data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/smf-selection-subscription-data)
	QuerySmfSelectData(c *gin.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params QuerySmfSelectDataParams)
	// Retrieves the SMS subscription data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/sms-data)
	QuerySmsData(c *gin.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params QuerySmsDataParams)
	// Retrieves the SMS management subscription data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/sms-mng-data)
	QuerySmsMngData(c *gin.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params QuerySmsMngDataParams)
	// Retrieves the trace configuration data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/trace-data)
	QueryTraceData(c *gin.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params QueryTraceDataParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ReadBdtPolicyData operation middleware
func (siw *ServerInterfaceWrapper) ReadBdtPolicyData(c *gin.Context) {

	var err error

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadBdtPolicyDataParams

	// ------------- Optional query parameter "bdt-policy-ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "bdt-policy-ids", c.Request.URL.Query(), &params.BdtPolicyIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bdt-policy-ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "internal-group-ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "internal-group-ids", c.Request.URL.Query(), &params.InternalGroupIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter internal-group-ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supis" -------------

	err = runtime.BindQueryParameter("form", true, false, "supis", c.Request.URL.Query(), &params.Supis)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supis: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadBdtPolicyData(c, params)
}

// DeleteIndividualAppliedBdtPolicyData operation middleware
func (siw *ServerInterfaceWrapper) DeleteIndividualAppliedBdtPolicyData(c *gin.Context) {

	var err error

	// ------------- Path parameter "bdtPolicyId" -------------
	var bdtPolicyId string

	err = runtime.BindStyledParameterWithOptions("simple", "bdtPolicyId", c.Param("bdtPolicyId"), &bdtPolicyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bdtPolicyId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIndividualAppliedBdtPolicyData(c, bdtPolicyId)
}

// UpdateIndividualAppliedBdtPolicyData operation middleware
func (siw *ServerInterfaceWrapper) UpdateIndividualAppliedBdtPolicyData(c *gin.Context) {

	var err error

	// ------------- Path parameter "bdtPolicyId" -------------
	var bdtPolicyId string

	err = runtime.BindStyledParameterWithOptions("simple", "bdtPolicyId", c.Param("bdtPolicyId"), &bdtPolicyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bdtPolicyId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateIndividualAppliedBdtPolicyData(c, bdtPolicyId)
}

// CreateIndividualAppliedBdtPolicyData operation middleware
func (siw *ServerInterfaceWrapper) CreateIndividualAppliedBdtPolicyData(c *gin.Context) {

	var err error

	// ------------- Path parameter "bdtPolicyId" -------------
	var bdtPolicyId string

	err = runtime.BindStyledParameterWithOptions("simple", "bdtPolicyId", c.Param("bdtPolicyId"), &bdtPolicyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bdtPolicyId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateIndividualAppliedBdtPolicyData(c, bdtPolicyId)
}

// ReadInfluenceData operation middleware
func (siw *ServerInterfaceWrapper) ReadInfluenceData(c *gin.Context) {

	var err error

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadInfluenceDataParams

	// ------------- Optional query parameter "influence-Ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "influence-Ids", c.Request.URL.Query(), &params.InfluenceIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter influence-Ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "dnns" -------------

	err = runtime.BindQueryParameter("form", true, false, "dnns", c.Request.URL.Query(), &params.Dnns)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dnns: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "snssais" -------------

	if paramValue := c.Query("snssais"); paramValue != "" {

		var value []externalRef0.Snssai
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'snssais' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.Snssais = &value

	}

	// ------------- Optional query parameter "internal-Group-Ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "internal-Group-Ids", c.Request.URL.Query(), &params.InternalGroupIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter internal-Group-Ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supis" -------------

	err = runtime.BindQueryParameter("form", true, false, "supis", c.Request.URL.Query(), &params.Supis)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supis: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supp-feat" -------------

	err = runtime.BindQueryParameter("form", true, false, "supp-feat", c.Request.URL.Query(), &params.SuppFeat)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supp-feat: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadInfluenceData(c, params)
}

// ReadInfluenceDataSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) ReadInfluenceDataSubscriptions(c *gin.Context) {

	var err error

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadInfluenceDataSubscriptionsParams

	// ------------- Optional query parameter "dnn" -------------

	err = runtime.BindQueryParameter("form", true, false, "dnn", c.Request.URL.Query(), &params.Dnn)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dnn: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "snssai" -------------

	if paramValue := c.Query("snssai"); paramValue != "" {

		var value externalRef0.Snssai
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'snssai' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.Snssai = &value

	}

	// ------------- Optional query parameter "internal-Group-Id" -------------

	err = runtime.BindQueryParameter("form", true, false, "internal-Group-Id", c.Request.URL.Query(), &params.InternalGroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter internal-Group-Id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supi" -------------

	err = runtime.BindQueryParameter("form", true, false, "supi", c.Request.URL.Query(), &params.Supi)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadInfluenceDataSubscriptions(c, params)
}

// CreateIndividualInfluenceDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) CreateIndividualInfluenceDataSubscription(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateIndividualInfluenceDataSubscription(c)
}

// DeleteIndividualInfluenceDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) DeleteIndividualInfluenceDataSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", c.Param("subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIndividualInfluenceDataSubscription(c, subscriptionId)
}

// ReadIndividualInfluenceDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) ReadIndividualInfluenceDataSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", c.Param("subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadIndividualInfluenceDataSubscription(c, subscriptionId)
}

// ReplaceIndividualInfluenceDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) ReplaceIndividualInfluenceDataSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", c.Param("subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReplaceIndividualInfluenceDataSubscription(c, subscriptionId)
}

// DeleteIndividualInfluenceData operation middleware
func (siw *ServerInterfaceWrapper) DeleteIndividualInfluenceData(c *gin.Context) {

	var err error

	// ------------- Path parameter "influenceId" -------------
	var influenceId string

	err = runtime.BindStyledParameterWithOptions("simple", "influenceId", c.Param("influenceId"), &influenceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter influenceId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIndividualInfluenceData(c, influenceId)
}

// UpdateIndividualInfluenceData operation middleware
func (siw *ServerInterfaceWrapper) UpdateIndividualInfluenceData(c *gin.Context) {

	var err error

	// ------------- Path parameter "influenceId" -------------
	var influenceId string

	err = runtime.BindStyledParameterWithOptions("simple", "influenceId", c.Param("influenceId"), &influenceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter influenceId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateIndividualInfluenceData(c, influenceId)
}

// CreateOrReplaceIndividualInfluenceData operation middleware
func (siw *ServerInterfaceWrapper) CreateOrReplaceIndividualInfluenceData(c *gin.Context) {

	var err error

	// ------------- Path parameter "influenceId" -------------
	var influenceId string

	err = runtime.BindStyledParameterWithOptions("simple", "influenceId", c.Param("influenceId"), &influenceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter influenceId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrReplaceIndividualInfluenceData(c, influenceId)
}

// ReadIPTVCongifurationData operation middleware
func (siw *ServerInterfaceWrapper) ReadIPTVCongifurationData(c *gin.Context) {

	var err error

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadIPTVCongifurationDataParams

	// ------------- Optional query parameter "config-ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "config-ids", c.Request.URL.Query(), &params.ConfigIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter config-ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "dnns" -------------

	err = runtime.BindQueryParameter("form", true, false, "dnns", c.Request.URL.Query(), &params.Dnns)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dnns: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "snssais" -------------

	if paramValue := c.Query("snssais"); paramValue != "" {

		var value []externalRef0.Snssai
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'snssais' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.Snssais = &value

	}

	// ------------- Optional query parameter "supis" -------------

	err = runtime.BindQueryParameter("form", true, false, "supis", c.Request.URL.Query(), &params.Supis)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supis: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "inter-group-ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "inter-group-ids", c.Request.URL.Query(), &params.InterGroupIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter inter-group-ids: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadIPTVCongifurationData(c, params)
}

// DeleteIndividualIPTVConfigurationData operation middleware
func (siw *ServerInterfaceWrapper) DeleteIndividualIPTVConfigurationData(c *gin.Context) {

	var err error

	// ------------- Path parameter "configurationId" -------------
	var configurationId string

	err = runtime.BindStyledParameterWithOptions("simple", "configurationId", c.Param("configurationId"), &configurationId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter configurationId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIndividualIPTVConfigurationData(c, configurationId)
}

// PartialReplaceIndividualIPTVConfigurationData operation middleware
func (siw *ServerInterfaceWrapper) PartialReplaceIndividualIPTVConfigurationData(c *gin.Context) {

	var err error

	// ------------- Path parameter "configurationId" -------------
	var configurationId string

	err = runtime.BindStyledParameterWithOptions("simple", "configurationId", c.Param("configurationId"), &configurationId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter configurationId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PartialReplaceIndividualIPTVConfigurationData(c, configurationId)
}

// CreateOrReplaceIndividualIPTVConfigurationData operation middleware
func (siw *ServerInterfaceWrapper) CreateOrReplaceIndividualIPTVConfigurationData(c *gin.Context) {

	var err error

	// ------------- Path parameter "configurationId" -------------
	var configurationId string

	err = runtime.BindStyledParameterWithOptions("simple", "configurationId", c.Param("configurationId"), &configurationId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter configurationId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrReplaceIndividualIPTVConfigurationData(c, configurationId)
}

// ReadPFDData operation middleware
func (siw *ServerInterfaceWrapper) ReadPFDData(c *gin.Context) {

	var err error

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadPFDDataParams

	// ------------- Optional query parameter "appId" -------------

	err = runtime.BindQueryParameter("form", true, false, "appId", c.Request.URL.Query(), &params.AppId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter appId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadPFDData(c, params)
}

// DeleteIndividualPFDData operation middleware
func (siw *ServerInterfaceWrapper) DeleteIndividualPFDData(c *gin.Context) {

	var err error

	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithOptions("simple", "appId", c.Param("appId"), &appId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter appId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIndividualPFDData(c, appId)
}

// ReadIndividualPFDData operation middleware
func (siw *ServerInterfaceWrapper) ReadIndividualPFDData(c *gin.Context) {

	var err error

	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithOptions("simple", "appId", c.Param("appId"), &appId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter appId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadIndividualPFDData(c, appId)
}

// CreateOrReplaceIndividualPFDData operation middleware
func (siw *ServerInterfaceWrapper) CreateOrReplaceIndividualPFDData(c *gin.Context) {

	var err error

	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameterWithOptions("simple", "appId", c.Param("appId"), &appId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter appId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrReplaceIndividualPFDData(c, appId)
}

// ReadServiceParameterData operation middleware
func (siw *ServerInterfaceWrapper) ReadServiceParameterData(c *gin.Context) {

	var err error

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadServiceParameterDataParams

	// ------------- Optional query parameter "service-param-ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "service-param-ids", c.Request.URL.Query(), &params.ServiceParamIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter service-param-ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "dnns" -------------

	err = runtime.BindQueryParameter("form", true, false, "dnns", c.Request.URL.Query(), &params.Dnns)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dnns: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "snssais" -------------

	if paramValue := c.Query("snssais"); paramValue != "" {

		var value []externalRef0.Snssai
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'snssais' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.Snssais = &value

	}

	// ------------- Optional query parameter "internal-group-ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "internal-group-ids", c.Request.URL.Query(), &params.InternalGroupIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter internal-group-ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supis" -------------

	err = runtime.BindQueryParameter("form", true, false, "supis", c.Request.URL.Query(), &params.Supis)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supis: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ue-ipv4s" -------------

	err = runtime.BindQueryParameter("form", true, false, "ue-ipv4s", c.Request.URL.Query(), &params.UeIpv4s)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ue-ipv4s: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ue-ipv6s" -------------

	err = runtime.BindQueryParameter("form", true, false, "ue-ipv6s", c.Request.URL.Query(), &params.UeIpv6s)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ue-ipv6s: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ue-macs" -------------

	err = runtime.BindQueryParameter("form", true, false, "ue-macs", c.Request.URL.Query(), &params.UeMacs)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ue-macs: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supp-feat" -------------

	err = runtime.BindQueryParameter("form", true, false, "supp-feat", c.Request.URL.Query(), &params.SuppFeat)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supp-feat: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadServiceParameterData(c, params)
}

// DeleteIndividualServiceParameterData operation middleware
func (siw *ServerInterfaceWrapper) DeleteIndividualServiceParameterData(c *gin.Context) {

	var err error

	// ------------- Path parameter "serviceParamId" -------------
	var serviceParamId string

	err = runtime.BindStyledParameterWithOptions("simple", "serviceParamId", c.Param("serviceParamId"), &serviceParamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter serviceParamId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIndividualServiceParameterData(c, serviceParamId)
}

// UpdateIndividualServiceParameterData operation middleware
func (siw *ServerInterfaceWrapper) UpdateIndividualServiceParameterData(c *gin.Context) {

	var err error

	// ------------- Path parameter "serviceParamId" -------------
	var serviceParamId string

	err = runtime.BindStyledParameterWithOptions("simple", "serviceParamId", c.Param("serviceParamId"), &serviceParamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter serviceParamId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateIndividualServiceParameterData(c, serviceParamId)
}

// CreateOrReplaceServiceParameterData operation middleware
func (siw *ServerInterfaceWrapper) CreateOrReplaceServiceParameterData(c *gin.Context) {

	var err error

	// ------------- Path parameter "serviceParamId" -------------
	var serviceParamId string

	err = runtime.BindStyledParameterWithOptions("simple", "serviceParamId", c.Param("serviceParamId"), &serviceParamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter serviceParamId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrReplaceServiceParameterData(c, serviceParamId)
}

// ReadApplicationDataChangeSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) ReadApplicationDataChangeSubscriptions(c *gin.Context) {

	var err error

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadApplicationDataChangeSubscriptionsParams

	// ------------- Optional query parameter "data-filter" -------------

	if paramValue := c.Query("data-filter"); paramValue != "" {

		var value externalRef5.DataFilter
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'data-filter' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.DataFilter = &value

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadApplicationDataChangeSubscriptions(c, params)
}

// CreateIndividualApplicationDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) CreateIndividualApplicationDataSubscription(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateIndividualApplicationDataSubscription(c)
}

// DeleteIndividualApplicationDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) DeleteIndividualApplicationDataSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIndividualApplicationDataSubscription(c, subsId)
}

// ReadIndividualApplicationDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) ReadIndividualApplicationDataSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadIndividualApplicationDataSubscription(c, subsId)
}

// ReplaceIndividualApplicationDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) ReplaceIndividualApplicationDataSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReplaceIndividualApplicationDataSubscription(c, subsId)
}

// CreateIndividualExposureDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) CreateIndividualExposureDataSubscription(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateIndividualExposureDataSubscription(c)
}

// DeleteIndividualExposureDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) DeleteIndividualExposureDataSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "subId" -------------
	var subId string

	err = runtime.BindStyledParameterWithOptions("simple", "subId", c.Param("subId"), &subId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIndividualExposureDataSubscription(c, subId)
}

// ReplaceIndividualExposureDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) ReplaceIndividualExposureDataSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "subId" -------------
	var subId string

	err = runtime.BindStyledParameterWithOptions("simple", "subId", c.Param("subId"), &subId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReplaceIndividualExposureDataSubscription(c, subId)
}

// DeleteAccessAndMobilityData operation middleware
func (siw *ServerInterfaceWrapper) DeleteAccessAndMobilityData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAccessAndMobilityData(c, ueId)
}

// QueryAccessAndMobilityData operation middleware
func (siw *ServerInterfaceWrapper) QueryAccessAndMobilityData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryAccessAndMobilityDataParams

	// ------------- Optional query parameter "supp-feat" -------------

	err = runtime.BindQueryParameter("form", true, false, "supp-feat", c.Request.URL.Query(), &params.SuppFeat)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supp-feat: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryAccessAndMobilityData(c, ueId, params)
}

// UpdateAccessAndMobilityData operation middleware
func (siw *ServerInterfaceWrapper) UpdateAccessAndMobilityData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateAccessAndMobilityData(c, ueId)
}

// CreateOrReplaceAccessAndMobilityData operation middleware
func (siw *ServerInterfaceWrapper) CreateOrReplaceAccessAndMobilityData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrReplaceAccessAndMobilityData(c, ueId)
}

// DeleteSessionManagementData operation middleware
func (siw *ServerInterfaceWrapper) DeleteSessionManagementData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "pduSessionId" -------------
	var pduSessionId externalRef0.PduSessionId

	err = runtime.BindStyledParameterWithOptions("simple", "pduSessionId", c.Param("pduSessionId"), &pduSessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pduSessionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteSessionManagementData(c, ueId, pduSessionId)
}

// QuerySessionManagementData operation middleware
func (siw *ServerInterfaceWrapper) QuerySessionManagementData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "pduSessionId" -------------
	var pduSessionId externalRef0.PduSessionId

	err = runtime.BindStyledParameterWithOptions("simple", "pduSessionId", c.Param("pduSessionId"), &pduSessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pduSessionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QuerySessionManagementDataParams

	// ------------- Optional query parameter "ipv4-addr" -------------

	err = runtime.BindQueryParameter("form", true, false, "ipv4-addr", c.Request.URL.Query(), &params.Ipv4Addr)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ipv4-addr: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ipv6-prefix" -------------

	err = runtime.BindQueryParameter("form", true, false, "ipv6-prefix", c.Request.URL.Query(), &params.Ipv6Prefix)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ipv6-prefix: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "dnn" -------------

	err = runtime.BindQueryParameter("form", true, false, "dnn", c.Request.URL.Query(), &params.Dnn)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dnn: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supp-feat" -------------

	err = runtime.BindQueryParameter("form", true, false, "supp-feat", c.Request.URL.Query(), &params.SuppFeat)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supp-feat: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QuerySessionManagementData(c, ueId, pduSessionId, params)
}

// CreateOrReplaceSessionManagementData operation middleware
func (siw *ServerInterfaceWrapper) CreateOrReplaceSessionManagementData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "pduSessionId" -------------
	var pduSessionId externalRef0.PduSessionId

	err = runtime.BindStyledParameterWithOptions("simple", "pduSessionId", c.Param("pduSessionId"), &pduSessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pduSessionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrReplaceSessionManagementData(c, ueId, pduSessionId)
}

// ReadBdtData operation middleware
func (siw *ServerInterfaceWrapper) ReadBdtData(c *gin.Context) {

	var err error

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadBdtDataParams

	// ------------- Optional query parameter "bdt-ref-ids" -------------

	err = runtime.BindQueryParameter("form", false, false, "bdt-ref-ids", c.Request.URL.Query(), &params.BdtRefIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bdt-ref-ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supp-feat" -------------

	err = runtime.BindQueryParameter("form", true, false, "supp-feat", c.Request.URL.Query(), &params.SuppFeat)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supp-feat: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadBdtData(c, params)
}

// DeleteIndividualBdtData operation middleware
func (siw *ServerInterfaceWrapper) DeleteIndividualBdtData(c *gin.Context) {

	var err error

	// ------------- Path parameter "bdtReferenceId" -------------
	var bdtReferenceId string

	err = runtime.BindStyledParameterWithOptions("simple", "bdtReferenceId", c.Param("bdtReferenceId"), &bdtReferenceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bdtReferenceId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIndividualBdtData(c, bdtReferenceId)
}

// ReadIndividualBdtData operation middleware
func (siw *ServerInterfaceWrapper) ReadIndividualBdtData(c *gin.Context) {

	var err error

	// ------------- Path parameter "bdtReferenceId" -------------
	var bdtReferenceId string

	err = runtime.BindStyledParameterWithOptions("simple", "bdtReferenceId", c.Param("bdtReferenceId"), &bdtReferenceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bdtReferenceId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadIndividualBdtDataParams

	// ------------- Optional query parameter "supp-feat" -------------

	err = runtime.BindQueryParameter("form", true, false, "supp-feat", c.Request.URL.Query(), &params.SuppFeat)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supp-feat: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadIndividualBdtData(c, bdtReferenceId, params)
}

// UpdateIndividualBdtData operation middleware
func (siw *ServerInterfaceWrapper) UpdateIndividualBdtData(c *gin.Context) {

	var err error

	// ------------- Path parameter "bdtReferenceId" -------------
	var bdtReferenceId string

	err = runtime.BindStyledParameterWithOptions("simple", "bdtReferenceId", c.Param("bdtReferenceId"), &bdtReferenceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bdtReferenceId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateIndividualBdtData(c, bdtReferenceId)
}

// CreateIndividualBdtData operation middleware
func (siw *ServerInterfaceWrapper) CreateIndividualBdtData(c *gin.Context) {

	var err error

	// ------------- Path parameter "bdtReferenceId" -------------
	var bdtReferenceId string

	err = runtime.BindStyledParameterWithOptions("simple", "bdtReferenceId", c.Param("bdtReferenceId"), &bdtReferenceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bdtReferenceId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateIndividualBdtData(c, bdtReferenceId)
}

// ReadPlmnUePolicySet operation middleware
func (siw *ServerInterfaceWrapper) ReadPlmnUePolicySet(c *gin.Context) {

	var err error

	// ------------- Path parameter "plmnId" -------------
	var plmnId string

	err = runtime.BindStyledParameterWithOptions("simple", "plmnId", c.Param("plmnId"), &plmnId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter plmnId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadPlmnUePolicySet(c, plmnId)
}

// ReadSponsorConnectivityData operation middleware
func (siw *ServerInterfaceWrapper) ReadSponsorConnectivityData(c *gin.Context) {

	var err error

	// ------------- Path parameter "sponsorId" -------------
	var sponsorId string

	err = runtime.BindStyledParameterWithOptions("simple", "sponsorId", c.Param("sponsorId"), &sponsorId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sponsorId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadSponsorConnectivityData(c, sponsorId)
}

// CreateIndividualPolicyDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) CreateIndividualPolicyDataSubscription(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateIndividualPolicyDataSubscription(c)
}

// DeleteIndividualPolicyDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) DeleteIndividualPolicyDataSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIndividualPolicyDataSubscription(c, subsId)
}

// ReplaceIndividualPolicyDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) ReplaceIndividualPolicyDataSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReplaceIndividualPolicyDataSubscription(c, subsId)
}

// ReadAccessAndMobilityPolicyData operation middleware
func (siw *ServerInterfaceWrapper) ReadAccessAndMobilityPolicyData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadAccessAndMobilityPolicyData(c, ueId)
}

// ReadOperatorSpecificData operation middleware
func (siw *ServerInterfaceWrapper) ReadOperatorSpecificData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadOperatorSpecificDataParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supp-feat" -------------

	err = runtime.BindQueryParameter("form", true, false, "supp-feat", c.Request.URL.Query(), &params.SuppFeat)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supp-feat: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadOperatorSpecificData(c, ueId, params)
}

// UpdateOperatorSpecificData operation middleware
func (siw *ServerInterfaceWrapper) UpdateOperatorSpecificData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateOperatorSpecificData(c, ueId)
}

// ReplaceOperatorSpecificData operation middleware
func (siw *ServerInterfaceWrapper) ReplaceOperatorSpecificData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReplaceOperatorSpecificData(c, ueId)
}

// ReadSessionManagementPolicyData operation middleware
func (siw *ServerInterfaceWrapper) ReadSessionManagementPolicyData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadSessionManagementPolicyDataParams

	// ------------- Optional query parameter "snssai" -------------

	if paramValue := c.Query("snssai"); paramValue != "" {

		var value externalRef0.Snssai
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'snssai' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.Snssai = &value

	}

	// ------------- Optional query parameter "dnn" -------------

	err = runtime.BindQueryParameter("form", true, false, "dnn", c.Request.URL.Query(), &params.Dnn)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dnn: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supp-feat" -------------

	err = runtime.BindQueryParameter("form", true, false, "supp-feat", c.Request.URL.Query(), &params.SuppFeat)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supp-feat: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadSessionManagementPolicyData(c, ueId, params)
}

// UpdateSessionManagementPolicyData operation middleware
func (siw *ServerInterfaceWrapper) UpdateSessionManagementPolicyData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateSessionManagementPolicyData(c, ueId)
}

// DeleteUsageMonitoringInformation operation middleware
func (siw *ServerInterfaceWrapper) DeleteUsageMonitoringInformation(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "usageMonId" -------------
	var usageMonId string

	err = runtime.BindStyledParameterWithOptions("simple", "usageMonId", c.Param("usageMonId"), &usageMonId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter usageMonId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUsageMonitoringInformation(c, ueId, usageMonId)
}

// ReadUsageMonitoringInformation operation middleware
func (siw *ServerInterfaceWrapper) ReadUsageMonitoringInformation(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "usageMonId" -------------
	var usageMonId string

	err = runtime.BindStyledParameterWithOptions("simple", "usageMonId", c.Param("usageMonId"), &usageMonId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter usageMonId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadUsageMonitoringInformationParams

	// ------------- Optional query parameter "supp-feat" -------------

	err = runtime.BindQueryParameter("form", true, false, "supp-feat", c.Request.URL.Query(), &params.SuppFeat)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supp-feat: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadUsageMonitoringInformation(c, ueId, usageMonId, params)
}

// CreateUsageMonitoringResource operation middleware
func (siw *ServerInterfaceWrapper) CreateUsageMonitoringResource(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "usageMonId" -------------
	var usageMonId string

	err = runtime.BindStyledParameterWithOptions("simple", "usageMonId", c.Param("usageMonId"), &usageMonId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter usageMonId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUsageMonitoringResource(c, ueId, usageMonId)
}

// ReadUEPolicySet operation middleware
func (siw *ServerInterfaceWrapper) ReadUEPolicySet(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadUEPolicySetParams

	// ------------- Optional query parameter "supp-feat" -------------

	err = runtime.BindQueryParameter("form", true, false, "supp-feat", c.Request.URL.Query(), &params.SuppFeat)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supp-feat: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadUEPolicySet(c, ueId, params)
}

// UpdateUEPolicySet operation middleware
func (siw *ServerInterfaceWrapper) UpdateUEPolicySet(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUEPolicySet(c, ueId)
}

// CreateOrReplaceUEPolicySet operation middleware
func (siw *ServerInterfaceWrapper) CreateOrReplaceUEPolicySet(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrReplaceUEPolicySet(c, ueId)
}

// Query5GVnGroup operation middleware
func (siw *ServerInterfaceWrapper) Query5GVnGroup(c *gin.Context) {

	var err error

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params Query5GVnGroupParams

	// ------------- Optional query parameter "gpsis" -------------

	err = runtime.BindQueryParameter("form", false, false, "gpsis", c.Request.URL.Query(), &params.Gpsis)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gpsis: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Query5GVnGroup(c, params)
}

// Query5GVnGroupInternal operation middleware
func (siw *ServerInterfaceWrapper) Query5GVnGroupInternal(c *gin.Context) {

	var err error

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params Query5GVnGroupInternalParams

	// ------------- Required query parameter "internal-group-ids" -------------

	if paramValue := c.Query("internal-group-ids"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument internal-group-ids is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", false, true, "internal-group-ids", c.Request.URL.Query(), &params.InternalGroupIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter internal-group-ids: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Query5GVnGroupInternal(c, params)
}

// Query5GVNGroupPPData operation middleware
func (siw *ServerInterfaceWrapper) Query5GVNGroupPPData(c *gin.Context) {

	var err error

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params Query5GVNGroupPPDataParams

	// ------------- Optional query parameter "ext-group-ids" -------------

	err = runtime.BindQueryParameter("form", false, false, "ext-group-ids", c.Request.URL.Query(), &params.ExtGroupIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ext-group-ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Query5GVNGroupPPData(c, params)
}

// Delete5GVnGroup operation middleware
func (siw *ServerInterfaceWrapper) Delete5GVnGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "externalGroupId" -------------
	var externalGroupId externalRef3.ExtGroupId

	err = runtime.BindStyledParameterWithOptions("simple", "externalGroupId", c.Param("externalGroupId"), &externalGroupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter externalGroupId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Delete5GVnGroup(c, externalGroupId)
}

// Get5GVnGroupConfiguration operation middleware
func (siw *ServerInterfaceWrapper) Get5GVnGroupConfiguration(c *gin.Context) {

	var err error

	// ------------- Path parameter "externalGroupId" -------------
	var externalGroupId externalRef3.ExtGroupId

	err = runtime.BindStyledParameterWithOptions("simple", "externalGroupId", c.Param("externalGroupId"), &externalGroupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter externalGroupId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Get5GVnGroupConfiguration(c, externalGroupId)
}

// Modify5GVnGroup operation middleware
func (siw *ServerInterfaceWrapper) Modify5GVnGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "externalGroupId" -------------
	var externalGroupId externalRef3.ExtGroupId

	err = runtime.BindStyledParameterWithOptions("simple", "externalGroupId", c.Param("externalGroupId"), &externalGroupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter externalGroupId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params Modify5GVnGroupParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Modify5GVnGroup(c, externalGroupId, params)
}

// Create5GVnGroup operation middleware
func (siw *ServerInterfaceWrapper) Create5GVnGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "externalGroupId" -------------
	var externalGroupId externalRef3.ExtGroupId

	err = runtime.BindStyledParameterWithOptions("simple", "externalGroupId", c.Param("externalGroupId"), &externalGroupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter externalGroupId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Create5GVnGroup(c, externalGroupId)
}

// GetGroupIdentifiers operation middleware
func (siw *ServerInterfaceWrapper) GetGroupIdentifiers(c *gin.Context) {

	var err error

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupIdentifiersParams

	// ------------- Optional query parameter "ext-group-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ext-group-id", c.Request.URL.Query(), &params.ExtGroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ext-group-id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "int-group-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "int-group-id", c.Request.URL.Query(), &params.IntGroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter int-group-id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ue-id-ind" -------------

	err = runtime.BindQueryParameter("form", true, false, "ue-id-ind", c.Request.URL.Query(), &params.UeIdInd)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ue-id-ind: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroupIdentifiers(c, params)
}

// QueryGroupEEData operation middleware
func (siw *ServerInterfaceWrapper) QueryGroupEEData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueGroupId" -------------
	var ueGroupId externalRef8.VarUeGroupId

	err = runtime.BindStyledParameterWithOptions("simple", "ueGroupId", c.Param("ueGroupId"), &ueGroupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueGroupId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryGroupEEDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryGroupEEData(c, ueGroupId, params)
}

// QueryEeGroupSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) QueryEeGroupSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueGroupId" -------------
	var ueGroupId externalRef8.VarUeGroupId

	err = runtime.BindStyledParameterWithOptions("simple", "ueGroupId", c.Param("ueGroupId"), &ueGroupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueGroupId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryEeGroupSubscriptionsParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryEeGroupSubscriptions(c, ueGroupId, params)
}

// CreateEeGroupSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) CreateEeGroupSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueGroupId" -------------
	var ueGroupId externalRef8.VarUeGroupId

	err = runtime.BindStyledParameterWithOptions("simple", "ueGroupId", c.Param("ueGroupId"), &ueGroupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueGroupId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateEeGroupSubscriptions(c, ueGroupId)
}

// RemoveEeGroupSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) RemoveEeGroupSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueGroupId" -------------
	var ueGroupId externalRef8.VarUeGroupId

	err = runtime.BindStyledParameterWithOptions("simple", "ueGroupId", c.Param("ueGroupId"), &ueGroupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueGroupId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemoveEeGroupSubscriptions(c, ueGroupId, subsId)
}

// QueryEeGroupSubscription operation middleware
func (siw *ServerInterfaceWrapper) QueryEeGroupSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueGroupId" -------------
	var ueGroupId externalRef8.VarUeGroupId

	err = runtime.BindStyledParameterWithOptions("simple", "ueGroupId", c.Param("ueGroupId"), &ueGroupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueGroupId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryEeGroupSubscription(c, ueGroupId, subsId)
}

// ModifyEeGroupSubscription operation middleware
func (siw *ServerInterfaceWrapper) ModifyEeGroupSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueGroupId" -------------
	var ueGroupId externalRef8.VarUeGroupId

	err = runtime.BindStyledParameterWithOptions("simple", "ueGroupId", c.Param("ueGroupId"), &ueGroupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueGroupId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifyEeGroupSubscriptionParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifyEeGroupSubscription(c, ueGroupId, subsId, params)
}

// UpdateEeGroupSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) UpdateEeGroupSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueGroupId" -------------
	var ueGroupId externalRef8.VarUeGroupId

	err = runtime.BindStyledParameterWithOptions("simple", "ueGroupId", c.Param("ueGroupId"), &ueGroupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueGroupId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateEeGroupSubscriptions(c, ueGroupId, subsId)
}

// GetSharedData operation middleware
func (siw *ServerInterfaceWrapper) GetSharedData(c *gin.Context) {

	var err error

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSharedDataParams

	// ------------- Required query parameter "shared-data-ids" -------------

	if paramValue := c.Query("shared-data-ids"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument shared-data-ids is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", false, true, "shared-data-ids", c.Request.URL.Query(), &params.SharedDataIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter shared-data-ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSharedData(c, params)
}

// GetIndividualSharedData operation middleware
func (siw *ServerInterfaceWrapper) GetIndividualSharedData(c *gin.Context) {

	var err error

	// ------------- Path parameter "sharedDataId" -------------
	var sharedDataId externalRef3.SharedDataId

	err = runtime.BindStyledParameterWithOptions("simple", "sharedDataId", c.Param("sharedDataId"), &sharedDataId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sharedDataId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIndividualSharedDataParams

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetIndividualSharedData(c, sharedDataId, params)
}

// RemoveMultipleSubscriptionDataSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) RemoveMultipleSubscriptionDataSubscriptions(c *gin.Context) {

	var err error

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params RemoveMultipleSubscriptionDataSubscriptionsParams

	// ------------- Required query parameter "ue-id" -------------

	if paramValue := c.Query("ue-id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument ue-id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "ue-id", c.Request.URL.Query(), &params.UeId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ue-id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "nf-instance-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "nf-instance-id", c.Request.URL.Query(), &params.NfInstanceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter nf-instance-id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "delete-all-nfs" -------------

	err = runtime.BindQueryParameter("form", true, false, "delete-all-nfs", c.Request.URL.Query(), &params.DeleteAllNfs)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter delete-all-nfs: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "implicit-unsubscribe-indication" -------------

	err = runtime.BindQueryParameter("form", true, false, "implicit-unsubscribe-indication", c.Request.URL.Query(), &params.ImplicitUnsubscribeIndication)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter implicit-unsubscribe-indication: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemoveMultipleSubscriptionDataSubscriptions(c, params)
}

// QuerySubsToNotify operation middleware
func (siw *ServerInterfaceWrapper) QuerySubsToNotify(c *gin.Context) {

	var err error

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QuerySubsToNotifyParams

	// ------------- Required query parameter "ue-id" -------------

	if paramValue := c.Query("ue-id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument ue-id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "ue-id", c.Request.URL.Query(), &params.UeId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ue-id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QuerySubsToNotify(c, params)
}

// SubscriptionDataSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) SubscriptionDataSubscriptions(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SubscriptionDataSubscriptions(c)
}

// RemovesubscriptionDataSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) RemovesubscriptionDataSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemovesubscriptionDataSubscriptions(c, subsId)
}

// QuerySubscriptionDataSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) QuerySubscriptionDataSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QuerySubscriptionDataSubscriptions(c, subsId)
}

// ModifysubscriptionDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) ModifysubscriptionDataSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifysubscriptionDataSubscriptionParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifysubscriptionDataSubscription(c, subsId, params)
}

// DeleteAuthenticationStatus operation middleware
func (siw *ServerInterfaceWrapper) DeleteAuthenticationStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAuthenticationStatus(c, ueId)
}

// QueryAuthenticationStatus operation middleware
func (siw *ServerInterfaceWrapper) QueryAuthenticationStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryAuthenticationStatusParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryAuthenticationStatus(c, ueId, params)
}

// CreateAuthenticationStatus operation middleware
func (siw *ServerInterfaceWrapper) CreateAuthenticationStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAuthenticationStatus(c, ueId)
}

// DeleteIndividualAuthenticationStatus operation middleware
func (siw *ServerInterfaceWrapper) DeleteIndividualAuthenticationStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "servingNetworkName" -------------
	var servingNetworkName externalRef4.ServingNetworkName

	err = runtime.BindStyledParameterWithOptions("simple", "servingNetworkName", c.Param("servingNetworkName"), &servingNetworkName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter servingNetworkName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIndividualAuthenticationStatus(c, ueId, servingNetworkName)
}

// QueryIndividualAuthenticationStatus operation middleware
func (siw *ServerInterfaceWrapper) QueryIndividualAuthenticationStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "servingNetworkName" -------------
	var servingNetworkName externalRef4.ServingNetworkName

	err = runtime.BindStyledParameterWithOptions("simple", "servingNetworkName", c.Param("servingNetworkName"), &servingNetworkName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter servingNetworkName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryIndividualAuthenticationStatusParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryIndividualAuthenticationStatus(c, ueId, servingNetworkName, params)
}

// CreateIndividualAuthenticationStatus operation middleware
func (siw *ServerInterfaceWrapper) CreateIndividualAuthenticationStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "servingNetworkName" -------------
	var servingNetworkName externalRef4.ServingNetworkName

	err = runtime.BindStyledParameterWithOptions("simple", "servingNetworkName", c.Param("servingNetworkName"), &servingNetworkName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter servingNetworkName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateIndividualAuthenticationStatus(c, ueId, servingNetworkName)
}

// QueryAuthSubsData operation middleware
func (siw *ServerInterfaceWrapper) QueryAuthSubsData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr", "nudr-dr:subscription-data:authentication-subscription:read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryAuthSubsDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryAuthSubsData(c, ueId, params)
}

// ModifyAuthenticationSubscription operation middleware
func (siw *ServerInterfaceWrapper) ModifyAuthenticationSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr", "nudr-dr:subscription-data:authentication-subscription:modify"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifyAuthenticationSubscriptionParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifyAuthenticationSubscription(c, ueId, params)
}

// QueryContextData operation middleware
func (siw *ServerInterfaceWrapper) QueryContextData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryContextDataParams

	// ------------- Required query parameter "context-dataset-names" -------------

	if paramValue := c.Query("context-dataset-names"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument context-dataset-names is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", false, true, "context-dataset-names", c.Request.URL.Query(), &params.ContextDatasetNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter context-dataset-names: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryContextData(c, ueId, params)
}

// QueryAmfContext3gpp operation middleware
func (siw *ServerInterfaceWrapper) QueryAmfContext3gpp(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryAmfContext3gppParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryAmfContext3gpp(c, ueId, params)
}

// AmfContext3gpp operation middleware
func (siw *ServerInterfaceWrapper) AmfContext3gpp(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AmfContext3gppParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AmfContext3gpp(c, ueId, params)
}

// CreateAmfContext3gpp operation middleware
func (siw *ServerInterfaceWrapper) CreateAmfContext3gpp(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAmfContext3gpp(c, ueId)
}

// QueryAmfContextNon3gpp operation middleware
func (siw *ServerInterfaceWrapper) QueryAmfContextNon3gpp(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryAmfContextNon3gppParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryAmfContextNon3gpp(c, ueId, params)
}

// AmfContextNon3gpp operation middleware
func (siw *ServerInterfaceWrapper) AmfContextNon3gpp(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AmfContextNon3gppParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AmfContextNon3gpp(c, ueId, params)
}

// CreateAmfContextNon3gpp operation middleware
func (siw *ServerInterfaceWrapper) CreateAmfContextNon3gpp(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAmfContextNon3gpp(c, ueId)
}

// Queryeesubscriptions operation middleware
func (siw *ServerInterfaceWrapper) Queryeesubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryeesubscriptionsParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Queryeesubscriptions(c, ueId, params)
}

// CreateEeSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) CreateEeSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateEeSubscriptions(c, ueId)
}

// RemoveeeSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) RemoveeeSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemoveeeSubscriptions(c, ueId, subsId)
}

// QueryeeSubscription operation middleware
func (siw *ServerInterfaceWrapper) QueryeeSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryeeSubscription(c, ueId, subsId)
}

// ModifyEesubscription operation middleware
func (siw *ServerInterfaceWrapper) ModifyEesubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifyEesubscriptionParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifyEesubscription(c, ueId, subsId, params)
}

// UpdateEesubscriptions operation middleware
func (siw *ServerInterfaceWrapper) UpdateEesubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateEesubscriptions(c, ueId, subsId)
}

// RemoveAmfSubscriptionsInfo operation middleware
func (siw *ServerInterfaceWrapper) RemoveAmfSubscriptionsInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemoveAmfSubscriptionsInfo(c, ueId, subsId)
}

// GetAmfSubscriptionInfo operation middleware
func (siw *ServerInterfaceWrapper) GetAmfSubscriptionInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAmfSubscriptionInfo(c, ueId, subsId)
}

// ModifyAmfSubscriptionInfo operation middleware
func (siw *ServerInterfaceWrapper) ModifyAmfSubscriptionInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifyAmfSubscriptionInfoParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifyAmfSubscriptionInfo(c, ueId, subsId, params)
}

// CreateAMFSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) CreateAMFSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAMFSubscriptions(c, ueId, subsId)
}

// RemoveHssSubscriptionsInfo operation middleware
func (siw *ServerInterfaceWrapper) RemoveHssSubscriptionsInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemoveHssSubscriptionsInfo(c, ueId, subsId)
}

// GetHssSubscriptionInfo operation middleware
func (siw *ServerInterfaceWrapper) GetHssSubscriptionInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHssSubscriptionInfo(c, ueId, subsId)
}

// ModifyHssSubscriptionInfo operation middleware
func (siw *ServerInterfaceWrapper) ModifyHssSubscriptionInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifyHssSubscriptionInfoParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifyHssSubscriptionInfo(c, ueId, subsId, params)
}

// CreateHSSSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) CreateHSSSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateHSSSubscriptions(c, ueId, subsId)
}

// RemoveSmfSubscriptionsInfo operation middleware
func (siw *ServerInterfaceWrapper) RemoveSmfSubscriptionsInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemoveSmfSubscriptionsInfo(c, ueId, subsId)
}

// GetSmfSubscriptionInfo operation middleware
func (siw *ServerInterfaceWrapper) GetSmfSubscriptionInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSmfSubscriptionInfo(c, ueId, subsId)
}

// ModifySmfSubscriptionInfo operation middleware
func (siw *ServerInterfaceWrapper) ModifySmfSubscriptionInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifySmfSubscriptionInfoParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifySmfSubscriptionInfo(c, ueId, subsId, params)
}

// CreateSMFSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) CreateSMFSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateSMFSubscriptions(c, ueId, subsId)
}

// DeleteIpSmGwContext operation middleware
func (siw *ServerInterfaceWrapper) DeleteIpSmGwContext(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIpSmGwContext(c, ueId)
}

// QueryIpSmGwContext operation middleware
func (siw *ServerInterfaceWrapper) QueryIpSmGwContext(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryIpSmGwContextParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryIpSmGwContext(c, ueId, params)
}

// ModifyIpSmGwContext operation middleware
func (siw *ServerInterfaceWrapper) ModifyIpSmGwContext(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifyIpSmGwContext(c, ueId)
}

// CreateIpSmGwContext operation middleware
func (siw *ServerInterfaceWrapper) CreateIpSmGwContext(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateIpSmGwContext(c, ueId)
}

// QueryUeLocation operation middleware
func (siw *ServerInterfaceWrapper) QueryUeLocation(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryUeLocationParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryUeLocation(c, ueId, params)
}

// DeleteMessageWaitingData operation middleware
func (siw *ServerInterfaceWrapper) DeleteMessageWaitingData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteMessageWaitingData(c, ueId)
}

// QueryMessageWaitingData operation middleware
func (siw *ServerInterfaceWrapper) QueryMessageWaitingData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryMessageWaitingDataParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryMessageWaitingData(c, ueId, params)
}

// ModifyMessageWaitingData operation middleware
func (siw *ServerInterfaceWrapper) ModifyMessageWaitingData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifyMessageWaitingData(c, ueId)
}

// CreateMessageWaitingData operation middleware
func (siw *ServerInterfaceWrapper) CreateMessageWaitingData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateMessageWaitingData(c, ueId)
}

// Querysdmsubscriptions operation middleware
func (siw *ServerInterfaceWrapper) Querysdmsubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QuerysdmsubscriptionsParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Querysdmsubscriptions(c, ueId, params)
}

// CreateSdmSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) CreateSdmSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateSdmSubscriptions(c, ueId)
}

// RemovesdmSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) RemovesdmSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemovesdmSubscriptions(c, ueId, subsId)
}

// QuerysdmSubscription operation middleware
func (siw *ServerInterfaceWrapper) QuerysdmSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QuerysdmSubscription(c, ueId, subsId)
}

// ModifysdmSubscription operation middleware
func (siw *ServerInterfaceWrapper) ModifysdmSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifysdmSubscriptionParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifysdmSubscription(c, ueId, subsId, params)
}

// Updatesdmsubscriptions operation middleware
func (siw *ServerInterfaceWrapper) Updatesdmsubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Updatesdmsubscriptions(c, ueId, subsId)
}

// RemoveHssSDMSubscriptionsInfo operation middleware
func (siw *ServerInterfaceWrapper) RemoveHssSDMSubscriptionsInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemoveHssSDMSubscriptionsInfo(c, ueId, subsId)
}

// GetHssSDMSubscriptionInfo operation middleware
func (siw *ServerInterfaceWrapper) GetHssSDMSubscriptionInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHssSDMSubscriptionInfo(c, ueId, subsId)
}

// ModifyHssSDMSubscriptionInfo operation middleware
func (siw *ServerInterfaceWrapper) ModifyHssSDMSubscriptionInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifyHssSDMSubscriptionInfoParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifyHssSDMSubscriptionInfo(c, ueId, subsId, params)
}

// CreateHSSSDMSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) CreateHSSSDMSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameterWithOptions("simple", "subsId", c.Param("subsId"), &subsId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateHSSSDMSubscriptions(c, ueId, subsId)
}

// QuerySmfRegList operation middleware
func (siw *ServerInterfaceWrapper) QuerySmfRegList(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QuerySmfRegListParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QuerySmfRegList(c, ueId, params)
}

// DeleteSmfRegistration operation middleware
func (siw *ServerInterfaceWrapper) DeleteSmfRegistration(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "pduSessionId" -------------
	var pduSessionId externalRef0.PduSessionId

	err = runtime.BindStyledParameterWithOptions("simple", "pduSessionId", c.Param("pduSessionId"), &pduSessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pduSessionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteSmfRegistration(c, ueId, pduSessionId)
}

// QuerySmfRegistration operation middleware
func (siw *ServerInterfaceWrapper) QuerySmfRegistration(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "pduSessionId" -------------
	var pduSessionId externalRef0.PduSessionId

	err = runtime.BindStyledParameterWithOptions("simple", "pduSessionId", c.Param("pduSessionId"), &pduSessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pduSessionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QuerySmfRegistrationParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QuerySmfRegistration(c, ueId, pduSessionId, params)
}

// CreateOrUpdateSmfRegistration operation middleware
func (siw *ServerInterfaceWrapper) CreateOrUpdateSmfRegistration(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "pduSessionId" -------------
	var pduSessionId externalRef0.PduSessionId

	err = runtime.BindStyledParameterWithOptions("simple", "pduSessionId", c.Param("pduSessionId"), &pduSessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pduSessionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrUpdateSmfRegistration(c, ueId, pduSessionId)
}

// DeleteSmsfContext3gpp operation middleware
func (siw *ServerInterfaceWrapper) DeleteSmsfContext3gpp(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteSmsfContext3gpp(c, ueId)
}

// QuerySmsfContext3gpp operation middleware
func (siw *ServerInterfaceWrapper) QuerySmsfContext3gpp(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QuerySmsfContext3gppParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QuerySmsfContext3gpp(c, ueId, params)
}

// CreateSmsfContext3gpp operation middleware
func (siw *ServerInterfaceWrapper) CreateSmsfContext3gpp(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateSmsfContext3gpp(c, ueId)
}

// DeleteSmsfContextNon3gpp operation middleware
func (siw *ServerInterfaceWrapper) DeleteSmsfContextNon3gpp(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteSmsfContextNon3gpp(c, ueId)
}

// QuerySmsfContextNon3gpp operation middleware
func (siw *ServerInterfaceWrapper) QuerySmsfContextNon3gpp(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QuerySmsfContextNon3gppParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QuerySmsfContextNon3gpp(c, ueId, params)
}

// CreateSmsfContextNon3gpp operation middleware
func (siw *ServerInterfaceWrapper) CreateSmsfContextNon3gpp(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateSmsfContextNon3gpp(c, ueId)
}

// QueryCoverageRestrictionData operation middleware
func (siw *ServerInterfaceWrapper) QueryCoverageRestrictionData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryCoverageRestrictionDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryCoverageRestrictionData(c, ueId, params)
}

// QueryEEData operation middleware
func (siw *ServerInterfaceWrapper) QueryEEData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryEEDataParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryEEData(c, ueId, params)
}

// GetIdentityData operation middleware
func (siw *ServerInterfaceWrapper) GetIdentityData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdentityDataParams

	// ------------- Optional query parameter "app-port-id" -------------

	if paramValue := c.Query("app-port-id"); paramValue != "" {

		var value externalRef3.AppPortId
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'app-port-id' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.AppPortId = &value

	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetIdentityData(c, ueId, params)
}

// QueryLcsMoData operation middleware
func (siw *ServerInterfaceWrapper) QueryLcsMoData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryLcsMoDataParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryLcsMoData(c, ueId, params)
}

// QueryLcsPrivacyData operation middleware
func (siw *ServerInterfaceWrapper) QueryLcsPrivacyData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryLcsPrivacyDataParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryLcsPrivacyData(c, ueId, params)
}

// GetNiddAuData operation middleware
func (siw *ServerInterfaceWrapper) GetNiddAuData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId string

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNiddAuDataParams

	// ------------- Required query parameter "single-nssai" -------------

	if paramValue := c.Query("single-nssai"); paramValue != "" {

		var value externalRef8.VarSnssai
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'single-nssai' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.SingleNssai = value

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument single-nssai is required, but not found"), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "dnn" -------------

	if paramValue := c.Query("dnn"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument dnn is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "dnn", c.Request.URL.Query(), &params.Dnn)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dnn: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "mtc-provider-information" -------------

	if paramValue := c.Query("mtc-provider-information"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument mtc-provider-information is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "mtc-provider-information", c.Request.URL.Query(), &params.MtcProviderInformation)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter mtc-provider-information: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNiddAuData(c, ueId, params)
}

// GetOdbData operation middleware
func (siw *ServerInterfaceWrapper) GetOdbData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOdbData(c, ueId)
}

// QueryOperSpecData operation middleware
func (siw *ServerInterfaceWrapper) QueryOperSpecData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryOperSpecDataParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryOperSpecData(c, ueId, params)
}

// ModifyOperSpecData operation middleware
func (siw *ServerInterfaceWrapper) ModifyOperSpecData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifyOperSpecDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifyOperSpecData(c, ueId, params)
}

// GetppData operation middleware
func (siw *ServerInterfaceWrapper) GetppData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetppDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetppData(c, ueId, params)
}

// ModifyPpData operation middleware
func (siw *ServerInterfaceWrapper) ModifyPpData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifyPpDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifyPpData(c, ueId, params)
}

// QueryPPData operation middleware
func (siw *ServerInterfaceWrapper) QueryPPData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryPPDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryPPData(c, ueId, params)
}

// QueryAuthSoR operation middleware
func (siw *ServerInterfaceWrapper) QueryAuthSoR(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryAuthSoRParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryAuthSoR(c, ueId, params)
}

// CreateAuthenticationSoR operation middleware
func (siw *ServerInterfaceWrapper) CreateAuthenticationSoR(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateAuthenticationSoRParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAuthenticationSoR(c, ueId, params)
}

// QueryCagAck operation middleware
func (siw *ServerInterfaceWrapper) QueryCagAck(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryCagAckParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryCagAck(c, ueId, params)
}

// CreateCagUpdateAck operation middleware
func (siw *ServerInterfaceWrapper) CreateCagUpdateAck(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateCagUpdateAckParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateCagUpdateAck(c, ueId, params)
}

// QueryNssaiAck operation middleware
func (siw *ServerInterfaceWrapper) QueryNssaiAck(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryNssaiAckParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryNssaiAck(c, ueId, params)
}

// CreateOrUpdateNssaiAck operation middleware
func (siw *ServerInterfaceWrapper) CreateOrUpdateNssaiAck(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateOrUpdateNssaiAckParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrUpdateNssaiAck(c, ueId, params)
}

// QueryAuthUPU operation middleware
func (siw *ServerInterfaceWrapper) QueryAuthUPU(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryAuthUPUParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryAuthUPU(c, ueId, params)
}

// CreateAuthenticationUPU operation middleware
func (siw *ServerInterfaceWrapper) CreateAuthenticationUPU(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateAuthenticationUPUParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAuthenticationUPU(c, ueId, params)
}

// QueryV2xData operation middleware
func (siw *ServerInterfaceWrapper) QueryV2xData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryV2xDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryV2xData(c, ueId, params)
}

// QueryProvisionedData operation middleware
func (siw *ServerInterfaceWrapper) QueryProvisionedData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "servingPlmnId" -------------
	var servingPlmnId externalRef8.VarPlmnId

	err = runtime.BindStyledParameterWithOptions("simple", "servingPlmnId", c.Param("servingPlmnId"), &servingPlmnId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter servingPlmnId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryProvisionedDataParams

	// ------------- Optional query parameter "dataset-names" -------------

	err = runtime.BindQueryParameter("form", false, false, "dataset-names", c.Request.URL.Query(), &params.DatasetNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dataset-names: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryProvisionedData(c, ueId, servingPlmnId, params)
}

// QueryAmData operation middleware
func (siw *ServerInterfaceWrapper) QueryAmData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "servingPlmnId" -------------
	var servingPlmnId externalRef8.VarPlmnId

	err = runtime.BindStyledParameterWithOptions("simple", "servingPlmnId", c.Param("servingPlmnId"), &servingPlmnId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter servingPlmnId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryAmDataParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryAmData(c, ueId, servingPlmnId, params)
}

// QueryLcsBcaData operation middleware
func (siw *ServerInterfaceWrapper) QueryLcsBcaData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "servingPlmnId" -------------
	var servingPlmnId externalRef8.VarPlmnId

	err = runtime.BindStyledParameterWithOptions("simple", "servingPlmnId", c.Param("servingPlmnId"), &servingPlmnId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter servingPlmnId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryLcsBcaDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryLcsBcaData(c, ueId, servingPlmnId, params)
}

// QuerySmData operation middleware
func (siw *ServerInterfaceWrapper) QuerySmData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "servingPlmnId" -------------
	var servingPlmnId externalRef8.VarPlmnId

	err = runtime.BindStyledParameterWithOptions("simple", "servingPlmnId", c.Param("servingPlmnId"), &servingPlmnId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter servingPlmnId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QuerySmDataParams

	// ------------- Optional query parameter "single-nssai" -------------

	if paramValue := c.Query("single-nssai"); paramValue != "" {

		var value externalRef8.VarSnssai
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'single-nssai' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.SingleNssai = &value

	}

	// ------------- Optional query parameter "dnn" -------------

	err = runtime.BindQueryParameter("form", true, false, "dnn", c.Request.URL.Query(), &params.Dnn)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dnn: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QuerySmData(c, ueId, servingPlmnId, params)
}

// QuerySmfSelectData operation middleware
func (siw *ServerInterfaceWrapper) QuerySmfSelectData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "servingPlmnId" -------------
	var servingPlmnId externalRef8.VarPlmnId

	err = runtime.BindStyledParameterWithOptions("simple", "servingPlmnId", c.Param("servingPlmnId"), &servingPlmnId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter servingPlmnId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QuerySmfSelectDataParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QuerySmfSelectData(c, ueId, servingPlmnId, params)
}

// QuerySmsData operation middleware
func (siw *ServerInterfaceWrapper) QuerySmsData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "servingPlmnId" -------------
	var servingPlmnId externalRef8.VarPlmnId

	err = runtime.BindStyledParameterWithOptions("simple", "servingPlmnId", c.Param("servingPlmnId"), &servingPlmnId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter servingPlmnId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QuerySmsDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QuerySmsData(c, ueId, servingPlmnId, params)
}

// QuerySmsMngData operation middleware
func (siw *ServerInterfaceWrapper) QuerySmsMngData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "servingPlmnId" -------------
	var servingPlmnId externalRef8.VarPlmnId

	err = runtime.BindStyledParameterWithOptions("simple", "servingPlmnId", c.Param("servingPlmnId"), &servingPlmnId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter servingPlmnId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QuerySmsMngDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QuerySmsMngData(c, ueId, servingPlmnId, params)
}

// QueryTraceData operation middleware
func (siw *ServerInterfaceWrapper) QueryTraceData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "servingPlmnId" -------------
	var servingPlmnId externalRef8.VarPlmnId

	err = runtime.BindStyledParameterWithOptions("simple", "servingPlmnId", c.Param("servingPlmnId"), &servingPlmnId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter servingPlmnId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryTraceDataParams

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryTraceData(c, ueId, servingPlmnId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/application-data/bdtPolicyData", wrapper.ReadBdtPolicyData)
	router.DELETE(options.BaseURL+"/application-data/bdtPolicyData/:bdtPolicyId", wrapper.DeleteIndividualAppliedBdtPolicyData)
	router.PATCH(options.BaseURL+"/application-data/bdtPolicyData/:bdtPolicyId", wrapper.UpdateIndividualAppliedBdtPolicyData)
	router.PUT(options.BaseURL+"/application-data/bdtPolicyData/:bdtPolicyId", wrapper.CreateIndividualAppliedBdtPolicyData)
	router.GET(options.BaseURL+"/application-data/influenceData", wrapper.ReadInfluenceData)
	router.GET(options.BaseURL+"/application-data/influenceData/subs-to-notify", wrapper.ReadInfluenceDataSubscriptions)
	router.POST(options.BaseURL+"/application-data/influenceData/subs-to-notify", wrapper.CreateIndividualInfluenceDataSubscription)
	router.DELETE(options.BaseURL+"/application-data/influenceData/subs-to-notify/:subscriptionId", wrapper.DeleteIndividualInfluenceDataSubscription)
	router.GET(options.BaseURL+"/application-data/influenceData/subs-to-notify/:subscriptionId", wrapper.ReadIndividualInfluenceDataSubscription)
	router.PUT(options.BaseURL+"/application-data/influenceData/subs-to-notify/:subscriptionId", wrapper.ReplaceIndividualInfluenceDataSubscription)
	router.DELETE(options.BaseURL+"/application-data/influenceData/:influenceId", wrapper.DeleteIndividualInfluenceData)
	router.PATCH(options.BaseURL+"/application-data/influenceData/:influenceId", wrapper.UpdateIndividualInfluenceData)
	router.PUT(options.BaseURL+"/application-data/influenceData/:influenceId", wrapper.CreateOrReplaceIndividualInfluenceData)
	router.GET(options.BaseURL+"/application-data/iptvConfigData", wrapper.ReadIPTVCongifurationData)
	router.DELETE(options.BaseURL+"/application-data/iptvConfigData/:configurationId", wrapper.DeleteIndividualIPTVConfigurationData)
	router.PATCH(options.BaseURL+"/application-data/iptvConfigData/:configurationId", wrapper.PartialReplaceIndividualIPTVConfigurationData)
	router.PUT(options.BaseURL+"/application-data/iptvConfigData/:configurationId", wrapper.CreateOrReplaceIndividualIPTVConfigurationData)
	router.GET(options.BaseURL+"/application-data/pfds", wrapper.ReadPFDData)
	router.DELETE(options.BaseURL+"/application-data/pfds/:appId", wrapper.DeleteIndividualPFDData)
	router.GET(options.BaseURL+"/application-data/pfds/:appId", wrapper.ReadIndividualPFDData)
	router.PUT(options.BaseURL+"/application-data/pfds/:appId", wrapper.CreateOrReplaceIndividualPFDData)
	router.GET(options.BaseURL+"/application-data/serviceParamData", wrapper.ReadServiceParameterData)
	router.DELETE(options.BaseURL+"/application-data/serviceParamData/:serviceParamId", wrapper.DeleteIndividualServiceParameterData)
	router.PATCH(options.BaseURL+"/application-data/serviceParamData/:serviceParamId", wrapper.UpdateIndividualServiceParameterData)
	router.PUT(options.BaseURL+"/application-data/serviceParamData/:serviceParamId", wrapper.CreateOrReplaceServiceParameterData)
	router.GET(options.BaseURL+"/application-data/subs-to-notify", wrapper.ReadApplicationDataChangeSubscriptions)
	router.POST(options.BaseURL+"/application-data/subs-to-notify", wrapper.CreateIndividualApplicationDataSubscription)
	router.DELETE(options.BaseURL+"/application-data/subs-to-notify/:subsId", wrapper.DeleteIndividualApplicationDataSubscription)
	router.GET(options.BaseURL+"/application-data/subs-to-notify/:subsId", wrapper.ReadIndividualApplicationDataSubscription)
	router.PUT(options.BaseURL+"/application-data/subs-to-notify/:subsId", wrapper.ReplaceIndividualApplicationDataSubscription)
	router.POST(options.BaseURL+"/exposure-data/subs-to-notify", wrapper.CreateIndividualExposureDataSubscription)
	router.DELETE(options.BaseURL+"/exposure-data/subs-to-notify/:subId", wrapper.DeleteIndividualExposureDataSubscription)
	router.PUT(options.BaseURL+"/exposure-data/subs-to-notify/:subId", wrapper.ReplaceIndividualExposureDataSubscription)
	router.DELETE(options.BaseURL+"/exposure-data/:ueId/access-and-mobility-data", wrapper.DeleteAccessAndMobilityData)
	router.GET(options.BaseURL+"/exposure-data/:ueId/access-and-mobility-data", wrapper.QueryAccessAndMobilityData)
	router.PATCH(options.BaseURL+"/exposure-data/:ueId/access-and-mobility-data", wrapper.UpdateAccessAndMobilityData)
	router.PUT(options.BaseURL+"/exposure-data/:ueId/access-and-mobility-data", wrapper.CreateOrReplaceAccessAndMobilityData)
	router.DELETE(options.BaseURL+"/exposure-data/:ueId/session-management-data/:pduSessionId", wrapper.DeleteSessionManagementData)
	router.GET(options.BaseURL+"/exposure-data/:ueId/session-management-data/:pduSessionId", wrapper.QuerySessionManagementData)
	router.PUT(options.BaseURL+"/exposure-data/:ueId/session-management-data/:pduSessionId", wrapper.CreateOrReplaceSessionManagementData)
	router.GET(options.BaseURL+"/policy-data/bdt-data", wrapper.ReadBdtData)
	router.DELETE(options.BaseURL+"/policy-data/bdt-data/:bdtReferenceId", wrapper.DeleteIndividualBdtData)
	router.GET(options.BaseURL+"/policy-data/bdt-data/:bdtReferenceId", wrapper.ReadIndividualBdtData)
	router.PATCH(options.BaseURL+"/policy-data/bdt-data/:bdtReferenceId", wrapper.UpdateIndividualBdtData)
	router.PUT(options.BaseURL+"/policy-data/bdt-data/:bdtReferenceId", wrapper.CreateIndividualBdtData)
	router.GET(options.BaseURL+"/policy-data/plmns/:plmnId/ue-policy-set", wrapper.ReadPlmnUePolicySet)
	router.GET(options.BaseURL+"/policy-data/sponsor-connectivity-data/:sponsorId", wrapper.ReadSponsorConnectivityData)
	router.POST(options.BaseURL+"/policy-data/subs-to-notify", wrapper.CreateIndividualPolicyDataSubscription)
	router.DELETE(options.BaseURL+"/policy-data/subs-to-notify/:subsId", wrapper.DeleteIndividualPolicyDataSubscription)
	router.PUT(options.BaseURL+"/policy-data/subs-to-notify/:subsId", wrapper.ReplaceIndividualPolicyDataSubscription)
	router.GET(options.BaseURL+"/policy-data/ues/:ueId/am-data", wrapper.ReadAccessAndMobilityPolicyData)
	router.GET(options.BaseURL+"/policy-data/ues/:ueId/operator-specific-data", wrapper.ReadOperatorSpecificData)
	router.PATCH(options.BaseURL+"/policy-data/ues/:ueId/operator-specific-data", wrapper.UpdateOperatorSpecificData)
	router.PUT(options.BaseURL+"/policy-data/ues/:ueId/operator-specific-data", wrapper.ReplaceOperatorSpecificData)
	router.GET(options.BaseURL+"/policy-data/ues/:ueId/sm-data", wrapper.ReadSessionManagementPolicyData)
	router.PATCH(options.BaseURL+"/policy-data/ues/:ueId/sm-data", wrapper.UpdateSessionManagementPolicyData)
	router.DELETE(options.BaseURL+"/policy-data/ues/:ueId/sm-data/:usageMonId", wrapper.DeleteUsageMonitoringInformation)
	router.GET(options.BaseURL+"/policy-data/ues/:ueId/sm-data/:usageMonId", wrapper.ReadUsageMonitoringInformation)
	router.PUT(options.BaseURL+"/policy-data/ues/:ueId/sm-data/:usageMonId", wrapper.CreateUsageMonitoringResource)
	router.GET(options.BaseURL+"/policy-data/ues/:ueId/ue-policy-set", wrapper.ReadUEPolicySet)
	router.PATCH(options.BaseURL+"/policy-data/ues/:ueId/ue-policy-set", wrapper.UpdateUEPolicySet)
	router.PUT(options.BaseURL+"/policy-data/ues/:ueId/ue-policy-set", wrapper.CreateOrReplaceUEPolicySet)
	router.GET(options.BaseURL+"/subscription-data/group-data/5g-vn-groups", wrapper.Query5GVnGroup)
	router.GET(options.BaseURL+"/subscription-data/group-data/5g-vn-groups/internal", wrapper.Query5GVnGroupInternal)
	router.GET(options.BaseURL+"/subscription-data/group-data/5g-vn-groups/pp-profile-data", wrapper.Query5GVNGroupPPData)
	router.DELETE(options.BaseURL+"/subscription-data/group-data/5g-vn-groups/:externalGroupId", wrapper.Delete5GVnGroup)
	router.GET(options.BaseURL+"/subscription-data/group-data/5g-vn-groups/:externalGroupId", wrapper.Get5GVnGroupConfiguration)
	router.PATCH(options.BaseURL+"/subscription-data/group-data/5g-vn-groups/:externalGroupId", wrapper.Modify5GVnGroup)
	router.PUT(options.BaseURL+"/subscription-data/group-data/5g-vn-groups/:externalGroupId", wrapper.Create5GVnGroup)
	router.GET(options.BaseURL+"/subscription-data/group-data/group-identifiers", wrapper.GetGroupIdentifiers)
	router.GET(options.BaseURL+"/subscription-data/group-data/:ueGroupId/ee-profile-data", wrapper.QueryGroupEEData)
	router.GET(options.BaseURL+"/subscription-data/group-data/:ueGroupId/ee-subscriptions", wrapper.QueryEeGroupSubscriptions)
	router.POST(options.BaseURL+"/subscription-data/group-data/:ueGroupId/ee-subscriptions", wrapper.CreateEeGroupSubscriptions)
	router.DELETE(options.BaseURL+"/subscription-data/group-data/:ueGroupId/ee-subscriptions/:subsId", wrapper.RemoveEeGroupSubscriptions)
	router.GET(options.BaseURL+"/subscription-data/group-data/:ueGroupId/ee-subscriptions/:subsId", wrapper.QueryEeGroupSubscription)
	router.PATCH(options.BaseURL+"/subscription-data/group-data/:ueGroupId/ee-subscriptions/:subsId", wrapper.ModifyEeGroupSubscription)
	router.PUT(options.BaseURL+"/subscription-data/group-data/:ueGroupId/ee-subscriptions/:subsId", wrapper.UpdateEeGroupSubscriptions)
	router.GET(options.BaseURL+"/subscription-data/shared-data", wrapper.GetSharedData)
	router.GET(options.BaseURL+"/subscription-data/shared-data/:sharedDataId", wrapper.GetIndividualSharedData)
	router.DELETE(options.BaseURL+"/subscription-data/subs-to-notify", wrapper.RemoveMultipleSubscriptionDataSubscriptions)
	router.GET(options.BaseURL+"/subscription-data/subs-to-notify", wrapper.QuerySubsToNotify)
	router.POST(options.BaseURL+"/subscription-data/subs-to-notify", wrapper.SubscriptionDataSubscriptions)
	router.DELETE(options.BaseURL+"/subscription-data/subs-to-notify/:subsId", wrapper.RemovesubscriptionDataSubscriptions)
	router.GET(options.BaseURL+"/subscription-data/subs-to-notify/:subsId", wrapper.QuerySubscriptionDataSubscriptions)
	router.PATCH(options.BaseURL+"/subscription-data/subs-to-notify/:subsId", wrapper.ModifysubscriptionDataSubscription)
	router.DELETE(options.BaseURL+"/subscription-data/:ueId/authentication-data/authentication-status", wrapper.DeleteAuthenticationStatus)
	router.GET(options.BaseURL+"/subscription-data/:ueId/authentication-data/authentication-status", wrapper.QueryAuthenticationStatus)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/authentication-data/authentication-status", wrapper.CreateAuthenticationStatus)
	router.DELETE(options.BaseURL+"/subscription-data/:ueId/authentication-data/authentication-status/:servingNetworkName", wrapper.DeleteIndividualAuthenticationStatus)
	router.GET(options.BaseURL+"/subscription-data/:ueId/authentication-data/authentication-status/:servingNetworkName", wrapper.QueryIndividualAuthenticationStatus)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/authentication-data/authentication-status/:servingNetworkName", wrapper.CreateIndividualAuthenticationStatus)
	router.GET(options.BaseURL+"/subscription-data/:ueId/authentication-data/authentication-subscription", wrapper.QueryAuthSubsData)
	router.PATCH(options.BaseURL+"/subscription-data/:ueId/authentication-data/authentication-subscription", wrapper.ModifyAuthenticationSubscription)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data", wrapper.QueryContextData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/amf-3gpp-access", wrapper.QueryAmfContext3gpp)
	router.PATCH(options.BaseURL+"/subscription-data/:ueId/context-data/amf-3gpp-access", wrapper.AmfContext3gpp)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/context-data/amf-3gpp-access", wrapper.CreateAmfContext3gpp)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/amf-non-3gpp-access", wrapper.QueryAmfContextNon3gpp)
	router.PATCH(options.BaseURL+"/subscription-data/:ueId/context-data/amf-non-3gpp-access", wrapper.AmfContextNon3gpp)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/context-data/amf-non-3gpp-access", wrapper.CreateAmfContextNon3gpp)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions", wrapper.Queryeesubscriptions)
	router.POST(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions", wrapper.CreateEeSubscriptions)
	router.DELETE(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId", wrapper.RemoveeeSubscriptions)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId", wrapper.QueryeeSubscription)
	router.PATCH(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId", wrapper.ModifyEesubscription)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId", wrapper.UpdateEesubscriptions)
	router.DELETE(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId/amf-subscriptions", wrapper.RemoveAmfSubscriptionsInfo)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId/amf-subscriptions", wrapper.GetAmfSubscriptionInfo)
	router.PATCH(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId/amf-subscriptions", wrapper.ModifyAmfSubscriptionInfo)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId/amf-subscriptions", wrapper.CreateAMFSubscriptions)
	router.DELETE(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId/hss-subscriptions", wrapper.RemoveHssSubscriptionsInfo)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId/hss-subscriptions", wrapper.GetHssSubscriptionInfo)
	router.PATCH(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId/hss-subscriptions", wrapper.ModifyHssSubscriptionInfo)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId/hss-subscriptions", wrapper.CreateHSSSubscriptions)
	router.DELETE(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId/smf-subscriptions", wrapper.RemoveSmfSubscriptionsInfo)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId/smf-subscriptions", wrapper.GetSmfSubscriptionInfo)
	router.PATCH(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId/smf-subscriptions", wrapper.ModifySmfSubscriptionInfo)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId/smf-subscriptions", wrapper.CreateSMFSubscriptions)
	router.DELETE(options.BaseURL+"/subscription-data/:ueId/context-data/ip-sm-gw", wrapper.DeleteIpSmGwContext)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/ip-sm-gw", wrapper.QueryIpSmGwContext)
	router.PATCH(options.BaseURL+"/subscription-data/:ueId/context-data/ip-sm-gw", wrapper.ModifyIpSmGwContext)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/context-data/ip-sm-gw", wrapper.CreateIpSmGwContext)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/location", wrapper.QueryUeLocation)
	router.DELETE(options.BaseURL+"/subscription-data/:ueId/context-data/mwd", wrapper.DeleteMessageWaitingData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/mwd", wrapper.QueryMessageWaitingData)
	router.PATCH(options.BaseURL+"/subscription-data/:ueId/context-data/mwd", wrapper.ModifyMessageWaitingData)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/context-data/mwd", wrapper.CreateMessageWaitingData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/sdm-subscriptions", wrapper.Querysdmsubscriptions)
	router.POST(options.BaseURL+"/subscription-data/:ueId/context-data/sdm-subscriptions", wrapper.CreateSdmSubscriptions)
	router.DELETE(options.BaseURL+"/subscription-data/:ueId/context-data/sdm-subscriptions/:subsId", wrapper.RemovesdmSubscriptions)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/sdm-subscriptions/:subsId", wrapper.QuerysdmSubscription)
	router.PATCH(options.BaseURL+"/subscription-data/:ueId/context-data/sdm-subscriptions/:subsId", wrapper.ModifysdmSubscription)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/context-data/sdm-subscriptions/:subsId", wrapper.Updatesdmsubscriptions)
	router.DELETE(options.BaseURL+"/subscription-data/:ueId/context-data/sdm-subscriptions/:subsId/hss-sdm-subscriptions", wrapper.RemoveHssSDMSubscriptionsInfo)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/sdm-subscriptions/:subsId/hss-sdm-subscriptions", wrapper.GetHssSDMSubscriptionInfo)
	router.PATCH(options.BaseURL+"/subscription-data/:ueId/context-data/sdm-subscriptions/:subsId/hss-sdm-subscriptions", wrapper.ModifyHssSDMSubscriptionInfo)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/context-data/sdm-subscriptions/:subsId/hss-sdm-subscriptions", wrapper.CreateHSSSDMSubscriptions)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/smf-registrations", wrapper.QuerySmfRegList)
	router.DELETE(options.BaseURL+"/subscription-data/:ueId/context-data/smf-registrations/:pduSessionId", wrapper.DeleteSmfRegistration)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/smf-registrations/:pduSessionId", wrapper.QuerySmfRegistration)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/context-data/smf-registrations/:pduSessionId", wrapper.CreateOrUpdateSmfRegistration)
	router.DELETE(options.BaseURL+"/subscription-data/:ueId/context-data/smsf-3gpp-access", wrapper.DeleteSmsfContext3gpp)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/smsf-3gpp-access", wrapper.QuerySmsfContext3gpp)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/context-data/smsf-3gpp-access", wrapper.CreateSmsfContext3gpp)
	router.DELETE(options.BaseURL+"/subscription-data/:ueId/context-data/smsf-non-3gpp-access", wrapper.DeleteSmsfContextNon3gpp)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/smsf-non-3gpp-access", wrapper.QuerySmsfContextNon3gpp)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/context-data/smsf-non-3gpp-access", wrapper.CreateSmsfContextNon3gpp)
	router.GET(options.BaseURL+"/subscription-data/:ueId/coverage-restriction-data", wrapper.QueryCoverageRestrictionData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/ee-profile-data", wrapper.QueryEEData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/identity-data", wrapper.GetIdentityData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/lcs-mo-data", wrapper.QueryLcsMoData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/lcs-privacy-data", wrapper.QueryLcsPrivacyData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/nidd-authorization-data", wrapper.GetNiddAuData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/operator-determined-barring-data", wrapper.GetOdbData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/operator-specific-data", wrapper.QueryOperSpecData)
	router.PATCH(options.BaseURL+"/subscription-data/:ueId/operator-specific-data", wrapper.ModifyOperSpecData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/pp-data", wrapper.GetppData)
	router.PATCH(options.BaseURL+"/subscription-data/:ueId/pp-data", wrapper.ModifyPpData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/pp-profile-data", wrapper.QueryPPData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/ue-update-confirmation-data/sor-data", wrapper.QueryAuthSoR)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/ue-update-confirmation-data/sor-data", wrapper.CreateAuthenticationSoR)
	router.GET(options.BaseURL+"/subscription-data/:ueId/ue-update-confirmation-data/subscribed-cag", wrapper.QueryCagAck)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/ue-update-confirmation-data/subscribed-cag", wrapper.CreateCagUpdateAck)
	router.GET(options.BaseURL+"/subscription-data/:ueId/ue-update-confirmation-data/subscribed-snssais", wrapper.QueryNssaiAck)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/ue-update-confirmation-data/subscribed-snssais", wrapper.CreateOrUpdateNssaiAck)
	router.GET(options.BaseURL+"/subscription-data/:ueId/ue-update-confirmation-data/upu-data", wrapper.QueryAuthUPU)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/ue-update-confirmation-data/upu-data", wrapper.CreateAuthenticationUPU)
	router.GET(options.BaseURL+"/subscription-data/:ueId/v2x-data", wrapper.QueryV2xData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/:servingPlmnId/provisioned-data", wrapper.QueryProvisionedData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/:servingPlmnId/provisioned-data/am-data", wrapper.QueryAmData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/:servingPlmnId/provisioned-data/lcs-bca-data", wrapper.QueryLcsBcaData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/:servingPlmnId/provisioned-data/sm-data", wrapper.QuerySmData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/:servingPlmnId/provisioned-data/smf-selection-subscription-data", wrapper.QuerySmfSelectData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/:servingPlmnId/provisioned-data/sms-data", wrapper.QuerySmsData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/:servingPlmnId/provisioned-data/sms-mng-data", wrapper.QuerySmsMngData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/:servingPlmnId/provisioned-data/trace-data", wrapper.QueryTraceData)
}

type ReadBdtPolicyDataRequestObject struct {
	Params ReadBdtPolicyDataParams
}

type ReadBdtPolicyDataResponseObject interface {
	VisitReadBdtPolicyDataResponse(w http.ResponseWriter) error
}

type ReadBdtPolicyData200JSONResponse []externalRef5.BdtPolicyData

func (response ReadBdtPolicyData200JSONResponse) VisitReadBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadBdtPolicyData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadBdtPolicyData400ApplicationProblemPlusJSONResponse) VisitReadBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReadBdtPolicyData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadBdtPolicyData401ApplicationProblemPlusJSONResponse) VisitReadBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReadBdtPolicyData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadBdtPolicyData403ApplicationProblemPlusJSONResponse) VisitReadBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReadBdtPolicyData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadBdtPolicyData404ApplicationProblemPlusJSONResponse) VisitReadBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReadBdtPolicyData406Response externalRef0.N406Response

func (response ReadBdtPolicyData406Response) VisitReadBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadBdtPolicyData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response ReadBdtPolicyData414ApplicationProblemPlusJSONResponse) VisitReadBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N414ApplicationProblemPlusJSONResponse))
}

type ReadBdtPolicyData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadBdtPolicyData429ApplicationProblemPlusJSONResponse) VisitReadBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReadBdtPolicyData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadBdtPolicyData500ApplicationProblemPlusJSONResponse) VisitReadBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReadBdtPolicyData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadBdtPolicyData503ApplicationProblemPlusJSONResponse) VisitReadBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReadBdtPolicyDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadBdtPolicyDatadefaultApplicationProblemPlusJSONResponse) VisitReadBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualAppliedBdtPolicyDataRequestObject struct {
	BdtPolicyId string `json:"bdtPolicyId"`
}

type DeleteIndividualAppliedBdtPolicyDataResponseObject interface {
	VisitDeleteIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error
}

type DeleteIndividualAppliedBdtPolicyData204Response struct {
}

func (response DeleteIndividualAppliedBdtPolicyData204Response) VisitDeleteIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIndividualAppliedBdtPolicyData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualAppliedBdtPolicyData400ApplicationProblemPlusJSONResponse) VisitDeleteIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualAppliedBdtPolicyData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualAppliedBdtPolicyData401ApplicationProblemPlusJSONResponse) VisitDeleteIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualAppliedBdtPolicyData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualAppliedBdtPolicyData403ApplicationProblemPlusJSONResponse) VisitDeleteIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualAppliedBdtPolicyData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualAppliedBdtPolicyData404ApplicationProblemPlusJSONResponse) VisitDeleteIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualAppliedBdtPolicyData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualAppliedBdtPolicyData429ApplicationProblemPlusJSONResponse) VisitDeleteIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualAppliedBdtPolicyData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualAppliedBdtPolicyData500ApplicationProblemPlusJSONResponse) VisitDeleteIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualAppliedBdtPolicyData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualAppliedBdtPolicyData503ApplicationProblemPlusJSONResponse) VisitDeleteIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualAppliedBdtPolicyDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteIndividualAppliedBdtPolicyDatadefaultApplicationProblemPlusJSONResponse) VisitDeleteIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateIndividualAppliedBdtPolicyDataRequestObject struct {
	BdtPolicyId string `json:"bdtPolicyId"`
	Body        *UpdateIndividualAppliedBdtPolicyDataApplicationMergePatchPlusJSONRequestBody
}

type UpdateIndividualAppliedBdtPolicyDataResponseObject interface {
	VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error
}

type UpdateIndividualAppliedBdtPolicyData200JSONResponse externalRef5.BdtPolicyData

func (response UpdateIndividualAppliedBdtPolicyData200JSONResponse) VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef5.BdtPolicyData(response))
}

type UpdateIndividualAppliedBdtPolicyData204Response struct {
}

func (response UpdateIndividualAppliedBdtPolicyData204Response) VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateIndividualAppliedBdtPolicyData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualAppliedBdtPolicyData400ApplicationProblemPlusJSONResponse) VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualAppliedBdtPolicyData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualAppliedBdtPolicyData401ApplicationProblemPlusJSONResponse) VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualAppliedBdtPolicyData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualAppliedBdtPolicyData403ApplicationProblemPlusJSONResponse) VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualAppliedBdtPolicyData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualAppliedBdtPolicyData404ApplicationProblemPlusJSONResponse) VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualAppliedBdtPolicyData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualAppliedBdtPolicyData411ApplicationProblemPlusJSONResponse) VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualAppliedBdtPolicyData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualAppliedBdtPolicyData413ApplicationProblemPlusJSONResponse) VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualAppliedBdtPolicyData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualAppliedBdtPolicyData415ApplicationProblemPlusJSONResponse) VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualAppliedBdtPolicyData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualAppliedBdtPolicyData429ApplicationProblemPlusJSONResponse) VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualAppliedBdtPolicyData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualAppliedBdtPolicyData500ApplicationProblemPlusJSONResponse) VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualAppliedBdtPolicyData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualAppliedBdtPolicyData503ApplicationProblemPlusJSONResponse) VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualAppliedBdtPolicyDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UpdateIndividualAppliedBdtPolicyDatadefaultApplicationProblemPlusJSONResponse) VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIndividualAppliedBdtPolicyDataRequestObject struct {
	BdtPolicyId string `json:"bdtPolicyId"`
	Body        *CreateIndividualAppliedBdtPolicyDataJSONRequestBody
}

type CreateIndividualAppliedBdtPolicyDataResponseObject interface {
	VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error
}

type CreateIndividualAppliedBdtPolicyData201ResponseHeaders struct {
	Location string
}

type CreateIndividualAppliedBdtPolicyData201JSONResponse struct {
	Body    externalRef5.BdtPolicyData
	Headers CreateIndividualAppliedBdtPolicyData201ResponseHeaders
}

func (response CreateIndividualAppliedBdtPolicyData201JSONResponse) VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIndividualAppliedBdtPolicyData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAppliedBdtPolicyData400ApplicationProblemPlusJSONResponse) VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type CreateIndividualAppliedBdtPolicyData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAppliedBdtPolicyData401ApplicationProblemPlusJSONResponse) VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type CreateIndividualAppliedBdtPolicyData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAppliedBdtPolicyData403ApplicationProblemPlusJSONResponse) VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type CreateIndividualAppliedBdtPolicyData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAppliedBdtPolicyData404ApplicationProblemPlusJSONResponse) VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type CreateIndividualAppliedBdtPolicyData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAppliedBdtPolicyData411ApplicationProblemPlusJSONResponse) VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type CreateIndividualAppliedBdtPolicyData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAppliedBdtPolicyData413ApplicationProblemPlusJSONResponse) VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type CreateIndividualAppliedBdtPolicyData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAppliedBdtPolicyData414ApplicationProblemPlusJSONResponse) VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N414ApplicationProblemPlusJSONResponse))
}

type CreateIndividualAppliedBdtPolicyData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAppliedBdtPolicyData415ApplicationProblemPlusJSONResponse) VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type CreateIndividualAppliedBdtPolicyData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAppliedBdtPolicyData429ApplicationProblemPlusJSONResponse) VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type CreateIndividualAppliedBdtPolicyData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAppliedBdtPolicyData500ApplicationProblemPlusJSONResponse) VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type CreateIndividualAppliedBdtPolicyData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAppliedBdtPolicyData503ApplicationProblemPlusJSONResponse) VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type CreateIndividualAppliedBdtPolicyDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateIndividualAppliedBdtPolicyDatadefaultApplicationProblemPlusJSONResponse) VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadInfluenceDataRequestObject struct {
	Params ReadInfluenceDataParams
}

type ReadInfluenceDataResponseObject interface {
	VisitReadInfluenceDataResponse(w http.ResponseWriter) error
}

type ReadInfluenceData200JSONResponse []externalRef5.TrafficInfluData

func (response ReadInfluenceData200JSONResponse) VisitReadInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadInfluenceData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceData400ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReadInfluenceData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceData401ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReadInfluenceData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceData403ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReadInfluenceData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceData404ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReadInfluenceData406Response externalRef0.N406Response

func (response ReadInfluenceData406Response) VisitReadInfluenceDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadInfluenceData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceData414ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N414ApplicationProblemPlusJSONResponse))
}

type ReadInfluenceData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceData429ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReadInfluenceData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceData500ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReadInfluenceData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceData503ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReadInfluenceDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadInfluenceDatadefaultApplicationProblemPlusJSONResponse) VisitReadInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadInfluenceDataSubscriptionsRequestObject struct {
	Params ReadInfluenceDataSubscriptionsParams
}

type ReadInfluenceDataSubscriptionsResponseObject interface {
	VisitReadInfluenceDataSubscriptionsResponse(w http.ResponseWriter) error
}

type ReadInfluenceDataSubscriptions200JSONResponse []externalRef5.TrafficInfluSub

func (response ReadInfluenceDataSubscriptions200JSONResponse) VisitReadInfluenceDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadInfluenceDataSubscriptions400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceDataSubscriptions400ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReadInfluenceDataSubscriptions401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceDataSubscriptions401ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReadInfluenceDataSubscriptions403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceDataSubscriptions403ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReadInfluenceDataSubscriptions404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceDataSubscriptions404ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReadInfluenceDataSubscriptions406Response externalRef0.N406Response

func (response ReadInfluenceDataSubscriptions406Response) VisitReadInfluenceDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadInfluenceDataSubscriptions414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceDataSubscriptions414ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N414ApplicationProblemPlusJSONResponse))
}

type ReadInfluenceDataSubscriptions429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceDataSubscriptions429ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReadInfluenceDataSubscriptions500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceDataSubscriptions500ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReadInfluenceDataSubscriptions503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceDataSubscriptions503ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReadInfluenceDataSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadInfluenceDataSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitReadInfluenceDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIndividualInfluenceDataSubscriptionRequestObject struct {
	Body *CreateIndividualInfluenceDataSubscriptionJSONRequestBody
}

type CreateIndividualInfluenceDataSubscriptionResponseObject interface {
	VisitCreateIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error
}

type CreateIndividualInfluenceDataSubscription201ResponseHeaders struct {
	Location string
}

type CreateIndividualInfluenceDataSubscription201JSONResponse struct {
	Body    externalRef5.TrafficInfluSub
	Headers CreateIndividualInfluenceDataSubscription201ResponseHeaders
}

func (response CreateIndividualInfluenceDataSubscription201JSONResponse) VisitCreateIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIndividualInfluenceDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualInfluenceDataSubscription400ApplicationProblemPlusJSONResponse) VisitCreateIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type CreateIndividualInfluenceDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualInfluenceDataSubscription401ApplicationProblemPlusJSONResponse) VisitCreateIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type CreateIndividualInfluenceDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualInfluenceDataSubscription403ApplicationProblemPlusJSONResponse) VisitCreateIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type CreateIndividualInfluenceDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualInfluenceDataSubscription404ApplicationProblemPlusJSONResponse) VisitCreateIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type CreateIndividualInfluenceDataSubscription411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualInfluenceDataSubscription411ApplicationProblemPlusJSONResponse) VisitCreateIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type CreateIndividualInfluenceDataSubscription413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualInfluenceDataSubscription413ApplicationProblemPlusJSONResponse) VisitCreateIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type CreateIndividualInfluenceDataSubscription415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualInfluenceDataSubscription415ApplicationProblemPlusJSONResponse) VisitCreateIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type CreateIndividualInfluenceDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualInfluenceDataSubscription429ApplicationProblemPlusJSONResponse) VisitCreateIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type CreateIndividualInfluenceDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualInfluenceDataSubscription500ApplicationProblemPlusJSONResponse) VisitCreateIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type CreateIndividualInfluenceDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualInfluenceDataSubscription503ApplicationProblemPlusJSONResponse) VisitCreateIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type CreateIndividualInfluenceDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateIndividualInfluenceDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitCreateIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualInfluenceDataSubscriptionRequestObject struct {
	SubscriptionId string `json:"subscriptionId"`
}

type DeleteIndividualInfluenceDataSubscriptionResponseObject interface {
	VisitDeleteIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error
}

type DeleteIndividualInfluenceDataSubscription204Response struct {
}

func (response DeleteIndividualInfluenceDataSubscription204Response) VisitDeleteIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIndividualInfluenceDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceDataSubscription400ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualInfluenceDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceDataSubscription401ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualInfluenceDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceDataSubscription403ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualInfluenceDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceDataSubscription404ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualInfluenceDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceDataSubscription429ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualInfluenceDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceDataSubscription500ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualInfluenceDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceDataSubscription503ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualInfluenceDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteIndividualInfluenceDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadIndividualInfluenceDataSubscriptionRequestObject struct {
	SubscriptionId string `json:"subscriptionId"`
}

type ReadIndividualInfluenceDataSubscriptionResponseObject interface {
	VisitReadIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error
}

type ReadIndividualInfluenceDataSubscription200JSONResponse externalRef5.TrafficInfluSub

func (response ReadIndividualInfluenceDataSubscription200JSONResponse) VisitReadIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef5.TrafficInfluSub(response))
}

type ReadIndividualInfluenceDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualInfluenceDataSubscription400ApplicationProblemPlusJSONResponse) VisitReadIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReadIndividualInfluenceDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualInfluenceDataSubscription401ApplicationProblemPlusJSONResponse) VisitReadIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReadIndividualInfluenceDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualInfluenceDataSubscription403ApplicationProblemPlusJSONResponse) VisitReadIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReadIndividualInfluenceDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualInfluenceDataSubscription404ApplicationProblemPlusJSONResponse) VisitReadIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReadIndividualInfluenceDataSubscription406Response externalRef0.N406Response

func (response ReadIndividualInfluenceDataSubscription406Response) VisitReadIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadIndividualInfluenceDataSubscription414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualInfluenceDataSubscription414ApplicationProblemPlusJSONResponse) VisitReadIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N414ApplicationProblemPlusJSONResponse))
}

type ReadIndividualInfluenceDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualInfluenceDataSubscription429ApplicationProblemPlusJSONResponse) VisitReadIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReadIndividualInfluenceDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualInfluenceDataSubscription500ApplicationProblemPlusJSONResponse) VisitReadIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReadIndividualInfluenceDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualInfluenceDataSubscription503ApplicationProblemPlusJSONResponse) VisitReadIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReadIndividualInfluenceDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadIndividualInfluenceDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitReadIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReplaceIndividualInfluenceDataSubscriptionRequestObject struct {
	SubscriptionId string `json:"subscriptionId"`
	Body           *ReplaceIndividualInfluenceDataSubscriptionJSONRequestBody
}

type ReplaceIndividualInfluenceDataSubscriptionResponseObject interface {
	VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error
}

type ReplaceIndividualInfluenceDataSubscription200JSONResponse externalRef5.TrafficInfluSub

func (response ReplaceIndividualInfluenceDataSubscription200JSONResponse) VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef5.TrafficInfluSub(response))
}

type ReplaceIndividualInfluenceDataSubscription204Response struct {
}

func (response ReplaceIndividualInfluenceDataSubscription204Response) VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ReplaceIndividualInfluenceDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualInfluenceDataSubscription400ApplicationProblemPlusJSONResponse) VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualInfluenceDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualInfluenceDataSubscription401ApplicationProblemPlusJSONResponse) VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualInfluenceDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualInfluenceDataSubscription403ApplicationProblemPlusJSONResponse) VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualInfluenceDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualInfluenceDataSubscription404ApplicationProblemPlusJSONResponse) VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualInfluenceDataSubscription411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualInfluenceDataSubscription411ApplicationProblemPlusJSONResponse) VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualInfluenceDataSubscription413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualInfluenceDataSubscription413ApplicationProblemPlusJSONResponse) VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualInfluenceDataSubscription415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualInfluenceDataSubscription415ApplicationProblemPlusJSONResponse) VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualInfluenceDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualInfluenceDataSubscription429ApplicationProblemPlusJSONResponse) VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualInfluenceDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualInfluenceDataSubscription500ApplicationProblemPlusJSONResponse) VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualInfluenceDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualInfluenceDataSubscription503ApplicationProblemPlusJSONResponse) VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualInfluenceDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReplaceIndividualInfluenceDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualInfluenceDataRequestObject struct {
	InfluenceId string `json:"influenceId"`
}

type DeleteIndividualInfluenceDataResponseObject interface {
	VisitDeleteIndividualInfluenceDataResponse(w http.ResponseWriter) error
}

type DeleteIndividualInfluenceData204Response struct {
}

func (response DeleteIndividualInfluenceData204Response) VisitDeleteIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIndividualInfluenceData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceData400ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualInfluenceData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceData401ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualInfluenceData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceData403ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualInfluenceData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceData404ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualInfluenceData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceData429ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualInfluenceData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceData500ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualInfluenceData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceData503ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualInfluenceDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteIndividualInfluenceDatadefaultApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateIndividualInfluenceDataRequestObject struct {
	InfluenceId string `json:"influenceId"`
	Body        *UpdateIndividualInfluenceDataApplicationMergePatchPlusJSONRequestBody
}

type UpdateIndividualInfluenceDataResponseObject interface {
	VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error
}

type UpdateIndividualInfluenceData200JSONResponse externalRef5.TrafficInfluData

func (response UpdateIndividualInfluenceData200JSONResponse) VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef5.TrafficInfluData(response))
}

type UpdateIndividualInfluenceData204Response struct {
}

func (response UpdateIndividualInfluenceData204Response) VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateIndividualInfluenceData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualInfluenceData400ApplicationProblemPlusJSONResponse) VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualInfluenceData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualInfluenceData401ApplicationProblemPlusJSONResponse) VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualInfluenceData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualInfluenceData403ApplicationProblemPlusJSONResponse) VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualInfluenceData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualInfluenceData404ApplicationProblemPlusJSONResponse) VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualInfluenceData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualInfluenceData411ApplicationProblemPlusJSONResponse) VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualInfluenceData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualInfluenceData413ApplicationProblemPlusJSONResponse) VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualInfluenceData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualInfluenceData415ApplicationProblemPlusJSONResponse) VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualInfluenceData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualInfluenceData429ApplicationProblemPlusJSONResponse) VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualInfluenceData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualInfluenceData500ApplicationProblemPlusJSONResponse) VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualInfluenceData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualInfluenceData503ApplicationProblemPlusJSONResponse) VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualInfluenceDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UpdateIndividualInfluenceDatadefaultApplicationProblemPlusJSONResponse) VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceIndividualInfluenceDataRequestObject struct {
	InfluenceId string `json:"influenceId"`
	Body        *CreateOrReplaceIndividualInfluenceDataJSONRequestBody
}

type CreateOrReplaceIndividualInfluenceDataResponseObject interface {
	VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error
}

type CreateOrReplaceIndividualInfluenceData200JSONResponse externalRef5.TrafficInfluData

func (response CreateOrReplaceIndividualInfluenceData200JSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef5.TrafficInfluData(response))
}

type CreateOrReplaceIndividualInfluenceData201ResponseHeaders struct {
	Location string
}

type CreateOrReplaceIndividualInfluenceData201JSONResponse struct {
	Body    externalRef5.TrafficInfluData
	Headers CreateOrReplaceIndividualInfluenceData201ResponseHeaders
}

func (response CreateOrReplaceIndividualInfluenceData201JSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceIndividualInfluenceData204Response struct {
}

func (response CreateOrReplaceIndividualInfluenceData204Response) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateOrReplaceIndividualInfluenceData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualInfluenceData400ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualInfluenceData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualInfluenceData401ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualInfluenceData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualInfluenceData403ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualInfluenceData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualInfluenceData404ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualInfluenceData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualInfluenceData411ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualInfluenceData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualInfluenceData413ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualInfluenceData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualInfluenceData414ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N414ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualInfluenceData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualInfluenceData415ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualInfluenceData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualInfluenceData429ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualInfluenceData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualInfluenceData500ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualInfluenceData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualInfluenceData503ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualInfluenceDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateOrReplaceIndividualInfluenceDatadefaultApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadIPTVCongifurationDataRequestObject struct {
	Params ReadIPTVCongifurationDataParams
}

type ReadIPTVCongifurationDataResponseObject interface {
	VisitReadIPTVCongifurationDataResponse(w http.ResponseWriter) error
}

type ReadIPTVCongifurationData200JSONResponse []externalRef5.IptvConfigData

func (response ReadIPTVCongifurationData200JSONResponse) VisitReadIPTVCongifurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadIPTVCongifurationData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadIPTVCongifurationData400ApplicationProblemPlusJSONResponse) VisitReadIPTVCongifurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReadIPTVCongifurationData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadIPTVCongifurationData401ApplicationProblemPlusJSONResponse) VisitReadIPTVCongifurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReadIPTVCongifurationData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadIPTVCongifurationData403ApplicationProblemPlusJSONResponse) VisitReadIPTVCongifurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReadIPTVCongifurationData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadIPTVCongifurationData404ApplicationProblemPlusJSONResponse) VisitReadIPTVCongifurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReadIPTVCongifurationData406Response externalRef0.N406Response

func (response ReadIPTVCongifurationData406Response) VisitReadIPTVCongifurationDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadIPTVCongifurationData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response ReadIPTVCongifurationData414ApplicationProblemPlusJSONResponse) VisitReadIPTVCongifurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N414ApplicationProblemPlusJSONResponse))
}

type ReadIPTVCongifurationData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadIPTVCongifurationData429ApplicationProblemPlusJSONResponse) VisitReadIPTVCongifurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReadIPTVCongifurationData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadIPTVCongifurationData500ApplicationProblemPlusJSONResponse) VisitReadIPTVCongifurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReadIPTVCongifurationData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadIPTVCongifurationData503ApplicationProblemPlusJSONResponse) VisitReadIPTVCongifurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReadIPTVCongifurationDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadIPTVCongifurationDatadefaultApplicationProblemPlusJSONResponse) VisitReadIPTVCongifurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualIPTVConfigurationDataRequestObject struct {
	ConfigurationId string `json:"configurationId"`
}

type DeleteIndividualIPTVConfigurationDataResponseObject interface {
	VisitDeleteIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error
}

type DeleteIndividualIPTVConfigurationData204Response struct {
}

func (response DeleteIndividualIPTVConfigurationData204Response) VisitDeleteIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIndividualIPTVConfigurationData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualIPTVConfigurationData400ApplicationProblemPlusJSONResponse) VisitDeleteIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualIPTVConfigurationData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualIPTVConfigurationData401ApplicationProblemPlusJSONResponse) VisitDeleteIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualIPTVConfigurationData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualIPTVConfigurationData403ApplicationProblemPlusJSONResponse) VisitDeleteIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualIPTVConfigurationData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualIPTVConfigurationData404ApplicationProblemPlusJSONResponse) VisitDeleteIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualIPTVConfigurationData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualIPTVConfigurationData429ApplicationProblemPlusJSONResponse) VisitDeleteIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualIPTVConfigurationData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualIPTVConfigurationData500ApplicationProblemPlusJSONResponse) VisitDeleteIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualIPTVConfigurationData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualIPTVConfigurationData503ApplicationProblemPlusJSONResponse) VisitDeleteIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualIPTVConfigurationDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteIndividualIPTVConfigurationDatadefaultApplicationProblemPlusJSONResponse) VisitDeleteIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PartialReplaceIndividualIPTVConfigurationDataRequestObject struct {
	ConfigurationId string `json:"configurationId"`
	Body            *PartialReplaceIndividualIPTVConfigurationDataApplicationMergePatchPlusJSONRequestBody
}

type PartialReplaceIndividualIPTVConfigurationDataResponseObject interface {
	VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error
}

type PartialReplaceIndividualIPTVConfigurationData200JSONResponse externalRef5.IptvConfigData

func (response PartialReplaceIndividualIPTVConfigurationData200JSONResponse) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef5.IptvConfigData(response))
}

type PartialReplaceIndividualIPTVConfigurationData204Response struct {
}

func (response PartialReplaceIndividualIPTVConfigurationData204Response) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PartialReplaceIndividualIPTVConfigurationData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response PartialReplaceIndividualIPTVConfigurationData400ApplicationProblemPlusJSONResponse) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type PartialReplaceIndividualIPTVConfigurationData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response PartialReplaceIndividualIPTVConfigurationData401ApplicationProblemPlusJSONResponse) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type PartialReplaceIndividualIPTVConfigurationData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response PartialReplaceIndividualIPTVConfigurationData403ApplicationProblemPlusJSONResponse) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type PartialReplaceIndividualIPTVConfigurationData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response PartialReplaceIndividualIPTVConfigurationData404ApplicationProblemPlusJSONResponse) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type PartialReplaceIndividualIPTVConfigurationData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response PartialReplaceIndividualIPTVConfigurationData411ApplicationProblemPlusJSONResponse) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type PartialReplaceIndividualIPTVConfigurationData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response PartialReplaceIndividualIPTVConfigurationData413ApplicationProblemPlusJSONResponse) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type PartialReplaceIndividualIPTVConfigurationData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response PartialReplaceIndividualIPTVConfigurationData414ApplicationProblemPlusJSONResponse) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N414ApplicationProblemPlusJSONResponse))
}

type PartialReplaceIndividualIPTVConfigurationData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response PartialReplaceIndividualIPTVConfigurationData415ApplicationProblemPlusJSONResponse) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type PartialReplaceIndividualIPTVConfigurationData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response PartialReplaceIndividualIPTVConfigurationData429ApplicationProblemPlusJSONResponse) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type PartialReplaceIndividualIPTVConfigurationData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response PartialReplaceIndividualIPTVConfigurationData500ApplicationProblemPlusJSONResponse) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type PartialReplaceIndividualIPTVConfigurationData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response PartialReplaceIndividualIPTVConfigurationData503ApplicationProblemPlusJSONResponse) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type PartialReplaceIndividualIPTVConfigurationDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response PartialReplaceIndividualIPTVConfigurationDatadefaultApplicationProblemPlusJSONResponse) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceIndividualIPTVConfigurationDataRequestObject struct {
	ConfigurationId string `json:"configurationId"`
	Body            *CreateOrReplaceIndividualIPTVConfigurationDataJSONRequestBody
}

type CreateOrReplaceIndividualIPTVConfigurationDataResponseObject interface {
	VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error
}

type CreateOrReplaceIndividualIPTVConfigurationData200JSONResponse externalRef5.IptvConfigData

func (response CreateOrReplaceIndividualIPTVConfigurationData200JSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef5.IptvConfigData(response))
}

type CreateOrReplaceIndividualIPTVConfigurationData201ResponseHeaders struct {
	Location string
}

type CreateOrReplaceIndividualIPTVConfigurationData201JSONResponse struct {
	Body    externalRef5.IptvConfigData
	Headers CreateOrReplaceIndividualIPTVConfigurationData201ResponseHeaders
}

func (response CreateOrReplaceIndividualIPTVConfigurationData201JSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceIndividualIPTVConfigurationData204Response struct {
}

func (response CreateOrReplaceIndividualIPTVConfigurationData204Response) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateOrReplaceIndividualIPTVConfigurationData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualIPTVConfigurationData400ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualIPTVConfigurationData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualIPTVConfigurationData401ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualIPTVConfigurationData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualIPTVConfigurationData403ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualIPTVConfigurationData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualIPTVConfigurationData404ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualIPTVConfigurationData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualIPTVConfigurationData411ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualIPTVConfigurationData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualIPTVConfigurationData413ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualIPTVConfigurationData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualIPTVConfigurationData414ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N414ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualIPTVConfigurationData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualIPTVConfigurationData415ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualIPTVConfigurationData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualIPTVConfigurationData429ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualIPTVConfigurationData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualIPTVConfigurationData500ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualIPTVConfigurationData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualIPTVConfigurationData503ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualIPTVConfigurationDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateOrReplaceIndividualIPTVConfigurationDatadefaultApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadPFDDataRequestObject struct {
	Params ReadPFDDataParams
}

type ReadPFDDataResponseObject interface {
	VisitReadPFDDataResponse(w http.ResponseWriter) error
}

type ReadPFDData200JSONResponse []externalRef5.PfdDataForAppExt

func (response ReadPFDData200JSONResponse) VisitReadPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadPFDData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadPFDData400ApplicationProblemPlusJSONResponse) VisitReadPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReadPFDData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadPFDData401ApplicationProblemPlusJSONResponse) VisitReadPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReadPFDData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadPFDData403ApplicationProblemPlusJSONResponse) VisitReadPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReadPFDData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadPFDData404ApplicationProblemPlusJSONResponse) VisitReadPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReadPFDData406Response externalRef0.N406Response

func (response ReadPFDData406Response) VisitReadPFDDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadPFDData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response ReadPFDData414ApplicationProblemPlusJSONResponse) VisitReadPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N414ApplicationProblemPlusJSONResponse))
}

type ReadPFDData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadPFDData429ApplicationProblemPlusJSONResponse) VisitReadPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReadPFDData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadPFDData500ApplicationProblemPlusJSONResponse) VisitReadPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReadPFDData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadPFDData503ApplicationProblemPlusJSONResponse) VisitReadPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReadPFDDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadPFDDatadefaultApplicationProblemPlusJSONResponse) VisitReadPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualPFDDataRequestObject struct {
	AppId string `json:"appId"`
}

type DeleteIndividualPFDDataResponseObject interface {
	VisitDeleteIndividualPFDDataResponse(w http.ResponseWriter) error
}

type DeleteIndividualPFDData204Response struct {
}

func (response DeleteIndividualPFDData204Response) VisitDeleteIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIndividualPFDData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPFDData400ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualPFDData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPFDData401ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualPFDData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPFDData403ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualPFDData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPFDData404ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualPFDData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPFDData429ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualPFDData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPFDData500ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualPFDData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPFDData503ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualPFDDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteIndividualPFDDatadefaultApplicationProblemPlusJSONResponse) VisitDeleteIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadIndividualPFDDataRequestObject struct {
	AppId string `json:"appId"`
}

type ReadIndividualPFDDataResponseObject interface {
	VisitReadIndividualPFDDataResponse(w http.ResponseWriter) error
}

type ReadIndividualPFDData200JSONResponse externalRef5.PfdDataForAppExt

func (response ReadIndividualPFDData200JSONResponse) VisitReadIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef5.PfdDataForAppExt(response))
}

type ReadIndividualPFDData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualPFDData400ApplicationProblemPlusJSONResponse) VisitReadIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReadIndividualPFDData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualPFDData401ApplicationProblemPlusJSONResponse) VisitReadIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReadIndividualPFDData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualPFDData403ApplicationProblemPlusJSONResponse) VisitReadIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReadIndividualPFDData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualPFDData404ApplicationProblemPlusJSONResponse) VisitReadIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReadIndividualPFDData406Response externalRef0.N406Response

func (response ReadIndividualPFDData406Response) VisitReadIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadIndividualPFDData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualPFDData429ApplicationProblemPlusJSONResponse) VisitReadIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReadIndividualPFDData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualPFDData500ApplicationProblemPlusJSONResponse) VisitReadIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReadIndividualPFDData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualPFDData503ApplicationProblemPlusJSONResponse) VisitReadIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReadIndividualPFDDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadIndividualPFDDatadefaultApplicationProblemPlusJSONResponse) VisitReadIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceIndividualPFDDataRequestObject struct {
	AppId string `json:"appId"`
	Body  *CreateOrReplaceIndividualPFDDataJSONRequestBody
}

type CreateOrReplaceIndividualPFDDataResponseObject interface {
	VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error
}

type CreateOrReplaceIndividualPFDData200JSONResponse externalRef5.PfdDataForAppExt

func (response CreateOrReplaceIndividualPFDData200JSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef5.PfdDataForAppExt(response))
}

type CreateOrReplaceIndividualPFDData201ResponseHeaders struct {
	Location string
}

type CreateOrReplaceIndividualPFDData201JSONResponse struct {
	Body    externalRef5.PfdDataForAppExt
	Headers CreateOrReplaceIndividualPFDData201ResponseHeaders
}

func (response CreateOrReplaceIndividualPFDData201JSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceIndividualPFDData204Response struct {
}

func (response CreateOrReplaceIndividualPFDData204Response) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateOrReplaceIndividualPFDData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualPFDData400ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualPFDData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualPFDData401ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualPFDData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualPFDData403ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualPFDData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualPFDData404ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualPFDData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualPFDData411ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualPFDData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualPFDData413ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualPFDData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualPFDData414ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N414ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualPFDData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualPFDData415ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualPFDData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualPFDData429ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualPFDData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualPFDData500ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualPFDData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualPFDData503ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceIndividualPFDDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateOrReplaceIndividualPFDDatadefaultApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadServiceParameterDataRequestObject struct {
	Params ReadServiceParameterDataParams
}

type ReadServiceParameterDataResponseObject interface {
	VisitReadServiceParameterDataResponse(w http.ResponseWriter) error
}

type ReadServiceParameterData200JSONResponse []externalRef5.ServiceParameterData

func (response ReadServiceParameterData200JSONResponse) VisitReadServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadServiceParameterData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadServiceParameterData400ApplicationProblemPlusJSONResponse) VisitReadServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReadServiceParameterData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadServiceParameterData401ApplicationProblemPlusJSONResponse) VisitReadServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReadServiceParameterData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadServiceParameterData403ApplicationProblemPlusJSONResponse) VisitReadServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReadServiceParameterData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadServiceParameterData404ApplicationProblemPlusJSONResponse) VisitReadServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReadServiceParameterData406Response externalRef0.N406Response

func (response ReadServiceParameterData406Response) VisitReadServiceParameterDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadServiceParameterData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response ReadServiceParameterData414ApplicationProblemPlusJSONResponse) VisitReadServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N414ApplicationProblemPlusJSONResponse))
}

type ReadServiceParameterData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadServiceParameterData429ApplicationProblemPlusJSONResponse) VisitReadServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReadServiceParameterData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadServiceParameterData500ApplicationProblemPlusJSONResponse) VisitReadServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReadServiceParameterData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadServiceParameterData503ApplicationProblemPlusJSONResponse) VisitReadServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReadServiceParameterDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadServiceParameterDatadefaultApplicationProblemPlusJSONResponse) VisitReadServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualServiceParameterDataRequestObject struct {
	ServiceParamId string `json:"serviceParamId"`
}

type DeleteIndividualServiceParameterDataResponseObject interface {
	VisitDeleteIndividualServiceParameterDataResponse(w http.ResponseWriter) error
}

type DeleteIndividualServiceParameterData204Response struct {
}

func (response DeleteIndividualServiceParameterData204Response) VisitDeleteIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIndividualServiceParameterData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualServiceParameterData400ApplicationProblemPlusJSONResponse) VisitDeleteIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualServiceParameterData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualServiceParameterData401ApplicationProblemPlusJSONResponse) VisitDeleteIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualServiceParameterData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualServiceParameterData403ApplicationProblemPlusJSONResponse) VisitDeleteIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualServiceParameterData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualServiceParameterData404ApplicationProblemPlusJSONResponse) VisitDeleteIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualServiceParameterData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualServiceParameterData429ApplicationProblemPlusJSONResponse) VisitDeleteIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualServiceParameterData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualServiceParameterData500ApplicationProblemPlusJSONResponse) VisitDeleteIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualServiceParameterData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualServiceParameterData503ApplicationProblemPlusJSONResponse) VisitDeleteIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualServiceParameterDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteIndividualServiceParameterDatadefaultApplicationProblemPlusJSONResponse) VisitDeleteIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateIndividualServiceParameterDataRequestObject struct {
	ServiceParamId string `json:"serviceParamId"`
	Body           *UpdateIndividualServiceParameterDataApplicationMergePatchPlusJSONRequestBody
}

type UpdateIndividualServiceParameterDataResponseObject interface {
	VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error
}

type UpdateIndividualServiceParameterData200JSONResponse externalRef5.ServiceParameterData

func (response UpdateIndividualServiceParameterData200JSONResponse) VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef5.ServiceParameterData(response))
}

type UpdateIndividualServiceParameterData204Response struct {
}

func (response UpdateIndividualServiceParameterData204Response) VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateIndividualServiceParameterData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualServiceParameterData400ApplicationProblemPlusJSONResponse) VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualServiceParameterData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualServiceParameterData401ApplicationProblemPlusJSONResponse) VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualServiceParameterData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualServiceParameterData403ApplicationProblemPlusJSONResponse) VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualServiceParameterData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualServiceParameterData404ApplicationProblemPlusJSONResponse) VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualServiceParameterData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualServiceParameterData411ApplicationProblemPlusJSONResponse) VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualServiceParameterData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualServiceParameterData413ApplicationProblemPlusJSONResponse) VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualServiceParameterData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualServiceParameterData415ApplicationProblemPlusJSONResponse) VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualServiceParameterData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualServiceParameterData429ApplicationProblemPlusJSONResponse) VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualServiceParameterData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualServiceParameterData500ApplicationProblemPlusJSONResponse) VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualServiceParameterData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualServiceParameterData503ApplicationProblemPlusJSONResponse) VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualServiceParameterDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UpdateIndividualServiceParameterDatadefaultApplicationProblemPlusJSONResponse) VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceServiceParameterDataRequestObject struct {
	ServiceParamId string `json:"serviceParamId"`
	Body           *CreateOrReplaceServiceParameterDataJSONRequestBody
}

type CreateOrReplaceServiceParameterDataResponseObject interface {
	VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error
}

type CreateOrReplaceServiceParameterData200JSONResponse externalRef5.ServiceParameterData

func (response CreateOrReplaceServiceParameterData200JSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef5.ServiceParameterData(response))
}

type CreateOrReplaceServiceParameterData201ResponseHeaders struct {
	Location string
}

type CreateOrReplaceServiceParameterData201JSONResponse struct {
	Body    externalRef5.ServiceParameterData
	Headers CreateOrReplaceServiceParameterData201ResponseHeaders
}

func (response CreateOrReplaceServiceParameterData201JSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceServiceParameterData204Response struct {
}

func (response CreateOrReplaceServiceParameterData204Response) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateOrReplaceServiceParameterData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceServiceParameterData400ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceServiceParameterData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceServiceParameterData401ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceServiceParameterData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceServiceParameterData403ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceServiceParameterData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceServiceParameterData404ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceServiceParameterData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceServiceParameterData411ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceServiceParameterData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceServiceParameterData413ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceServiceParameterData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceServiceParameterData414ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N414ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceServiceParameterData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceServiceParameterData415ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceServiceParameterData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceServiceParameterData429ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceServiceParameterData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceServiceParameterData500ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceServiceParameterData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceServiceParameterData503ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceServiceParameterDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateOrReplaceServiceParameterDatadefaultApplicationProblemPlusJSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadApplicationDataChangeSubscriptionsRequestObject struct {
	Params ReadApplicationDataChangeSubscriptionsParams
}

type ReadApplicationDataChangeSubscriptionsResponseObject interface {
	VisitReadApplicationDataChangeSubscriptionsResponse(w http.ResponseWriter) error
}

type ReadApplicationDataChangeSubscriptions200JSONResponse []externalRef5.ApplicationDataSubs

func (response ReadApplicationDataChangeSubscriptions200JSONResponse) VisitReadApplicationDataChangeSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadApplicationDataChangeSubscriptions400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadApplicationDataChangeSubscriptions400ApplicationProblemPlusJSONResponse) VisitReadApplicationDataChangeSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReadApplicationDataChangeSubscriptions401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadApplicationDataChangeSubscriptions401ApplicationProblemPlusJSONResponse) VisitReadApplicationDataChangeSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReadApplicationDataChangeSubscriptions403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadApplicationDataChangeSubscriptions403ApplicationProblemPlusJSONResponse) VisitReadApplicationDataChangeSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReadApplicationDataChangeSubscriptions404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadApplicationDataChangeSubscriptions404ApplicationProblemPlusJSONResponse) VisitReadApplicationDataChangeSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReadApplicationDataChangeSubscriptions406Response externalRef0.N406Response

func (response ReadApplicationDataChangeSubscriptions406Response) VisitReadApplicationDataChangeSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadApplicationDataChangeSubscriptions414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response ReadApplicationDataChangeSubscriptions414ApplicationProblemPlusJSONResponse) VisitReadApplicationDataChangeSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N414ApplicationProblemPlusJSONResponse))
}

type ReadApplicationDataChangeSubscriptions429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadApplicationDataChangeSubscriptions429ApplicationProblemPlusJSONResponse) VisitReadApplicationDataChangeSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReadApplicationDataChangeSubscriptions500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadApplicationDataChangeSubscriptions500ApplicationProblemPlusJSONResponse) VisitReadApplicationDataChangeSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReadApplicationDataChangeSubscriptions503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadApplicationDataChangeSubscriptions503ApplicationProblemPlusJSONResponse) VisitReadApplicationDataChangeSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReadApplicationDataChangeSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadApplicationDataChangeSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitReadApplicationDataChangeSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIndividualApplicationDataSubscriptionRequestObject struct {
	Body *CreateIndividualApplicationDataSubscriptionJSONRequestBody
}

type CreateIndividualApplicationDataSubscriptionResponseObject interface {
	VisitCreateIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error
}

type CreateIndividualApplicationDataSubscription201ResponseHeaders struct {
	Location string
}

type CreateIndividualApplicationDataSubscription201JSONResponse struct {
	Body    externalRef5.ApplicationDataSubs
	Headers CreateIndividualApplicationDataSubscription201ResponseHeaders
}

func (response CreateIndividualApplicationDataSubscription201JSONResponse) VisitCreateIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIndividualApplicationDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualApplicationDataSubscription400ApplicationProblemPlusJSONResponse) VisitCreateIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type CreateIndividualApplicationDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualApplicationDataSubscription401ApplicationProblemPlusJSONResponse) VisitCreateIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type CreateIndividualApplicationDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualApplicationDataSubscription403ApplicationProblemPlusJSONResponse) VisitCreateIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type CreateIndividualApplicationDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualApplicationDataSubscription404ApplicationProblemPlusJSONResponse) VisitCreateIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type CreateIndividualApplicationDataSubscription411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualApplicationDataSubscription411ApplicationProblemPlusJSONResponse) VisitCreateIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type CreateIndividualApplicationDataSubscription413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualApplicationDataSubscription413ApplicationProblemPlusJSONResponse) VisitCreateIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type CreateIndividualApplicationDataSubscription415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualApplicationDataSubscription415ApplicationProblemPlusJSONResponse) VisitCreateIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type CreateIndividualApplicationDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualApplicationDataSubscription429ApplicationProblemPlusJSONResponse) VisitCreateIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type CreateIndividualApplicationDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualApplicationDataSubscription500ApplicationProblemPlusJSONResponse) VisitCreateIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type CreateIndividualApplicationDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualApplicationDataSubscription503ApplicationProblemPlusJSONResponse) VisitCreateIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type CreateIndividualApplicationDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateIndividualApplicationDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitCreateIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualApplicationDataSubscriptionRequestObject struct {
	SubsId string `json:"subsId"`
}

type DeleteIndividualApplicationDataSubscriptionResponseObject interface {
	VisitDeleteIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error
}

type DeleteIndividualApplicationDataSubscription204Response struct {
}

func (response DeleteIndividualApplicationDataSubscription204Response) VisitDeleteIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIndividualApplicationDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualApplicationDataSubscription400ApplicationProblemPlusJSONResponse) VisitDeleteIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualApplicationDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualApplicationDataSubscription401ApplicationProblemPlusJSONResponse) VisitDeleteIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualApplicationDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualApplicationDataSubscription403ApplicationProblemPlusJSONResponse) VisitDeleteIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualApplicationDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualApplicationDataSubscription404ApplicationProblemPlusJSONResponse) VisitDeleteIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualApplicationDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualApplicationDataSubscription429ApplicationProblemPlusJSONResponse) VisitDeleteIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualApplicationDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualApplicationDataSubscription500ApplicationProblemPlusJSONResponse) VisitDeleteIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualApplicationDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualApplicationDataSubscription503ApplicationProblemPlusJSONResponse) VisitDeleteIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualApplicationDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteIndividualApplicationDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitDeleteIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadIndividualApplicationDataSubscriptionRequestObject struct {
	SubsId string `json:"subsId"`
}

type ReadIndividualApplicationDataSubscriptionResponseObject interface {
	VisitReadIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error
}

type ReadIndividualApplicationDataSubscription200JSONResponse externalRef5.ApplicationDataSubs

func (response ReadIndividualApplicationDataSubscription200JSONResponse) VisitReadIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef5.ApplicationDataSubs(response))
}

type ReadIndividualApplicationDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualApplicationDataSubscription400ApplicationProblemPlusJSONResponse) VisitReadIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReadIndividualApplicationDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualApplicationDataSubscription401ApplicationProblemPlusJSONResponse) VisitReadIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReadIndividualApplicationDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualApplicationDataSubscription403ApplicationProblemPlusJSONResponse) VisitReadIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReadIndividualApplicationDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualApplicationDataSubscription404ApplicationProblemPlusJSONResponse) VisitReadIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReadIndividualApplicationDataSubscription406Response externalRef0.N406Response

func (response ReadIndividualApplicationDataSubscription406Response) VisitReadIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadIndividualApplicationDataSubscription414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualApplicationDataSubscription414ApplicationProblemPlusJSONResponse) VisitReadIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N414ApplicationProblemPlusJSONResponse))
}

type ReadIndividualApplicationDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualApplicationDataSubscription429ApplicationProblemPlusJSONResponse) VisitReadIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReadIndividualApplicationDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualApplicationDataSubscription500ApplicationProblemPlusJSONResponse) VisitReadIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReadIndividualApplicationDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualApplicationDataSubscription503ApplicationProblemPlusJSONResponse) VisitReadIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReadIndividualApplicationDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadIndividualApplicationDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitReadIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReplaceIndividualApplicationDataSubscriptionRequestObject struct {
	SubsId string `json:"subsId"`
	Body   *ReplaceIndividualApplicationDataSubscriptionJSONRequestBody
}

type ReplaceIndividualApplicationDataSubscriptionResponseObject interface {
	VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error
}

type ReplaceIndividualApplicationDataSubscription200JSONResponse externalRef5.ApplicationDataSubs

func (response ReplaceIndividualApplicationDataSubscription200JSONResponse) VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef5.ApplicationDataSubs(response))
}

type ReplaceIndividualApplicationDataSubscription204Response struct {
}

func (response ReplaceIndividualApplicationDataSubscription204Response) VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ReplaceIndividualApplicationDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualApplicationDataSubscription400ApplicationProblemPlusJSONResponse) VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualApplicationDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualApplicationDataSubscription401ApplicationProblemPlusJSONResponse) VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualApplicationDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualApplicationDataSubscription403ApplicationProblemPlusJSONResponse) VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualApplicationDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualApplicationDataSubscription404ApplicationProblemPlusJSONResponse) VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualApplicationDataSubscription411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualApplicationDataSubscription411ApplicationProblemPlusJSONResponse) VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualApplicationDataSubscription413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualApplicationDataSubscription413ApplicationProblemPlusJSONResponse) VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualApplicationDataSubscription415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualApplicationDataSubscription415ApplicationProblemPlusJSONResponse) VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualApplicationDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualApplicationDataSubscription429ApplicationProblemPlusJSONResponse) VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualApplicationDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualApplicationDataSubscription500ApplicationProblemPlusJSONResponse) VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualApplicationDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualApplicationDataSubscription503ApplicationProblemPlusJSONResponse) VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualApplicationDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReplaceIndividualApplicationDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIndividualExposureDataSubscriptionRequestObject struct {
	Body *CreateIndividualExposureDataSubscriptionJSONRequestBody
}

type CreateIndividualExposureDataSubscriptionResponseObject interface {
	VisitCreateIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error
}

type CreateIndividualExposureDataSubscription201ResponseHeaders struct {
	Location string
}

type CreateIndividualExposureDataSubscription201JSONResponse struct {
	Body    externalRef6.ExposureDataSubscription
	Headers CreateIndividualExposureDataSubscription201ResponseHeaders
}

func (response CreateIndividualExposureDataSubscription201JSONResponse) VisitCreateIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIndividualExposureDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualExposureDataSubscription400ApplicationProblemPlusJSONResponse) VisitCreateIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type CreateIndividualExposureDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualExposureDataSubscription401ApplicationProblemPlusJSONResponse) VisitCreateIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type CreateIndividualExposureDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualExposureDataSubscription403ApplicationProblemPlusJSONResponse) VisitCreateIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type CreateIndividualExposureDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualExposureDataSubscription404ApplicationProblemPlusJSONResponse) VisitCreateIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type CreateIndividualExposureDataSubscription411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualExposureDataSubscription411ApplicationProblemPlusJSONResponse) VisitCreateIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type CreateIndividualExposureDataSubscription413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualExposureDataSubscription413ApplicationProblemPlusJSONResponse) VisitCreateIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type CreateIndividualExposureDataSubscription415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualExposureDataSubscription415ApplicationProblemPlusJSONResponse) VisitCreateIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type CreateIndividualExposureDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualExposureDataSubscription429ApplicationProblemPlusJSONResponse) VisitCreateIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type CreateIndividualExposureDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualExposureDataSubscription500ApplicationProblemPlusJSONResponse) VisitCreateIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type CreateIndividualExposureDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualExposureDataSubscription503ApplicationProblemPlusJSONResponse) VisitCreateIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type CreateIndividualExposureDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateIndividualExposureDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitCreateIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualExposureDataSubscriptionRequestObject struct {
	SubId string `json:"subId"`
}

type DeleteIndividualExposureDataSubscriptionResponseObject interface {
	VisitDeleteIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error
}

type DeleteIndividualExposureDataSubscription204Response struct {
}

func (response DeleteIndividualExposureDataSubscription204Response) VisitDeleteIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIndividualExposureDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualExposureDataSubscription400ApplicationProblemPlusJSONResponse) VisitDeleteIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualExposureDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualExposureDataSubscription401ApplicationProblemPlusJSONResponse) VisitDeleteIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualExposureDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualExposureDataSubscription403ApplicationProblemPlusJSONResponse) VisitDeleteIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualExposureDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualExposureDataSubscription404ApplicationProblemPlusJSONResponse) VisitDeleteIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualExposureDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualExposureDataSubscription429ApplicationProblemPlusJSONResponse) VisitDeleteIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualExposureDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualExposureDataSubscription500ApplicationProblemPlusJSONResponse) VisitDeleteIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualExposureDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualExposureDataSubscription503ApplicationProblemPlusJSONResponse) VisitDeleteIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualExposureDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteIndividualExposureDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitDeleteIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReplaceIndividualExposureDataSubscriptionRequestObject struct {
	SubId string `json:"subId"`
	Body  *ReplaceIndividualExposureDataSubscriptionJSONRequestBody
}

type ReplaceIndividualExposureDataSubscriptionResponseObject interface {
	VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error
}

type ReplaceIndividualExposureDataSubscription200JSONResponse externalRef6.ExposureDataSubscription

func (response ReplaceIndividualExposureDataSubscription200JSONResponse) VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef6.ExposureDataSubscription(response))
}

type ReplaceIndividualExposureDataSubscription204Response struct {
}

func (response ReplaceIndividualExposureDataSubscription204Response) VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ReplaceIndividualExposureDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualExposureDataSubscription400ApplicationProblemPlusJSONResponse) VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualExposureDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualExposureDataSubscription401ApplicationProblemPlusJSONResponse) VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualExposureDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualExposureDataSubscription403ApplicationProblemPlusJSONResponse) VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualExposureDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualExposureDataSubscription404ApplicationProblemPlusJSONResponse) VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualExposureDataSubscription411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualExposureDataSubscription411ApplicationProblemPlusJSONResponse) VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualExposureDataSubscription413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualExposureDataSubscription413ApplicationProblemPlusJSONResponse) VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualExposureDataSubscription415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualExposureDataSubscription415ApplicationProblemPlusJSONResponse) VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualExposureDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualExposureDataSubscription429ApplicationProblemPlusJSONResponse) VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualExposureDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualExposureDataSubscription500ApplicationProblemPlusJSONResponse) VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualExposureDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualExposureDataSubscription503ApplicationProblemPlusJSONResponse) VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualExposureDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReplaceIndividualExposureDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteAccessAndMobilityDataRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
}

type DeleteAccessAndMobilityDataResponseObject interface {
	VisitDeleteAccessAndMobilityDataResponse(w http.ResponseWriter) error
}

type DeleteAccessAndMobilityData204Response struct {
}

func (response DeleteAccessAndMobilityData204Response) VisitDeleteAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAccessAndMobilityData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteAccessAndMobilityData400ApplicationProblemPlusJSONResponse) VisitDeleteAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type DeleteAccessAndMobilityData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteAccessAndMobilityData401ApplicationProblemPlusJSONResponse) VisitDeleteAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type DeleteAccessAndMobilityData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteAccessAndMobilityData403ApplicationProblemPlusJSONResponse) VisitDeleteAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type DeleteAccessAndMobilityData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteAccessAndMobilityData404ApplicationProblemPlusJSONResponse) VisitDeleteAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type DeleteAccessAndMobilityData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteAccessAndMobilityData429ApplicationProblemPlusJSONResponse) VisitDeleteAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type DeleteAccessAndMobilityData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteAccessAndMobilityData500ApplicationProblemPlusJSONResponse) VisitDeleteAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type DeleteAccessAndMobilityData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteAccessAndMobilityData503ApplicationProblemPlusJSONResponse) VisitDeleteAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type DeleteAccessAndMobilityDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteAccessAndMobilityDatadefaultApplicationProblemPlusJSONResponse) VisitDeleteAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryAccessAndMobilityDataRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params QueryAccessAndMobilityDataParams
}

type QueryAccessAndMobilityDataResponseObject interface {
	VisitQueryAccessAndMobilityDataResponse(w http.ResponseWriter) error
}

type QueryAccessAndMobilityData200JSONResponse externalRef6.AccessAndMobilityData

func (response QueryAccessAndMobilityData200JSONResponse) VisitQueryAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef6.AccessAndMobilityData(response))
}

type QueryAccessAndMobilityData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response QueryAccessAndMobilityData400ApplicationProblemPlusJSONResponse) VisitQueryAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type QueryAccessAndMobilityData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response QueryAccessAndMobilityData401ApplicationProblemPlusJSONResponse) VisitQueryAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type QueryAccessAndMobilityData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response QueryAccessAndMobilityData403ApplicationProblemPlusJSONResponse) VisitQueryAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type QueryAccessAndMobilityData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response QueryAccessAndMobilityData404ApplicationProblemPlusJSONResponse) VisitQueryAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type QueryAccessAndMobilityData406Response externalRef0.N406Response

func (response QueryAccessAndMobilityData406Response) VisitQueryAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type QueryAccessAndMobilityData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response QueryAccessAndMobilityData414ApplicationProblemPlusJSONResponse) VisitQueryAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N414ApplicationProblemPlusJSONResponse))
}

type QueryAccessAndMobilityData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response QueryAccessAndMobilityData429ApplicationProblemPlusJSONResponse) VisitQueryAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type QueryAccessAndMobilityData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response QueryAccessAndMobilityData500ApplicationProblemPlusJSONResponse) VisitQueryAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type QueryAccessAndMobilityData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response QueryAccessAndMobilityData503ApplicationProblemPlusJSONResponse) VisitQueryAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type QueryAccessAndMobilityDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryAccessAndMobilityDatadefaultApplicationProblemPlusJSONResponse) VisitQueryAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateAccessAndMobilityDataRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
	Body *UpdateAccessAndMobilityDataApplicationMergePatchPlusJSONRequestBody
}

type UpdateAccessAndMobilityDataResponseObject interface {
	VisitUpdateAccessAndMobilityDataResponse(w http.ResponseWriter) error
}

type UpdateAccessAndMobilityData204Response struct {
}

func (response UpdateAccessAndMobilityData204Response) VisitUpdateAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateAccessAndMobilityData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response UpdateAccessAndMobilityData400ApplicationProblemPlusJSONResponse) VisitUpdateAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type UpdateAccessAndMobilityData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response UpdateAccessAndMobilityData401ApplicationProblemPlusJSONResponse) VisitUpdateAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type UpdateAccessAndMobilityData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response UpdateAccessAndMobilityData403ApplicationProblemPlusJSONResponse) VisitUpdateAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type UpdateAccessAndMobilityData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response UpdateAccessAndMobilityData404ApplicationProblemPlusJSONResponse) VisitUpdateAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type UpdateAccessAndMobilityData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response UpdateAccessAndMobilityData411ApplicationProblemPlusJSONResponse) VisitUpdateAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type UpdateAccessAndMobilityData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response UpdateAccessAndMobilityData413ApplicationProblemPlusJSONResponse) VisitUpdateAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type UpdateAccessAndMobilityData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response UpdateAccessAndMobilityData415ApplicationProblemPlusJSONResponse) VisitUpdateAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type UpdateAccessAndMobilityData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response UpdateAccessAndMobilityData429ApplicationProblemPlusJSONResponse) VisitUpdateAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type UpdateAccessAndMobilityData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response UpdateAccessAndMobilityData500ApplicationProblemPlusJSONResponse) VisitUpdateAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type UpdateAccessAndMobilityData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response UpdateAccessAndMobilityData503ApplicationProblemPlusJSONResponse) VisitUpdateAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type UpdateAccessAndMobilityDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UpdateAccessAndMobilityDatadefaultApplicationProblemPlusJSONResponse) VisitUpdateAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceAccessAndMobilityDataRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
	Body *CreateOrReplaceAccessAndMobilityDataJSONRequestBody
}

type CreateOrReplaceAccessAndMobilityDataResponseObject interface {
	VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error
}

type CreateOrReplaceAccessAndMobilityData200JSONResponse externalRef6.AccessAndMobilityData

func (response CreateOrReplaceAccessAndMobilityData200JSONResponse) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef6.AccessAndMobilityData(response))
}

type CreateOrReplaceAccessAndMobilityData201ResponseHeaders struct {
	Location string
}

type CreateOrReplaceAccessAndMobilityData201JSONResponse struct {
	Body    externalRef6.AccessAndMobilityData
	Headers CreateOrReplaceAccessAndMobilityData201ResponseHeaders
}

func (response CreateOrReplaceAccessAndMobilityData201JSONResponse) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceAccessAndMobilityData204Response struct {
}

func (response CreateOrReplaceAccessAndMobilityData204Response) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateOrReplaceAccessAndMobilityData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceAccessAndMobilityData400ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceAccessAndMobilityData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceAccessAndMobilityData401ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceAccessAndMobilityData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceAccessAndMobilityData403ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceAccessAndMobilityData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceAccessAndMobilityData404ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceAccessAndMobilityData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceAccessAndMobilityData411ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceAccessAndMobilityData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceAccessAndMobilityData413ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceAccessAndMobilityData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceAccessAndMobilityData415ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceAccessAndMobilityData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceAccessAndMobilityData429ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceAccessAndMobilityData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceAccessAndMobilityData500ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceAccessAndMobilityData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceAccessAndMobilityData503ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceAccessAndMobilityDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateOrReplaceAccessAndMobilityDatadefaultApplicationProblemPlusJSONResponse) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteSessionManagementDataRequestObject struct {
	UeId         externalRef0.VarUeId      `json:"ueId"`
	PduSessionId externalRef0.PduSessionId `json:"pduSessionId"`
}

type DeleteSessionManagementDataResponseObject interface {
	VisitDeleteSessionManagementDataResponse(w http.ResponseWriter) error
}

type DeleteSessionManagementData204Response struct {
}

func (response DeleteSessionManagementData204Response) VisitDeleteSessionManagementDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteSessionManagementData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteSessionManagementData400ApplicationProblemPlusJSONResponse) VisitDeleteSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type DeleteSessionManagementData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteSessionManagementData401ApplicationProblemPlusJSONResponse) VisitDeleteSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type DeleteSessionManagementData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteSessionManagementData403ApplicationProblemPlusJSONResponse) VisitDeleteSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type DeleteSessionManagementData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteSessionManagementData404ApplicationProblemPlusJSONResponse) VisitDeleteSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type DeleteSessionManagementData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteSessionManagementData429ApplicationProblemPlusJSONResponse) VisitDeleteSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type DeleteSessionManagementData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteSessionManagementData500ApplicationProblemPlusJSONResponse) VisitDeleteSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type DeleteSessionManagementData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteSessionManagementData503ApplicationProblemPlusJSONResponse) VisitDeleteSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type DeleteSessionManagementDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteSessionManagementDatadefaultApplicationProblemPlusJSONResponse) VisitDeleteSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySessionManagementDataRequestObject struct {
	UeId         externalRef0.VarUeId      `json:"ueId"`
	PduSessionId externalRef0.PduSessionId `json:"pduSessionId"`
	Params       QuerySessionManagementDataParams
}

type QuerySessionManagementDataResponseObject interface {
	VisitQuerySessionManagementDataResponse(w http.ResponseWriter) error
}

type QuerySessionManagementData200JSONResponse externalRef6.PduSessionManagementData

func (response QuerySessionManagementData200JSONResponse) VisitQuerySessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef6.PduSessionManagementData(response))
}

type QuerySessionManagementData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response QuerySessionManagementData400ApplicationProblemPlusJSONResponse) VisitQuerySessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type QuerySessionManagementData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response QuerySessionManagementData401ApplicationProblemPlusJSONResponse) VisitQuerySessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type QuerySessionManagementData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response QuerySessionManagementData403ApplicationProblemPlusJSONResponse) VisitQuerySessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type QuerySessionManagementData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response QuerySessionManagementData404ApplicationProblemPlusJSONResponse) VisitQuerySessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type QuerySessionManagementData406Response externalRef0.N406Response

func (response QuerySessionManagementData406Response) VisitQuerySessionManagementDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type QuerySessionManagementData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response QuerySessionManagementData414ApplicationProblemPlusJSONResponse) VisitQuerySessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N414ApplicationProblemPlusJSONResponse))
}

type QuerySessionManagementData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response QuerySessionManagementData429ApplicationProblemPlusJSONResponse) VisitQuerySessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type QuerySessionManagementData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response QuerySessionManagementData500ApplicationProblemPlusJSONResponse) VisitQuerySessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type QuerySessionManagementData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response QuerySessionManagementData503ApplicationProblemPlusJSONResponse) VisitQuerySessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type QuerySessionManagementDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QuerySessionManagementDatadefaultApplicationProblemPlusJSONResponse) VisitQuerySessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceSessionManagementDataRequestObject struct {
	UeId         externalRef0.VarUeId      `json:"ueId"`
	PduSessionId externalRef0.PduSessionId `json:"pduSessionId"`
	Body         *CreateOrReplaceSessionManagementDataJSONRequestBody
}

type CreateOrReplaceSessionManagementDataResponseObject interface {
	VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error
}

type CreateOrReplaceSessionManagementData200JSONResponse externalRef6.AccessAndMobilityData

func (response CreateOrReplaceSessionManagementData200JSONResponse) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef6.AccessAndMobilityData(response))
}

type CreateOrReplaceSessionManagementData201ResponseHeaders struct {
	Location string
}

type CreateOrReplaceSessionManagementData201JSONResponse struct {
	Body    externalRef6.PduSessionManagementData
	Headers CreateOrReplaceSessionManagementData201ResponseHeaders
}

func (response CreateOrReplaceSessionManagementData201JSONResponse) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceSessionManagementData204Response struct {
}

func (response CreateOrReplaceSessionManagementData204Response) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateOrReplaceSessionManagementData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceSessionManagementData400ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceSessionManagementData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceSessionManagementData401ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceSessionManagementData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceSessionManagementData403ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceSessionManagementData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceSessionManagementData404ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceSessionManagementData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceSessionManagementData411ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceSessionManagementData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceSessionManagementData413ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceSessionManagementData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceSessionManagementData415ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceSessionManagementData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceSessionManagementData429ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceSessionManagementData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceSessionManagementData500ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceSessionManagementData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceSessionManagementData503ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceSessionManagementDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateOrReplaceSessionManagementDatadefaultApplicationProblemPlusJSONResponse) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadBdtDataRequestObject struct {
	Params ReadBdtDataParams
}

type ReadBdtDataResponseObject interface {
	VisitReadBdtDataResponse(w http.ResponseWriter) error
}

type ReadBdtData200JSONResponse []externalRef7.BdtData

func (response ReadBdtData200JSONResponse) VisitReadBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadBdtData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadBdtData400ApplicationProblemPlusJSONResponse) VisitReadBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReadBdtData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadBdtData401ApplicationProblemPlusJSONResponse) VisitReadBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReadBdtData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadBdtData403ApplicationProblemPlusJSONResponse) VisitReadBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReadBdtData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadBdtData404ApplicationProblemPlusJSONResponse) VisitReadBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReadBdtData406Response externalRef0.N406Response

func (response ReadBdtData406Response) VisitReadBdtDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadBdtData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadBdtData429ApplicationProblemPlusJSONResponse) VisitReadBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReadBdtData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadBdtData500ApplicationProblemPlusJSONResponse) VisitReadBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReadBdtData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadBdtData503ApplicationProblemPlusJSONResponse) VisitReadBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReadBdtDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadBdtDatadefaultApplicationProblemPlusJSONResponse) VisitReadBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualBdtDataRequestObject struct {
	BdtReferenceId string `json:"bdtReferenceId"`
}

type DeleteIndividualBdtDataResponseObject interface {
	VisitDeleteIndividualBdtDataResponse(w http.ResponseWriter) error
}

type DeleteIndividualBdtData204Response struct {
}

func (response DeleteIndividualBdtData204Response) VisitDeleteIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIndividualBdtData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualBdtData400ApplicationProblemPlusJSONResponse) VisitDeleteIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualBdtData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualBdtData401ApplicationProblemPlusJSONResponse) VisitDeleteIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualBdtData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualBdtData403ApplicationProblemPlusJSONResponse) VisitDeleteIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualBdtData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualBdtData404ApplicationProblemPlusJSONResponse) VisitDeleteIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualBdtData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualBdtData429ApplicationProblemPlusJSONResponse) VisitDeleteIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualBdtData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualBdtData500ApplicationProblemPlusJSONResponse) VisitDeleteIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualBdtData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualBdtData503ApplicationProblemPlusJSONResponse) VisitDeleteIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualBdtDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteIndividualBdtDatadefaultApplicationProblemPlusJSONResponse) VisitDeleteIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadIndividualBdtDataRequestObject struct {
	BdtReferenceId string `json:"bdtReferenceId"`
	Params         ReadIndividualBdtDataParams
}

type ReadIndividualBdtDataResponseObject interface {
	VisitReadIndividualBdtDataResponse(w http.ResponseWriter) error
}

type ReadIndividualBdtData200JSONResponse externalRef7.BdtData

func (response ReadIndividualBdtData200JSONResponse) VisitReadIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef7.BdtData(response))
}

type ReadIndividualBdtData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualBdtData400ApplicationProblemPlusJSONResponse) VisitReadIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReadIndividualBdtData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualBdtData401ApplicationProblemPlusJSONResponse) VisitReadIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReadIndividualBdtData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualBdtData403ApplicationProblemPlusJSONResponse) VisitReadIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReadIndividualBdtData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualBdtData404ApplicationProblemPlusJSONResponse) VisitReadIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReadIndividualBdtData406Response externalRef0.N406Response

func (response ReadIndividualBdtData406Response) VisitReadIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadIndividualBdtData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualBdtData429ApplicationProblemPlusJSONResponse) VisitReadIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReadIndividualBdtData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualBdtData500ApplicationProblemPlusJSONResponse) VisitReadIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReadIndividualBdtData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualBdtData503ApplicationProblemPlusJSONResponse) VisitReadIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReadIndividualBdtDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadIndividualBdtDatadefaultApplicationProblemPlusJSONResponse) VisitReadIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateIndividualBdtDataRequestObject struct {
	BdtReferenceId string `json:"bdtReferenceId"`
	Body           *UpdateIndividualBdtDataApplicationMergePatchPlusJSONRequestBody
}

type UpdateIndividualBdtDataResponseObject interface {
	VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error
}

type UpdateIndividualBdtData200JSONResponse externalRef7.BdtData

func (response UpdateIndividualBdtData200JSONResponse) VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef7.BdtData(response))
}

type UpdateIndividualBdtData204Response struct {
}

func (response UpdateIndividualBdtData204Response) VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateIndividualBdtData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualBdtData400ApplicationProblemPlusJSONResponse) VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualBdtData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualBdtData401ApplicationProblemPlusJSONResponse) VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualBdtData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualBdtData403ApplicationProblemPlusJSONResponse) VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualBdtData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualBdtData404ApplicationProblemPlusJSONResponse) VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualBdtData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualBdtData411ApplicationProblemPlusJSONResponse) VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualBdtData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualBdtData413ApplicationProblemPlusJSONResponse) VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualBdtData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualBdtData415ApplicationProblemPlusJSONResponse) VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualBdtData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualBdtData429ApplicationProblemPlusJSONResponse) VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualBdtData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualBdtData500ApplicationProblemPlusJSONResponse) VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualBdtData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualBdtData503ApplicationProblemPlusJSONResponse) VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type UpdateIndividualBdtDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UpdateIndividualBdtDatadefaultApplicationProblemPlusJSONResponse) VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIndividualBdtDataRequestObject struct {
	BdtReferenceId string `json:"bdtReferenceId"`
	Body           *CreateIndividualBdtDataJSONRequestBody
}

type CreateIndividualBdtDataResponseObject interface {
	VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error
}

type CreateIndividualBdtData201ResponseHeaders struct {
	Location string
}

type CreateIndividualBdtData201JSONResponse struct {
	Body    externalRef7.BdtData
	Headers CreateIndividualBdtData201ResponseHeaders
}

func (response CreateIndividualBdtData201JSONResponse) VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIndividualBdtData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualBdtData400ApplicationProblemPlusJSONResponse) VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type CreateIndividualBdtData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualBdtData401ApplicationProblemPlusJSONResponse) VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type CreateIndividualBdtData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualBdtData403ApplicationProblemPlusJSONResponse) VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type CreateIndividualBdtData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualBdtData404ApplicationProblemPlusJSONResponse) VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type CreateIndividualBdtData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualBdtData411ApplicationProblemPlusJSONResponse) VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type CreateIndividualBdtData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualBdtData413ApplicationProblemPlusJSONResponse) VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type CreateIndividualBdtData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualBdtData414ApplicationProblemPlusJSONResponse) VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N414ApplicationProblemPlusJSONResponse))
}

type CreateIndividualBdtData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualBdtData415ApplicationProblemPlusJSONResponse) VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type CreateIndividualBdtData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualBdtData429ApplicationProblemPlusJSONResponse) VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type CreateIndividualBdtData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualBdtData500ApplicationProblemPlusJSONResponse) VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type CreateIndividualBdtData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualBdtData503ApplicationProblemPlusJSONResponse) VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type CreateIndividualBdtDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateIndividualBdtDatadefaultApplicationProblemPlusJSONResponse) VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadPlmnUePolicySetRequestObject struct {
	PlmnId string `json:"plmnId"`
}

type ReadPlmnUePolicySetResponseObject interface {
	VisitReadPlmnUePolicySetResponse(w http.ResponseWriter) error
}

type ReadPlmnUePolicySet200JSONResponse externalRef7.UePolicySet

func (response ReadPlmnUePolicySet200JSONResponse) VisitReadPlmnUePolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef7.UePolicySet(response))
}

type ReadPlmnUePolicySet400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadPlmnUePolicySet400ApplicationProblemPlusJSONResponse) VisitReadPlmnUePolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReadPlmnUePolicySet401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadPlmnUePolicySet401ApplicationProblemPlusJSONResponse) VisitReadPlmnUePolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReadPlmnUePolicySet403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadPlmnUePolicySet403ApplicationProblemPlusJSONResponse) VisitReadPlmnUePolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReadPlmnUePolicySet404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadPlmnUePolicySet404ApplicationProblemPlusJSONResponse) VisitReadPlmnUePolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReadPlmnUePolicySet406Response externalRef0.N406Response

func (response ReadPlmnUePolicySet406Response) VisitReadPlmnUePolicySetResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadPlmnUePolicySet412ApplicationProblemPlusJSONResponse struct {
	externalRef0.N412ApplicationProblemPlusJSONResponse
}

func (response ReadPlmnUePolicySet412ApplicationProblemPlusJSONResponse) VisitReadPlmnUePolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N412ApplicationProblemPlusJSONResponse))
}

type ReadPlmnUePolicySet429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadPlmnUePolicySet429ApplicationProblemPlusJSONResponse) VisitReadPlmnUePolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReadPlmnUePolicySet500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadPlmnUePolicySet500ApplicationProblemPlusJSONResponse) VisitReadPlmnUePolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReadPlmnUePolicySet503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadPlmnUePolicySet503ApplicationProblemPlusJSONResponse) VisitReadPlmnUePolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReadPlmnUePolicySetdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadPlmnUePolicySetdefaultApplicationProblemPlusJSONResponse) VisitReadPlmnUePolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadSponsorConnectivityDataRequestObject struct {
	SponsorId string `json:"sponsorId"`
}

type ReadSponsorConnectivityDataResponseObject interface {
	VisitReadSponsorConnectivityDataResponse(w http.ResponseWriter) error
}

type ReadSponsorConnectivityData200JSONResponse externalRef7.SponsorConnectivityData

func (response ReadSponsorConnectivityData200JSONResponse) VisitReadSponsorConnectivityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef7.SponsorConnectivityData(response))
}

type ReadSponsorConnectivityData204Response struct {
}

func (response ReadSponsorConnectivityData204Response) VisitReadSponsorConnectivityDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ReadSponsorConnectivityData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadSponsorConnectivityData400ApplicationProblemPlusJSONResponse) VisitReadSponsorConnectivityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReadSponsorConnectivityData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadSponsorConnectivityData401ApplicationProblemPlusJSONResponse) VisitReadSponsorConnectivityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReadSponsorConnectivityData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadSponsorConnectivityData403ApplicationProblemPlusJSONResponse) VisitReadSponsorConnectivityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReadSponsorConnectivityData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadSponsorConnectivityData404ApplicationProblemPlusJSONResponse) VisitReadSponsorConnectivityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReadSponsorConnectivityData406Response externalRef0.N406Response

func (response ReadSponsorConnectivityData406Response) VisitReadSponsorConnectivityDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadSponsorConnectivityData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadSponsorConnectivityData429ApplicationProblemPlusJSONResponse) VisitReadSponsorConnectivityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReadSponsorConnectivityData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadSponsorConnectivityData500ApplicationProblemPlusJSONResponse) VisitReadSponsorConnectivityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReadSponsorConnectivityData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadSponsorConnectivityData503ApplicationProblemPlusJSONResponse) VisitReadSponsorConnectivityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReadSponsorConnectivityDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadSponsorConnectivityDatadefaultApplicationProblemPlusJSONResponse) VisitReadSponsorConnectivityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIndividualPolicyDataSubscriptionRequestObject struct {
	Body *CreateIndividualPolicyDataSubscriptionJSONRequestBody
}

type CreateIndividualPolicyDataSubscriptionResponseObject interface {
	VisitCreateIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error
}

type CreateIndividualPolicyDataSubscription201ResponseHeaders struct {
	Location string
}

type CreateIndividualPolicyDataSubscription201JSONResponse struct {
	Body    externalRef7.PolicyDataSubscription
	Headers CreateIndividualPolicyDataSubscription201ResponseHeaders
}

func (response CreateIndividualPolicyDataSubscription201JSONResponse) VisitCreateIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIndividualPolicyDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualPolicyDataSubscription400ApplicationProblemPlusJSONResponse) VisitCreateIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type CreateIndividualPolicyDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualPolicyDataSubscription401ApplicationProblemPlusJSONResponse) VisitCreateIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type CreateIndividualPolicyDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualPolicyDataSubscription403ApplicationProblemPlusJSONResponse) VisitCreateIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type CreateIndividualPolicyDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualPolicyDataSubscription404ApplicationProblemPlusJSONResponse) VisitCreateIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type CreateIndividualPolicyDataSubscription411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualPolicyDataSubscription411ApplicationProblemPlusJSONResponse) VisitCreateIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type CreateIndividualPolicyDataSubscription413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualPolicyDataSubscription413ApplicationProblemPlusJSONResponse) VisitCreateIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type CreateIndividualPolicyDataSubscription415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualPolicyDataSubscription415ApplicationProblemPlusJSONResponse) VisitCreateIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type CreateIndividualPolicyDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualPolicyDataSubscription429ApplicationProblemPlusJSONResponse) VisitCreateIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type CreateIndividualPolicyDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualPolicyDataSubscription500ApplicationProblemPlusJSONResponse) VisitCreateIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type CreateIndividualPolicyDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualPolicyDataSubscription503ApplicationProblemPlusJSONResponse) VisitCreateIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type CreateIndividualPolicyDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateIndividualPolicyDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitCreateIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualPolicyDataSubscriptionRequestObject struct {
	SubsId string `json:"subsId"`
}

type DeleteIndividualPolicyDataSubscriptionResponseObject interface {
	VisitDeleteIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error
}

type DeleteIndividualPolicyDataSubscription204Response struct {
}

func (response DeleteIndividualPolicyDataSubscription204Response) VisitDeleteIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIndividualPolicyDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPolicyDataSubscription400ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualPolicyDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPolicyDataSubscription401ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualPolicyDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPolicyDataSubscription403ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualPolicyDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPolicyDataSubscription404ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualPolicyDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPolicyDataSubscription429ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualPolicyDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPolicyDataSubscription500ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualPolicyDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPolicyDataSubscription503ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualPolicyDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteIndividualPolicyDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitDeleteIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReplaceIndividualPolicyDataSubscriptionRequestObject struct {
	SubsId string `json:"subsId"`
	Body   *ReplaceIndividualPolicyDataSubscriptionJSONRequestBody
}

type ReplaceIndividualPolicyDataSubscriptionResponseObject interface {
	VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error
}

type ReplaceIndividualPolicyDataSubscription200JSONResponse externalRef7.PolicyDataSubscription

func (response ReplaceIndividualPolicyDataSubscription200JSONResponse) VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef7.PolicyDataSubscription(response))
}

type ReplaceIndividualPolicyDataSubscription204Response struct {
}

func (response ReplaceIndividualPolicyDataSubscription204Response) VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ReplaceIndividualPolicyDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualPolicyDataSubscription400ApplicationProblemPlusJSONResponse) VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualPolicyDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualPolicyDataSubscription401ApplicationProblemPlusJSONResponse) VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualPolicyDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualPolicyDataSubscription403ApplicationProblemPlusJSONResponse) VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualPolicyDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualPolicyDataSubscription404ApplicationProblemPlusJSONResponse) VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualPolicyDataSubscription411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualPolicyDataSubscription411ApplicationProblemPlusJSONResponse) VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualPolicyDataSubscription413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualPolicyDataSubscription413ApplicationProblemPlusJSONResponse) VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualPolicyDataSubscription415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualPolicyDataSubscription415ApplicationProblemPlusJSONResponse) VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualPolicyDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualPolicyDataSubscription429ApplicationProblemPlusJSONResponse) VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualPolicyDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualPolicyDataSubscription500ApplicationProblemPlusJSONResponse) VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualPolicyDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualPolicyDataSubscription503ApplicationProblemPlusJSONResponse) VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualPolicyDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReplaceIndividualPolicyDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadAccessAndMobilityPolicyDataRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
}

type ReadAccessAndMobilityPolicyDataResponseObject interface {
	VisitReadAccessAndMobilityPolicyDataResponse(w http.ResponseWriter) error
}

type ReadAccessAndMobilityPolicyData200JSONResponse externalRef7.AmPolicyData

func (response ReadAccessAndMobilityPolicyData200JSONResponse) VisitReadAccessAndMobilityPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef7.AmPolicyData(response))
}

type ReadAccessAndMobilityPolicyData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadAccessAndMobilityPolicyData400ApplicationProblemPlusJSONResponse) VisitReadAccessAndMobilityPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReadAccessAndMobilityPolicyData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadAccessAndMobilityPolicyData401ApplicationProblemPlusJSONResponse) VisitReadAccessAndMobilityPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReadAccessAndMobilityPolicyData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadAccessAndMobilityPolicyData403ApplicationProblemPlusJSONResponse) VisitReadAccessAndMobilityPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReadAccessAndMobilityPolicyData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadAccessAndMobilityPolicyData404ApplicationProblemPlusJSONResponse) VisitReadAccessAndMobilityPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReadAccessAndMobilityPolicyData406Response externalRef0.N406Response

func (response ReadAccessAndMobilityPolicyData406Response) VisitReadAccessAndMobilityPolicyDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadAccessAndMobilityPolicyData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadAccessAndMobilityPolicyData429ApplicationProblemPlusJSONResponse) VisitReadAccessAndMobilityPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReadAccessAndMobilityPolicyData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadAccessAndMobilityPolicyData500ApplicationProblemPlusJSONResponse) VisitReadAccessAndMobilityPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReadAccessAndMobilityPolicyData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadAccessAndMobilityPolicyData503ApplicationProblemPlusJSONResponse) VisitReadAccessAndMobilityPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReadAccessAndMobilityPolicyDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadAccessAndMobilityPolicyDatadefaultApplicationProblemPlusJSONResponse) VisitReadAccessAndMobilityPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadOperatorSpecificDataRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params ReadOperatorSpecificDataParams
}

type ReadOperatorSpecificDataResponseObject interface {
	VisitReadOperatorSpecificDataResponse(w http.ResponseWriter) error
}

type ReadOperatorSpecificData200JSONResponse map[string]interface{}

func (response ReadOperatorSpecificData200JSONResponse) VisitReadOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadOperatorSpecificData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadOperatorSpecificData400ApplicationProblemPlusJSONResponse) VisitReadOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReadOperatorSpecificData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadOperatorSpecificData401ApplicationProblemPlusJSONResponse) VisitReadOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReadOperatorSpecificData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadOperatorSpecificData403ApplicationProblemPlusJSONResponse) VisitReadOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReadOperatorSpecificData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadOperatorSpecificData404ApplicationProblemPlusJSONResponse) VisitReadOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReadOperatorSpecificData406Response externalRef0.N406Response

func (response ReadOperatorSpecificData406Response) VisitReadOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadOperatorSpecificData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response ReadOperatorSpecificData414ApplicationProblemPlusJSONResponse) VisitReadOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N414ApplicationProblemPlusJSONResponse))
}

type ReadOperatorSpecificData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadOperatorSpecificData429ApplicationProblemPlusJSONResponse) VisitReadOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReadOperatorSpecificData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadOperatorSpecificData500ApplicationProblemPlusJSONResponse) VisitReadOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReadOperatorSpecificData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadOperatorSpecificData503ApplicationProblemPlusJSONResponse) VisitReadOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReadOperatorSpecificDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadOperatorSpecificDatadefaultApplicationProblemPlusJSONResponse) VisitReadOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateOperatorSpecificDataRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
	Body *UpdateOperatorSpecificDataApplicationJSONPatchPlusJSONRequestBody
}

type UpdateOperatorSpecificDataResponseObject interface {
	VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error
}

type UpdateOperatorSpecificData200JSONResponse externalRef0.PatchResult

func (response UpdateOperatorSpecificData200JSONResponse) VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.PatchResult(response))
}

type UpdateOperatorSpecificData204Response struct {
}

func (response UpdateOperatorSpecificData204Response) VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateOperatorSpecificData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response UpdateOperatorSpecificData400ApplicationProblemPlusJSONResponse) VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type UpdateOperatorSpecificData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response UpdateOperatorSpecificData401ApplicationProblemPlusJSONResponse) VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type UpdateOperatorSpecificData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response UpdateOperatorSpecificData403ApplicationProblemPlusJSONResponse) VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type UpdateOperatorSpecificData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response UpdateOperatorSpecificData404ApplicationProblemPlusJSONResponse) VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type UpdateOperatorSpecificData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response UpdateOperatorSpecificData411ApplicationProblemPlusJSONResponse) VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type UpdateOperatorSpecificData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response UpdateOperatorSpecificData413ApplicationProblemPlusJSONResponse) VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type UpdateOperatorSpecificData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response UpdateOperatorSpecificData415ApplicationProblemPlusJSONResponse) VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type UpdateOperatorSpecificData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response UpdateOperatorSpecificData429ApplicationProblemPlusJSONResponse) VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type UpdateOperatorSpecificData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response UpdateOperatorSpecificData500ApplicationProblemPlusJSONResponse) VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type UpdateOperatorSpecificData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response UpdateOperatorSpecificData503ApplicationProblemPlusJSONResponse) VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type UpdateOperatorSpecificDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UpdateOperatorSpecificDatadefaultApplicationProblemPlusJSONResponse) VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReplaceOperatorSpecificDataRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
	Body *ReplaceOperatorSpecificDataJSONRequestBody
}

type ReplaceOperatorSpecificDataResponseObject interface {
	VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error
}

type ReplaceOperatorSpecificData200JSONResponse map[string]interface{}

func (response ReplaceOperatorSpecificData200JSONResponse) VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceOperatorSpecificData204Response struct {
}

func (response ReplaceOperatorSpecificData204Response) VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ReplaceOperatorSpecificData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReplaceOperatorSpecificData400ApplicationProblemPlusJSONResponse) VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReplaceOperatorSpecificData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReplaceOperatorSpecificData401ApplicationProblemPlusJSONResponse) VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReplaceOperatorSpecificData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReplaceOperatorSpecificData403ApplicationProblemPlusJSONResponse) VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReplaceOperatorSpecificData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReplaceOperatorSpecificData404ApplicationProblemPlusJSONResponse) VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReplaceOperatorSpecificData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response ReplaceOperatorSpecificData411ApplicationProblemPlusJSONResponse) VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type ReplaceOperatorSpecificData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response ReplaceOperatorSpecificData413ApplicationProblemPlusJSONResponse) VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type ReplaceOperatorSpecificData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response ReplaceOperatorSpecificData415ApplicationProblemPlusJSONResponse) VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type ReplaceOperatorSpecificData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReplaceOperatorSpecificData429ApplicationProblemPlusJSONResponse) VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReplaceOperatorSpecificData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReplaceOperatorSpecificData500ApplicationProblemPlusJSONResponse) VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReplaceOperatorSpecificData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReplaceOperatorSpecificData503ApplicationProblemPlusJSONResponse) VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReplaceOperatorSpecificDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReplaceOperatorSpecificDatadefaultApplicationProblemPlusJSONResponse) VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadSessionManagementPolicyDataRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params ReadSessionManagementPolicyDataParams
}

type ReadSessionManagementPolicyDataResponseObject interface {
	VisitReadSessionManagementPolicyDataResponse(w http.ResponseWriter) error
}

type ReadSessionManagementPolicyData200JSONResponse externalRef7.SmPolicyData

func (response ReadSessionManagementPolicyData200JSONResponse) VisitReadSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef7.SmPolicyData(response))
}

type ReadSessionManagementPolicyData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadSessionManagementPolicyData400ApplicationProblemPlusJSONResponse) VisitReadSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReadSessionManagementPolicyData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadSessionManagementPolicyData401ApplicationProblemPlusJSONResponse) VisitReadSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReadSessionManagementPolicyData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadSessionManagementPolicyData403ApplicationProblemPlusJSONResponse) VisitReadSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReadSessionManagementPolicyData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadSessionManagementPolicyData404ApplicationProblemPlusJSONResponse) VisitReadSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReadSessionManagementPolicyData406Response externalRef0.N406Response

func (response ReadSessionManagementPolicyData406Response) VisitReadSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadSessionManagementPolicyData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response ReadSessionManagementPolicyData414ApplicationProblemPlusJSONResponse) VisitReadSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N414ApplicationProblemPlusJSONResponse))
}

type ReadSessionManagementPolicyData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadSessionManagementPolicyData429ApplicationProblemPlusJSONResponse) VisitReadSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReadSessionManagementPolicyData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadSessionManagementPolicyData500ApplicationProblemPlusJSONResponse) VisitReadSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReadSessionManagementPolicyData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadSessionManagementPolicyData503ApplicationProblemPlusJSONResponse) VisitReadSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReadSessionManagementPolicyDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadSessionManagementPolicyDatadefaultApplicationProblemPlusJSONResponse) VisitReadSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateSessionManagementPolicyDataRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
	Body *UpdateSessionManagementPolicyDataApplicationMergePatchPlusJSONRequestBody
}

type UpdateSessionManagementPolicyDataResponseObject interface {
	VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error
}

type UpdateSessionManagementPolicyData200JSONResponse externalRef7.SmPolicyData

func (response UpdateSessionManagementPolicyData200JSONResponse) VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef7.SmPolicyData(response))
}

type UpdateSessionManagementPolicyData204Response struct {
}

func (response UpdateSessionManagementPolicyData204Response) VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateSessionManagementPolicyData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response UpdateSessionManagementPolicyData400ApplicationProblemPlusJSONResponse) VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type UpdateSessionManagementPolicyData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response UpdateSessionManagementPolicyData401ApplicationProblemPlusJSONResponse) VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type UpdateSessionManagementPolicyData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response UpdateSessionManagementPolicyData403ApplicationProblemPlusJSONResponse) VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type UpdateSessionManagementPolicyData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response UpdateSessionManagementPolicyData404ApplicationProblemPlusJSONResponse) VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type UpdateSessionManagementPolicyData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response UpdateSessionManagementPolicyData411ApplicationProblemPlusJSONResponse) VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type UpdateSessionManagementPolicyData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response UpdateSessionManagementPolicyData413ApplicationProblemPlusJSONResponse) VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type UpdateSessionManagementPolicyData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response UpdateSessionManagementPolicyData415ApplicationProblemPlusJSONResponse) VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type UpdateSessionManagementPolicyData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response UpdateSessionManagementPolicyData429ApplicationProblemPlusJSONResponse) VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type UpdateSessionManagementPolicyData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response UpdateSessionManagementPolicyData500ApplicationProblemPlusJSONResponse) VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type UpdateSessionManagementPolicyData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response UpdateSessionManagementPolicyData503ApplicationProblemPlusJSONResponse) VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type UpdateSessionManagementPolicyDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UpdateSessionManagementPolicyDatadefaultApplicationProblemPlusJSONResponse) VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteUsageMonitoringInformationRequestObject struct {
	UeId       externalRef0.VarUeId `json:"ueId"`
	UsageMonId string               `json:"usageMonId"`
}

type DeleteUsageMonitoringInformationResponseObject interface {
	VisitDeleteUsageMonitoringInformationResponse(w http.ResponseWriter) error
}

type DeleteUsageMonitoringInformation204Response struct {
}

func (response DeleteUsageMonitoringInformation204Response) VisitDeleteUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUsageMonitoringInformation400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteUsageMonitoringInformation400ApplicationProblemPlusJSONResponse) VisitDeleteUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type DeleteUsageMonitoringInformation401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteUsageMonitoringInformation401ApplicationProblemPlusJSONResponse) VisitDeleteUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type DeleteUsageMonitoringInformation403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteUsageMonitoringInformation403ApplicationProblemPlusJSONResponse) VisitDeleteUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type DeleteUsageMonitoringInformation404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteUsageMonitoringInformation404ApplicationProblemPlusJSONResponse) VisitDeleteUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type DeleteUsageMonitoringInformation429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteUsageMonitoringInformation429ApplicationProblemPlusJSONResponse) VisitDeleteUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type DeleteUsageMonitoringInformation500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteUsageMonitoringInformation500ApplicationProblemPlusJSONResponse) VisitDeleteUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type DeleteUsageMonitoringInformation503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteUsageMonitoringInformation503ApplicationProblemPlusJSONResponse) VisitDeleteUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type DeleteUsageMonitoringInformationdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteUsageMonitoringInformationdefaultApplicationProblemPlusJSONResponse) VisitDeleteUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadUsageMonitoringInformationRequestObject struct {
	UeId       externalRef0.VarUeId `json:"ueId"`
	UsageMonId string               `json:"usageMonId"`
	Params     ReadUsageMonitoringInformationParams
}

type ReadUsageMonitoringInformationResponseObject interface {
	VisitReadUsageMonitoringInformationResponse(w http.ResponseWriter) error
}

type ReadUsageMonitoringInformation200JSONResponse externalRef7.UsageMonData

func (response ReadUsageMonitoringInformation200JSONResponse) VisitReadUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef7.UsageMonData(response))
}

type ReadUsageMonitoringInformation204Response struct {
}

func (response ReadUsageMonitoringInformation204Response) VisitReadUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ReadUsageMonitoringInformation400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadUsageMonitoringInformation400ApplicationProblemPlusJSONResponse) VisitReadUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReadUsageMonitoringInformation401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadUsageMonitoringInformation401ApplicationProblemPlusJSONResponse) VisitReadUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReadUsageMonitoringInformation403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadUsageMonitoringInformation403ApplicationProblemPlusJSONResponse) VisitReadUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReadUsageMonitoringInformation404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadUsageMonitoringInformation404ApplicationProblemPlusJSONResponse) VisitReadUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReadUsageMonitoringInformation406Response externalRef0.N406Response

func (response ReadUsageMonitoringInformation406Response) VisitReadUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadUsageMonitoringInformation414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response ReadUsageMonitoringInformation414ApplicationProblemPlusJSONResponse) VisitReadUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N414ApplicationProblemPlusJSONResponse))
}

type ReadUsageMonitoringInformation429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadUsageMonitoringInformation429ApplicationProblemPlusJSONResponse) VisitReadUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReadUsageMonitoringInformation500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadUsageMonitoringInformation500ApplicationProblemPlusJSONResponse) VisitReadUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReadUsageMonitoringInformation503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadUsageMonitoringInformation503ApplicationProblemPlusJSONResponse) VisitReadUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReadUsageMonitoringInformationdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadUsageMonitoringInformationdefaultApplicationProblemPlusJSONResponse) VisitReadUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateUsageMonitoringResourceRequestObject struct {
	UeId       externalRef0.VarUeId `json:"ueId"`
	UsageMonId string               `json:"usageMonId"`
	Body       *CreateUsageMonitoringResourceJSONRequestBody
}

type CreateUsageMonitoringResourceResponseObject interface {
	VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error
}

type CreateUsageMonitoringResource201ResponseHeaders struct {
	Location string
}

type CreateUsageMonitoringResource201JSONResponse struct {
	Body    externalRef7.UsageMonData
	Headers CreateUsageMonitoringResource201ResponseHeaders
}

func (response CreateUsageMonitoringResource201JSONResponse) VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateUsageMonitoringResource400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateUsageMonitoringResource400ApplicationProblemPlusJSONResponse) VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type CreateUsageMonitoringResource401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateUsageMonitoringResource401ApplicationProblemPlusJSONResponse) VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type CreateUsageMonitoringResource403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateUsageMonitoringResource403ApplicationProblemPlusJSONResponse) VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type CreateUsageMonitoringResource404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateUsageMonitoringResource404ApplicationProblemPlusJSONResponse) VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type CreateUsageMonitoringResource411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateUsageMonitoringResource411ApplicationProblemPlusJSONResponse) VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type CreateUsageMonitoringResource413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateUsageMonitoringResource413ApplicationProblemPlusJSONResponse) VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type CreateUsageMonitoringResource414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response CreateUsageMonitoringResource414ApplicationProblemPlusJSONResponse) VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N414ApplicationProblemPlusJSONResponse))
}

type CreateUsageMonitoringResource415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateUsageMonitoringResource415ApplicationProblemPlusJSONResponse) VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type CreateUsageMonitoringResource429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateUsageMonitoringResource429ApplicationProblemPlusJSONResponse) VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type CreateUsageMonitoringResource500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateUsageMonitoringResource500ApplicationProblemPlusJSONResponse) VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type CreateUsageMonitoringResource503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateUsageMonitoringResource503ApplicationProblemPlusJSONResponse) VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type CreateUsageMonitoringResourcedefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateUsageMonitoringResourcedefaultApplicationProblemPlusJSONResponse) VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadUEPolicySetRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params ReadUEPolicySetParams
}

type ReadUEPolicySetResponseObject interface {
	VisitReadUEPolicySetResponse(w http.ResponseWriter) error
}

type ReadUEPolicySet200JSONResponse externalRef7.UePolicySet

func (response ReadUEPolicySet200JSONResponse) VisitReadUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef7.UePolicySet(response))
}

type ReadUEPolicySet400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadUEPolicySet400ApplicationProblemPlusJSONResponse) VisitReadUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReadUEPolicySet401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadUEPolicySet401ApplicationProblemPlusJSONResponse) VisitReadUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReadUEPolicySet403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadUEPolicySet403ApplicationProblemPlusJSONResponse) VisitReadUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReadUEPolicySet404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadUEPolicySet404ApplicationProblemPlusJSONResponse) VisitReadUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReadUEPolicySet406Response externalRef0.N406Response

func (response ReadUEPolicySet406Response) VisitReadUEPolicySetResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadUEPolicySet429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadUEPolicySet429ApplicationProblemPlusJSONResponse) VisitReadUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReadUEPolicySet500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadUEPolicySet500ApplicationProblemPlusJSONResponse) VisitReadUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReadUEPolicySet503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadUEPolicySet503ApplicationProblemPlusJSONResponse) VisitReadUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReadUEPolicySetdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadUEPolicySetdefaultApplicationProblemPlusJSONResponse) VisitReadUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateUEPolicySetRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
	Body *UpdateUEPolicySetApplicationMergePatchPlusJSONRequestBody
}

type UpdateUEPolicySetResponseObject interface {
	VisitUpdateUEPolicySetResponse(w http.ResponseWriter) error
}

type UpdateUEPolicySet204Response struct {
}

func (response UpdateUEPolicySet204Response) VisitUpdateUEPolicySetResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateUEPolicySet400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response UpdateUEPolicySet400ApplicationProblemPlusJSONResponse) VisitUpdateUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type UpdateUEPolicySet401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response UpdateUEPolicySet401ApplicationProblemPlusJSONResponse) VisitUpdateUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type UpdateUEPolicySet403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response UpdateUEPolicySet403ApplicationProblemPlusJSONResponse) VisitUpdateUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type UpdateUEPolicySet404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response UpdateUEPolicySet404ApplicationProblemPlusJSONResponse) VisitUpdateUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type UpdateUEPolicySet411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response UpdateUEPolicySet411ApplicationProblemPlusJSONResponse) VisitUpdateUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type UpdateUEPolicySet413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response UpdateUEPolicySet413ApplicationProblemPlusJSONResponse) VisitUpdateUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type UpdateUEPolicySet415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response UpdateUEPolicySet415ApplicationProblemPlusJSONResponse) VisitUpdateUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type UpdateUEPolicySet429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response UpdateUEPolicySet429ApplicationProblemPlusJSONResponse) VisitUpdateUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type UpdateUEPolicySet500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response UpdateUEPolicySet500ApplicationProblemPlusJSONResponse) VisitUpdateUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type UpdateUEPolicySet503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response UpdateUEPolicySet503ApplicationProblemPlusJSONResponse) VisitUpdateUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type UpdateUEPolicySetdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UpdateUEPolicySetdefaultApplicationProblemPlusJSONResponse) VisitUpdateUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceUEPolicySetRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
	Body *CreateOrReplaceUEPolicySetJSONRequestBody
}

type CreateOrReplaceUEPolicySetResponseObject interface {
	VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error
}

type CreateOrReplaceUEPolicySet200JSONResponse externalRef7.UePolicySet

func (response CreateOrReplaceUEPolicySet200JSONResponse) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef7.UePolicySet(response))
}

type CreateOrReplaceUEPolicySet201ResponseHeaders struct {
	Location string
}

type CreateOrReplaceUEPolicySet201JSONResponse struct {
	Body    externalRef7.UePolicySet
	Headers CreateOrReplaceUEPolicySet201ResponseHeaders
}

func (response CreateOrReplaceUEPolicySet201JSONResponse) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceUEPolicySet204Response struct {
}

func (response CreateOrReplaceUEPolicySet204Response) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateOrReplaceUEPolicySet400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceUEPolicySet400ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceUEPolicySet401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceUEPolicySet401ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceUEPolicySet403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceUEPolicySet403ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceUEPolicySet404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceUEPolicySet404ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceUEPolicySet411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceUEPolicySet411ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceUEPolicySet413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceUEPolicySet413ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceUEPolicySet415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceUEPolicySet415ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceUEPolicySet429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceUEPolicySet429ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceUEPolicySet500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceUEPolicySet500ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceUEPolicySet503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceUEPolicySet503ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceUEPolicySetdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateOrReplaceUEPolicySetdefaultApplicationProblemPlusJSONResponse) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type Query5GVnGroupRequestObject struct {
	Params Query5GVnGroupParams
}

type Query5GVnGroupResponseObject interface {
	VisitQuery5GVnGroupResponse(w http.ResponseWriter) error
}

type Query5GVnGroup200JSONResponse map[string]externalRef2.N5GVnGroupConfiguration

func (response Query5GVnGroup200JSONResponse) VisitQuery5GVnGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Query5GVnGroupdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response Query5GVnGroupdefaultApplicationProblemPlusJSONResponse) VisitQuery5GVnGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type Query5GVnGroupInternalRequestObject struct {
	Params Query5GVnGroupInternalParams
}

type Query5GVnGroupInternalResponseObject interface {
	VisitQuery5GVnGroupInternalResponse(w http.ResponseWriter) error
}

type Query5GVnGroupInternal200JSONResponse map[string]externalRef2.N5GVnGroupConfiguration

func (response Query5GVnGroupInternal200JSONResponse) VisitQuery5GVnGroupInternalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Query5GVnGroupInternaldefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response Query5GVnGroupInternaldefaultApplicationProblemPlusJSONResponse) VisitQuery5GVnGroupInternalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type Query5GVNGroupPPDataRequestObject struct {
	Params Query5GVNGroupPPDataParams
}

type Query5GVNGroupPPDataResponseObject interface {
	VisitQuery5GVNGroupPPDataResponse(w http.ResponseWriter) error
}

type Query5GVNGroupPPData200JSONResponse externalRef8.Pp5gVnGroupProfileData

func (response Query5GVNGroupPPData200JSONResponse) VisitQuery5GVNGroupPPDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef8.Pp5gVnGroupProfileData(response))
}

type Query5GVNGroupPPDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response Query5GVNGroupPPDatadefaultApplicationProblemPlusJSONResponse) VisitQuery5GVNGroupPPDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type Delete5GVnGroupRequestObject struct {
	ExternalGroupId externalRef3.ExtGroupId `json:"externalGroupId"`
}

type Delete5GVnGroupResponseObject interface {
	VisitDelete5GVnGroupResponse(w http.ResponseWriter) error
}

type Delete5GVnGroup204Response struct {
}

func (response Delete5GVnGroup204Response) VisitDelete5GVnGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Delete5GVnGroupdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response Delete5GVnGroupdefaultApplicationProblemPlusJSONResponse) VisitDelete5GVnGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type Get5GVnGroupConfigurationRequestObject struct {
	ExternalGroupId externalRef3.ExtGroupId `json:"externalGroupId"`
}

type Get5GVnGroupConfigurationResponseObject interface {
	VisitGet5GVnGroupConfigurationResponse(w http.ResponseWriter) error
}

type Get5GVnGroupConfiguration200JSONResponse externalRef2.N5GVnGroupConfiguration

func (response Get5GVnGroupConfiguration200JSONResponse) VisitGet5GVnGroupConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef2.N5GVnGroupConfiguration(response))
}

type Get5GVnGroupConfigurationdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response Get5GVnGroupConfigurationdefaultApplicationProblemPlusJSONResponse) VisitGet5GVnGroupConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type Modify5GVnGroupRequestObject struct {
	ExternalGroupId externalRef3.ExtGroupId `json:"externalGroupId"`
	Params          Modify5GVnGroupParams
	Body            *Modify5GVnGroupApplicationJSONPatchPlusJSONRequestBody
}

type Modify5GVnGroupResponseObject interface {
	VisitModify5GVnGroupResponse(w http.ResponseWriter) error
}

type Modify5GVnGroup200JSONResponse externalRef0.PatchResult

func (response Modify5GVnGroup200JSONResponse) VisitModify5GVnGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.PatchResult(response))
}

type Modify5GVnGroup204Response struct {
}

func (response Modify5GVnGroup204Response) VisitModify5GVnGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Modify5GVnGroup403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response Modify5GVnGroup403ApplicationProblemPlusJSONResponse) VisitModify5GVnGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type Modify5GVnGroupdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response Modify5GVnGroupdefaultApplicationProblemPlusJSONResponse) VisitModify5GVnGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type Create5GVnGroupRequestObject struct {
	ExternalGroupId externalRef3.ExtGroupId `json:"externalGroupId"`
	Body            *Create5GVnGroupJSONRequestBody
}

type Create5GVnGroupResponseObject interface {
	VisitCreate5GVnGroupResponse(w http.ResponseWriter) error
}

type Create5GVnGroup201JSONResponse externalRef2.N5GVnGroupConfiguration

func (response Create5GVnGroup201JSONResponse) VisitCreate5GVnGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(externalRef2.N5GVnGroupConfiguration(response))
}

type Create5GVnGroup403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response Create5GVnGroup403ApplicationProblemPlusJSONResponse) VisitCreate5GVnGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type Create5GVnGroupdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response Create5GVnGroupdefaultApplicationProblemPlusJSONResponse) VisitCreate5GVnGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetGroupIdentifiersRequestObject struct {
	Params GetGroupIdentifiersParams
}

type GetGroupIdentifiersResponseObject interface {
	VisitGetGroupIdentifiersResponse(w http.ResponseWriter) error
}

type GetGroupIdentifiers200JSONResponse externalRef3.GroupIdentifiers

func (response GetGroupIdentifiers200JSONResponse) VisitGetGroupIdentifiersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef3.GroupIdentifiers(response))
}

type GetGroupIdentifiersdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetGroupIdentifiersdefaultApplicationProblemPlusJSONResponse) VisitGetGroupIdentifiersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryGroupEEDataRequestObject struct {
	UeGroupId externalRef8.VarUeGroupId `json:"ueGroupId"`
	Params    QueryGroupEEDataParams
}

type QueryGroupEEDataResponseObject interface {
	VisitQueryGroupEEDataResponse(w http.ResponseWriter) error
}

type QueryGroupEEData200JSONResponse externalRef8.EeGroupProfileData

func (response QueryGroupEEData200JSONResponse) VisitQueryGroupEEDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef8.EeGroupProfileData(response))
}

type QueryGroupEEDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryGroupEEDatadefaultApplicationProblemPlusJSONResponse) VisitQueryGroupEEDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryEeGroupSubscriptionsRequestObject struct {
	UeGroupId externalRef8.VarUeGroupId `json:"ueGroupId"`
	Params    QueryEeGroupSubscriptionsParams
}

type QueryEeGroupSubscriptionsResponseObject interface {
	VisitQueryEeGroupSubscriptionsResponse(w http.ResponseWriter) error
}

type QueryEeGroupSubscriptions200JSONResponse []externalRef8.EeSubscription

func (response QueryEeGroupSubscriptions200JSONResponse) VisitQueryEeGroupSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QueryEeGroupSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryEeGroupSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitQueryEeGroupSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateEeGroupSubscriptionsRequestObject struct {
	UeGroupId externalRef8.VarUeGroupId `json:"ueGroupId"`
	Body      *CreateEeGroupSubscriptionsJSONRequestBody
}

type CreateEeGroupSubscriptionsResponseObject interface {
	VisitCreateEeGroupSubscriptionsResponse(w http.ResponseWriter) error
}

type CreateEeGroupSubscriptions201ResponseHeaders struct {
	Location string
}

type CreateEeGroupSubscriptions201JSONResponse struct {
	Body    externalRef8.EeSubscription
	Headers CreateEeGroupSubscriptions201ResponseHeaders
}

func (response CreateEeGroupSubscriptions201JSONResponse) VisitCreateEeGroupSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateEeGroupSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateEeGroupSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitCreateEeGroupSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RemoveEeGroupSubscriptionsRequestObject struct {
	UeGroupId externalRef8.VarUeGroupId `json:"ueGroupId"`
	SubsId    string                    `json:"subsId"`
}

type RemoveEeGroupSubscriptionsResponseObject interface {
	VisitRemoveEeGroupSubscriptionsResponse(w http.ResponseWriter) error
}

type RemoveEeGroupSubscriptions204Response struct {
}

func (response RemoveEeGroupSubscriptions204Response) VisitRemoveEeGroupSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RemoveEeGroupSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response RemoveEeGroupSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitRemoveEeGroupSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryEeGroupSubscriptionRequestObject struct {
	UeGroupId externalRef8.VarUeGroupId `json:"ueGroupId"`
	SubsId    string                    `json:"subsId"`
}

type QueryEeGroupSubscriptionResponseObject interface {
	VisitQueryEeGroupSubscriptionResponse(w http.ResponseWriter) error
}

type QueryEeGroupSubscription200JSONResponse []externalRef8.EeSubscription

func (response QueryEeGroupSubscription200JSONResponse) VisitQueryEeGroupSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QueryEeGroupSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryEeGroupSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitQueryEeGroupSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifyEeGroupSubscriptionRequestObject struct {
	UeGroupId externalRef8.VarUeGroupId `json:"ueGroupId"`
	SubsId    string                    `json:"subsId"`
	Params    ModifyEeGroupSubscriptionParams
	Body      *ModifyEeGroupSubscriptionApplicationJSONPatchPlusJSONRequestBody
}

type ModifyEeGroupSubscriptionResponseObject interface {
	VisitModifyEeGroupSubscriptionResponse(w http.ResponseWriter) error
}

type ModifyEeGroupSubscription200JSONResponse externalRef0.PatchResult

func (response ModifyEeGroupSubscription200JSONResponse) VisitModifyEeGroupSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.PatchResult(response))
}

type ModifyEeGroupSubscription204Response struct {
}

func (response ModifyEeGroupSubscription204Response) VisitModifyEeGroupSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ModifyEeGroupSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ModifyEeGroupSubscription403ApplicationProblemPlusJSONResponse) VisitModifyEeGroupSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ModifyEeGroupSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ModifyEeGroupSubscription404ApplicationProblemPlusJSONResponse) VisitModifyEeGroupSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ModifyEeGroupSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ModifyEeGroupSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitModifyEeGroupSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateEeGroupSubscriptionsRequestObject struct {
	UeGroupId externalRef8.VarUeGroupId `json:"ueGroupId"`
	SubsId    string                    `json:"subsId"`
	Body      *UpdateEeGroupSubscriptionsJSONRequestBody
}

type UpdateEeGroupSubscriptionsResponseObject interface {
	VisitUpdateEeGroupSubscriptionsResponse(w http.ResponseWriter) error
}

type UpdateEeGroupSubscriptions204Response struct {
}

func (response UpdateEeGroupSubscriptions204Response) VisitUpdateEeGroupSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateEeGroupSubscriptions404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateEeGroupSubscriptions404ApplicationProblemPlusJSONResponse) VisitUpdateEeGroupSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type UpdateEeGroupSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UpdateEeGroupSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitUpdateEeGroupSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSharedDataRequestObject struct {
	Params GetSharedDataParams
}

type GetSharedDataResponseObject interface {
	VisitGetSharedDataResponse(w http.ResponseWriter) error
}

type GetSharedData200JSONResponse []externalRef3.SharedData

func (response GetSharedData200JSONResponse) VisitGetSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSharedData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetSharedData400ApplicationProblemPlusJSONResponse) VisitGetSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetSharedData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetSharedData404ApplicationProblemPlusJSONResponse) VisitGetSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetSharedData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetSharedData500ApplicationProblemPlusJSONResponse) VisitGetSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetSharedData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetSharedData503ApplicationProblemPlusJSONResponse) VisitGetSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetSharedDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetSharedDatadefaultApplicationProblemPlusJSONResponse) VisitGetSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetIndividualSharedDataRequestObject struct {
	SharedDataId externalRef3.SharedDataId `json:"sharedDataId"`
	Params       GetIndividualSharedDataParams
}

type GetIndividualSharedDataResponseObject interface {
	VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error
}

type GetIndividualSharedData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetIndividualSharedData200JSONResponse struct {
	Body    externalRef3.SharedData
	Headers GetIndividualSharedData200ResponseHeaders
}

func (response GetIndividualSharedData200JSONResponse) VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetIndividualSharedData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetIndividualSharedData400ApplicationProblemPlusJSONResponse) VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetIndividualSharedData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetIndividualSharedData404ApplicationProblemPlusJSONResponse) VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetIndividualSharedData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetIndividualSharedData500ApplicationProblemPlusJSONResponse) VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetIndividualSharedData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetIndividualSharedData503ApplicationProblemPlusJSONResponse) VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetIndividualSharedDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetIndividualSharedDatadefaultApplicationProblemPlusJSONResponse) VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RemoveMultipleSubscriptionDataSubscriptionsRequestObject struct {
	Params RemoveMultipleSubscriptionDataSubscriptionsParams
}

type RemoveMultipleSubscriptionDataSubscriptionsResponseObject interface {
	VisitRemoveMultipleSubscriptionDataSubscriptionsResponse(w http.ResponseWriter) error
}

type RemoveMultipleSubscriptionDataSubscriptions204Response struct {
}

func (response RemoveMultipleSubscriptionDataSubscriptions204Response) VisitRemoveMultipleSubscriptionDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RemoveMultipleSubscriptionDataSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response RemoveMultipleSubscriptionDataSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitRemoveMultipleSubscriptionDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySubsToNotifyRequestObject struct {
	Params QuerySubsToNotifyParams
}

type QuerySubsToNotifyResponseObject interface {
	VisitQuerySubsToNotifyResponse(w http.ResponseWriter) error
}

type QuerySubsToNotify200JSONResponse []externalRef8.SubscriptionDataSubscriptions

func (response QuerySubsToNotify200JSONResponse) VisitQuerySubsToNotifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QuerySubsToNotifydefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QuerySubsToNotifydefaultApplicationProblemPlusJSONResponse) VisitQuerySubsToNotifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SubscriptionDataSubscriptionsRequestObject struct {
	Body *SubscriptionDataSubscriptionsJSONRequestBody
}

type SubscriptionDataSubscriptionsResponseObject interface {
	VisitSubscriptionDataSubscriptionsResponse(w http.ResponseWriter) error
}

type SubscriptionDataSubscriptions201ResponseHeaders struct {
	Location string
}

type SubscriptionDataSubscriptions201JSONResponse struct {
	Body    externalRef8.SubscriptionDataSubscriptions
	Headers SubscriptionDataSubscriptions201ResponseHeaders
}

func (response SubscriptionDataSubscriptions201JSONResponse) VisitSubscriptionDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type SubscriptionDataSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response SubscriptionDataSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitSubscriptionDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RemovesubscriptionDataSubscriptionsRequestObject struct {
	SubsId string `json:"subsId"`
}

type RemovesubscriptionDataSubscriptionsResponseObject interface {
	VisitRemovesubscriptionDataSubscriptionsResponse(w http.ResponseWriter) error
}

type RemovesubscriptionDataSubscriptions204Response struct {
}

func (response RemovesubscriptionDataSubscriptions204Response) VisitRemovesubscriptionDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RemovesubscriptionDataSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response RemovesubscriptionDataSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitRemovesubscriptionDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySubscriptionDataSubscriptionsRequestObject struct {
	SubsId string `json:"subsId"`
}

type QuerySubscriptionDataSubscriptionsResponseObject interface {
	VisitQuerySubscriptionDataSubscriptionsResponse(w http.ResponseWriter) error
}

type QuerySubscriptionDataSubscriptions200JSONResponse []externalRef8.SubscriptionDataSubscriptions

func (response QuerySubscriptionDataSubscriptions200JSONResponse) VisitQuerySubscriptionDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QuerySubscriptionDataSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QuerySubscriptionDataSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitQuerySubscriptionDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifysubscriptionDataSubscriptionRequestObject struct {
	SubsId string `json:"subsId"`
	Params ModifysubscriptionDataSubscriptionParams
	Body   *ModifysubscriptionDataSubscriptionApplicationJSONPatchPlusJSONRequestBody
}

type ModifysubscriptionDataSubscriptionResponseObject interface {
	VisitModifysubscriptionDataSubscriptionResponse(w http.ResponseWriter) error
}

type ModifysubscriptionDataSubscription200JSONResponse externalRef0.PatchResult

func (response ModifysubscriptionDataSubscription200JSONResponse) VisitModifysubscriptionDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.PatchResult(response))
}

type ModifysubscriptionDataSubscription204Response struct {
}

func (response ModifysubscriptionDataSubscription204Response) VisitModifysubscriptionDataSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ModifysubscriptionDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ModifysubscriptionDataSubscription403ApplicationProblemPlusJSONResponse) VisitModifysubscriptionDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ModifysubscriptionDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ModifysubscriptionDataSubscription404ApplicationProblemPlusJSONResponse) VisitModifysubscriptionDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ModifysubscriptionDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ModifysubscriptionDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitModifysubscriptionDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteAuthenticationStatusRequestObject struct {
	UeId externalRef0.Supi `json:"ueId"`
}

type DeleteAuthenticationStatusResponseObject interface {
	VisitDeleteAuthenticationStatusResponse(w http.ResponseWriter) error
}

type DeleteAuthenticationStatus204Response struct {
}

func (response DeleteAuthenticationStatus204Response) VisitDeleteAuthenticationStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAuthenticationStatusdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteAuthenticationStatusdefaultApplicationProblemPlusJSONResponse) VisitDeleteAuthenticationStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryAuthenticationStatusRequestObject struct {
	UeId   externalRef0.Supi `json:"ueId"`
	Params QueryAuthenticationStatusParams
}

type QueryAuthenticationStatusResponseObject interface {
	VisitQueryAuthenticationStatusResponse(w http.ResponseWriter) error
}

type QueryAuthenticationStatus200JSONResponse externalRef4.AuthEvent

func (response QueryAuthenticationStatus200JSONResponse) VisitQueryAuthenticationStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef4.AuthEvent(response))
}

type QueryAuthenticationStatusdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryAuthenticationStatusdefaultApplicationProblemPlusJSONResponse) VisitQueryAuthenticationStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateAuthenticationStatusRequestObject struct {
	UeId externalRef0.Supi `json:"ueId"`
	Body *CreateAuthenticationStatusJSONRequestBody
}

type CreateAuthenticationStatusResponseObject interface {
	VisitCreateAuthenticationStatusResponse(w http.ResponseWriter) error
}

type CreateAuthenticationStatus204Response struct {
}

func (response CreateAuthenticationStatus204Response) VisitCreateAuthenticationStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateAuthenticationStatusdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateAuthenticationStatusdefaultApplicationProblemPlusJSONResponse) VisitCreateAuthenticationStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualAuthenticationStatusRequestObject struct {
	UeId               externalRef0.Supi               `json:"ueId"`
	ServingNetworkName externalRef4.ServingNetworkName `json:"servingNetworkName"`
}

type DeleteIndividualAuthenticationStatusResponseObject interface {
	VisitDeleteIndividualAuthenticationStatusResponse(w http.ResponseWriter) error
}

type DeleteIndividualAuthenticationStatus204Response struct {
}

func (response DeleteIndividualAuthenticationStatus204Response) VisitDeleteIndividualAuthenticationStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIndividualAuthenticationStatusdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteIndividualAuthenticationStatusdefaultApplicationProblemPlusJSONResponse) VisitDeleteIndividualAuthenticationStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryIndividualAuthenticationStatusRequestObject struct {
	UeId               externalRef0.Supi               `json:"ueId"`
	ServingNetworkName externalRef4.ServingNetworkName `json:"servingNetworkName"`
	Params             QueryIndividualAuthenticationStatusParams
}

type QueryIndividualAuthenticationStatusResponseObject interface {
	VisitQueryIndividualAuthenticationStatusResponse(w http.ResponseWriter) error
}

type QueryIndividualAuthenticationStatus200JSONResponse externalRef4.AuthEvent

func (response QueryIndividualAuthenticationStatus200JSONResponse) VisitQueryIndividualAuthenticationStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef4.AuthEvent(response))
}

type QueryIndividualAuthenticationStatusdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryIndividualAuthenticationStatusdefaultApplicationProblemPlusJSONResponse) VisitQueryIndividualAuthenticationStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIndividualAuthenticationStatusRequestObject struct {
	UeId               externalRef0.Supi               `json:"ueId"`
	ServingNetworkName externalRef4.ServingNetworkName `json:"servingNetworkName"`
	Body               *CreateIndividualAuthenticationStatusJSONRequestBody
}

type CreateIndividualAuthenticationStatusResponseObject interface {
	VisitCreateIndividualAuthenticationStatusResponse(w http.ResponseWriter) error
}

type CreateIndividualAuthenticationStatus204Response struct {
}

func (response CreateIndividualAuthenticationStatus204Response) VisitCreateIndividualAuthenticationStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateIndividualAuthenticationStatusdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateIndividualAuthenticationStatusdefaultApplicationProblemPlusJSONResponse) VisitCreateIndividualAuthenticationStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryAuthSubsDataRequestObject struct {
	UeId   externalRef0.Supi `json:"ueId"`
	Params QueryAuthSubsDataParams
}

type QueryAuthSubsDataResponseObject interface {
	VisitQueryAuthSubsDataResponse(w http.ResponseWriter) error
}

type QueryAuthSubsData200JSONResponse externalRef8.AuthenticationSubscription

func (response QueryAuthSubsData200JSONResponse) VisitQueryAuthSubsDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef8.AuthenticationSubscription(response))
}

type QueryAuthSubsDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryAuthSubsDatadefaultApplicationProblemPlusJSONResponse) VisitQueryAuthSubsDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifyAuthenticationSubscriptionRequestObject struct {
	UeId   externalRef0.Supi `json:"ueId"`
	Params ModifyAuthenticationSubscriptionParams
	Body   *ModifyAuthenticationSubscriptionApplicationJSONPatchPlusJSONRequestBody
}

type ModifyAuthenticationSubscriptionResponseObject interface {
	VisitModifyAuthenticationSubscriptionResponse(w http.ResponseWriter) error
}

type ModifyAuthenticationSubscription200JSONResponse externalRef0.PatchResult

func (response ModifyAuthenticationSubscription200JSONResponse) VisitModifyAuthenticationSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.PatchResult(response))
}

type ModifyAuthenticationSubscription204Response struct {
}

func (response ModifyAuthenticationSubscription204Response) VisitModifyAuthenticationSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ModifyAuthenticationSubscription403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response ModifyAuthenticationSubscription403ApplicationProblemPlusJSONResponse) VisitModifyAuthenticationSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type ModifyAuthenticationSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ModifyAuthenticationSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitModifyAuthenticationSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryContextDataRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params QueryContextDataParams
}

type QueryContextDataResponseObject interface {
	VisitQueryContextDataResponse(w http.ResponseWriter) error
}

type QueryContextData200JSONResponse externalRef8.ContextDataSets

func (response QueryContextData200JSONResponse) VisitQueryContextDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef8.ContextDataSets(response))
}

type QueryContextDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryContextDatadefaultApplicationProblemPlusJSONResponse) VisitQueryContextDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryAmfContext3gppRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params QueryAmfContext3gppParams
}

type QueryAmfContext3gppResponseObject interface {
	VisitQueryAmfContext3gppResponse(w http.ResponseWriter) error
}

type QueryAmfContext3gpp200JSONResponse externalRef8.Amf3GppAccessRegistration

func (response QueryAmfContext3gpp200JSONResponse) VisitQueryAmfContext3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef8.Amf3GppAccessRegistration(response))
}

type QueryAmfContext3gppdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryAmfContext3gppdefaultApplicationProblemPlusJSONResponse) VisitQueryAmfContext3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AmfContext3gppRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params AmfContext3gppParams
	Body   *AmfContext3gppApplicationJSONPatchPlusJSONRequestBody
}

type AmfContext3gppResponseObject interface {
	VisitAmfContext3gppResponse(w http.ResponseWriter) error
}

type AmfContext3gpp200JSONResponse externalRef0.PatchResult

func (response AmfContext3gpp200JSONResponse) VisitAmfContext3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.PatchResult(response))
}

type AmfContext3gpp204Response struct {
}

func (response AmfContext3gpp204Response) VisitAmfContext3gppResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type AmfContext3gpp403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response AmfContext3gpp403ApplicationProblemPlusJSONResponse) VisitAmfContext3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type AmfContext3gppdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response AmfContext3gppdefaultApplicationProblemPlusJSONResponse) VisitAmfContext3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateAmfContext3gppRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
	Body *CreateAmfContext3gppJSONRequestBody
}

type CreateAmfContext3gppResponseObject interface {
	VisitCreateAmfContext3gppResponse(w http.ResponseWriter) error
}

type CreateAmfContext3gpp201ResponseHeaders struct {
	Location string
}

type CreateAmfContext3gpp201JSONResponse struct {
	Body    externalRef8.Amf3GppAccessRegistration
	Headers CreateAmfContext3gpp201ResponseHeaders
}

func (response CreateAmfContext3gpp201JSONResponse) VisitCreateAmfContext3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateAmfContext3gpp204Response struct {
}

func (response CreateAmfContext3gpp204Response) VisitCreateAmfContext3gppResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateAmfContext3gppdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateAmfContext3gppdefaultApplicationProblemPlusJSONResponse) VisitCreateAmfContext3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryAmfContextNon3gppRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params QueryAmfContextNon3gppParams
}

type QueryAmfContextNon3gppResponseObject interface {
	VisitQueryAmfContextNon3gppResponse(w http.ResponseWriter) error
}

type QueryAmfContextNon3gpp200JSONResponse externalRef8.AmfNon3GppAccessRegistration

func (response QueryAmfContextNon3gpp200JSONResponse) VisitQueryAmfContextNon3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef8.AmfNon3GppAccessRegistration(response))
}

type QueryAmfContextNon3gppdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryAmfContextNon3gppdefaultApplicationProblemPlusJSONResponse) VisitQueryAmfContextNon3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AmfContextNon3gppRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params AmfContextNon3gppParams
	Body   *AmfContextNon3gppApplicationJSONPatchPlusJSONRequestBody
}

type AmfContextNon3gppResponseObject interface {
	VisitAmfContextNon3gppResponse(w http.ResponseWriter) error
}

type AmfContextNon3gpp200JSONResponse externalRef0.PatchResult

func (response AmfContextNon3gpp200JSONResponse) VisitAmfContextNon3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.PatchResult(response))
}

type AmfContextNon3gpp204Response struct {
}

func (response AmfContextNon3gpp204Response) VisitAmfContextNon3gppResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type AmfContextNon3gpp403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response AmfContextNon3gpp403ApplicationProblemPlusJSONResponse) VisitAmfContextNon3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type AmfContextNon3gppdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response AmfContextNon3gppdefaultApplicationProblemPlusJSONResponse) VisitAmfContextNon3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateAmfContextNon3gppRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
	Body *CreateAmfContextNon3gppJSONRequestBody
}

type CreateAmfContextNon3gppResponseObject interface {
	VisitCreateAmfContextNon3gppResponse(w http.ResponseWriter) error
}

type CreateAmfContextNon3gpp201ResponseHeaders struct {
	Location string
}

type CreateAmfContextNon3gpp201JSONResponse struct {
	Body    externalRef8.Amf3GppAccessRegistration
	Headers CreateAmfContextNon3gpp201ResponseHeaders
}

func (response CreateAmfContextNon3gpp201JSONResponse) VisitCreateAmfContextNon3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateAmfContextNon3gpp204Response struct {
}

func (response CreateAmfContextNon3gpp204Response) VisitCreateAmfContextNon3gppResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateAmfContextNon3gppdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateAmfContextNon3gppdefaultApplicationProblemPlusJSONResponse) VisitCreateAmfContextNon3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryeesubscriptionsRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params QueryeesubscriptionsParams
}

type QueryeesubscriptionsResponseObject interface {
	VisitQueryeesubscriptionsResponse(w http.ResponseWriter) error
}

type Queryeesubscriptions200JSONResponse []externalRef8.EeSubscription

func (response Queryeesubscriptions200JSONResponse) VisitQueryeesubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QueryeesubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryeesubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitQueryeesubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateEeSubscriptionsRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
	Body *CreateEeSubscriptionsJSONRequestBody
}

type CreateEeSubscriptionsResponseObject interface {
	VisitCreateEeSubscriptionsResponse(w http.ResponseWriter) error
}

type CreateEeSubscriptions201ResponseHeaders struct {
	Location string
}

type CreateEeSubscriptions201JSONResponse struct {
	Body    externalRef8.EeSubscription
	Headers CreateEeSubscriptions201ResponseHeaders
}

func (response CreateEeSubscriptions201JSONResponse) VisitCreateEeSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateEeSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateEeSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitCreateEeSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RemoveeeSubscriptionsRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
}

type RemoveeeSubscriptionsResponseObject interface {
	VisitRemoveeeSubscriptionsResponse(w http.ResponseWriter) error
}

type RemoveeeSubscriptions204Response struct {
}

func (response RemoveeeSubscriptions204Response) VisitRemoveeeSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RemoveeeSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response RemoveeeSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitRemoveeeSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryeeSubscriptionRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
}

type QueryeeSubscriptionResponseObject interface {
	VisitQueryeeSubscriptionResponse(w http.ResponseWriter) error
}

type QueryeeSubscription200JSONResponse []externalRef8.EeSubscription

func (response QueryeeSubscription200JSONResponse) VisitQueryeeSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QueryeeSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryeeSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitQueryeeSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifyEesubscriptionRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
	Params ModifyEesubscriptionParams
	Body   *ModifyEesubscriptionApplicationJSONPatchPlusJSONRequestBody
}

type ModifyEesubscriptionResponseObject interface {
	VisitModifyEesubscriptionResponse(w http.ResponseWriter) error
}

type ModifyEesubscription200JSONResponse externalRef0.PatchResult

func (response ModifyEesubscription200JSONResponse) VisitModifyEesubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.PatchResult(response))
}

type ModifyEesubscription204Response struct {
}

func (response ModifyEesubscription204Response) VisitModifyEesubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ModifyEesubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ModifyEesubscription403ApplicationProblemPlusJSONResponse) VisitModifyEesubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ModifyEesubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ModifyEesubscription404ApplicationProblemPlusJSONResponse) VisitModifyEesubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ModifyEesubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ModifyEesubscriptiondefaultApplicationProblemPlusJSONResponse) VisitModifyEesubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateEesubscriptionsRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
	Body   *UpdateEesubscriptionsJSONRequestBody
}

type UpdateEesubscriptionsResponseObject interface {
	VisitUpdateEesubscriptionsResponse(w http.ResponseWriter) error
}

type UpdateEesubscriptions204Response struct {
}

func (response UpdateEesubscriptions204Response) VisitUpdateEesubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateEesubscriptions404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateEesubscriptions404ApplicationProblemPlusJSONResponse) VisitUpdateEesubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type UpdateEesubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UpdateEesubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitUpdateEesubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RemoveAmfSubscriptionsInfoRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
}

type RemoveAmfSubscriptionsInfoResponseObject interface {
	VisitRemoveAmfSubscriptionsInfoResponse(w http.ResponseWriter) error
}

type RemoveAmfSubscriptionsInfo204Response struct {
}

func (response RemoveAmfSubscriptionsInfo204Response) VisitRemoveAmfSubscriptionsInfoResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RemoveAmfSubscriptionsInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response RemoveAmfSubscriptionsInfodefaultApplicationProblemPlusJSONResponse) VisitRemoveAmfSubscriptionsInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetAmfSubscriptionInfoRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
}

type GetAmfSubscriptionInfoResponseObject interface {
	VisitGetAmfSubscriptionInfoResponse(w http.ResponseWriter) error
}

type GetAmfSubscriptionInfo200JSONResponse []externalRef8.AmfSubscriptionInfo

func (response GetAmfSubscriptionInfo200JSONResponse) VisitGetAmfSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAmfSubscriptionInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetAmfSubscriptionInfodefaultApplicationProblemPlusJSONResponse) VisitGetAmfSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifyAmfSubscriptionInfoRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
	Params ModifyAmfSubscriptionInfoParams
	Body   *ModifyAmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody
}

type ModifyAmfSubscriptionInfoResponseObject interface {
	VisitModifyAmfSubscriptionInfoResponse(w http.ResponseWriter) error
}

type ModifyAmfSubscriptionInfo200JSONResponse externalRef0.PatchResult

func (response ModifyAmfSubscriptionInfo200JSONResponse) VisitModifyAmfSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.PatchResult(response))
}

type ModifyAmfSubscriptionInfo204Response struct {
}

func (response ModifyAmfSubscriptionInfo204Response) VisitModifyAmfSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ModifyAmfSubscriptionInfo403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response ModifyAmfSubscriptionInfo403ApplicationProblemPlusJSONResponse) VisitModifyAmfSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type ModifyAmfSubscriptionInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ModifyAmfSubscriptionInfodefaultApplicationProblemPlusJSONResponse) VisitModifyAmfSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateAMFSubscriptionsRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
	Body   *CreateAMFSubscriptionsJSONRequestBody
}

type CreateAMFSubscriptionsResponseObject interface {
	VisitCreateAMFSubscriptionsResponse(w http.ResponseWriter) error
}

type CreateAMFSubscriptions204Response struct {
}

func (response CreateAMFSubscriptions204Response) VisitCreateAMFSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateAMFSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateAMFSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitCreateAMFSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RemoveHssSubscriptionsInfoRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
}

type RemoveHssSubscriptionsInfoResponseObject interface {
	VisitRemoveHssSubscriptionsInfoResponse(w http.ResponseWriter) error
}

type RemoveHssSubscriptionsInfo204Response struct {
}

func (response RemoveHssSubscriptionsInfo204Response) VisitRemoveHssSubscriptionsInfoResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RemoveHssSubscriptionsInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response RemoveHssSubscriptionsInfodefaultApplicationProblemPlusJSONResponse) VisitRemoveHssSubscriptionsInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetHssSubscriptionInfoRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
}

type GetHssSubscriptionInfoResponseObject interface {
	VisitGetHssSubscriptionInfoResponse(w http.ResponseWriter) error
}

type GetHssSubscriptionInfo200JSONResponse externalRef8.SmfSubscriptionInfo

func (response GetHssSubscriptionInfo200JSONResponse) VisitGetHssSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef8.SmfSubscriptionInfo(response))
}

type GetHssSubscriptionInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetHssSubscriptionInfodefaultApplicationProblemPlusJSONResponse) VisitGetHssSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifyHssSubscriptionInfoRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
	Params ModifyHssSubscriptionInfoParams
	Body   *ModifyHssSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody
}

type ModifyHssSubscriptionInfoResponseObject interface {
	VisitModifyHssSubscriptionInfoResponse(w http.ResponseWriter) error
}

type ModifyHssSubscriptionInfo200JSONResponse externalRef0.PatchResult

func (response ModifyHssSubscriptionInfo200JSONResponse) VisitModifyHssSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.PatchResult(response))
}

type ModifyHssSubscriptionInfo204Response struct {
}

func (response ModifyHssSubscriptionInfo204Response) VisitModifyHssSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ModifyHssSubscriptionInfo403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response ModifyHssSubscriptionInfo403ApplicationProblemPlusJSONResponse) VisitModifyHssSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type ModifyHssSubscriptionInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ModifyHssSubscriptionInfodefaultApplicationProblemPlusJSONResponse) VisitModifyHssSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateHSSSubscriptionsRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
	Body   *CreateHSSSubscriptionsJSONRequestBody
}

type CreateHSSSubscriptionsResponseObject interface {
	VisitCreateHSSSubscriptionsResponse(w http.ResponseWriter) error
}

type CreateHSSSubscriptions204Response struct {
}

func (response CreateHSSSubscriptions204Response) VisitCreateHSSSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateHSSSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateHSSSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitCreateHSSSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RemoveSmfSubscriptionsInfoRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
}

type RemoveSmfSubscriptionsInfoResponseObject interface {
	VisitRemoveSmfSubscriptionsInfoResponse(w http.ResponseWriter) error
}

type RemoveSmfSubscriptionsInfo204Response struct {
}

func (response RemoveSmfSubscriptionsInfo204Response) VisitRemoveSmfSubscriptionsInfoResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RemoveSmfSubscriptionsInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response RemoveSmfSubscriptionsInfodefaultApplicationProblemPlusJSONResponse) VisitRemoveSmfSubscriptionsInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSmfSubscriptionInfoRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
}

type GetSmfSubscriptionInfoResponseObject interface {
	VisitGetSmfSubscriptionInfoResponse(w http.ResponseWriter) error
}

type GetSmfSubscriptionInfo200JSONResponse externalRef8.SmfSubscriptionInfo

func (response GetSmfSubscriptionInfo200JSONResponse) VisitGetSmfSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef8.SmfSubscriptionInfo(response))
}

type GetSmfSubscriptionInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetSmfSubscriptionInfodefaultApplicationProblemPlusJSONResponse) VisitGetSmfSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifySmfSubscriptionInfoRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
	Params ModifySmfSubscriptionInfoParams
	Body   *ModifySmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody
}

type ModifySmfSubscriptionInfoResponseObject interface {
	VisitModifySmfSubscriptionInfoResponse(w http.ResponseWriter) error
}

type ModifySmfSubscriptionInfo200JSONResponse externalRef0.PatchResult

func (response ModifySmfSubscriptionInfo200JSONResponse) VisitModifySmfSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.PatchResult(response))
}

type ModifySmfSubscriptionInfo204Response struct {
}

func (response ModifySmfSubscriptionInfo204Response) VisitModifySmfSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ModifySmfSubscriptionInfo403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response ModifySmfSubscriptionInfo403ApplicationProblemPlusJSONResponse) VisitModifySmfSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type ModifySmfSubscriptionInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ModifySmfSubscriptionInfodefaultApplicationProblemPlusJSONResponse) VisitModifySmfSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateSMFSubscriptionsRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
	Body   *CreateSMFSubscriptionsJSONRequestBody
}

type CreateSMFSubscriptionsResponseObject interface {
	VisitCreateSMFSubscriptionsResponse(w http.ResponseWriter) error
}

type CreateSMFSubscriptions204Response struct {
}

func (response CreateSMFSubscriptions204Response) VisitCreateSMFSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateSMFSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateSMFSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitCreateSMFSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIpSmGwContextRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
}

type DeleteIpSmGwContextResponseObject interface {
	VisitDeleteIpSmGwContextResponse(w http.ResponseWriter) error
}

type DeleteIpSmGwContext204Response struct {
}

func (response DeleteIpSmGwContext204Response) VisitDeleteIpSmGwContextResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIpSmGwContextdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteIpSmGwContextdefaultApplicationProblemPlusJSONResponse) VisitDeleteIpSmGwContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryIpSmGwContextRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params QueryIpSmGwContextParams
}

type QueryIpSmGwContextResponseObject interface {
	VisitQueryIpSmGwContextResponse(w http.ResponseWriter) error
}

type QueryIpSmGwContext200JSONResponse externalRef8.IpSmGwRegistration

func (response QueryIpSmGwContext200JSONResponse) VisitQueryIpSmGwContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef8.IpSmGwRegistration(response))
}

type QueryIpSmGwContextdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryIpSmGwContextdefaultApplicationProblemPlusJSONResponse) VisitQueryIpSmGwContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifyIpSmGwContextRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
	Body *ModifyIpSmGwContextApplicationJSONPatchPlusJSONRequestBody
}

type ModifyIpSmGwContextResponseObject interface {
	VisitModifyIpSmGwContextResponse(w http.ResponseWriter) error
}

type ModifyIpSmGwContext204Response struct {
}

func (response ModifyIpSmGwContext204Response) VisitModifyIpSmGwContextResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ModifyIpSmGwContext403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ModifyIpSmGwContext403ApplicationProblemPlusJSONResponse) VisitModifyIpSmGwContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ModifyIpSmGwContext404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ModifyIpSmGwContext404ApplicationProblemPlusJSONResponse) VisitModifyIpSmGwContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ModifyIpSmGwContextdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ModifyIpSmGwContextdefaultApplicationProblemPlusJSONResponse) VisitModifyIpSmGwContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIpSmGwContextRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
	Body *CreateIpSmGwContextJSONRequestBody
}

type CreateIpSmGwContextResponseObject interface {
	VisitCreateIpSmGwContextResponse(w http.ResponseWriter) error
}

type CreateIpSmGwContext204Response struct {
}

func (response CreateIpSmGwContext204Response) VisitCreateIpSmGwContextResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateIpSmGwContextdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateIpSmGwContextdefaultApplicationProblemPlusJSONResponse) VisitCreateIpSmGwContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryUeLocationRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params QueryUeLocationParams
}

type QueryUeLocationResponseObject interface {
	VisitQueryUeLocationResponse(w http.ResponseWriter) error
}

type QueryUeLocation200JSONResponse externalRef8.LocationInfo

func (response QueryUeLocation200JSONResponse) VisitQueryUeLocationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef8.LocationInfo(response))
}

type QueryUeLocationdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryUeLocationdefaultApplicationProblemPlusJSONResponse) VisitQueryUeLocationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteMessageWaitingDataRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
}

type DeleteMessageWaitingDataResponseObject interface {
	VisitDeleteMessageWaitingDataResponse(w http.ResponseWriter) error
}

type DeleteMessageWaitingData204Response struct {
}

func (response DeleteMessageWaitingData204Response) VisitDeleteMessageWaitingDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteMessageWaitingDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteMessageWaitingDatadefaultApplicationProblemPlusJSONResponse) VisitDeleteMessageWaitingDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryMessageWaitingDataRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params QueryMessageWaitingDataParams
}

type QueryMessageWaitingDataResponseObject interface {
	VisitQueryMessageWaitingDataResponse(w http.ResponseWriter) error
}

type QueryMessageWaitingData200JSONResponse externalRef8.MessageWaitingData

func (response QueryMessageWaitingData200JSONResponse) VisitQueryMessageWaitingDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef8.MessageWaitingData(response))
}

type QueryMessageWaitingDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryMessageWaitingDatadefaultApplicationProblemPlusJSONResponse) VisitQueryMessageWaitingDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifyMessageWaitingDataRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
	Body *ModifyMessageWaitingDataApplicationJSONPatchPlusJSONRequestBody
}

type ModifyMessageWaitingDataResponseObject interface {
	VisitModifyMessageWaitingDataResponse(w http.ResponseWriter) error
}

type ModifyMessageWaitingData204Response struct {
}

func (response ModifyMessageWaitingData204Response) VisitModifyMessageWaitingDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ModifyMessageWaitingData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ModifyMessageWaitingData403ApplicationProblemPlusJSONResponse) VisitModifyMessageWaitingDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ModifyMessageWaitingData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ModifyMessageWaitingData404ApplicationProblemPlusJSONResponse) VisitModifyMessageWaitingDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ModifyMessageWaitingDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ModifyMessageWaitingDatadefaultApplicationProblemPlusJSONResponse) VisitModifyMessageWaitingDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateMessageWaitingDataRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
	Body *CreateMessageWaitingDataJSONRequestBody
}

type CreateMessageWaitingDataResponseObject interface {
	VisitCreateMessageWaitingDataResponse(w http.ResponseWriter) error
}

type CreateMessageWaitingData204Response struct {
}

func (response CreateMessageWaitingData204Response) VisitCreateMessageWaitingDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateMessageWaitingDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateMessageWaitingDatadefaultApplicationProblemPlusJSONResponse) VisitCreateMessageWaitingDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerysdmsubscriptionsRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params QuerysdmsubscriptionsParams
}

type QuerysdmsubscriptionsResponseObject interface {
	VisitQuerysdmsubscriptionsResponse(w http.ResponseWriter) error
}

type Querysdmsubscriptions200JSONResponse []externalRef8.SdmSubscription

func (response Querysdmsubscriptions200JSONResponse) VisitQuerysdmsubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QuerysdmsubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QuerysdmsubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitQuerysdmsubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateSdmSubscriptionsRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
	Body *CreateSdmSubscriptionsJSONRequestBody
}

type CreateSdmSubscriptionsResponseObject interface {
	VisitCreateSdmSubscriptionsResponse(w http.ResponseWriter) error
}

type CreateSdmSubscriptions201ResponseHeaders struct {
	Location string
}

type CreateSdmSubscriptions201JSONResponse struct {
	Body    externalRef8.SdmSubscription
	Headers CreateSdmSubscriptions201ResponseHeaders
}

func (response CreateSdmSubscriptions201JSONResponse) VisitCreateSdmSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateSdmSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateSdmSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitCreateSdmSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RemovesdmSubscriptionsRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
}

type RemovesdmSubscriptionsResponseObject interface {
	VisitRemovesdmSubscriptionsResponse(w http.ResponseWriter) error
}

type RemovesdmSubscriptions204Response struct {
}

func (response RemovesdmSubscriptions204Response) VisitRemovesdmSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RemovesdmSubscriptions404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response RemovesdmSubscriptions404ApplicationProblemPlusJSONResponse) VisitRemovesdmSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type RemovesdmSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response RemovesdmSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitRemovesdmSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerysdmSubscriptionRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
}

type QuerysdmSubscriptionResponseObject interface {
	VisitQuerysdmSubscriptionResponse(w http.ResponseWriter) error
}

type QuerysdmSubscription200JSONResponse []externalRef8.SdmSubscription

func (response QuerysdmSubscription200JSONResponse) VisitQuerysdmSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QuerysdmSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QuerysdmSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitQuerysdmSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifysdmSubscriptionRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
	Params ModifysdmSubscriptionParams
	Body   *ModifysdmSubscriptionApplicationJSONPatchPlusJSONRequestBody
}

type ModifysdmSubscriptionResponseObject interface {
	VisitModifysdmSubscriptionResponse(w http.ResponseWriter) error
}

type ModifysdmSubscription200JSONResponse externalRef0.PatchResult

func (response ModifysdmSubscription200JSONResponse) VisitModifysdmSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.PatchResult(response))
}

type ModifysdmSubscription204Response struct {
}

func (response ModifysdmSubscription204Response) VisitModifysdmSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ModifysdmSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ModifysdmSubscription403ApplicationProblemPlusJSONResponse) VisitModifysdmSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ModifysdmSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ModifysdmSubscription404ApplicationProblemPlusJSONResponse) VisitModifysdmSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ModifysdmSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ModifysdmSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitModifysdmSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdatesdmsubscriptionsRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
	Body   *UpdatesdmsubscriptionsJSONRequestBody
}

type UpdatesdmsubscriptionsResponseObject interface {
	VisitUpdatesdmsubscriptionsResponse(w http.ResponseWriter) error
}

type Updatesdmsubscriptions204Response struct {
}

func (response Updatesdmsubscriptions204Response) VisitUpdatesdmsubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Updatesdmsubscriptions404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response Updatesdmsubscriptions404ApplicationProblemPlusJSONResponse) VisitUpdatesdmsubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type UpdatesdmsubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UpdatesdmsubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitUpdatesdmsubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RemoveHssSDMSubscriptionsInfoRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
}

type RemoveHssSDMSubscriptionsInfoResponseObject interface {
	VisitRemoveHssSDMSubscriptionsInfoResponse(w http.ResponseWriter) error
}

type RemoveHssSDMSubscriptionsInfo204Response struct {
}

func (response RemoveHssSDMSubscriptionsInfo204Response) VisitRemoveHssSDMSubscriptionsInfoResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RemoveHssSDMSubscriptionsInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response RemoveHssSDMSubscriptionsInfodefaultApplicationProblemPlusJSONResponse) VisitRemoveHssSDMSubscriptionsInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetHssSDMSubscriptionInfoRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
}

type GetHssSDMSubscriptionInfoResponseObject interface {
	VisitGetHssSDMSubscriptionInfoResponse(w http.ResponseWriter) error
}

type GetHssSDMSubscriptionInfo200JSONResponse externalRef8.SmfSubscriptionInfo

func (response GetHssSDMSubscriptionInfo200JSONResponse) VisitGetHssSDMSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef8.SmfSubscriptionInfo(response))
}

type GetHssSDMSubscriptionInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetHssSDMSubscriptionInfodefaultApplicationProblemPlusJSONResponse) VisitGetHssSDMSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifyHssSDMSubscriptionInfoRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
	Params ModifyHssSDMSubscriptionInfoParams
	Body   *ModifyHssSDMSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody
}

type ModifyHssSDMSubscriptionInfoResponseObject interface {
	VisitModifyHssSDMSubscriptionInfoResponse(w http.ResponseWriter) error
}

type ModifyHssSDMSubscriptionInfo200JSONResponse externalRef0.PatchResult

func (response ModifyHssSDMSubscriptionInfo200JSONResponse) VisitModifyHssSDMSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.PatchResult(response))
}

type ModifyHssSDMSubscriptionInfo204Response struct {
}

func (response ModifyHssSDMSubscriptionInfo204Response) VisitModifyHssSDMSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ModifyHssSDMSubscriptionInfo403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response ModifyHssSDMSubscriptionInfo403ApplicationProblemPlusJSONResponse) VisitModifyHssSDMSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type ModifyHssSDMSubscriptionInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ModifyHssSDMSubscriptionInfodefaultApplicationProblemPlusJSONResponse) VisitModifyHssSDMSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateHSSSDMSubscriptionsRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
	Body   *CreateHSSSDMSubscriptionsJSONRequestBody
}

type CreateHSSSDMSubscriptionsResponseObject interface {
	VisitCreateHSSSDMSubscriptionsResponse(w http.ResponseWriter) error
}

type CreateHSSSDMSubscriptions204Response struct {
}

func (response CreateHSSSDMSubscriptions204Response) VisitCreateHSSSDMSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateHSSSDMSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateHSSSDMSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitCreateHSSSDMSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySmfRegListRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params QuerySmfRegListParams
}

type QuerySmfRegListResponseObject interface {
	VisitQuerySmfRegListResponse(w http.ResponseWriter) error
}

type QuerySmfRegList200JSONResponse externalRef8.SmfRegList

func (response QuerySmfRegList200JSONResponse) VisitQuerySmfRegListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef8.SmfRegList(response))
}

type QuerySmfRegListdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QuerySmfRegListdefaultApplicationProblemPlusJSONResponse) VisitQuerySmfRegListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteSmfRegistrationRequestObject struct {
	UeId         externalRef0.VarUeId      `json:"ueId"`
	PduSessionId externalRef0.PduSessionId `json:"pduSessionId"`
}

type DeleteSmfRegistrationResponseObject interface {
	VisitDeleteSmfRegistrationResponse(w http.ResponseWriter) error
}

type DeleteSmfRegistration204Response struct {
}

func (response DeleteSmfRegistration204Response) VisitDeleteSmfRegistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteSmfRegistrationdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteSmfRegistrationdefaultApplicationProblemPlusJSONResponse) VisitDeleteSmfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySmfRegistrationRequestObject struct {
	UeId         externalRef0.VarUeId      `json:"ueId"`
	PduSessionId externalRef0.PduSessionId `json:"pduSessionId"`
	Params       QuerySmfRegistrationParams
}

type QuerySmfRegistrationResponseObject interface {
	VisitQuerySmfRegistrationResponse(w http.ResponseWriter) error
}

type QuerySmfRegistration200JSONResponse externalRef8.SmfRegistration

func (response QuerySmfRegistration200JSONResponse) VisitQuerySmfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef8.SmfRegistration(response))
}

type QuerySmfRegistrationdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QuerySmfRegistrationdefaultApplicationProblemPlusJSONResponse) VisitQuerySmfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrUpdateSmfRegistrationRequestObject struct {
	UeId         externalRef0.VarUeId      `json:"ueId"`
	PduSessionId externalRef0.PduSessionId `json:"pduSessionId"`
	Body         *CreateOrUpdateSmfRegistrationJSONRequestBody
}

type CreateOrUpdateSmfRegistrationResponseObject interface {
	VisitCreateOrUpdateSmfRegistrationResponse(w http.ResponseWriter) error
}

type CreateOrUpdateSmfRegistration201ResponseHeaders struct {
	Location string
}

type CreateOrUpdateSmfRegistration201JSONResponse struct {
	Body    externalRef8.SmfRegistration
	Headers CreateOrUpdateSmfRegistration201ResponseHeaders
}

func (response CreateOrUpdateSmfRegistration201JSONResponse) VisitCreateOrUpdateSmfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrUpdateSmfRegistration204Response struct {
}

func (response CreateOrUpdateSmfRegistration204Response) VisitCreateOrUpdateSmfRegistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateOrUpdateSmfRegistrationdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateOrUpdateSmfRegistrationdefaultApplicationProblemPlusJSONResponse) VisitCreateOrUpdateSmfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteSmsfContext3gppRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
}

type DeleteSmsfContext3gppResponseObject interface {
	VisitDeleteSmsfContext3gppResponse(w http.ResponseWriter) error
}

type DeleteSmsfContext3gpp204Response struct {
}

func (response DeleteSmsfContext3gpp204Response) VisitDeleteSmsfContext3gppResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteSmsfContext3gppdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteSmsfContext3gppdefaultApplicationProblemPlusJSONResponse) VisitDeleteSmsfContext3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySmsfContext3gppRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params QuerySmsfContext3gppParams
}

type QuerySmsfContext3gppResponseObject interface {
	VisitQuerySmsfContext3gppResponse(w http.ResponseWriter) error
}

type QuerySmsfContext3gpp200JSONResponse externalRef8.SmsfRegistration

func (response QuerySmsfContext3gpp200JSONResponse) VisitQuerySmsfContext3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef8.SmsfRegistration(response))
}

type QuerySmsfContext3gppdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QuerySmsfContext3gppdefaultApplicationProblemPlusJSONResponse) VisitQuerySmsfContext3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateSmsfContext3gppRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
	Body *CreateSmsfContext3gppJSONRequestBody
}

type CreateSmsfContext3gppResponseObject interface {
	VisitCreateSmsfContext3gppResponse(w http.ResponseWriter) error
}

type CreateSmsfContext3gpp201ResponseHeaders struct {
	Location string
}

type CreateSmsfContext3gpp201JSONResponse struct {
	Body    externalRef8.SmsfRegistration
	Headers CreateSmsfContext3gpp201ResponseHeaders
}

func (response CreateSmsfContext3gpp201JSONResponse) VisitCreateSmsfContext3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateSmsfContext3gpp204Response struct {
}

func (response CreateSmsfContext3gpp204Response) VisitCreateSmsfContext3gppResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateSmsfContext3gppdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateSmsfContext3gppdefaultApplicationProblemPlusJSONResponse) VisitCreateSmsfContext3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteSmsfContextNon3gppRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
}

type DeleteSmsfContextNon3gppResponseObject interface {
	VisitDeleteSmsfContextNon3gppResponse(w http.ResponseWriter) error
}

type DeleteSmsfContextNon3gpp204Response struct {
}

func (response DeleteSmsfContextNon3gpp204Response) VisitDeleteSmsfContextNon3gppResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteSmsfContextNon3gppdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteSmsfContextNon3gppdefaultApplicationProblemPlusJSONResponse) VisitDeleteSmsfContextNon3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySmsfContextNon3gppRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params QuerySmsfContextNon3gppParams
}

type QuerySmsfContextNon3gppResponseObject interface {
	VisitQuerySmsfContextNon3gppResponse(w http.ResponseWriter) error
}

type QuerySmsfContextNon3gpp200JSONResponse externalRef8.SmsfRegistration

func (response QuerySmsfContextNon3gpp200JSONResponse) VisitQuerySmsfContextNon3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef8.SmsfRegistration(response))
}

type QuerySmsfContextNon3gppdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QuerySmsfContextNon3gppdefaultApplicationProblemPlusJSONResponse) VisitQuerySmsfContextNon3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateSmsfContextNon3gppRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
	Body *CreateSmsfContextNon3gppJSONRequestBody
}

type CreateSmsfContextNon3gppResponseObject interface {
	VisitCreateSmsfContextNon3gppResponse(w http.ResponseWriter) error
}

type CreateSmsfContextNon3gpp201ResponseHeaders struct {
	Location string
}

type CreateSmsfContextNon3gpp201JSONResponse struct {
	Body    externalRef8.SmsfRegistration
	Headers CreateSmsfContextNon3gpp201ResponseHeaders
}

func (response CreateSmsfContextNon3gpp201JSONResponse) VisitCreateSmsfContextNon3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateSmsfContextNon3gpp204Response struct {
}

func (response CreateSmsfContextNon3gpp204Response) VisitCreateSmsfContextNon3gppResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateSmsfContextNon3gppdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateSmsfContextNon3gppdefaultApplicationProblemPlusJSONResponse) VisitCreateSmsfContextNon3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryCoverageRestrictionDataRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params QueryCoverageRestrictionDataParams
}

type QueryCoverageRestrictionDataResponseObject interface {
	VisitQueryCoverageRestrictionDataResponse(w http.ResponseWriter) error
}

type QueryCoverageRestrictionData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type QueryCoverageRestrictionData200JSONResponse struct {
	Body    externalRef8.EnhancedCoverageRestrictionData
	Headers QueryCoverageRestrictionData200ResponseHeaders
}

func (response QueryCoverageRestrictionData200JSONResponse) VisitQueryCoverageRestrictionDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryCoverageRestrictionDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryCoverageRestrictionDatadefaultApplicationProblemPlusJSONResponse) VisitQueryCoverageRestrictionDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryEEDataRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params QueryEEDataParams
}

type QueryEEDataResponseObject interface {
	VisitQueryEEDataResponse(w http.ResponseWriter) error
}

type QueryEEData200JSONResponse externalRef8.EeProfileData

func (response QueryEEData200JSONResponse) VisitQueryEEDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef8.EeProfileData(response))
}

type QueryEEDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryEEDatadefaultApplicationProblemPlusJSONResponse) VisitQueryEEDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetIdentityDataRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params GetIdentityDataParams
}

type GetIdentityDataResponseObject interface {
	VisitGetIdentityDataResponse(w http.ResponseWriter) error
}

type GetIdentityData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetIdentityData200JSONResponse struct {
	Body    externalRef8.IdentityData
	Headers GetIdentityData200ResponseHeaders
}

func (response GetIdentityData200JSONResponse) VisitGetIdentityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetIdentityDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetIdentityDatadefaultApplicationProblemPlusJSONResponse) VisitGetIdentityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryLcsMoDataRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params QueryLcsMoDataParams
}

type QueryLcsMoDataResponseObject interface {
	VisitQueryLcsMoDataResponse(w http.ResponseWriter) error
}

type QueryLcsMoData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type QueryLcsMoData200JSONResponse struct {
	Body    externalRef8.LcsMoData
	Headers QueryLcsMoData200ResponseHeaders
}

func (response QueryLcsMoData200JSONResponse) VisitQueryLcsMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryLcsMoDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryLcsMoDatadefaultApplicationProblemPlusJSONResponse) VisitQueryLcsMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryLcsPrivacyDataRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params QueryLcsPrivacyDataParams
}

type QueryLcsPrivacyDataResponseObject interface {
	VisitQueryLcsPrivacyDataResponse(w http.ResponseWriter) error
}

type QueryLcsPrivacyData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type QueryLcsPrivacyData200JSONResponse struct {
	Body    externalRef8.LcsPrivacyData
	Headers QueryLcsPrivacyData200ResponseHeaders
}

func (response QueryLcsPrivacyData200JSONResponse) VisitQueryLcsPrivacyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryLcsPrivacyDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryLcsPrivacyDatadefaultApplicationProblemPlusJSONResponse) VisitQueryLcsPrivacyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetNiddAuDataRequestObject struct {
	UeId   string `json:"ueId"`
	Params GetNiddAuDataParams
}

type GetNiddAuDataResponseObject interface {
	VisitGetNiddAuDataResponse(w http.ResponseWriter) error
}

type GetNiddAuData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetNiddAuData200JSONResponse struct {
	Body    externalRef8.AuthorizationData
	Headers GetNiddAuData200ResponseHeaders
}

func (response GetNiddAuData200JSONResponse) VisitGetNiddAuDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetNiddAuDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetNiddAuDatadefaultApplicationProblemPlusJSONResponse) VisitGetNiddAuDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetOdbDataRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
}

type GetOdbDataResponseObject interface {
	VisitGetOdbDataResponse(w http.ResponseWriter) error
}

type GetOdbData200JSONResponse externalRef0.OdbData

func (response GetOdbData200JSONResponse) VisitGetOdbDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.OdbData(response))
}

type GetOdbDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetOdbDatadefaultApplicationProblemPlusJSONResponse) VisitGetOdbDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryOperSpecDataRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params QueryOperSpecDataParams
}

type QueryOperSpecDataResponseObject interface {
	VisitQueryOperSpecDataResponse(w http.ResponseWriter) error
}

type QueryOperSpecData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type QueryOperSpecData200JSONResponse struct {
	Body    map[string]externalRef8.OperatorSpecificDataContainer
	Headers QueryOperSpecData200ResponseHeaders
}

func (response QueryOperSpecData200JSONResponse) VisitQueryOperSpecDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryOperSpecDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryOperSpecDatadefaultApplicationProblemPlusJSONResponse) VisitQueryOperSpecDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifyOperSpecDataRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params ModifyOperSpecDataParams
	Body   *ModifyOperSpecDataApplicationJSONPatchPlusJSONRequestBody
}

type ModifyOperSpecDataResponseObject interface {
	VisitModifyOperSpecDataResponse(w http.ResponseWriter) error
}

type ModifyOperSpecData200JSONResponse externalRef0.PatchResult

func (response ModifyOperSpecData200JSONResponse) VisitModifyOperSpecDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.PatchResult(response))
}

type ModifyOperSpecData204Response struct {
}

func (response ModifyOperSpecData204Response) VisitModifyOperSpecDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ModifyOperSpecData403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response ModifyOperSpecData403ApplicationProblemPlusJSONResponse) VisitModifyOperSpecDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type ModifyOperSpecDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ModifyOperSpecDatadefaultApplicationProblemPlusJSONResponse) VisitModifyOperSpecDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetppDataRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params GetppDataParams
}

type GetppDataResponseObject interface {
	VisitGetppDataResponse(w http.ResponseWriter) error
}

type GetppData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetppData200JSONResponse struct {
	Body    externalRef8.PpData
	Headers GetppData200ResponseHeaders
}

func (response GetppData200JSONResponse) VisitGetppDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetppData403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetppData403ApplicationProblemPlusJSONResponse) VisitGetppDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type GetppDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetppDatadefaultApplicationProblemPlusJSONResponse) VisitGetppDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifyPpDataRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params ModifyPpDataParams
	Body   *ModifyPpDataApplicationJSONPatchPlusJSONRequestBody
}

type ModifyPpDataResponseObject interface {
	VisitModifyPpDataResponse(w http.ResponseWriter) error
}

type ModifyPpData200JSONResponse externalRef0.PatchResult

func (response ModifyPpData200JSONResponse) VisitModifyPpDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.PatchResult(response))
}

type ModifyPpData204Response struct {
}

func (response ModifyPpData204Response) VisitModifyPpDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ModifyPpData403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response ModifyPpData403ApplicationProblemPlusJSONResponse) VisitModifyPpDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type ModifyPpDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ModifyPpDatadefaultApplicationProblemPlusJSONResponse) VisitModifyPpDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryPPDataRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params QueryPPDataParams
}

type QueryPPDataResponseObject interface {
	VisitQueryPPDataResponse(w http.ResponseWriter) error
}

type QueryPPData200JSONResponse externalRef8.PpProfileData

func (response QueryPPData200JSONResponse) VisitQueryPPDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef8.PpProfileData(response))
}

type QueryPPDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryPPDatadefaultApplicationProblemPlusJSONResponse) VisitQueryPPDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryAuthSoRRequestObject struct {
	UeId   externalRef0.Supi `json:"ueId"`
	Params QueryAuthSoRParams
}

type QueryAuthSoRResponseObject interface {
	VisitQueryAuthSoRResponse(w http.ResponseWriter) error
}

type QueryAuthSoR200JSONResponse externalRef8.SorData

func (response QueryAuthSoR200JSONResponse) VisitQueryAuthSoRResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef8.SorData(response))
}

type QueryAuthSoRdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryAuthSoRdefaultApplicationProblemPlusJSONResponse) VisitQueryAuthSoRResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateAuthenticationSoRRequestObject struct {
	UeId   externalRef0.Supi `json:"ueId"`
	Params CreateAuthenticationSoRParams
	Body   *CreateAuthenticationSoRJSONRequestBody
}

type CreateAuthenticationSoRResponseObject interface {
	VisitCreateAuthenticationSoRResponse(w http.ResponseWriter) error
}

type CreateAuthenticationSoR204Response struct {
}

func (response CreateAuthenticationSoR204Response) VisitCreateAuthenticationSoRResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateAuthenticationSoRdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateAuthenticationSoRdefaultApplicationProblemPlusJSONResponse) VisitCreateAuthenticationSoRResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryCagAckRequestObject struct {
	UeId   externalRef0.Supi `json:"ueId"`
	Params QueryCagAckParams
}

type QueryCagAckResponseObject interface {
	VisitQueryCagAckResponse(w http.ResponseWriter) error
}

type QueryCagAck200JSONResponse externalRef8.CagAckData

func (response QueryCagAck200JSONResponse) VisitQueryCagAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef8.CagAckData(response))
}

type QueryCagAckdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryCagAckdefaultApplicationProblemPlusJSONResponse) VisitQueryCagAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateCagUpdateAckRequestObject struct {
	UeId   externalRef0.Supi `json:"ueId"`
	Params CreateCagUpdateAckParams
	Body   *CreateCagUpdateAckJSONRequestBody
}

type CreateCagUpdateAckResponseObject interface {
	VisitCreateCagUpdateAckResponse(w http.ResponseWriter) error
}

type CreateCagUpdateAck204Response struct {
}

func (response CreateCagUpdateAck204Response) VisitCreateCagUpdateAckResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateCagUpdateAckdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateCagUpdateAckdefaultApplicationProblemPlusJSONResponse) VisitCreateCagUpdateAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryNssaiAckRequestObject struct {
	UeId   externalRef0.Supi `json:"ueId"`
	Params QueryNssaiAckParams
}

type QueryNssaiAckResponseObject interface {
	VisitQueryNssaiAckResponse(w http.ResponseWriter) error
}

type QueryNssaiAck200JSONResponse externalRef8.NssaiAckData

func (response QueryNssaiAck200JSONResponse) VisitQueryNssaiAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef8.NssaiAckData(response))
}

type QueryNssaiAckdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryNssaiAckdefaultApplicationProblemPlusJSONResponse) VisitQueryNssaiAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrUpdateNssaiAckRequestObject struct {
	UeId   externalRef0.Supi `json:"ueId"`
	Params CreateOrUpdateNssaiAckParams
	Body   *CreateOrUpdateNssaiAckJSONRequestBody
}

type CreateOrUpdateNssaiAckResponseObject interface {
	VisitCreateOrUpdateNssaiAckResponse(w http.ResponseWriter) error
}

type CreateOrUpdateNssaiAck204Response struct {
}

func (response CreateOrUpdateNssaiAck204Response) VisitCreateOrUpdateNssaiAckResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateOrUpdateNssaiAckdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateOrUpdateNssaiAckdefaultApplicationProblemPlusJSONResponse) VisitCreateOrUpdateNssaiAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryAuthUPURequestObject struct {
	UeId   externalRef0.Supi `json:"ueId"`
	Params QueryAuthUPUParams
}

type QueryAuthUPUResponseObject interface {
	VisitQueryAuthUPUResponse(w http.ResponseWriter) error
}

type QueryAuthUPU200JSONResponse externalRef8.UpuData

func (response QueryAuthUPU200JSONResponse) VisitQueryAuthUPUResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef8.UpuData(response))
}

type QueryAuthUPUdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryAuthUPUdefaultApplicationProblemPlusJSONResponse) VisitQueryAuthUPUResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateAuthenticationUPURequestObject struct {
	UeId   externalRef0.Supi `json:"ueId"`
	Params CreateAuthenticationUPUParams
	Body   *CreateAuthenticationUPUJSONRequestBody
}

type CreateAuthenticationUPUResponseObject interface {
	VisitCreateAuthenticationUPUResponse(w http.ResponseWriter) error
}

type CreateAuthenticationUPU204Response struct {
}

func (response CreateAuthenticationUPU204Response) VisitCreateAuthenticationUPUResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateAuthenticationUPUdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateAuthenticationUPUdefaultApplicationProblemPlusJSONResponse) VisitCreateAuthenticationUPUResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryV2xDataRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params QueryV2xDataParams
}

type QueryV2xDataResponseObject interface {
	VisitQueryV2xDataResponse(w http.ResponseWriter) error
}

type QueryV2xData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type QueryV2xData200JSONResponse struct {
	Body    externalRef8.V2xSubscriptionData
	Headers QueryV2xData200ResponseHeaders
}

func (response QueryV2xData200JSONResponse) VisitQueryV2xDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryV2xDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryV2xDatadefaultApplicationProblemPlusJSONResponse) VisitQueryV2xDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryProvisionedDataRequestObject struct {
	UeId          externalRef0.VarUeId   `json:"ueId"`
	ServingPlmnId externalRef8.VarPlmnId `json:"servingPlmnId"`
	Params        QueryProvisionedDataParams
}

type QueryProvisionedDataResponseObject interface {
	VisitQueryProvisionedDataResponse(w http.ResponseWriter) error
}

type QueryProvisionedData200JSONResponse externalRef8.ProvisionedDataSets

func (response QueryProvisionedData200JSONResponse) VisitQueryProvisionedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef8.ProvisionedDataSets(response))
}

type QueryProvisionedDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryProvisionedDatadefaultApplicationProblemPlusJSONResponse) VisitQueryProvisionedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryAmDataRequestObject struct {
	UeId          externalRef0.VarUeId   `json:"ueId"`
	ServingPlmnId externalRef8.VarPlmnId `json:"servingPlmnId"`
	Params        QueryAmDataParams
}

type QueryAmDataResponseObject interface {
	VisitQueryAmDataResponse(w http.ResponseWriter) error
}

type QueryAmData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type QueryAmData200JSONResponse struct {
	Body    externalRef8.AccessAndMobilitySubscriptionData
	Headers QueryAmData200ResponseHeaders
}

func (response QueryAmData200JSONResponse) VisitQueryAmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryAmDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryAmDatadefaultApplicationProblemPlusJSONResponse) VisitQueryAmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryLcsBcaDataRequestObject struct {
	UeId          externalRef0.VarUeId   `json:"ueId"`
	ServingPlmnId externalRef8.VarPlmnId `json:"servingPlmnId"`
	Params        QueryLcsBcaDataParams
}

type QueryLcsBcaDataResponseObject interface {
	VisitQueryLcsBcaDataResponse(w http.ResponseWriter) error
}

type QueryLcsBcaData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type QueryLcsBcaData200JSONResponse struct {
	Body    externalRef8.LcsBroadcastAssistanceTypesData
	Headers QueryLcsBcaData200ResponseHeaders
}

func (response QueryLcsBcaData200JSONResponse) VisitQueryLcsBcaDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryLcsBcaDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryLcsBcaDatadefaultApplicationProblemPlusJSONResponse) VisitQueryLcsBcaDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySmDataRequestObject struct {
	UeId          externalRef0.VarUeId   `json:"ueId"`
	ServingPlmnId externalRef8.VarPlmnId `json:"servingPlmnId"`
	Params        QuerySmDataParams
}

type QuerySmDataResponseObject interface {
	VisitQuerySmDataResponse(w http.ResponseWriter) error
}

type QuerySmData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type QuerySmData200JSONResponse struct {
	Body    []externalRef8.SessionManagementSubscriptionData
	Headers QuerySmData200ResponseHeaders
}

func (response QuerySmData200JSONResponse) VisitQuerySmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySmDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QuerySmDatadefaultApplicationProblemPlusJSONResponse) VisitQuerySmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySmfSelectDataRequestObject struct {
	UeId          externalRef0.VarUeId   `json:"ueId"`
	ServingPlmnId externalRef8.VarPlmnId `json:"servingPlmnId"`
	Params        QuerySmfSelectDataParams
}

type QuerySmfSelectDataResponseObject interface {
	VisitQuerySmfSelectDataResponse(w http.ResponseWriter) error
}

type QuerySmfSelectData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type QuerySmfSelectData200JSONResponse struct {
	Body    externalRef8.SmfSelectionSubscriptionData
	Headers QuerySmfSelectData200ResponseHeaders
}

func (response QuerySmfSelectData200JSONResponse) VisitQuerySmfSelectDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySmfSelectDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QuerySmfSelectDatadefaultApplicationProblemPlusJSONResponse) VisitQuerySmfSelectDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySmsDataRequestObject struct {
	UeId          externalRef0.VarUeId   `json:"ueId"`
	ServingPlmnId externalRef8.VarPlmnId `json:"servingPlmnId"`
	Params        QuerySmsDataParams
}

type QuerySmsDataResponseObject interface {
	VisitQuerySmsDataResponse(w http.ResponseWriter) error
}

type QuerySmsData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type QuerySmsData200JSONResponse struct {
	Body    externalRef8.SmsSubscriptionData
	Headers QuerySmsData200ResponseHeaders
}

func (response QuerySmsData200JSONResponse) VisitQuerySmsDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySmsDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QuerySmsDatadefaultApplicationProblemPlusJSONResponse) VisitQuerySmsDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySmsMngDataRequestObject struct {
	UeId          externalRef0.VarUeId   `json:"ueId"`
	ServingPlmnId externalRef8.VarPlmnId `json:"servingPlmnId"`
	Params        QuerySmsMngDataParams
}

type QuerySmsMngDataResponseObject interface {
	VisitQuerySmsMngDataResponse(w http.ResponseWriter) error
}

type QuerySmsMngData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type QuerySmsMngData200JSONResponse struct {
	Body    externalRef8.SmsManagementSubscriptionData
	Headers QuerySmsMngData200ResponseHeaders
}

func (response QuerySmsMngData200JSONResponse) VisitQuerySmsMngDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySmsMngDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QuerySmsMngDatadefaultApplicationProblemPlusJSONResponse) VisitQuerySmsMngDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryTraceDataRequestObject struct {
	UeId          externalRef0.VarUeId   `json:"ueId"`
	ServingPlmnId externalRef8.VarPlmnId `json:"servingPlmnId"`
	Params        QueryTraceDataParams
}

type QueryTraceDataResponseObject interface {
	VisitQueryTraceDataResponse(w http.ResponseWriter) error
}

type QueryTraceData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type QueryTraceData200JSONResponse struct {
	Body    externalRef0.TraceData
	Headers QueryTraceData200ResponseHeaders
}

func (response QueryTraceData200JSONResponse) VisitQueryTraceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryTraceDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryTraceDatadefaultApplicationProblemPlusJSONResponse) VisitQueryTraceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Retrieve applied BDT Policy Data
	// (GET /application-data/bdtPolicyData)
	ReadBdtPolicyData(ctx context.Context, request ReadBdtPolicyDataRequestObject) (ReadBdtPolicyDataResponseObject, error)
	// Delete an individual Applied BDT Policy Data resource
	// (DELETE /application-data/bdtPolicyData/{bdtPolicyId})
	DeleteIndividualAppliedBdtPolicyData(ctx context.Context, request DeleteIndividualAppliedBdtPolicyDataRequestObject) (DeleteIndividualAppliedBdtPolicyDataResponseObject, error)
	// Modify part of the properties of an individual Applied BDT Policy Data resource
	// (PATCH /application-data/bdtPolicyData/{bdtPolicyId})
	UpdateIndividualAppliedBdtPolicyData(ctx context.Context, request UpdateIndividualAppliedBdtPolicyDataRequestObject) (UpdateIndividualAppliedBdtPolicyDataResponseObject, error)
	// Create an individual applied BDT Policy Data resource
	// (PUT /application-data/bdtPolicyData/{bdtPolicyId})
	CreateIndividualAppliedBdtPolicyData(ctx context.Context, request CreateIndividualAppliedBdtPolicyDataRequestObject) (CreateIndividualAppliedBdtPolicyDataResponseObject, error)
	// Retrieve Traffic Influence Data
	// (GET /application-data/influenceData)
	ReadInfluenceData(ctx context.Context, request ReadInfluenceDataRequestObject) (ReadInfluenceDataResponseObject, error)
	// Read Influence Data Subscriptions
	// (GET /application-data/influenceData/subs-to-notify)
	ReadInfluenceDataSubscriptions(ctx context.Context, request ReadInfluenceDataSubscriptionsRequestObject) (ReadInfluenceDataSubscriptionsResponseObject, error)
	// Create a new Individual Influence Data Subscription resource
	// (POST /application-data/influenceData/subs-to-notify)
	CreateIndividualInfluenceDataSubscription(ctx context.Context, request CreateIndividualInfluenceDataSubscriptionRequestObject) (CreateIndividualInfluenceDataSubscriptionResponseObject, error)
	// Delete an individual Influence Data Subscription resource
	// (DELETE /application-data/influenceData/subs-to-notify/{subscriptionId})
	DeleteIndividualInfluenceDataSubscription(ctx context.Context, request DeleteIndividualInfluenceDataSubscriptionRequestObject) (DeleteIndividualInfluenceDataSubscriptionResponseObject, error)
	// Get an existing individual Influence Data Subscription resource
	// (GET /application-data/influenceData/subs-to-notify/{subscriptionId})
	ReadIndividualInfluenceDataSubscription(ctx context.Context, request ReadIndividualInfluenceDataSubscriptionRequestObject) (ReadIndividualInfluenceDataSubscriptionResponseObject, error)
	// Modify an existing individual Influence Data Subscription resource
	// (PUT /application-data/influenceData/subs-to-notify/{subscriptionId})
	ReplaceIndividualInfluenceDataSubscription(ctx context.Context, request ReplaceIndividualInfluenceDataSubscriptionRequestObject) (ReplaceIndividualInfluenceDataSubscriptionResponseObject, error)
	// Delete an individual Influence Data resource
	// (DELETE /application-data/influenceData/{influenceId})
	DeleteIndividualInfluenceData(ctx context.Context, request DeleteIndividualInfluenceDataRequestObject) (DeleteIndividualInfluenceDataResponseObject, error)
	// Modify part of the properties of an individual Influence Data resource
	// (PATCH /application-data/influenceData/{influenceId})
	UpdateIndividualInfluenceData(ctx context.Context, request UpdateIndividualInfluenceDataRequestObject) (UpdateIndividualInfluenceDataResponseObject, error)
	// Create or update an individual Influence Data resource
	// (PUT /application-data/influenceData/{influenceId})
	CreateOrReplaceIndividualInfluenceData(ctx context.Context, request CreateOrReplaceIndividualInfluenceDataRequestObject) (CreateOrReplaceIndividualInfluenceDataResponseObject, error)
	// Retrieve IPTV configuration Data
	// (GET /application-data/iptvConfigData)
	ReadIPTVCongifurationData(ctx context.Context, request ReadIPTVCongifurationDataRequestObject) (ReadIPTVCongifurationDataResponseObject, error)
	// Delete an individual IPTV configuration resource
	// (DELETE /application-data/iptvConfigData/{configurationId})
	DeleteIndividualIPTVConfigurationData(ctx context.Context, request DeleteIndividualIPTVConfigurationDataRequestObject) (DeleteIndividualIPTVConfigurationDataResponseObject, error)
	// Partial update an individual IPTV configuration resource
	// (PATCH /application-data/iptvConfigData/{configurationId})
	PartialReplaceIndividualIPTVConfigurationData(ctx context.Context, request PartialReplaceIndividualIPTVConfigurationDataRequestObject) (PartialReplaceIndividualIPTVConfigurationDataResponseObject, error)
	// Create or update an individual IPTV configuration resource
	// (PUT /application-data/iptvConfigData/{configurationId})
	CreateOrReplaceIndividualIPTVConfigurationData(ctx context.Context, request CreateOrReplaceIndividualIPTVConfigurationDataRequestObject) (CreateOrReplaceIndividualIPTVConfigurationDataResponseObject, error)
	// Retrieve PFDs for application identifier(s)
	// (GET /application-data/pfds)
	ReadPFDData(ctx context.Context, request ReadPFDDataRequestObject) (ReadPFDDataResponseObject, error)
	// Delete the corresponding PFDs of the specified application identifier
	// (DELETE /application-data/pfds/{appId})
	DeleteIndividualPFDData(ctx context.Context, request DeleteIndividualPFDDataRequestObject) (DeleteIndividualPFDDataResponseObject, error)
	// Retrieve the corresponding PFDs of the specified application identifier
	// (GET /application-data/pfds/{appId})
	ReadIndividualPFDData(ctx context.Context, request ReadIndividualPFDDataRequestObject) (ReadIndividualPFDDataResponseObject, error)
	// Create or update the corresponding PFDs for the specified application identifier
	// (PUT /application-data/pfds/{appId})
	CreateOrReplaceIndividualPFDData(ctx context.Context, request CreateOrReplaceIndividualPFDDataRequestObject) (CreateOrReplaceIndividualPFDDataResponseObject, error)
	// Retrieve Service Parameter Data
	// (GET /application-data/serviceParamData)
	ReadServiceParameterData(ctx context.Context, request ReadServiceParameterDataRequestObject) (ReadServiceParameterDataResponseObject, error)
	// Delete an individual Service Parameter Data resource
	// (DELETE /application-data/serviceParamData/{serviceParamId})
	DeleteIndividualServiceParameterData(ctx context.Context, request DeleteIndividualServiceParameterDataRequestObject) (DeleteIndividualServiceParameterDataResponseObject, error)
	// Modify part of the properties of an individual Service Parameter Data resource
	// (PATCH /application-data/serviceParamData/{serviceParamId})
	UpdateIndividualServiceParameterData(ctx context.Context, request UpdateIndividualServiceParameterDataRequestObject) (UpdateIndividualServiceParameterDataResponseObject, error)
	// Create or update an individual Service Parameter Data resource
	// (PUT /application-data/serviceParamData/{serviceParamId})
	CreateOrReplaceServiceParameterData(ctx context.Context, request CreateOrReplaceServiceParameterDataRequestObject) (CreateOrReplaceServiceParameterDataResponseObject, error)
	// Read Application Data change Subscriptions
	// (GET /application-data/subs-to-notify)
	ReadApplicationDataChangeSubscriptions(ctx context.Context, request ReadApplicationDataChangeSubscriptionsRequestObject) (ReadApplicationDataChangeSubscriptionsResponseObject, error)
	// Create a subscription to receive notification of application data changes
	// (POST /application-data/subs-to-notify)
	CreateIndividualApplicationDataSubscription(ctx context.Context, request CreateIndividualApplicationDataSubscriptionRequestObject) (CreateIndividualApplicationDataSubscriptionResponseObject, error)
	// Delete the individual Application Data subscription
	// (DELETE /application-data/subs-to-notify/{subsId})
	DeleteIndividualApplicationDataSubscription(ctx context.Context, request DeleteIndividualApplicationDataSubscriptionRequestObject) (DeleteIndividualApplicationDataSubscriptionResponseObject, error)
	// Get an existing individual Application Data Subscription resource
	// (GET /application-data/subs-to-notify/{subsId})
	ReadIndividualApplicationDataSubscription(ctx context.Context, request ReadIndividualApplicationDataSubscriptionRequestObject) (ReadIndividualApplicationDataSubscriptionResponseObject, error)
	// Modify a subscription to receive notification of application data changes
	// (PUT /application-data/subs-to-notify/{subsId})
	ReplaceIndividualApplicationDataSubscription(ctx context.Context, request ReplaceIndividualApplicationDataSubscriptionRequestObject) (ReplaceIndividualApplicationDataSubscriptionResponseObject, error)
	// Create a subscription to receive notification of exposure data changes
	// (POST /exposure-data/subs-to-notify)
	CreateIndividualExposureDataSubscription(ctx context.Context, request CreateIndividualExposureDataSubscriptionRequestObject) (CreateIndividualExposureDataSubscriptionResponseObject, error)
	// Deletes the individual Exposure Data subscription
	// (DELETE /exposure-data/subs-to-notify/{subId})
	DeleteIndividualExposureDataSubscription(ctx context.Context, request DeleteIndividualExposureDataSubscriptionRequestObject) (DeleteIndividualExposureDataSubscriptionResponseObject, error)
	// updates a subscription to receive notifications of exposure data changes
	// (PUT /exposure-data/subs-to-notify/{subId})
	ReplaceIndividualExposureDataSubscription(ctx context.Context, request ReplaceIndividualExposureDataSubscriptionRequestObject) (ReplaceIndividualExposureDataSubscriptionResponseObject, error)
	// Deletes the access and mobility exposure data for a UE
	// (DELETE /exposure-data/{ueId}/access-and-mobility-data)
	DeleteAccessAndMobilityData(ctx context.Context, request DeleteAccessAndMobilityDataRequestObject) (DeleteAccessAndMobilityDataResponseObject, error)
	// Retrieves the access and mobility exposure data for a UE
	// (GET /exposure-data/{ueId}/access-and-mobility-data)
	QueryAccessAndMobilityData(ctx context.Context, request QueryAccessAndMobilityDataRequestObject) (QueryAccessAndMobilityDataResponseObject, error)
	// Updates the access and mobility exposure data for a UE
	// (PATCH /exposure-data/{ueId}/access-and-mobility-data)
	UpdateAccessAndMobilityData(ctx context.Context, request UpdateAccessAndMobilityDataRequestObject) (UpdateAccessAndMobilityDataResponseObject, error)
	// Creates and updates the access and mobility exposure data for a UE
	// (PUT /exposure-data/{ueId}/access-and-mobility-data)
	CreateOrReplaceAccessAndMobilityData(ctx context.Context, request CreateOrReplaceAccessAndMobilityDataRequestObject) (CreateOrReplaceAccessAndMobilityDataResponseObject, error)
	// Deletes the session management data for a UE and for an individual PDU session
	// (DELETE /exposure-data/{ueId}/session-management-data/{pduSessionId})
	DeleteSessionManagementData(ctx context.Context, request DeleteSessionManagementDataRequestObject) (DeleteSessionManagementDataResponseObject, error)
	// Retrieves the session management data for a UE and for an individual PDU session
	// (GET /exposure-data/{ueId}/session-management-data/{pduSessionId})
	QuerySessionManagementData(ctx context.Context, request QuerySessionManagementDataRequestObject) (QuerySessionManagementDataResponseObject, error)
	// Creates and updates the session management data for a UE and for an individual PDU session
	// (PUT /exposure-data/{ueId}/session-management-data/{pduSessionId})
	CreateOrReplaceSessionManagementData(ctx context.Context, request CreateOrReplaceSessionManagementDataRequestObject) (CreateOrReplaceSessionManagementDataResponseObject, error)
	// Retrieves the BDT data collection
	// (GET /policy-data/bdt-data)
	ReadBdtData(ctx context.Context, request ReadBdtDataRequestObject) (ReadBdtDataResponseObject, error)
	// Deletes an BDT data resource associated with an BDT reference Id
	// (DELETE /policy-data/bdt-data/{bdtReferenceId})
	DeleteIndividualBdtData(ctx context.Context, request DeleteIndividualBdtDataRequestObject) (DeleteIndividualBdtDataResponseObject, error)
	// Retrieves the BDT data information associated with a BDT reference Id
	// (GET /policy-data/bdt-data/{bdtReferenceId})
	ReadIndividualBdtData(ctx context.Context, request ReadIndividualBdtDataRequestObject) (ReadIndividualBdtDataResponseObject, error)
	// Modifies an BDT data resource associated with an BDT reference Id
	// (PATCH /policy-data/bdt-data/{bdtReferenceId})
	UpdateIndividualBdtData(ctx context.Context, request UpdateIndividualBdtDataRequestObject) (UpdateIndividualBdtDataResponseObject, error)
	// Creates an BDT data resource associated with an BDT reference Id
	// (PUT /policy-data/bdt-data/{bdtReferenceId})
	CreateIndividualBdtData(ctx context.Context, request CreateIndividualBdtDataRequestObject) (CreateIndividualBdtDataResponseObject, error)
	// Retrieve the UE policy set data for an H-PLMN
	// (GET /policy-data/plmns/{plmnId}/ue-policy-set)
	ReadPlmnUePolicySet(ctx context.Context, request ReadPlmnUePolicySetRequestObject) (ReadPlmnUePolicySetResponseObject, error)
	// Retrieves the sponsored connectivity information for a given sponsorId
	// (GET /policy-data/sponsor-connectivity-data/{sponsorId})
	ReadSponsorConnectivityData(ctx context.Context, request ReadSponsorConnectivityDataRequestObject) (ReadSponsorConnectivityDataResponseObject, error)
	// Create a subscription to receive notification of policy data changes
	// (POST /policy-data/subs-to-notify)
	CreateIndividualPolicyDataSubscription(ctx context.Context, request CreateIndividualPolicyDataSubscriptionRequestObject) (CreateIndividualPolicyDataSubscriptionResponseObject, error)
	// Delete the individual Policy Data subscription
	// (DELETE /policy-data/subs-to-notify/{subsId})
	DeleteIndividualPolicyDataSubscription(ctx context.Context, request DeleteIndividualPolicyDataSubscriptionRequestObject) (DeleteIndividualPolicyDataSubscriptionResponseObject, error)
	// Modify a subscription to receive notification of policy data changes
	// (PUT /policy-data/subs-to-notify/{subsId})
	ReplaceIndividualPolicyDataSubscription(ctx context.Context, request ReplaceIndividualPolicyDataSubscriptionRequestObject) (ReplaceIndividualPolicyDataSubscriptionResponseObject, error)
	// Retrieves the access and mobility policy data for a subscriber
	// (GET /policy-data/ues/{ueId}/am-data)
	ReadAccessAndMobilityPolicyData(ctx context.Context, request ReadAccessAndMobilityPolicyDataRequestObject) (ReadAccessAndMobilityPolicyDataResponseObject, error)
	// Retrieve the operator specific policy data of an UE
	// (GET /policy-data/ues/{ueId}/operator-specific-data)
	ReadOperatorSpecificData(ctx context.Context, request ReadOperatorSpecificDataRequestObject) (ReadOperatorSpecificDataResponseObject, error)
	// Modify the operator specific policy data of an UE
	// (PATCH /policy-data/ues/{ueId}/operator-specific-data)
	UpdateOperatorSpecificData(ctx context.Context, request UpdateOperatorSpecificDataRequestObject) (UpdateOperatorSpecificDataResponseObject, error)
	// Modify the operator specific policy data of an UE
	// (PUT /policy-data/ues/{ueId}/operator-specific-data)
	ReplaceOperatorSpecificData(ctx context.Context, request ReplaceOperatorSpecificDataRequestObject) (ReplaceOperatorSpecificDataResponseObject, error)
	// Retrieves the session management policy data for a subscriber
	// (GET /policy-data/ues/{ueId}/sm-data)
	ReadSessionManagementPolicyData(ctx context.Context, request ReadSessionManagementPolicyDataRequestObject) (ReadSessionManagementPolicyDataResponseObject, error)
	// Modify the session management policy data for a subscriber
	// (PATCH /policy-data/ues/{ueId}/sm-data)
	UpdateSessionManagementPolicyData(ctx context.Context, request UpdateSessionManagementPolicyDataRequestObject) (UpdateSessionManagementPolicyDataResponseObject, error)
	// Delete a usage monitoring resource
	// (DELETE /policy-data/ues/{ueId}/sm-data/{usageMonId})
	DeleteUsageMonitoringInformation(ctx context.Context, request DeleteUsageMonitoringInformationRequestObject) (DeleteUsageMonitoringInformationResponseObject, error)
	// Retrieve a usage monitoring resource
	// (GET /policy-data/ues/{ueId}/sm-data/{usageMonId})
	ReadUsageMonitoringInformation(ctx context.Context, request ReadUsageMonitoringInformationRequestObject) (ReadUsageMonitoringInformationResponseObject, error)
	// Create a usage monitoring resource
	// (PUT /policy-data/ues/{ueId}/sm-data/{usageMonId})
	CreateUsageMonitoringResource(ctx context.Context, request CreateUsageMonitoringResourceRequestObject) (CreateUsageMonitoringResourceResponseObject, error)
	// Retrieves the UE policy set data for a subscriber
	// (GET /policy-data/ues/{ueId}/ue-policy-set)
	ReadUEPolicySet(ctx context.Context, request ReadUEPolicySetRequestObject) (ReadUEPolicySetResponseObject, error)
	// Modify the UE policy set data for a subscriber
	// (PATCH /policy-data/ues/{ueId}/ue-policy-set)
	UpdateUEPolicySet(ctx context.Context, request UpdateUEPolicySetRequestObject) (UpdateUEPolicySetResponseObject, error)
	// Create or modify the UE policy set data for a subscriber
	// (PUT /policy-data/ues/{ueId}/ue-policy-set)
	CreateOrReplaceUEPolicySet(ctx context.Context, request CreateOrReplaceUEPolicySetRequestObject) (CreateOrReplaceUEPolicySetResponseObject, error)
	// Retrieves the data of a 5G VN Group
	// (GET /subscription-data/group-data/5g-vn-groups)
	Query5GVnGroup(ctx context.Context, request Query5GVnGroupRequestObject) (Query5GVnGroupResponseObject, error)
	// Retrieves the data of 5G VN Group
	// (GET /subscription-data/group-data/5g-vn-groups/internal)
	Query5GVnGroupInternal(ctx context.Context, request Query5GVnGroupInternalRequestObject) (Query5GVnGroupInternalResponseObject, error)
	// Retrieves the parameter provision profile data for 5G VN Group
	// (GET /subscription-data/group-data/5g-vn-groups/pp-profile-data)
	Query5GVNGroupPPData(ctx context.Context, request Query5GVNGroupPPDataRequestObject) (Query5GVNGroupPPDataResponseObject, error)
	// Deletes the 5GVnGroup
	// (DELETE /subscription-data/group-data/5g-vn-groups/{externalGroupId})
	Delete5GVnGroup(ctx context.Context, request Delete5GVnGroupRequestObject) (Delete5GVnGroupResponseObject, error)
	// Retrieve a 5GVnGroup configuration
	// (GET /subscription-data/group-data/5g-vn-groups/{externalGroupId})
	Get5GVnGroupConfiguration(ctx context.Context, request Get5GVnGroupConfigurationRequestObject) (Get5GVnGroupConfigurationResponseObject, error)
	// modify the 5GVnGroup
	// (PATCH /subscription-data/group-data/5g-vn-groups/{externalGroupId})
	Modify5GVnGroup(ctx context.Context, request Modify5GVnGroupRequestObject) (Modify5GVnGroupResponseObject, error)
	// Create an individual 5G VN Grouop
	// (PUT /subscription-data/group-data/5g-vn-groups/{externalGroupId})
	Create5GVnGroup(ctx context.Context, request Create5GVnGroupRequestObject) (Create5GVnGroupResponseObject, error)
	// Mapping of Group Identifiers
	// (GET /subscription-data/group-data/group-identifiers)
	GetGroupIdentifiers(ctx context.Context, request GetGroupIdentifiersRequestObject) (GetGroupIdentifiersResponseObject, error)
	// Retrieves the ee profile data profile data of a group or anyUE
	// (GET /subscription-data/group-data/{ueGroupId}/ee-profile-data)
	QueryGroupEEData(ctx context.Context, request QueryGroupEEDataRequestObject) (QueryGroupEEDataResponseObject, error)
	// Retrieves the ee subscriptions of a group of UEs or any UE
	// (GET /subscription-data/group-data/{ueGroupId}/ee-subscriptions)
	QueryEeGroupSubscriptions(ctx context.Context, request QueryEeGroupSubscriptionsRequestObject) (QueryEeGroupSubscriptionsResponseObject, error)
	// Create individual EE subscription for a group of UEs or any UE
	// (POST /subscription-data/group-data/{ueGroupId}/ee-subscriptions)
	CreateEeGroupSubscriptions(ctx context.Context, request CreateEeGroupSubscriptionsRequestObject) (CreateEeGroupSubscriptionsResponseObject, error)
	// Deletes a eeSubscription for a group of UEs or any UE
	// (DELETE /subscription-data/group-data/{ueGroupId}/ee-subscriptions/{subsId})
	RemoveEeGroupSubscriptions(ctx context.Context, request RemoveEeGroupSubscriptionsRequestObject) (RemoveEeGroupSubscriptionsResponseObject, error)
	// Retrieve a individual eeSubscription for a group of UEs or any UE
	// (GET /subscription-data/group-data/{ueGroupId}/ee-subscriptions/{subsId})
	QueryEeGroupSubscription(ctx context.Context, request QueryEeGroupSubscriptionRequestObject) (QueryEeGroupSubscriptionResponseObject, error)
	// Modify an individual ee subscription for a group of a UEs
	// (PATCH /subscription-data/group-data/{ueGroupId}/ee-subscriptions/{subsId})
	ModifyEeGroupSubscription(ctx context.Context, request ModifyEeGroupSubscriptionRequestObject) (ModifyEeGroupSubscriptionResponseObject, error)
	// Update an individual ee subscription of a group of UEs or any UE
	// (PUT /subscription-data/group-data/{ueGroupId}/ee-subscriptions/{subsId})
	UpdateEeGroupSubscriptions(ctx context.Context, request UpdateEeGroupSubscriptionsRequestObject) (UpdateEeGroupSubscriptionsResponseObject, error)
	// retrieve shared data
	// (GET /subscription-data/shared-data)
	GetSharedData(ctx context.Context, request GetSharedDataRequestObject) (GetSharedDataResponseObject, error)
	// retrieve individual shared data
	// (GET /subscription-data/shared-data/{sharedDataId})
	GetIndividualSharedData(ctx context.Context, request GetIndividualSharedDataRequestObject) (GetIndividualSharedDataResponseObject, error)
	// Deletes subscriptions identified by a given ue-id parameter
	// (DELETE /subscription-data/subs-to-notify)
	RemoveMultipleSubscriptionDataSubscriptions(ctx context.Context, request RemoveMultipleSubscriptionDataSubscriptionsRequestObject) (RemoveMultipleSubscriptionDataSubscriptionsResponseObject, error)
	// Retrieves the list of subscriptions
	// (GET /subscription-data/subs-to-notify)
	QuerySubsToNotify(ctx context.Context, request QuerySubsToNotifyRequestObject) (QuerySubsToNotifyResponseObject, error)
	// Subscription data subscriptions
	// (POST /subscription-data/subs-to-notify)
	SubscriptionDataSubscriptions(ctx context.Context, request SubscriptionDataSubscriptionsRequestObject) (SubscriptionDataSubscriptionsResponseObject, error)
	// Deletes a subscriptionDataSubscriptions
	// (DELETE /subscription-data/subs-to-notify/{subsId})
	RemovesubscriptionDataSubscriptions(ctx context.Context, request RemovesubscriptionDataSubscriptionsRequestObject) (RemovesubscriptionDataSubscriptionsResponseObject, error)
	// Retrieves a individual subscriptionDataSubscription identified by subsId
	// (GET /subscription-data/subs-to-notify/{subsId})
	QuerySubscriptionDataSubscriptions(ctx context.Context, request QuerySubscriptionDataSubscriptionsRequestObject) (QuerySubscriptionDataSubscriptionsResponseObject, error)
	// Modify an individual subscriptionDataSubscription
	// (PATCH /subscription-data/subs-to-notify/{subsId})
	ModifysubscriptionDataSubscription(ctx context.Context, request ModifysubscriptionDataSubscriptionRequestObject) (ModifysubscriptionDataSubscriptionResponseObject, error)
	// To remove the Authentication Status of a UE
	// (DELETE /subscription-data/{ueId}/authentication-data/authentication-status)
	DeleteAuthenticationStatus(ctx context.Context, request DeleteAuthenticationStatusRequestObject) (DeleteAuthenticationStatusResponseObject, error)
	// Retrieves the Authentication Status of a UE
	// (GET /subscription-data/{ueId}/authentication-data/authentication-status)
	QueryAuthenticationStatus(ctx context.Context, request QueryAuthenticationStatusRequestObject) (QueryAuthenticationStatusResponseObject, error)
	// To store the Authentication Status data of a UE
	// (PUT /subscription-data/{ueId}/authentication-data/authentication-status)
	CreateAuthenticationStatus(ctx context.Context, request CreateAuthenticationStatusRequestObject) (CreateAuthenticationStatusResponseObject, error)
	// To remove the Individual Authentication Status of a UE
	// (DELETE /subscription-data/{ueId}/authentication-data/authentication-status/{servingNetworkName})
	DeleteIndividualAuthenticationStatus(ctx context.Context, request DeleteIndividualAuthenticationStatusRequestObject) (DeleteIndividualAuthenticationStatusResponseObject, error)
	// Retrieves the Individual Authentication Status of a UE
	// (GET /subscription-data/{ueId}/authentication-data/authentication-status/{servingNetworkName})
	QueryIndividualAuthenticationStatus(ctx context.Context, request QueryIndividualAuthenticationStatusRequestObject) (QueryIndividualAuthenticationStatusResponseObject, error)
	// To store the individual Authentication Status data of a UE
	// (PUT /subscription-data/{ueId}/authentication-data/authentication-status/{servingNetworkName})
	CreateIndividualAuthenticationStatus(ctx context.Context, request CreateIndividualAuthenticationStatusRequestObject) (CreateIndividualAuthenticationStatusResponseObject, error)
	// Retrieves the authentication subscription data of a UE
	// (GET /subscription-data/{ueId}/authentication-data/authentication-subscription)
	QueryAuthSubsData(ctx context.Context, request QueryAuthSubsDataRequestObject) (QueryAuthSubsDataResponseObject, error)
	// modify the authentication subscription data of a UE
	// (PATCH /subscription-data/{ueId}/authentication-data/authentication-subscription)
	ModifyAuthenticationSubscription(ctx context.Context, request ModifyAuthenticationSubscriptionRequestObject) (ModifyAuthenticationSubscriptionResponseObject, error)
	// Retrieve multiple context data sets of a UE
	// (GET /subscription-data/{ueId}/context-data)
	QueryContextData(ctx context.Context, request QueryContextDataRequestObject) (QueryContextDataResponseObject, error)
	// Retrieves the AMF context data of a UE using 3gpp access
	// (GET /subscription-data/{ueId}/context-data/amf-3gpp-access)
	QueryAmfContext3gpp(ctx context.Context, request QueryAmfContext3gppRequestObject) (QueryAmfContext3gppResponseObject, error)
	// To modify the AMF context data of a UE using 3gpp access in the UDR
	// (PATCH /subscription-data/{ueId}/context-data/amf-3gpp-access)
	AmfContext3gpp(ctx context.Context, request AmfContext3gppRequestObject) (AmfContext3gppResponseObject, error)
	// To store the AMF context data of a UE using 3gpp access in the UDR
	// (PUT /subscription-data/{ueId}/context-data/amf-3gpp-access)
	CreateAmfContext3gpp(ctx context.Context, request CreateAmfContext3gppRequestObject) (CreateAmfContext3gppResponseObject, error)
	// Retrieves the AMF context data of a UE using non-3gpp access
	// (GET /subscription-data/{ueId}/context-data/amf-non-3gpp-access)
	QueryAmfContextNon3gpp(ctx context.Context, request QueryAmfContextNon3gppRequestObject) (QueryAmfContextNon3gppResponseObject, error)
	// To modify the AMF context data of a UE using non 3gpp access in the UDR
	// (PATCH /subscription-data/{ueId}/context-data/amf-non-3gpp-access)
	AmfContextNon3gpp(ctx context.Context, request AmfContextNon3gppRequestObject) (AmfContextNon3gppResponseObject, error)
	// To store the AMF context data of a UE using non-3gpp access in the UDR
	// (PUT /subscription-data/{ueId}/context-data/amf-non-3gpp-access)
	CreateAmfContextNon3gpp(ctx context.Context, request CreateAmfContextNon3gppRequestObject) (CreateAmfContextNon3gppResponseObject, error)
	// Retrieves the ee subscriptions of a UE
	// (GET /subscription-data/{ueId}/context-data/ee-subscriptions)
	Queryeesubscriptions(ctx context.Context, request QueryeesubscriptionsRequestObject) (QueryeesubscriptionsResponseObject, error)
	// Create individual EE subscription
	// (POST /subscription-data/{ueId}/context-data/ee-subscriptions)
	CreateEeSubscriptions(ctx context.Context, request CreateEeSubscriptionsRequestObject) (CreateEeSubscriptionsResponseObject, error)
	// Deletes a eeSubscription
	// (DELETE /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId})
	RemoveeeSubscriptions(ctx context.Context, request RemoveeeSubscriptionsRequestObject) (RemoveeeSubscriptionsResponseObject, error)
	// Retrieve a eeSubscription
	// (GET /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId})
	QueryeeSubscription(ctx context.Context, request QueryeeSubscriptionRequestObject) (QueryeeSubscriptionResponseObject, error)
	// Modify an individual ee subscription of a UE
	// (PATCH /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId})
	ModifyEesubscription(ctx context.Context, request ModifyEesubscriptionRequestObject) (ModifyEesubscriptionResponseObject, error)
	// Update an individual ee subscriptions of a UE
	// (PUT /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId})
	UpdateEesubscriptions(ctx context.Context, request UpdateEesubscriptionsRequestObject) (UpdateEesubscriptionsResponseObject, error)
	// Deletes AMF Subscription Info for an eeSubscription
	// (DELETE /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/amf-subscriptions)
	RemoveAmfSubscriptionsInfo(ctx context.Context, request RemoveAmfSubscriptionsInfoRequestObject) (RemoveAmfSubscriptionsInfoResponseObject, error)
	// Retrieve AMF subscription Info
	// (GET /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/amf-subscriptions)
	GetAmfSubscriptionInfo(ctx context.Context, request GetAmfSubscriptionInfoRequestObject) (GetAmfSubscriptionInfoResponseObject, error)
	// modify the AMF Subscription Info
	// (PATCH /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/amf-subscriptions)
	ModifyAmfSubscriptionInfo(ctx context.Context, request ModifyAmfSubscriptionInfoRequestObject) (ModifyAmfSubscriptionInfoResponseObject, error)
	// Create AmfSubscriptions for an individual ee subscriptions of a UE
	// (PUT /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/amf-subscriptions)
	CreateAMFSubscriptions(ctx context.Context, request CreateAMFSubscriptionsRequestObject) (CreateAMFSubscriptionsResponseObject, error)
	// Delete HSS Subscription Info
	// (DELETE /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/hss-subscriptions)
	RemoveHssSubscriptionsInfo(ctx context.Context, request RemoveHssSubscriptionsInfoRequestObject) (RemoveHssSubscriptionsInfoResponseObject, error)
	// Retrieve HSS Subscription Info
	// (GET /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/hss-subscriptions)
	GetHssSubscriptionInfo(ctx context.Context, request GetHssSubscriptionInfoRequestObject) (GetHssSubscriptionInfoResponseObject, error)
	// Modify HSS Subscription Info
	// (PATCH /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/hss-subscriptions)
	ModifyHssSubscriptionInfo(ctx context.Context, request ModifyHssSubscriptionInfoRequestObject) (ModifyHssSubscriptionInfoResponseObject, error)
	// Create HSS Subscription Info
	// (PUT /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/hss-subscriptions)
	CreateHSSSubscriptions(ctx context.Context, request CreateHSSSubscriptionsRequestObject) (CreateHSSSubscriptionsResponseObject, error)
	// Delete SMF Subscription Info
	// (DELETE /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/smf-subscriptions)
	RemoveSmfSubscriptionsInfo(ctx context.Context, request RemoveSmfSubscriptionsInfoRequestObject) (RemoveSmfSubscriptionsInfoResponseObject, error)
	// Retrieve SMF Subscription Info
	// (GET /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/smf-subscriptions)
	GetSmfSubscriptionInfo(ctx context.Context, request GetSmfSubscriptionInfoRequestObject) (GetSmfSubscriptionInfoResponseObject, error)
	// Modify SMF Subscription Info
	// (PATCH /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/smf-subscriptions)
	ModifySmfSubscriptionInfo(ctx context.Context, request ModifySmfSubscriptionInfoRequestObject) (ModifySmfSubscriptionInfoResponseObject, error)
	// Create SMF Subscription Info
	// (PUT /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/smf-subscriptions)
	CreateSMFSubscriptions(ctx context.Context, request CreateSMFSubscriptionsRequestObject) (CreateSMFSubscriptionsResponseObject, error)
	// To remove the IP-SM-GW context data of a UE
	// (DELETE /subscription-data/{ueId}/context-data/ip-sm-gw)
	DeleteIpSmGwContext(ctx context.Context, request DeleteIpSmGwContextRequestObject) (DeleteIpSmGwContextResponseObject, error)
	// Retrieves the IP-SM-GW context data of a UE
	// (GET /subscription-data/{ueId}/context-data/ip-sm-gw)
	QueryIpSmGwContext(ctx context.Context, request QueryIpSmGwContextRequestObject) (QueryIpSmGwContextResponseObject, error)
	// Modify the IP-SM-GW context data of a UE
	// (PATCH /subscription-data/{ueId}/context-data/ip-sm-gw)
	ModifyIpSmGwContext(ctx context.Context, request ModifyIpSmGwContextRequestObject) (ModifyIpSmGwContextResponseObject, error)
	// Create the IP-SM-GW context data of a UE
	// (PUT /subscription-data/{ueId}/context-data/ip-sm-gw)
	CreateIpSmGwContext(ctx context.Context, request CreateIpSmGwContextRequestObject) (CreateIpSmGwContextResponseObject, error)
	// Retrieves the UE's Location Information
	// (GET /subscription-data/{ueId}/context-data/location)
	QueryUeLocation(ctx context.Context, request QueryUeLocationRequestObject) (QueryUeLocationResponseObject, error)
	// To remove the Message Waiting Data of the UE
	// (DELETE /subscription-data/{ueId}/context-data/mwd)
	DeleteMessageWaitingData(ctx context.Context, request DeleteMessageWaitingDataRequestObject) (DeleteMessageWaitingDataResponseObject, error)
	// Retrieves the Message Waiting Data of the UE
	// (GET /subscription-data/{ueId}/context-data/mwd)
	QueryMessageWaitingData(ctx context.Context, request QueryMessageWaitingDataRequestObject) (QueryMessageWaitingDataResponseObject, error)
	// Modify the Message Waiting Data of the UE
	// (PATCH /subscription-data/{ueId}/context-data/mwd)
	ModifyMessageWaitingData(ctx context.Context, request ModifyMessageWaitingDataRequestObject) (ModifyMessageWaitingDataResponseObject, error)
	// Create the Message Waiting Data of the UE
	// (PUT /subscription-data/{ueId}/context-data/mwd)
	CreateMessageWaitingData(ctx context.Context, request CreateMessageWaitingDataRequestObject) (CreateMessageWaitingDataResponseObject, error)
	// Retrieves the sdm subscriptions of a UE
	// (GET /subscription-data/{ueId}/context-data/sdm-subscriptions)
	Querysdmsubscriptions(ctx context.Context, request QuerysdmsubscriptionsRequestObject) (QuerysdmsubscriptionsResponseObject, error)
	// Create individual sdm subscription
	// (POST /subscription-data/{ueId}/context-data/sdm-subscriptions)
	CreateSdmSubscriptions(ctx context.Context, request CreateSdmSubscriptionsRequestObject) (CreateSdmSubscriptionsResponseObject, error)
	// Deletes a sdmsubscriptions
	// (DELETE /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId})
	RemovesdmSubscriptions(ctx context.Context, request RemovesdmSubscriptionsRequestObject) (RemovesdmSubscriptionsResponseObject, error)
	// Retrieves a individual sdmSubscription identified by subsId
	// (GET /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId})
	QuerysdmSubscription(ctx context.Context, request QuerysdmSubscriptionRequestObject) (QuerysdmSubscriptionResponseObject, error)
	// Modify an individual sdm subscription
	// (PATCH /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId})
	ModifysdmSubscription(ctx context.Context, request ModifysdmSubscriptionRequestObject) (ModifysdmSubscriptionResponseObject, error)
	// Update an individual sdm subscriptions of a UE
	// (PUT /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId})
	Updatesdmsubscriptions(ctx context.Context, request UpdatesdmsubscriptionsRequestObject) (UpdatesdmsubscriptionsResponseObject, error)
	// Delete HSS SDM Subscription Info
	// (DELETE /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId}/hss-sdm-subscriptions)
	RemoveHssSDMSubscriptionsInfo(ctx context.Context, request RemoveHssSDMSubscriptionsInfoRequestObject) (RemoveHssSDMSubscriptionsInfoResponseObject, error)
	// Retrieve HSS SDM Subscription Info
	// (GET /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId}/hss-sdm-subscriptions)
	GetHssSDMSubscriptionInfo(ctx context.Context, request GetHssSDMSubscriptionInfoRequestObject) (GetHssSDMSubscriptionInfoResponseObject, error)
	// Modify HSS SDM Subscription Info
	// (PATCH /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId}/hss-sdm-subscriptions)
	ModifyHssSDMSubscriptionInfo(ctx context.Context, request ModifyHssSDMSubscriptionInfoRequestObject) (ModifyHssSDMSubscriptionInfoResponseObject, error)
	// Create HSS SDM Subscription Info
	// (PUT /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId}/hss-sdm-subscriptions)
	CreateHSSSDMSubscriptions(ctx context.Context, request CreateHSSSDMSubscriptionsRequestObject) (CreateHSSSDMSubscriptionsResponseObject, error)
	// Retrieves the SMF registration list of a UE
	// (GET /subscription-data/{ueId}/context-data/smf-registrations)
	QuerySmfRegList(ctx context.Context, request QuerySmfRegListRequestObject) (QuerySmfRegListResponseObject, error)
	// To remove an individual SMF context data of a UE the UDR
	// (DELETE /subscription-data/{ueId}/context-data/smf-registrations/{pduSessionId})
	DeleteSmfRegistration(ctx context.Context, request DeleteSmfRegistrationRequestObject) (DeleteSmfRegistrationResponseObject, error)
	// Retrieves the individual SMF registration of a UE
	// (GET /subscription-data/{ueId}/context-data/smf-registrations/{pduSessionId})
	QuerySmfRegistration(ctx context.Context, request QuerySmfRegistrationRequestObject) (QuerySmfRegistrationResponseObject, error)
	// To create an individual SMF context data of a UE in the UDR
	// (PUT /subscription-data/{ueId}/context-data/smf-registrations/{pduSessionId})
	CreateOrUpdateSmfRegistration(ctx context.Context, request CreateOrUpdateSmfRegistrationRequestObject) (CreateOrUpdateSmfRegistrationResponseObject, error)
	// To remove the SMSF context data of a UE via 3GPP access
	// (DELETE /subscription-data/{ueId}/context-data/smsf-3gpp-access)
	DeleteSmsfContext3gpp(ctx context.Context, request DeleteSmsfContext3gppRequestObject) (DeleteSmsfContext3gppResponseObject, error)
	// Retrieves the SMSF context data of a UE using 3gpp access
	// (GET /subscription-data/{ueId}/context-data/smsf-3gpp-access)
	QuerySmsfContext3gpp(ctx context.Context, request QuerySmsfContext3gppRequestObject) (QuerySmsfContext3gppResponseObject, error)
	// Create the SMSF context data of a UE via 3GPP access
	// (PUT /subscription-data/{ueId}/context-data/smsf-3gpp-access)
	CreateSmsfContext3gpp(ctx context.Context, request CreateSmsfContext3gppRequestObject) (CreateSmsfContext3gppResponseObject, error)
	// To remove the SMSF context data of a UE via non-3GPP access
	// (DELETE /subscription-data/{ueId}/context-data/smsf-non-3gpp-access)
	DeleteSmsfContextNon3gpp(ctx context.Context, request DeleteSmsfContextNon3gppRequestObject) (DeleteSmsfContextNon3gppResponseObject, error)
	// Retrieves the SMSF context data of a UE using non-3gpp access
	// (GET /subscription-data/{ueId}/context-data/smsf-non-3gpp-access)
	QuerySmsfContextNon3gpp(ctx context.Context, request QuerySmsfContextNon3gppRequestObject) (QuerySmsfContextNon3gppResponseObject, error)
	// Create the SMSF context data of a UE via non-3GPP access
	// (PUT /subscription-data/{ueId}/context-data/smsf-non-3gpp-access)
	CreateSmsfContextNon3gpp(ctx context.Context, request CreateSmsfContextNon3gppRequestObject) (CreateSmsfContextNon3gppResponseObject, error)
	// Retrieves the subscribed enhanced Coverage Restriction Data of a UE
	// (GET /subscription-data/{ueId}/coverage-restriction-data)
	QueryCoverageRestrictionData(ctx context.Context, request QueryCoverageRestrictionDataRequestObject) (QueryCoverageRestrictionDataResponseObject, error)
	// Retrieves the ee profile data of a UE
	// (GET /subscription-data/{ueId}/ee-profile-data)
	QueryEEData(ctx context.Context, request QueryEEDataRequestObject) (QueryEEDataResponseObject, error)
	// Retrieve identity data by SUPI or GPSI
	// (GET /subscription-data/{ueId}/identity-data)
	GetIdentityData(ctx context.Context, request GetIdentityDataRequestObject) (GetIdentityDataResponseObject, error)
	// Retrieves the LCS Mobile Originated subscription data of a UE
	// (GET /subscription-data/{ueId}/lcs-mo-data)
	QueryLcsMoData(ctx context.Context, request QueryLcsMoDataRequestObject) (QueryLcsMoDataResponseObject, error)
	// Retrieves the LCS Privacy subscription data of a UE
	// (GET /subscription-data/{ueId}/lcs-privacy-data)
	QueryLcsPrivacyData(ctx context.Context, request QueryLcsPrivacyDataRequestObject) (QueryLcsPrivacyDataResponseObject, error)
	// Retrieve NIDD Authorization Data GPSI or External Group identifier
	// (GET /subscription-data/{ueId}/nidd-authorization-data)
	GetNiddAuData(ctx context.Context, request GetNiddAuDataRequestObject) (GetNiddAuDataResponseObject, error)
	// Retrieve ODB Data data by SUPI or GPSI
	// (GET /subscription-data/{ueId}/operator-determined-barring-data)
	GetOdbData(ctx context.Context, request GetOdbDataRequestObject) (GetOdbDataResponseObject, error)
	// Retrieves the operator specific data of a UE
	// (GET /subscription-data/{ueId}/operator-specific-data)
	QueryOperSpecData(ctx context.Context, request QueryOperSpecDataRequestObject) (QueryOperSpecDataResponseObject, error)
	// To modify operator specific data of a UE
	// (PATCH /subscription-data/{ueId}/operator-specific-data)
	ModifyOperSpecData(ctx context.Context, request ModifyOperSpecDataRequestObject) (ModifyOperSpecDataResponseObject, error)
	// Read the profile of a given UE
	// (GET /subscription-data/{ueId}/pp-data)
	GetppData(ctx context.Context, request GetppDataRequestObject) (GetppDataResponseObject, error)
	// modify the provisioned parameter data
	// (PATCH /subscription-data/{ueId}/pp-data)
	ModifyPpData(ctx context.Context, request ModifyPpDataRequestObject) (ModifyPpDataResponseObject, error)
	// Retrieves the parameter provision profile data of a UE
	// (GET /subscription-data/{ueId}/pp-profile-data)
	QueryPPData(ctx context.Context, request QueryPPDataRequestObject) (QueryPPDataResponseObject, error)
	// Retrieves the SoR acknowledgement information of a UE
	// (GET /subscription-data/{ueId}/ue-update-confirmation-data/sor-data)
	QueryAuthSoR(ctx context.Context, request QueryAuthSoRRequestObject) (QueryAuthSoRResponseObject, error)
	// To store the SoR acknowledgement information of a UE
	// (PUT /subscription-data/{ueId}/ue-update-confirmation-data/sor-data)
	CreateAuthenticationSoR(ctx context.Context, request CreateAuthenticationSoRRequestObject) (CreateAuthenticationSoRResponseObject, error)
	// Retrieves the CAG acknowledgement information of a UE
	// (GET /subscription-data/{ueId}/ue-update-confirmation-data/subscribed-cag)
	QueryCagAck(ctx context.Context, request QueryCagAckRequestObject) (QueryCagAckResponseObject, error)
	// To store the CAG update acknowledgement information of a UE
	// (PUT /subscription-data/{ueId}/ue-update-confirmation-data/subscribed-cag)
	CreateCagUpdateAck(ctx context.Context, request CreateCagUpdateAckRequestObject) (CreateCagUpdateAckResponseObject, error)
	// Retrieves the UPU acknowledgement information of a UE
	// (GET /subscription-data/{ueId}/ue-update-confirmation-data/subscribed-snssais)
	QueryNssaiAck(ctx context.Context, request QueryNssaiAckRequestObject) (QueryNssaiAckResponseObject, error)
	// To store the NSSAI update acknowledgement information of a UE
	// (PUT /subscription-data/{ueId}/ue-update-confirmation-data/subscribed-snssais)
	CreateOrUpdateNssaiAck(ctx context.Context, request CreateOrUpdateNssaiAckRequestObject) (CreateOrUpdateNssaiAckResponseObject, error)
	// Retrieves the UPU acknowledgement information of a UE
	// (GET /subscription-data/{ueId}/ue-update-confirmation-data/upu-data)
	QueryAuthUPU(ctx context.Context, request QueryAuthUPURequestObject) (QueryAuthUPUResponseObject, error)
	// To store the UPU acknowledgement information of a UE
	// (PUT /subscription-data/{ueId}/ue-update-confirmation-data/upu-data)
	CreateAuthenticationUPU(ctx context.Context, request CreateAuthenticationUPURequestObject) (CreateAuthenticationUPUResponseObject, error)
	// Retrieves the subscribed V2X Data of a UE
	// (GET /subscription-data/{ueId}/v2x-data)
	QueryV2xData(ctx context.Context, request QueryV2xDataRequestObject) (QueryV2xDataResponseObject, error)
	// Retrieve multiple provisioned data sets of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data)
	QueryProvisionedData(ctx context.Context, request QueryProvisionedDataRequestObject) (QueryProvisionedDataResponseObject, error)
	// Retrieves the access and mobility subscription data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/am-data)
	QueryAmData(ctx context.Context, request QueryAmDataRequestObject) (QueryAmDataResponseObject, error)
	// Retrieves the LCS Broadcast Assistance subscription data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/lcs-bca-data)
	QueryLcsBcaData(ctx context.Context, request QueryLcsBcaDataRequestObject) (QueryLcsBcaDataResponseObject, error)
	// Retrieves the Session Management subscription data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/sm-data)
	QuerySmData(ctx context.Context, request QuerySmDataRequestObject) (QuerySmDataResponseObject, error)
	// Retrieves the SMF selection subscription data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/smf-selection-subscription-data)
	QuerySmfSelectData(ctx context.Context, request QuerySmfSelectDataRequestObject) (QuerySmfSelectDataResponseObject, error)
	// Retrieves the SMS subscription data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/sms-data)
	QuerySmsData(ctx context.Context, request QuerySmsDataRequestObject) (QuerySmsDataResponseObject, error)
	// Retrieves the SMS management subscription data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/sms-mng-data)
	QuerySmsMngData(ctx context.Context, request QuerySmsMngDataRequestObject) (QuerySmsMngDataResponseObject, error)
	// Retrieves the trace configuration data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/trace-data)
	QueryTraceData(ctx context.Context, request QueryTraceDataRequestObject) (QueryTraceDataResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ReadBdtPolicyData operation middleware
func (sh *strictHandler) ReadBdtPolicyData(ctx *gin.Context, params ReadBdtPolicyDataParams) {
	var request ReadBdtPolicyDataRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadBdtPolicyData(ctx, request.(ReadBdtPolicyDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadBdtPolicyData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadBdtPolicyDataResponseObject); ok {
		if err := validResponse.VisitReadBdtPolicyDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIndividualAppliedBdtPolicyData operation middleware
func (sh *strictHandler) DeleteIndividualAppliedBdtPolicyData(ctx *gin.Context, bdtPolicyId string) {
	var request DeleteIndividualAppliedBdtPolicyDataRequestObject

	request.BdtPolicyId = bdtPolicyId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIndividualAppliedBdtPolicyData(ctx, request.(DeleteIndividualAppliedBdtPolicyDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIndividualAppliedBdtPolicyData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteIndividualAppliedBdtPolicyDataResponseObject); ok {
		if err := validResponse.VisitDeleteIndividualAppliedBdtPolicyDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateIndividualAppliedBdtPolicyData operation middleware
func (sh *strictHandler) UpdateIndividualAppliedBdtPolicyData(ctx *gin.Context, bdtPolicyId string) {
	var request UpdateIndividualAppliedBdtPolicyDataRequestObject

	request.BdtPolicyId = bdtPolicyId

	var body UpdateIndividualAppliedBdtPolicyDataApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateIndividualAppliedBdtPolicyData(ctx, request.(UpdateIndividualAppliedBdtPolicyDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateIndividualAppliedBdtPolicyData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateIndividualAppliedBdtPolicyDataResponseObject); ok {
		if err := validResponse.VisitUpdateIndividualAppliedBdtPolicyDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateIndividualAppliedBdtPolicyData operation middleware
func (sh *strictHandler) CreateIndividualAppliedBdtPolicyData(ctx *gin.Context, bdtPolicyId string) {
	var request CreateIndividualAppliedBdtPolicyDataRequestObject

	request.BdtPolicyId = bdtPolicyId

	var body CreateIndividualAppliedBdtPolicyDataJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateIndividualAppliedBdtPolicyData(ctx, request.(CreateIndividualAppliedBdtPolicyDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateIndividualAppliedBdtPolicyData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateIndividualAppliedBdtPolicyDataResponseObject); ok {
		if err := validResponse.VisitCreateIndividualAppliedBdtPolicyDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadInfluenceData operation middleware
func (sh *strictHandler) ReadInfluenceData(ctx *gin.Context, params ReadInfluenceDataParams) {
	var request ReadInfluenceDataRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadInfluenceData(ctx, request.(ReadInfluenceDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadInfluenceData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadInfluenceDataResponseObject); ok {
		if err := validResponse.VisitReadInfluenceDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadInfluenceDataSubscriptions operation middleware
func (sh *strictHandler) ReadInfluenceDataSubscriptions(ctx *gin.Context, params ReadInfluenceDataSubscriptionsParams) {
	var request ReadInfluenceDataSubscriptionsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadInfluenceDataSubscriptions(ctx, request.(ReadInfluenceDataSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadInfluenceDataSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadInfluenceDataSubscriptionsResponseObject); ok {
		if err := validResponse.VisitReadInfluenceDataSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateIndividualInfluenceDataSubscription operation middleware
func (sh *strictHandler) CreateIndividualInfluenceDataSubscription(ctx *gin.Context) {
	var request CreateIndividualInfluenceDataSubscriptionRequestObject

	var body CreateIndividualInfluenceDataSubscriptionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateIndividualInfluenceDataSubscription(ctx, request.(CreateIndividualInfluenceDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateIndividualInfluenceDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateIndividualInfluenceDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitCreateIndividualInfluenceDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIndividualInfluenceDataSubscription operation middleware
func (sh *strictHandler) DeleteIndividualInfluenceDataSubscription(ctx *gin.Context, subscriptionId string) {
	var request DeleteIndividualInfluenceDataSubscriptionRequestObject

	request.SubscriptionId = subscriptionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIndividualInfluenceDataSubscription(ctx, request.(DeleteIndividualInfluenceDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIndividualInfluenceDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteIndividualInfluenceDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitDeleteIndividualInfluenceDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadIndividualInfluenceDataSubscription operation middleware
func (sh *strictHandler) ReadIndividualInfluenceDataSubscription(ctx *gin.Context, subscriptionId string) {
	var request ReadIndividualInfluenceDataSubscriptionRequestObject

	request.SubscriptionId = subscriptionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadIndividualInfluenceDataSubscription(ctx, request.(ReadIndividualInfluenceDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadIndividualInfluenceDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadIndividualInfluenceDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitReadIndividualInfluenceDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplaceIndividualInfluenceDataSubscription operation middleware
func (sh *strictHandler) ReplaceIndividualInfluenceDataSubscription(ctx *gin.Context, subscriptionId string) {
	var request ReplaceIndividualInfluenceDataSubscriptionRequestObject

	request.SubscriptionId = subscriptionId

	var body ReplaceIndividualInfluenceDataSubscriptionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReplaceIndividualInfluenceDataSubscription(ctx, request.(ReplaceIndividualInfluenceDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplaceIndividualInfluenceDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReplaceIndividualInfluenceDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitReplaceIndividualInfluenceDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIndividualInfluenceData operation middleware
func (sh *strictHandler) DeleteIndividualInfluenceData(ctx *gin.Context, influenceId string) {
	var request DeleteIndividualInfluenceDataRequestObject

	request.InfluenceId = influenceId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIndividualInfluenceData(ctx, request.(DeleteIndividualInfluenceDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIndividualInfluenceData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteIndividualInfluenceDataResponseObject); ok {
		if err := validResponse.VisitDeleteIndividualInfluenceDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateIndividualInfluenceData operation middleware
func (sh *strictHandler) UpdateIndividualInfluenceData(ctx *gin.Context, influenceId string) {
	var request UpdateIndividualInfluenceDataRequestObject

	request.InfluenceId = influenceId

	var body UpdateIndividualInfluenceDataApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateIndividualInfluenceData(ctx, request.(UpdateIndividualInfluenceDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateIndividualInfluenceData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateIndividualInfluenceDataResponseObject); ok {
		if err := validResponse.VisitUpdateIndividualInfluenceDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateOrReplaceIndividualInfluenceData operation middleware
func (sh *strictHandler) CreateOrReplaceIndividualInfluenceData(ctx *gin.Context, influenceId string) {
	var request CreateOrReplaceIndividualInfluenceDataRequestObject

	request.InfluenceId = influenceId

	var body CreateOrReplaceIndividualInfluenceDataJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOrReplaceIndividualInfluenceData(ctx, request.(CreateOrReplaceIndividualInfluenceDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOrReplaceIndividualInfluenceData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateOrReplaceIndividualInfluenceDataResponseObject); ok {
		if err := validResponse.VisitCreateOrReplaceIndividualInfluenceDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadIPTVCongifurationData operation middleware
func (sh *strictHandler) ReadIPTVCongifurationData(ctx *gin.Context, params ReadIPTVCongifurationDataParams) {
	var request ReadIPTVCongifurationDataRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadIPTVCongifurationData(ctx, request.(ReadIPTVCongifurationDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadIPTVCongifurationData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadIPTVCongifurationDataResponseObject); ok {
		if err := validResponse.VisitReadIPTVCongifurationDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIndividualIPTVConfigurationData operation middleware
func (sh *strictHandler) DeleteIndividualIPTVConfigurationData(ctx *gin.Context, configurationId string) {
	var request DeleteIndividualIPTVConfigurationDataRequestObject

	request.ConfigurationId = configurationId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIndividualIPTVConfigurationData(ctx, request.(DeleteIndividualIPTVConfigurationDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIndividualIPTVConfigurationData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteIndividualIPTVConfigurationDataResponseObject); ok {
		if err := validResponse.VisitDeleteIndividualIPTVConfigurationDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PartialReplaceIndividualIPTVConfigurationData operation middleware
func (sh *strictHandler) PartialReplaceIndividualIPTVConfigurationData(ctx *gin.Context, configurationId string) {
	var request PartialReplaceIndividualIPTVConfigurationDataRequestObject

	request.ConfigurationId = configurationId

	var body PartialReplaceIndividualIPTVConfigurationDataApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PartialReplaceIndividualIPTVConfigurationData(ctx, request.(PartialReplaceIndividualIPTVConfigurationDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PartialReplaceIndividualIPTVConfigurationData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PartialReplaceIndividualIPTVConfigurationDataResponseObject); ok {
		if err := validResponse.VisitPartialReplaceIndividualIPTVConfigurationDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateOrReplaceIndividualIPTVConfigurationData operation middleware
func (sh *strictHandler) CreateOrReplaceIndividualIPTVConfigurationData(ctx *gin.Context, configurationId string) {
	var request CreateOrReplaceIndividualIPTVConfigurationDataRequestObject

	request.ConfigurationId = configurationId

	var body CreateOrReplaceIndividualIPTVConfigurationDataJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOrReplaceIndividualIPTVConfigurationData(ctx, request.(CreateOrReplaceIndividualIPTVConfigurationDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOrReplaceIndividualIPTVConfigurationData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateOrReplaceIndividualIPTVConfigurationDataResponseObject); ok {
		if err := validResponse.VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadPFDData operation middleware
func (sh *strictHandler) ReadPFDData(ctx *gin.Context, params ReadPFDDataParams) {
	var request ReadPFDDataRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadPFDData(ctx, request.(ReadPFDDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadPFDData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadPFDDataResponseObject); ok {
		if err := validResponse.VisitReadPFDDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIndividualPFDData operation middleware
func (sh *strictHandler) DeleteIndividualPFDData(ctx *gin.Context, appId string) {
	var request DeleteIndividualPFDDataRequestObject

	request.AppId = appId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIndividualPFDData(ctx, request.(DeleteIndividualPFDDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIndividualPFDData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteIndividualPFDDataResponseObject); ok {
		if err := validResponse.VisitDeleteIndividualPFDDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadIndividualPFDData operation middleware
func (sh *strictHandler) ReadIndividualPFDData(ctx *gin.Context, appId string) {
	var request ReadIndividualPFDDataRequestObject

	request.AppId = appId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadIndividualPFDData(ctx, request.(ReadIndividualPFDDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadIndividualPFDData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadIndividualPFDDataResponseObject); ok {
		if err := validResponse.VisitReadIndividualPFDDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateOrReplaceIndividualPFDData operation middleware
func (sh *strictHandler) CreateOrReplaceIndividualPFDData(ctx *gin.Context, appId string) {
	var request CreateOrReplaceIndividualPFDDataRequestObject

	request.AppId = appId

	var body CreateOrReplaceIndividualPFDDataJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOrReplaceIndividualPFDData(ctx, request.(CreateOrReplaceIndividualPFDDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOrReplaceIndividualPFDData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateOrReplaceIndividualPFDDataResponseObject); ok {
		if err := validResponse.VisitCreateOrReplaceIndividualPFDDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadServiceParameterData operation middleware
func (sh *strictHandler) ReadServiceParameterData(ctx *gin.Context, params ReadServiceParameterDataParams) {
	var request ReadServiceParameterDataRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadServiceParameterData(ctx, request.(ReadServiceParameterDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadServiceParameterData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadServiceParameterDataResponseObject); ok {
		if err := validResponse.VisitReadServiceParameterDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIndividualServiceParameterData operation middleware
func (sh *strictHandler) DeleteIndividualServiceParameterData(ctx *gin.Context, serviceParamId string) {
	var request DeleteIndividualServiceParameterDataRequestObject

	request.ServiceParamId = serviceParamId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIndividualServiceParameterData(ctx, request.(DeleteIndividualServiceParameterDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIndividualServiceParameterData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteIndividualServiceParameterDataResponseObject); ok {
		if err := validResponse.VisitDeleteIndividualServiceParameterDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateIndividualServiceParameterData operation middleware
func (sh *strictHandler) UpdateIndividualServiceParameterData(ctx *gin.Context, serviceParamId string) {
	var request UpdateIndividualServiceParameterDataRequestObject

	request.ServiceParamId = serviceParamId

	var body UpdateIndividualServiceParameterDataApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateIndividualServiceParameterData(ctx, request.(UpdateIndividualServiceParameterDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateIndividualServiceParameterData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateIndividualServiceParameterDataResponseObject); ok {
		if err := validResponse.VisitUpdateIndividualServiceParameterDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateOrReplaceServiceParameterData operation middleware
func (sh *strictHandler) CreateOrReplaceServiceParameterData(ctx *gin.Context, serviceParamId string) {
	var request CreateOrReplaceServiceParameterDataRequestObject

	request.ServiceParamId = serviceParamId

	var body CreateOrReplaceServiceParameterDataJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOrReplaceServiceParameterData(ctx, request.(CreateOrReplaceServiceParameterDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOrReplaceServiceParameterData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateOrReplaceServiceParameterDataResponseObject); ok {
		if err := validResponse.VisitCreateOrReplaceServiceParameterDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadApplicationDataChangeSubscriptions operation middleware
func (sh *strictHandler) ReadApplicationDataChangeSubscriptions(ctx *gin.Context, params ReadApplicationDataChangeSubscriptionsParams) {
	var request ReadApplicationDataChangeSubscriptionsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadApplicationDataChangeSubscriptions(ctx, request.(ReadApplicationDataChangeSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadApplicationDataChangeSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadApplicationDataChangeSubscriptionsResponseObject); ok {
		if err := validResponse.VisitReadApplicationDataChangeSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateIndividualApplicationDataSubscription operation middleware
func (sh *strictHandler) CreateIndividualApplicationDataSubscription(ctx *gin.Context) {
	var request CreateIndividualApplicationDataSubscriptionRequestObject

	var body CreateIndividualApplicationDataSubscriptionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateIndividualApplicationDataSubscription(ctx, request.(CreateIndividualApplicationDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateIndividualApplicationDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateIndividualApplicationDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitCreateIndividualApplicationDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIndividualApplicationDataSubscription operation middleware
func (sh *strictHandler) DeleteIndividualApplicationDataSubscription(ctx *gin.Context, subsId string) {
	var request DeleteIndividualApplicationDataSubscriptionRequestObject

	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIndividualApplicationDataSubscription(ctx, request.(DeleteIndividualApplicationDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIndividualApplicationDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteIndividualApplicationDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitDeleteIndividualApplicationDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadIndividualApplicationDataSubscription operation middleware
func (sh *strictHandler) ReadIndividualApplicationDataSubscription(ctx *gin.Context, subsId string) {
	var request ReadIndividualApplicationDataSubscriptionRequestObject

	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadIndividualApplicationDataSubscription(ctx, request.(ReadIndividualApplicationDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadIndividualApplicationDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadIndividualApplicationDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitReadIndividualApplicationDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplaceIndividualApplicationDataSubscription operation middleware
func (sh *strictHandler) ReplaceIndividualApplicationDataSubscription(ctx *gin.Context, subsId string) {
	var request ReplaceIndividualApplicationDataSubscriptionRequestObject

	request.SubsId = subsId

	var body ReplaceIndividualApplicationDataSubscriptionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReplaceIndividualApplicationDataSubscription(ctx, request.(ReplaceIndividualApplicationDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplaceIndividualApplicationDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReplaceIndividualApplicationDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitReplaceIndividualApplicationDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateIndividualExposureDataSubscription operation middleware
func (sh *strictHandler) CreateIndividualExposureDataSubscription(ctx *gin.Context) {
	var request CreateIndividualExposureDataSubscriptionRequestObject

	var body CreateIndividualExposureDataSubscriptionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateIndividualExposureDataSubscription(ctx, request.(CreateIndividualExposureDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateIndividualExposureDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateIndividualExposureDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitCreateIndividualExposureDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIndividualExposureDataSubscription operation middleware
func (sh *strictHandler) DeleteIndividualExposureDataSubscription(ctx *gin.Context, subId string) {
	var request DeleteIndividualExposureDataSubscriptionRequestObject

	request.SubId = subId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIndividualExposureDataSubscription(ctx, request.(DeleteIndividualExposureDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIndividualExposureDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteIndividualExposureDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitDeleteIndividualExposureDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplaceIndividualExposureDataSubscription operation middleware
func (sh *strictHandler) ReplaceIndividualExposureDataSubscription(ctx *gin.Context, subId string) {
	var request ReplaceIndividualExposureDataSubscriptionRequestObject

	request.SubId = subId

	var body ReplaceIndividualExposureDataSubscriptionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReplaceIndividualExposureDataSubscription(ctx, request.(ReplaceIndividualExposureDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplaceIndividualExposureDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReplaceIndividualExposureDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitReplaceIndividualExposureDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAccessAndMobilityData operation middleware
func (sh *strictHandler) DeleteAccessAndMobilityData(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request DeleteAccessAndMobilityDataRequestObject

	request.UeId = ueId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAccessAndMobilityData(ctx, request.(DeleteAccessAndMobilityDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAccessAndMobilityData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteAccessAndMobilityDataResponseObject); ok {
		if err := validResponse.VisitDeleteAccessAndMobilityDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryAccessAndMobilityData operation middleware
func (sh *strictHandler) QueryAccessAndMobilityData(ctx *gin.Context, ueId externalRef0.VarUeId, params QueryAccessAndMobilityDataParams) {
	var request QueryAccessAndMobilityDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryAccessAndMobilityData(ctx, request.(QueryAccessAndMobilityDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryAccessAndMobilityData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryAccessAndMobilityDataResponseObject); ok {
		if err := validResponse.VisitQueryAccessAndMobilityDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateAccessAndMobilityData operation middleware
func (sh *strictHandler) UpdateAccessAndMobilityData(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request UpdateAccessAndMobilityDataRequestObject

	request.UeId = ueId

	var body UpdateAccessAndMobilityDataApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateAccessAndMobilityData(ctx, request.(UpdateAccessAndMobilityDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateAccessAndMobilityData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateAccessAndMobilityDataResponseObject); ok {
		if err := validResponse.VisitUpdateAccessAndMobilityDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateOrReplaceAccessAndMobilityData operation middleware
func (sh *strictHandler) CreateOrReplaceAccessAndMobilityData(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request CreateOrReplaceAccessAndMobilityDataRequestObject

	request.UeId = ueId

	var body CreateOrReplaceAccessAndMobilityDataJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOrReplaceAccessAndMobilityData(ctx, request.(CreateOrReplaceAccessAndMobilityDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOrReplaceAccessAndMobilityData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateOrReplaceAccessAndMobilityDataResponseObject); ok {
		if err := validResponse.VisitCreateOrReplaceAccessAndMobilityDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSessionManagementData operation middleware
func (sh *strictHandler) DeleteSessionManagementData(ctx *gin.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId) {
	var request DeleteSessionManagementDataRequestObject

	request.UeId = ueId
	request.PduSessionId = pduSessionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSessionManagementData(ctx, request.(DeleteSessionManagementDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSessionManagementData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteSessionManagementDataResponseObject); ok {
		if err := validResponse.VisitDeleteSessionManagementDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QuerySessionManagementData operation middleware
func (sh *strictHandler) QuerySessionManagementData(ctx *gin.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, params QuerySessionManagementDataParams) {
	var request QuerySessionManagementDataRequestObject

	request.UeId = ueId
	request.PduSessionId = pduSessionId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QuerySessionManagementData(ctx, request.(QuerySessionManagementDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QuerySessionManagementData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QuerySessionManagementDataResponseObject); ok {
		if err := validResponse.VisitQuerySessionManagementDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateOrReplaceSessionManagementData operation middleware
func (sh *strictHandler) CreateOrReplaceSessionManagementData(ctx *gin.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId) {
	var request CreateOrReplaceSessionManagementDataRequestObject

	request.UeId = ueId
	request.PduSessionId = pduSessionId

	var body CreateOrReplaceSessionManagementDataJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOrReplaceSessionManagementData(ctx, request.(CreateOrReplaceSessionManagementDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOrReplaceSessionManagementData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateOrReplaceSessionManagementDataResponseObject); ok {
		if err := validResponse.VisitCreateOrReplaceSessionManagementDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadBdtData operation middleware
func (sh *strictHandler) ReadBdtData(ctx *gin.Context, params ReadBdtDataParams) {
	var request ReadBdtDataRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadBdtData(ctx, request.(ReadBdtDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadBdtData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadBdtDataResponseObject); ok {
		if err := validResponse.VisitReadBdtDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIndividualBdtData operation middleware
func (sh *strictHandler) DeleteIndividualBdtData(ctx *gin.Context, bdtReferenceId string) {
	var request DeleteIndividualBdtDataRequestObject

	request.BdtReferenceId = bdtReferenceId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIndividualBdtData(ctx, request.(DeleteIndividualBdtDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIndividualBdtData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteIndividualBdtDataResponseObject); ok {
		if err := validResponse.VisitDeleteIndividualBdtDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadIndividualBdtData operation middleware
func (sh *strictHandler) ReadIndividualBdtData(ctx *gin.Context, bdtReferenceId string, params ReadIndividualBdtDataParams) {
	var request ReadIndividualBdtDataRequestObject

	request.BdtReferenceId = bdtReferenceId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadIndividualBdtData(ctx, request.(ReadIndividualBdtDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadIndividualBdtData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadIndividualBdtDataResponseObject); ok {
		if err := validResponse.VisitReadIndividualBdtDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateIndividualBdtData operation middleware
func (sh *strictHandler) UpdateIndividualBdtData(ctx *gin.Context, bdtReferenceId string) {
	var request UpdateIndividualBdtDataRequestObject

	request.BdtReferenceId = bdtReferenceId

	var body UpdateIndividualBdtDataApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateIndividualBdtData(ctx, request.(UpdateIndividualBdtDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateIndividualBdtData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateIndividualBdtDataResponseObject); ok {
		if err := validResponse.VisitUpdateIndividualBdtDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateIndividualBdtData operation middleware
func (sh *strictHandler) CreateIndividualBdtData(ctx *gin.Context, bdtReferenceId string) {
	var request CreateIndividualBdtDataRequestObject

	request.BdtReferenceId = bdtReferenceId

	var body CreateIndividualBdtDataJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateIndividualBdtData(ctx, request.(CreateIndividualBdtDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateIndividualBdtData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateIndividualBdtDataResponseObject); ok {
		if err := validResponse.VisitCreateIndividualBdtDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadPlmnUePolicySet operation middleware
func (sh *strictHandler) ReadPlmnUePolicySet(ctx *gin.Context, plmnId string) {
	var request ReadPlmnUePolicySetRequestObject

	request.PlmnId = plmnId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadPlmnUePolicySet(ctx, request.(ReadPlmnUePolicySetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadPlmnUePolicySet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadPlmnUePolicySetResponseObject); ok {
		if err := validResponse.VisitReadPlmnUePolicySetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadSponsorConnectivityData operation middleware
func (sh *strictHandler) ReadSponsorConnectivityData(ctx *gin.Context, sponsorId string) {
	var request ReadSponsorConnectivityDataRequestObject

	request.SponsorId = sponsorId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadSponsorConnectivityData(ctx, request.(ReadSponsorConnectivityDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadSponsorConnectivityData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadSponsorConnectivityDataResponseObject); ok {
		if err := validResponse.VisitReadSponsorConnectivityDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateIndividualPolicyDataSubscription operation middleware
func (sh *strictHandler) CreateIndividualPolicyDataSubscription(ctx *gin.Context) {
	var request CreateIndividualPolicyDataSubscriptionRequestObject

	var body CreateIndividualPolicyDataSubscriptionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateIndividualPolicyDataSubscription(ctx, request.(CreateIndividualPolicyDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateIndividualPolicyDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateIndividualPolicyDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitCreateIndividualPolicyDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIndividualPolicyDataSubscription operation middleware
func (sh *strictHandler) DeleteIndividualPolicyDataSubscription(ctx *gin.Context, subsId string) {
	var request DeleteIndividualPolicyDataSubscriptionRequestObject

	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIndividualPolicyDataSubscription(ctx, request.(DeleteIndividualPolicyDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIndividualPolicyDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteIndividualPolicyDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitDeleteIndividualPolicyDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplaceIndividualPolicyDataSubscription operation middleware
func (sh *strictHandler) ReplaceIndividualPolicyDataSubscription(ctx *gin.Context, subsId string) {
	var request ReplaceIndividualPolicyDataSubscriptionRequestObject

	request.SubsId = subsId

	var body ReplaceIndividualPolicyDataSubscriptionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReplaceIndividualPolicyDataSubscription(ctx, request.(ReplaceIndividualPolicyDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplaceIndividualPolicyDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReplaceIndividualPolicyDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitReplaceIndividualPolicyDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadAccessAndMobilityPolicyData operation middleware
func (sh *strictHandler) ReadAccessAndMobilityPolicyData(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request ReadAccessAndMobilityPolicyDataRequestObject

	request.UeId = ueId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadAccessAndMobilityPolicyData(ctx, request.(ReadAccessAndMobilityPolicyDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadAccessAndMobilityPolicyData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadAccessAndMobilityPolicyDataResponseObject); ok {
		if err := validResponse.VisitReadAccessAndMobilityPolicyDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadOperatorSpecificData operation middleware
func (sh *strictHandler) ReadOperatorSpecificData(ctx *gin.Context, ueId externalRef0.VarUeId, params ReadOperatorSpecificDataParams) {
	var request ReadOperatorSpecificDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadOperatorSpecificData(ctx, request.(ReadOperatorSpecificDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadOperatorSpecificData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadOperatorSpecificDataResponseObject); ok {
		if err := validResponse.VisitReadOperatorSpecificDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateOperatorSpecificData operation middleware
func (sh *strictHandler) UpdateOperatorSpecificData(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request UpdateOperatorSpecificDataRequestObject

	request.UeId = ueId

	var body UpdateOperatorSpecificDataApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateOperatorSpecificData(ctx, request.(UpdateOperatorSpecificDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateOperatorSpecificData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateOperatorSpecificDataResponseObject); ok {
		if err := validResponse.VisitUpdateOperatorSpecificDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplaceOperatorSpecificData operation middleware
func (sh *strictHandler) ReplaceOperatorSpecificData(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request ReplaceOperatorSpecificDataRequestObject

	request.UeId = ueId

	var body ReplaceOperatorSpecificDataJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReplaceOperatorSpecificData(ctx, request.(ReplaceOperatorSpecificDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplaceOperatorSpecificData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReplaceOperatorSpecificDataResponseObject); ok {
		if err := validResponse.VisitReplaceOperatorSpecificDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadSessionManagementPolicyData operation middleware
func (sh *strictHandler) ReadSessionManagementPolicyData(ctx *gin.Context, ueId externalRef0.VarUeId, params ReadSessionManagementPolicyDataParams) {
	var request ReadSessionManagementPolicyDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadSessionManagementPolicyData(ctx, request.(ReadSessionManagementPolicyDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadSessionManagementPolicyData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadSessionManagementPolicyDataResponseObject); ok {
		if err := validResponse.VisitReadSessionManagementPolicyDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateSessionManagementPolicyData operation middleware
func (sh *strictHandler) UpdateSessionManagementPolicyData(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request UpdateSessionManagementPolicyDataRequestObject

	request.UeId = ueId

	var body UpdateSessionManagementPolicyDataApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSessionManagementPolicyData(ctx, request.(UpdateSessionManagementPolicyDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSessionManagementPolicyData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateSessionManagementPolicyDataResponseObject); ok {
		if err := validResponse.VisitUpdateSessionManagementPolicyDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUsageMonitoringInformation operation middleware
func (sh *strictHandler) DeleteUsageMonitoringInformation(ctx *gin.Context, ueId externalRef0.VarUeId, usageMonId string) {
	var request DeleteUsageMonitoringInformationRequestObject

	request.UeId = ueId
	request.UsageMonId = usageMonId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUsageMonitoringInformation(ctx, request.(DeleteUsageMonitoringInformationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUsageMonitoringInformation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteUsageMonitoringInformationResponseObject); ok {
		if err := validResponse.VisitDeleteUsageMonitoringInformationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadUsageMonitoringInformation operation middleware
func (sh *strictHandler) ReadUsageMonitoringInformation(ctx *gin.Context, ueId externalRef0.VarUeId, usageMonId string, params ReadUsageMonitoringInformationParams) {
	var request ReadUsageMonitoringInformationRequestObject

	request.UeId = ueId
	request.UsageMonId = usageMonId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadUsageMonitoringInformation(ctx, request.(ReadUsageMonitoringInformationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadUsageMonitoringInformation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadUsageMonitoringInformationResponseObject); ok {
		if err := validResponse.VisitReadUsageMonitoringInformationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUsageMonitoringResource operation middleware
func (sh *strictHandler) CreateUsageMonitoringResource(ctx *gin.Context, ueId externalRef0.VarUeId, usageMonId string) {
	var request CreateUsageMonitoringResourceRequestObject

	request.UeId = ueId
	request.UsageMonId = usageMonId

	var body CreateUsageMonitoringResourceJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUsageMonitoringResource(ctx, request.(CreateUsageMonitoringResourceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUsageMonitoringResource")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateUsageMonitoringResourceResponseObject); ok {
		if err := validResponse.VisitCreateUsageMonitoringResourceResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadUEPolicySet operation middleware
func (sh *strictHandler) ReadUEPolicySet(ctx *gin.Context, ueId externalRef0.VarUeId, params ReadUEPolicySetParams) {
	var request ReadUEPolicySetRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadUEPolicySet(ctx, request.(ReadUEPolicySetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadUEPolicySet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadUEPolicySetResponseObject); ok {
		if err := validResponse.VisitReadUEPolicySetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateUEPolicySet operation middleware
func (sh *strictHandler) UpdateUEPolicySet(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request UpdateUEPolicySetRequestObject

	request.UeId = ueId

	var body UpdateUEPolicySetApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUEPolicySet(ctx, request.(UpdateUEPolicySetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUEPolicySet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateUEPolicySetResponseObject); ok {
		if err := validResponse.VisitUpdateUEPolicySetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateOrReplaceUEPolicySet operation middleware
func (sh *strictHandler) CreateOrReplaceUEPolicySet(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request CreateOrReplaceUEPolicySetRequestObject

	request.UeId = ueId

	var body CreateOrReplaceUEPolicySetJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOrReplaceUEPolicySet(ctx, request.(CreateOrReplaceUEPolicySetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOrReplaceUEPolicySet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateOrReplaceUEPolicySetResponseObject); ok {
		if err := validResponse.VisitCreateOrReplaceUEPolicySetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Query5GVnGroup operation middleware
func (sh *strictHandler) Query5GVnGroup(ctx *gin.Context, params Query5GVnGroupParams) {
	var request Query5GVnGroupRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Query5GVnGroup(ctx, request.(Query5GVnGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Query5GVnGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(Query5GVnGroupResponseObject); ok {
		if err := validResponse.VisitQuery5GVnGroupResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Query5GVnGroupInternal operation middleware
func (sh *strictHandler) Query5GVnGroupInternal(ctx *gin.Context, params Query5GVnGroupInternalParams) {
	var request Query5GVnGroupInternalRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Query5GVnGroupInternal(ctx, request.(Query5GVnGroupInternalRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Query5GVnGroupInternal")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(Query5GVnGroupInternalResponseObject); ok {
		if err := validResponse.VisitQuery5GVnGroupInternalResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Query5GVNGroupPPData operation middleware
func (sh *strictHandler) Query5GVNGroupPPData(ctx *gin.Context, params Query5GVNGroupPPDataParams) {
	var request Query5GVNGroupPPDataRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Query5GVNGroupPPData(ctx, request.(Query5GVNGroupPPDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Query5GVNGroupPPData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(Query5GVNGroupPPDataResponseObject); ok {
		if err := validResponse.VisitQuery5GVNGroupPPDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Delete5GVnGroup operation middleware
func (sh *strictHandler) Delete5GVnGroup(ctx *gin.Context, externalGroupId externalRef3.ExtGroupId) {
	var request Delete5GVnGroupRequestObject

	request.ExternalGroupId = externalGroupId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Delete5GVnGroup(ctx, request.(Delete5GVnGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Delete5GVnGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(Delete5GVnGroupResponseObject); ok {
		if err := validResponse.VisitDelete5GVnGroupResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Get5GVnGroupConfiguration operation middleware
func (sh *strictHandler) Get5GVnGroupConfiguration(ctx *gin.Context, externalGroupId externalRef3.ExtGroupId) {
	var request Get5GVnGroupConfigurationRequestObject

	request.ExternalGroupId = externalGroupId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Get5GVnGroupConfiguration(ctx, request.(Get5GVnGroupConfigurationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Get5GVnGroupConfiguration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(Get5GVnGroupConfigurationResponseObject); ok {
		if err := validResponse.VisitGet5GVnGroupConfigurationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Modify5GVnGroup operation middleware
func (sh *strictHandler) Modify5GVnGroup(ctx *gin.Context, externalGroupId externalRef3.ExtGroupId, params Modify5GVnGroupParams) {
	var request Modify5GVnGroupRequestObject

	request.ExternalGroupId = externalGroupId
	request.Params = params

	var body Modify5GVnGroupApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Modify5GVnGroup(ctx, request.(Modify5GVnGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Modify5GVnGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(Modify5GVnGroupResponseObject); ok {
		if err := validResponse.VisitModify5GVnGroupResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Create5GVnGroup operation middleware
func (sh *strictHandler) Create5GVnGroup(ctx *gin.Context, externalGroupId externalRef3.ExtGroupId) {
	var request Create5GVnGroupRequestObject

	request.ExternalGroupId = externalGroupId

	var body Create5GVnGroupJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Create5GVnGroup(ctx, request.(Create5GVnGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Create5GVnGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(Create5GVnGroupResponseObject); ok {
		if err := validResponse.VisitCreate5GVnGroupResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGroupIdentifiers operation middleware
func (sh *strictHandler) GetGroupIdentifiers(ctx *gin.Context, params GetGroupIdentifiersParams) {
	var request GetGroupIdentifiersRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetGroupIdentifiers(ctx, request.(GetGroupIdentifiersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGroupIdentifiers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetGroupIdentifiersResponseObject); ok {
		if err := validResponse.VisitGetGroupIdentifiersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryGroupEEData operation middleware
func (sh *strictHandler) QueryGroupEEData(ctx *gin.Context, ueGroupId externalRef8.VarUeGroupId, params QueryGroupEEDataParams) {
	var request QueryGroupEEDataRequestObject

	request.UeGroupId = ueGroupId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryGroupEEData(ctx, request.(QueryGroupEEDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryGroupEEData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryGroupEEDataResponseObject); ok {
		if err := validResponse.VisitQueryGroupEEDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryEeGroupSubscriptions operation middleware
func (sh *strictHandler) QueryEeGroupSubscriptions(ctx *gin.Context, ueGroupId externalRef8.VarUeGroupId, params QueryEeGroupSubscriptionsParams) {
	var request QueryEeGroupSubscriptionsRequestObject

	request.UeGroupId = ueGroupId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryEeGroupSubscriptions(ctx, request.(QueryEeGroupSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryEeGroupSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryEeGroupSubscriptionsResponseObject); ok {
		if err := validResponse.VisitQueryEeGroupSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateEeGroupSubscriptions operation middleware
func (sh *strictHandler) CreateEeGroupSubscriptions(ctx *gin.Context, ueGroupId externalRef8.VarUeGroupId) {
	var request CreateEeGroupSubscriptionsRequestObject

	request.UeGroupId = ueGroupId

	var body CreateEeGroupSubscriptionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateEeGroupSubscriptions(ctx, request.(CreateEeGroupSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateEeGroupSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateEeGroupSubscriptionsResponseObject); ok {
		if err := validResponse.VisitCreateEeGroupSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemoveEeGroupSubscriptions operation middleware
func (sh *strictHandler) RemoveEeGroupSubscriptions(ctx *gin.Context, ueGroupId externalRef8.VarUeGroupId, subsId string) {
	var request RemoveEeGroupSubscriptionsRequestObject

	request.UeGroupId = ueGroupId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveEeGroupSubscriptions(ctx, request.(RemoveEeGroupSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveEeGroupSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RemoveEeGroupSubscriptionsResponseObject); ok {
		if err := validResponse.VisitRemoveEeGroupSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryEeGroupSubscription operation middleware
func (sh *strictHandler) QueryEeGroupSubscription(ctx *gin.Context, ueGroupId externalRef8.VarUeGroupId, subsId string) {
	var request QueryEeGroupSubscriptionRequestObject

	request.UeGroupId = ueGroupId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryEeGroupSubscription(ctx, request.(QueryEeGroupSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryEeGroupSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryEeGroupSubscriptionResponseObject); ok {
		if err := validResponse.VisitQueryEeGroupSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifyEeGroupSubscription operation middleware
func (sh *strictHandler) ModifyEeGroupSubscription(ctx *gin.Context, ueGroupId externalRef8.VarUeGroupId, subsId string, params ModifyEeGroupSubscriptionParams) {
	var request ModifyEeGroupSubscriptionRequestObject

	request.UeGroupId = ueGroupId
	request.SubsId = subsId
	request.Params = params

	var body ModifyEeGroupSubscriptionApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifyEeGroupSubscription(ctx, request.(ModifyEeGroupSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifyEeGroupSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifyEeGroupSubscriptionResponseObject); ok {
		if err := validResponse.VisitModifyEeGroupSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateEeGroupSubscriptions operation middleware
func (sh *strictHandler) UpdateEeGroupSubscriptions(ctx *gin.Context, ueGroupId externalRef8.VarUeGroupId, subsId string) {
	var request UpdateEeGroupSubscriptionsRequestObject

	request.UeGroupId = ueGroupId
	request.SubsId = subsId

	var body UpdateEeGroupSubscriptionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateEeGroupSubscriptions(ctx, request.(UpdateEeGroupSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateEeGroupSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateEeGroupSubscriptionsResponseObject); ok {
		if err := validResponse.VisitUpdateEeGroupSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSharedData operation middleware
func (sh *strictHandler) GetSharedData(ctx *gin.Context, params GetSharedDataParams) {
	var request GetSharedDataRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSharedData(ctx, request.(GetSharedDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSharedData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSharedDataResponseObject); ok {
		if err := validResponse.VisitGetSharedDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetIndividualSharedData operation middleware
func (sh *strictHandler) GetIndividualSharedData(ctx *gin.Context, sharedDataId externalRef3.SharedDataId, params GetIndividualSharedDataParams) {
	var request GetIndividualSharedDataRequestObject

	request.SharedDataId = sharedDataId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetIndividualSharedData(ctx, request.(GetIndividualSharedDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIndividualSharedData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetIndividualSharedDataResponseObject); ok {
		if err := validResponse.VisitGetIndividualSharedDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemoveMultipleSubscriptionDataSubscriptions operation middleware
func (sh *strictHandler) RemoveMultipleSubscriptionDataSubscriptions(ctx *gin.Context, params RemoveMultipleSubscriptionDataSubscriptionsParams) {
	var request RemoveMultipleSubscriptionDataSubscriptionsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveMultipleSubscriptionDataSubscriptions(ctx, request.(RemoveMultipleSubscriptionDataSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveMultipleSubscriptionDataSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RemoveMultipleSubscriptionDataSubscriptionsResponseObject); ok {
		if err := validResponse.VisitRemoveMultipleSubscriptionDataSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QuerySubsToNotify operation middleware
func (sh *strictHandler) QuerySubsToNotify(ctx *gin.Context, params QuerySubsToNotifyParams) {
	var request QuerySubsToNotifyRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QuerySubsToNotify(ctx, request.(QuerySubsToNotifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QuerySubsToNotify")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QuerySubsToNotifyResponseObject); ok {
		if err := validResponse.VisitQuerySubsToNotifyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SubscriptionDataSubscriptions operation middleware
func (sh *strictHandler) SubscriptionDataSubscriptions(ctx *gin.Context) {
	var request SubscriptionDataSubscriptionsRequestObject

	var body SubscriptionDataSubscriptionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SubscriptionDataSubscriptions(ctx, request.(SubscriptionDataSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SubscriptionDataSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SubscriptionDataSubscriptionsResponseObject); ok {
		if err := validResponse.VisitSubscriptionDataSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemovesubscriptionDataSubscriptions operation middleware
func (sh *strictHandler) RemovesubscriptionDataSubscriptions(ctx *gin.Context, subsId string) {
	var request RemovesubscriptionDataSubscriptionsRequestObject

	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemovesubscriptionDataSubscriptions(ctx, request.(RemovesubscriptionDataSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemovesubscriptionDataSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RemovesubscriptionDataSubscriptionsResponseObject); ok {
		if err := validResponse.VisitRemovesubscriptionDataSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QuerySubscriptionDataSubscriptions operation middleware
func (sh *strictHandler) QuerySubscriptionDataSubscriptions(ctx *gin.Context, subsId string) {
	var request QuerySubscriptionDataSubscriptionsRequestObject

	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QuerySubscriptionDataSubscriptions(ctx, request.(QuerySubscriptionDataSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QuerySubscriptionDataSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QuerySubscriptionDataSubscriptionsResponseObject); ok {
		if err := validResponse.VisitQuerySubscriptionDataSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifysubscriptionDataSubscription operation middleware
func (sh *strictHandler) ModifysubscriptionDataSubscription(ctx *gin.Context, subsId string, params ModifysubscriptionDataSubscriptionParams) {
	var request ModifysubscriptionDataSubscriptionRequestObject

	request.SubsId = subsId
	request.Params = params

	var body ModifysubscriptionDataSubscriptionApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifysubscriptionDataSubscription(ctx, request.(ModifysubscriptionDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifysubscriptionDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifysubscriptionDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitModifysubscriptionDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAuthenticationStatus operation middleware
func (sh *strictHandler) DeleteAuthenticationStatus(ctx *gin.Context, ueId externalRef0.Supi) {
	var request DeleteAuthenticationStatusRequestObject

	request.UeId = ueId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAuthenticationStatus(ctx, request.(DeleteAuthenticationStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAuthenticationStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteAuthenticationStatusResponseObject); ok {
		if err := validResponse.VisitDeleteAuthenticationStatusResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryAuthenticationStatus operation middleware
func (sh *strictHandler) QueryAuthenticationStatus(ctx *gin.Context, ueId externalRef0.Supi, params QueryAuthenticationStatusParams) {
	var request QueryAuthenticationStatusRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryAuthenticationStatus(ctx, request.(QueryAuthenticationStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryAuthenticationStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryAuthenticationStatusResponseObject); ok {
		if err := validResponse.VisitQueryAuthenticationStatusResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAuthenticationStatus operation middleware
func (sh *strictHandler) CreateAuthenticationStatus(ctx *gin.Context, ueId externalRef0.Supi) {
	var request CreateAuthenticationStatusRequestObject

	request.UeId = ueId

	var body CreateAuthenticationStatusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAuthenticationStatus(ctx, request.(CreateAuthenticationStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAuthenticationStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateAuthenticationStatusResponseObject); ok {
		if err := validResponse.VisitCreateAuthenticationStatusResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIndividualAuthenticationStatus operation middleware
func (sh *strictHandler) DeleteIndividualAuthenticationStatus(ctx *gin.Context, ueId externalRef0.Supi, servingNetworkName externalRef4.ServingNetworkName) {
	var request DeleteIndividualAuthenticationStatusRequestObject

	request.UeId = ueId
	request.ServingNetworkName = servingNetworkName

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIndividualAuthenticationStatus(ctx, request.(DeleteIndividualAuthenticationStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIndividualAuthenticationStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteIndividualAuthenticationStatusResponseObject); ok {
		if err := validResponse.VisitDeleteIndividualAuthenticationStatusResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryIndividualAuthenticationStatus operation middleware
func (sh *strictHandler) QueryIndividualAuthenticationStatus(ctx *gin.Context, ueId externalRef0.Supi, servingNetworkName externalRef4.ServingNetworkName, params QueryIndividualAuthenticationStatusParams) {
	var request QueryIndividualAuthenticationStatusRequestObject

	request.UeId = ueId
	request.ServingNetworkName = servingNetworkName
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryIndividualAuthenticationStatus(ctx, request.(QueryIndividualAuthenticationStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryIndividualAuthenticationStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryIndividualAuthenticationStatusResponseObject); ok {
		if err := validResponse.VisitQueryIndividualAuthenticationStatusResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateIndividualAuthenticationStatus operation middleware
func (sh *strictHandler) CreateIndividualAuthenticationStatus(ctx *gin.Context, ueId externalRef0.Supi, servingNetworkName externalRef4.ServingNetworkName) {
	var request CreateIndividualAuthenticationStatusRequestObject

	request.UeId = ueId
	request.ServingNetworkName = servingNetworkName

	var body CreateIndividualAuthenticationStatusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateIndividualAuthenticationStatus(ctx, request.(CreateIndividualAuthenticationStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateIndividualAuthenticationStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateIndividualAuthenticationStatusResponseObject); ok {
		if err := validResponse.VisitCreateIndividualAuthenticationStatusResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryAuthSubsData operation middleware
func (sh *strictHandler) QueryAuthSubsData(ctx *gin.Context, ueId externalRef0.Supi, params QueryAuthSubsDataParams) {
	var request QueryAuthSubsDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryAuthSubsData(ctx, request.(QueryAuthSubsDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryAuthSubsData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryAuthSubsDataResponseObject); ok {
		if err := validResponse.VisitQueryAuthSubsDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifyAuthenticationSubscription operation middleware
func (sh *strictHandler) ModifyAuthenticationSubscription(ctx *gin.Context, ueId externalRef0.Supi, params ModifyAuthenticationSubscriptionParams) {
	var request ModifyAuthenticationSubscriptionRequestObject

	request.UeId = ueId
	request.Params = params

	var body ModifyAuthenticationSubscriptionApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifyAuthenticationSubscription(ctx, request.(ModifyAuthenticationSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifyAuthenticationSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifyAuthenticationSubscriptionResponseObject); ok {
		if err := validResponse.VisitModifyAuthenticationSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryContextData operation middleware
func (sh *strictHandler) QueryContextData(ctx *gin.Context, ueId externalRef0.VarUeId, params QueryContextDataParams) {
	var request QueryContextDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryContextData(ctx, request.(QueryContextDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryContextData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryContextDataResponseObject); ok {
		if err := validResponse.VisitQueryContextDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryAmfContext3gpp operation middleware
func (sh *strictHandler) QueryAmfContext3gpp(ctx *gin.Context, ueId externalRef0.VarUeId, params QueryAmfContext3gppParams) {
	var request QueryAmfContext3gppRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryAmfContext3gpp(ctx, request.(QueryAmfContext3gppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryAmfContext3gpp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryAmfContext3gppResponseObject); ok {
		if err := validResponse.VisitQueryAmfContext3gppResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AmfContext3gpp operation middleware
func (sh *strictHandler) AmfContext3gpp(ctx *gin.Context, ueId externalRef0.VarUeId, params AmfContext3gppParams) {
	var request AmfContext3gppRequestObject

	request.UeId = ueId
	request.Params = params

	var body AmfContext3gppApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AmfContext3gpp(ctx, request.(AmfContext3gppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AmfContext3gpp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AmfContext3gppResponseObject); ok {
		if err := validResponse.VisitAmfContext3gppResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAmfContext3gpp operation middleware
func (sh *strictHandler) CreateAmfContext3gpp(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request CreateAmfContext3gppRequestObject

	request.UeId = ueId

	var body CreateAmfContext3gppJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAmfContext3gpp(ctx, request.(CreateAmfContext3gppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAmfContext3gpp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateAmfContext3gppResponseObject); ok {
		if err := validResponse.VisitCreateAmfContext3gppResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryAmfContextNon3gpp operation middleware
func (sh *strictHandler) QueryAmfContextNon3gpp(ctx *gin.Context, ueId externalRef0.VarUeId, params QueryAmfContextNon3gppParams) {
	var request QueryAmfContextNon3gppRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryAmfContextNon3gpp(ctx, request.(QueryAmfContextNon3gppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryAmfContextNon3gpp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryAmfContextNon3gppResponseObject); ok {
		if err := validResponse.VisitQueryAmfContextNon3gppResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AmfContextNon3gpp operation middleware
func (sh *strictHandler) AmfContextNon3gpp(ctx *gin.Context, ueId externalRef0.VarUeId, params AmfContextNon3gppParams) {
	var request AmfContextNon3gppRequestObject

	request.UeId = ueId
	request.Params = params

	var body AmfContextNon3gppApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AmfContextNon3gpp(ctx, request.(AmfContextNon3gppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AmfContextNon3gpp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AmfContextNon3gppResponseObject); ok {
		if err := validResponse.VisitAmfContextNon3gppResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAmfContextNon3gpp operation middleware
func (sh *strictHandler) CreateAmfContextNon3gpp(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request CreateAmfContextNon3gppRequestObject

	request.UeId = ueId

	var body CreateAmfContextNon3gppJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAmfContextNon3gpp(ctx, request.(CreateAmfContextNon3gppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAmfContextNon3gpp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateAmfContextNon3gppResponseObject); ok {
		if err := validResponse.VisitCreateAmfContextNon3gppResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Queryeesubscriptions operation middleware
func (sh *strictHandler) Queryeesubscriptions(ctx *gin.Context, ueId externalRef0.VarUeId, params QueryeesubscriptionsParams) {
	var request QueryeesubscriptionsRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Queryeesubscriptions(ctx, request.(QueryeesubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Queryeesubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryeesubscriptionsResponseObject); ok {
		if err := validResponse.VisitQueryeesubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateEeSubscriptions operation middleware
func (sh *strictHandler) CreateEeSubscriptions(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request CreateEeSubscriptionsRequestObject

	request.UeId = ueId

	var body CreateEeSubscriptionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateEeSubscriptions(ctx, request.(CreateEeSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateEeSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateEeSubscriptionsResponseObject); ok {
		if err := validResponse.VisitCreateEeSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemoveeeSubscriptions operation middleware
func (sh *strictHandler) RemoveeeSubscriptions(ctx *gin.Context, ueId externalRef0.VarUeId, subsId string) {
	var request RemoveeeSubscriptionsRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveeeSubscriptions(ctx, request.(RemoveeeSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveeeSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RemoveeeSubscriptionsResponseObject); ok {
		if err := validResponse.VisitRemoveeeSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryeeSubscription operation middleware
func (sh *strictHandler) QueryeeSubscription(ctx *gin.Context, ueId externalRef0.VarUeId, subsId string) {
	var request QueryeeSubscriptionRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryeeSubscription(ctx, request.(QueryeeSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryeeSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryeeSubscriptionResponseObject); ok {
		if err := validResponse.VisitQueryeeSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifyEesubscription operation middleware
func (sh *strictHandler) ModifyEesubscription(ctx *gin.Context, ueId externalRef0.VarUeId, subsId string, params ModifyEesubscriptionParams) {
	var request ModifyEesubscriptionRequestObject

	request.UeId = ueId
	request.SubsId = subsId
	request.Params = params

	var body ModifyEesubscriptionApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifyEesubscription(ctx, request.(ModifyEesubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifyEesubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifyEesubscriptionResponseObject); ok {
		if err := validResponse.VisitModifyEesubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateEesubscriptions operation middleware
func (sh *strictHandler) UpdateEesubscriptions(ctx *gin.Context, ueId externalRef0.VarUeId, subsId string) {
	var request UpdateEesubscriptionsRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	var body UpdateEesubscriptionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateEesubscriptions(ctx, request.(UpdateEesubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateEesubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateEesubscriptionsResponseObject); ok {
		if err := validResponse.VisitUpdateEesubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemoveAmfSubscriptionsInfo operation middleware
func (sh *strictHandler) RemoveAmfSubscriptionsInfo(ctx *gin.Context, ueId externalRef0.VarUeId, subsId string) {
	var request RemoveAmfSubscriptionsInfoRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveAmfSubscriptionsInfo(ctx, request.(RemoveAmfSubscriptionsInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveAmfSubscriptionsInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RemoveAmfSubscriptionsInfoResponseObject); ok {
		if err := validResponse.VisitRemoveAmfSubscriptionsInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAmfSubscriptionInfo operation middleware
func (sh *strictHandler) GetAmfSubscriptionInfo(ctx *gin.Context, ueId externalRef0.VarUeId, subsId string) {
	var request GetAmfSubscriptionInfoRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAmfSubscriptionInfo(ctx, request.(GetAmfSubscriptionInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAmfSubscriptionInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAmfSubscriptionInfoResponseObject); ok {
		if err := validResponse.VisitGetAmfSubscriptionInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifyAmfSubscriptionInfo operation middleware
func (sh *strictHandler) ModifyAmfSubscriptionInfo(ctx *gin.Context, ueId externalRef0.VarUeId, subsId string, params ModifyAmfSubscriptionInfoParams) {
	var request ModifyAmfSubscriptionInfoRequestObject

	request.UeId = ueId
	request.SubsId = subsId
	request.Params = params

	var body ModifyAmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifyAmfSubscriptionInfo(ctx, request.(ModifyAmfSubscriptionInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifyAmfSubscriptionInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifyAmfSubscriptionInfoResponseObject); ok {
		if err := validResponse.VisitModifyAmfSubscriptionInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAMFSubscriptions operation middleware
func (sh *strictHandler) CreateAMFSubscriptions(ctx *gin.Context, ueId externalRef0.VarUeId, subsId string) {
	var request CreateAMFSubscriptionsRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	var body CreateAMFSubscriptionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAMFSubscriptions(ctx, request.(CreateAMFSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAMFSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateAMFSubscriptionsResponseObject); ok {
		if err := validResponse.VisitCreateAMFSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemoveHssSubscriptionsInfo operation middleware
func (sh *strictHandler) RemoveHssSubscriptionsInfo(ctx *gin.Context, ueId externalRef0.VarUeId, subsId string) {
	var request RemoveHssSubscriptionsInfoRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveHssSubscriptionsInfo(ctx, request.(RemoveHssSubscriptionsInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveHssSubscriptionsInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RemoveHssSubscriptionsInfoResponseObject); ok {
		if err := validResponse.VisitRemoveHssSubscriptionsInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHssSubscriptionInfo operation middleware
func (sh *strictHandler) GetHssSubscriptionInfo(ctx *gin.Context, ueId externalRef0.VarUeId, subsId string) {
	var request GetHssSubscriptionInfoRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetHssSubscriptionInfo(ctx, request.(GetHssSubscriptionInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHssSubscriptionInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetHssSubscriptionInfoResponseObject); ok {
		if err := validResponse.VisitGetHssSubscriptionInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifyHssSubscriptionInfo operation middleware
func (sh *strictHandler) ModifyHssSubscriptionInfo(ctx *gin.Context, ueId externalRef0.VarUeId, subsId string, params ModifyHssSubscriptionInfoParams) {
	var request ModifyHssSubscriptionInfoRequestObject

	request.UeId = ueId
	request.SubsId = subsId
	request.Params = params

	var body ModifyHssSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifyHssSubscriptionInfo(ctx, request.(ModifyHssSubscriptionInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifyHssSubscriptionInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifyHssSubscriptionInfoResponseObject); ok {
		if err := validResponse.VisitModifyHssSubscriptionInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateHSSSubscriptions operation middleware
func (sh *strictHandler) CreateHSSSubscriptions(ctx *gin.Context, ueId externalRef0.VarUeId, subsId string) {
	var request CreateHSSSubscriptionsRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	var body CreateHSSSubscriptionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateHSSSubscriptions(ctx, request.(CreateHSSSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateHSSSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateHSSSubscriptionsResponseObject); ok {
		if err := validResponse.VisitCreateHSSSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemoveSmfSubscriptionsInfo operation middleware
func (sh *strictHandler) RemoveSmfSubscriptionsInfo(ctx *gin.Context, ueId externalRef0.VarUeId, subsId string) {
	var request RemoveSmfSubscriptionsInfoRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveSmfSubscriptionsInfo(ctx, request.(RemoveSmfSubscriptionsInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveSmfSubscriptionsInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RemoveSmfSubscriptionsInfoResponseObject); ok {
		if err := validResponse.VisitRemoveSmfSubscriptionsInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSmfSubscriptionInfo operation middleware
func (sh *strictHandler) GetSmfSubscriptionInfo(ctx *gin.Context, ueId externalRef0.VarUeId, subsId string) {
	var request GetSmfSubscriptionInfoRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSmfSubscriptionInfo(ctx, request.(GetSmfSubscriptionInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSmfSubscriptionInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSmfSubscriptionInfoResponseObject); ok {
		if err := validResponse.VisitGetSmfSubscriptionInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifySmfSubscriptionInfo operation middleware
func (sh *strictHandler) ModifySmfSubscriptionInfo(ctx *gin.Context, ueId externalRef0.VarUeId, subsId string, params ModifySmfSubscriptionInfoParams) {
	var request ModifySmfSubscriptionInfoRequestObject

	request.UeId = ueId
	request.SubsId = subsId
	request.Params = params

	var body ModifySmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifySmfSubscriptionInfo(ctx, request.(ModifySmfSubscriptionInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifySmfSubscriptionInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifySmfSubscriptionInfoResponseObject); ok {
		if err := validResponse.VisitModifySmfSubscriptionInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSMFSubscriptions operation middleware
func (sh *strictHandler) CreateSMFSubscriptions(ctx *gin.Context, ueId externalRef0.VarUeId, subsId string) {
	var request CreateSMFSubscriptionsRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	var body CreateSMFSubscriptionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSMFSubscriptions(ctx, request.(CreateSMFSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSMFSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateSMFSubscriptionsResponseObject); ok {
		if err := validResponse.VisitCreateSMFSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIpSmGwContext operation middleware
func (sh *strictHandler) DeleteIpSmGwContext(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request DeleteIpSmGwContextRequestObject

	request.UeId = ueId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIpSmGwContext(ctx, request.(DeleteIpSmGwContextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIpSmGwContext")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteIpSmGwContextResponseObject); ok {
		if err := validResponse.VisitDeleteIpSmGwContextResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryIpSmGwContext operation middleware
func (sh *strictHandler) QueryIpSmGwContext(ctx *gin.Context, ueId externalRef0.VarUeId, params QueryIpSmGwContextParams) {
	var request QueryIpSmGwContextRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryIpSmGwContext(ctx, request.(QueryIpSmGwContextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryIpSmGwContext")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryIpSmGwContextResponseObject); ok {
		if err := validResponse.VisitQueryIpSmGwContextResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifyIpSmGwContext operation middleware
func (sh *strictHandler) ModifyIpSmGwContext(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request ModifyIpSmGwContextRequestObject

	request.UeId = ueId

	var body ModifyIpSmGwContextApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifyIpSmGwContext(ctx, request.(ModifyIpSmGwContextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifyIpSmGwContext")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifyIpSmGwContextResponseObject); ok {
		if err := validResponse.VisitModifyIpSmGwContextResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateIpSmGwContext operation middleware
func (sh *strictHandler) CreateIpSmGwContext(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request CreateIpSmGwContextRequestObject

	request.UeId = ueId

	var body CreateIpSmGwContextJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateIpSmGwContext(ctx, request.(CreateIpSmGwContextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateIpSmGwContext")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateIpSmGwContextResponseObject); ok {
		if err := validResponse.VisitCreateIpSmGwContextResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryUeLocation operation middleware
func (sh *strictHandler) QueryUeLocation(ctx *gin.Context, ueId externalRef0.VarUeId, params QueryUeLocationParams) {
	var request QueryUeLocationRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryUeLocation(ctx, request.(QueryUeLocationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryUeLocation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryUeLocationResponseObject); ok {
		if err := validResponse.VisitQueryUeLocationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteMessageWaitingData operation middleware
func (sh *strictHandler) DeleteMessageWaitingData(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request DeleteMessageWaitingDataRequestObject

	request.UeId = ueId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteMessageWaitingData(ctx, request.(DeleteMessageWaitingDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteMessageWaitingData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteMessageWaitingDataResponseObject); ok {
		if err := validResponse.VisitDeleteMessageWaitingDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryMessageWaitingData operation middleware
func (sh *strictHandler) QueryMessageWaitingData(ctx *gin.Context, ueId externalRef0.VarUeId, params QueryMessageWaitingDataParams) {
	var request QueryMessageWaitingDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryMessageWaitingData(ctx, request.(QueryMessageWaitingDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryMessageWaitingData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryMessageWaitingDataResponseObject); ok {
		if err := validResponse.VisitQueryMessageWaitingDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifyMessageWaitingData operation middleware
func (sh *strictHandler) ModifyMessageWaitingData(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request ModifyMessageWaitingDataRequestObject

	request.UeId = ueId

	var body ModifyMessageWaitingDataApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifyMessageWaitingData(ctx, request.(ModifyMessageWaitingDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifyMessageWaitingData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifyMessageWaitingDataResponseObject); ok {
		if err := validResponse.VisitModifyMessageWaitingDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateMessageWaitingData operation middleware
func (sh *strictHandler) CreateMessageWaitingData(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request CreateMessageWaitingDataRequestObject

	request.UeId = ueId

	var body CreateMessageWaitingDataJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateMessageWaitingData(ctx, request.(CreateMessageWaitingDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateMessageWaitingData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateMessageWaitingDataResponseObject); ok {
		if err := validResponse.VisitCreateMessageWaitingDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Querysdmsubscriptions operation middleware
func (sh *strictHandler) Querysdmsubscriptions(ctx *gin.Context, ueId externalRef0.VarUeId, params QuerysdmsubscriptionsParams) {
	var request QuerysdmsubscriptionsRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Querysdmsubscriptions(ctx, request.(QuerysdmsubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Querysdmsubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QuerysdmsubscriptionsResponseObject); ok {
		if err := validResponse.VisitQuerysdmsubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSdmSubscriptions operation middleware
func (sh *strictHandler) CreateSdmSubscriptions(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request CreateSdmSubscriptionsRequestObject

	request.UeId = ueId

	var body CreateSdmSubscriptionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSdmSubscriptions(ctx, request.(CreateSdmSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSdmSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateSdmSubscriptionsResponseObject); ok {
		if err := validResponse.VisitCreateSdmSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemovesdmSubscriptions operation middleware
func (sh *strictHandler) RemovesdmSubscriptions(ctx *gin.Context, ueId externalRef0.VarUeId, subsId string) {
	var request RemovesdmSubscriptionsRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemovesdmSubscriptions(ctx, request.(RemovesdmSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemovesdmSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RemovesdmSubscriptionsResponseObject); ok {
		if err := validResponse.VisitRemovesdmSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QuerysdmSubscription operation middleware
func (sh *strictHandler) QuerysdmSubscription(ctx *gin.Context, ueId externalRef0.VarUeId, subsId string) {
	var request QuerysdmSubscriptionRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QuerysdmSubscription(ctx, request.(QuerysdmSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QuerysdmSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QuerysdmSubscriptionResponseObject); ok {
		if err := validResponse.VisitQuerysdmSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifysdmSubscription operation middleware
func (sh *strictHandler) ModifysdmSubscription(ctx *gin.Context, ueId externalRef0.VarUeId, subsId string, params ModifysdmSubscriptionParams) {
	var request ModifysdmSubscriptionRequestObject

	request.UeId = ueId
	request.SubsId = subsId
	request.Params = params

	var body ModifysdmSubscriptionApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifysdmSubscription(ctx, request.(ModifysdmSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifysdmSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifysdmSubscriptionResponseObject); ok {
		if err := validResponse.VisitModifysdmSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Updatesdmsubscriptions operation middleware
func (sh *strictHandler) Updatesdmsubscriptions(ctx *gin.Context, ueId externalRef0.VarUeId, subsId string) {
	var request UpdatesdmsubscriptionsRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	var body UpdatesdmsubscriptionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Updatesdmsubscriptions(ctx, request.(UpdatesdmsubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Updatesdmsubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdatesdmsubscriptionsResponseObject); ok {
		if err := validResponse.VisitUpdatesdmsubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemoveHssSDMSubscriptionsInfo operation middleware
func (sh *strictHandler) RemoveHssSDMSubscriptionsInfo(ctx *gin.Context, ueId externalRef0.VarUeId, subsId string) {
	var request RemoveHssSDMSubscriptionsInfoRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveHssSDMSubscriptionsInfo(ctx, request.(RemoveHssSDMSubscriptionsInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveHssSDMSubscriptionsInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RemoveHssSDMSubscriptionsInfoResponseObject); ok {
		if err := validResponse.VisitRemoveHssSDMSubscriptionsInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHssSDMSubscriptionInfo operation middleware
func (sh *strictHandler) GetHssSDMSubscriptionInfo(ctx *gin.Context, ueId externalRef0.VarUeId, subsId string) {
	var request GetHssSDMSubscriptionInfoRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetHssSDMSubscriptionInfo(ctx, request.(GetHssSDMSubscriptionInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHssSDMSubscriptionInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetHssSDMSubscriptionInfoResponseObject); ok {
		if err := validResponse.VisitGetHssSDMSubscriptionInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifyHssSDMSubscriptionInfo operation middleware
func (sh *strictHandler) ModifyHssSDMSubscriptionInfo(ctx *gin.Context, ueId externalRef0.VarUeId, subsId string, params ModifyHssSDMSubscriptionInfoParams) {
	var request ModifyHssSDMSubscriptionInfoRequestObject

	request.UeId = ueId
	request.SubsId = subsId
	request.Params = params

	var body ModifyHssSDMSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifyHssSDMSubscriptionInfo(ctx, request.(ModifyHssSDMSubscriptionInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifyHssSDMSubscriptionInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifyHssSDMSubscriptionInfoResponseObject); ok {
		if err := validResponse.VisitModifyHssSDMSubscriptionInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateHSSSDMSubscriptions operation middleware
func (sh *strictHandler) CreateHSSSDMSubscriptions(ctx *gin.Context, ueId externalRef0.VarUeId, subsId string) {
	var request CreateHSSSDMSubscriptionsRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	var body CreateHSSSDMSubscriptionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateHSSSDMSubscriptions(ctx, request.(CreateHSSSDMSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateHSSSDMSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateHSSSDMSubscriptionsResponseObject); ok {
		if err := validResponse.VisitCreateHSSSDMSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QuerySmfRegList operation middleware
func (sh *strictHandler) QuerySmfRegList(ctx *gin.Context, ueId externalRef0.VarUeId, params QuerySmfRegListParams) {
	var request QuerySmfRegListRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QuerySmfRegList(ctx, request.(QuerySmfRegListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QuerySmfRegList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QuerySmfRegListResponseObject); ok {
		if err := validResponse.VisitQuerySmfRegListResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSmfRegistration operation middleware
func (sh *strictHandler) DeleteSmfRegistration(ctx *gin.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId) {
	var request DeleteSmfRegistrationRequestObject

	request.UeId = ueId
	request.PduSessionId = pduSessionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSmfRegistration(ctx, request.(DeleteSmfRegistrationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSmfRegistration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteSmfRegistrationResponseObject); ok {
		if err := validResponse.VisitDeleteSmfRegistrationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QuerySmfRegistration operation middleware
func (sh *strictHandler) QuerySmfRegistration(ctx *gin.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, params QuerySmfRegistrationParams) {
	var request QuerySmfRegistrationRequestObject

	request.UeId = ueId
	request.PduSessionId = pduSessionId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QuerySmfRegistration(ctx, request.(QuerySmfRegistrationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QuerySmfRegistration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QuerySmfRegistrationResponseObject); ok {
		if err := validResponse.VisitQuerySmfRegistrationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateOrUpdateSmfRegistration operation middleware
func (sh *strictHandler) CreateOrUpdateSmfRegistration(ctx *gin.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId) {
	var request CreateOrUpdateSmfRegistrationRequestObject

	request.UeId = ueId
	request.PduSessionId = pduSessionId

	var body CreateOrUpdateSmfRegistrationJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOrUpdateSmfRegistration(ctx, request.(CreateOrUpdateSmfRegistrationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOrUpdateSmfRegistration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateOrUpdateSmfRegistrationResponseObject); ok {
		if err := validResponse.VisitCreateOrUpdateSmfRegistrationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSmsfContext3gpp operation middleware
func (sh *strictHandler) DeleteSmsfContext3gpp(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request DeleteSmsfContext3gppRequestObject

	request.UeId = ueId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSmsfContext3gpp(ctx, request.(DeleteSmsfContext3gppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSmsfContext3gpp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteSmsfContext3gppResponseObject); ok {
		if err := validResponse.VisitDeleteSmsfContext3gppResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QuerySmsfContext3gpp operation middleware
func (sh *strictHandler) QuerySmsfContext3gpp(ctx *gin.Context, ueId externalRef0.VarUeId, params QuerySmsfContext3gppParams) {
	var request QuerySmsfContext3gppRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QuerySmsfContext3gpp(ctx, request.(QuerySmsfContext3gppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QuerySmsfContext3gpp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QuerySmsfContext3gppResponseObject); ok {
		if err := validResponse.VisitQuerySmsfContext3gppResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSmsfContext3gpp operation middleware
func (sh *strictHandler) CreateSmsfContext3gpp(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request CreateSmsfContext3gppRequestObject

	request.UeId = ueId

	var body CreateSmsfContext3gppJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSmsfContext3gpp(ctx, request.(CreateSmsfContext3gppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSmsfContext3gpp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateSmsfContext3gppResponseObject); ok {
		if err := validResponse.VisitCreateSmsfContext3gppResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSmsfContextNon3gpp operation middleware
func (sh *strictHandler) DeleteSmsfContextNon3gpp(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request DeleteSmsfContextNon3gppRequestObject

	request.UeId = ueId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSmsfContextNon3gpp(ctx, request.(DeleteSmsfContextNon3gppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSmsfContextNon3gpp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteSmsfContextNon3gppResponseObject); ok {
		if err := validResponse.VisitDeleteSmsfContextNon3gppResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QuerySmsfContextNon3gpp operation middleware
func (sh *strictHandler) QuerySmsfContextNon3gpp(ctx *gin.Context, ueId externalRef0.VarUeId, params QuerySmsfContextNon3gppParams) {
	var request QuerySmsfContextNon3gppRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QuerySmsfContextNon3gpp(ctx, request.(QuerySmsfContextNon3gppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QuerySmsfContextNon3gpp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QuerySmsfContextNon3gppResponseObject); ok {
		if err := validResponse.VisitQuerySmsfContextNon3gppResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSmsfContextNon3gpp operation middleware
func (sh *strictHandler) CreateSmsfContextNon3gpp(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request CreateSmsfContextNon3gppRequestObject

	request.UeId = ueId

	var body CreateSmsfContextNon3gppJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSmsfContextNon3gpp(ctx, request.(CreateSmsfContextNon3gppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSmsfContextNon3gpp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateSmsfContextNon3gppResponseObject); ok {
		if err := validResponse.VisitCreateSmsfContextNon3gppResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryCoverageRestrictionData operation middleware
func (sh *strictHandler) QueryCoverageRestrictionData(ctx *gin.Context, ueId externalRef0.VarUeId, params QueryCoverageRestrictionDataParams) {
	var request QueryCoverageRestrictionDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryCoverageRestrictionData(ctx, request.(QueryCoverageRestrictionDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryCoverageRestrictionData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryCoverageRestrictionDataResponseObject); ok {
		if err := validResponse.VisitQueryCoverageRestrictionDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryEEData operation middleware
func (sh *strictHandler) QueryEEData(ctx *gin.Context, ueId externalRef0.VarUeId, params QueryEEDataParams) {
	var request QueryEEDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryEEData(ctx, request.(QueryEEDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryEEData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryEEDataResponseObject); ok {
		if err := validResponse.VisitQueryEEDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetIdentityData operation middleware
func (sh *strictHandler) GetIdentityData(ctx *gin.Context, ueId externalRef0.VarUeId, params GetIdentityDataParams) {
	var request GetIdentityDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetIdentityData(ctx, request.(GetIdentityDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIdentityData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetIdentityDataResponseObject); ok {
		if err := validResponse.VisitGetIdentityDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryLcsMoData operation middleware
func (sh *strictHandler) QueryLcsMoData(ctx *gin.Context, ueId externalRef0.VarUeId, params QueryLcsMoDataParams) {
	var request QueryLcsMoDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryLcsMoData(ctx, request.(QueryLcsMoDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryLcsMoData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryLcsMoDataResponseObject); ok {
		if err := validResponse.VisitQueryLcsMoDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryLcsPrivacyData operation middleware
func (sh *strictHandler) QueryLcsPrivacyData(ctx *gin.Context, ueId externalRef0.VarUeId, params QueryLcsPrivacyDataParams) {
	var request QueryLcsPrivacyDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryLcsPrivacyData(ctx, request.(QueryLcsPrivacyDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryLcsPrivacyData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryLcsPrivacyDataResponseObject); ok {
		if err := validResponse.VisitQueryLcsPrivacyDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNiddAuData operation middleware
func (sh *strictHandler) GetNiddAuData(ctx *gin.Context, ueId string, params GetNiddAuDataParams) {
	var request GetNiddAuDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetNiddAuData(ctx, request.(GetNiddAuDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNiddAuData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetNiddAuDataResponseObject); ok {
		if err := validResponse.VisitGetNiddAuDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetOdbData operation middleware
func (sh *strictHandler) GetOdbData(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request GetOdbDataRequestObject

	request.UeId = ueId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOdbData(ctx, request.(GetOdbDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOdbData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetOdbDataResponseObject); ok {
		if err := validResponse.VisitGetOdbDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryOperSpecData operation middleware
func (sh *strictHandler) QueryOperSpecData(ctx *gin.Context, ueId externalRef0.VarUeId, params QueryOperSpecDataParams) {
	var request QueryOperSpecDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryOperSpecData(ctx, request.(QueryOperSpecDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryOperSpecData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryOperSpecDataResponseObject); ok {
		if err := validResponse.VisitQueryOperSpecDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifyOperSpecData operation middleware
func (sh *strictHandler) ModifyOperSpecData(ctx *gin.Context, ueId externalRef0.VarUeId, params ModifyOperSpecDataParams) {
	var request ModifyOperSpecDataRequestObject

	request.UeId = ueId
	request.Params = params

	var body ModifyOperSpecDataApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifyOperSpecData(ctx, request.(ModifyOperSpecDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifyOperSpecData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifyOperSpecDataResponseObject); ok {
		if err := validResponse.VisitModifyOperSpecDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetppData operation middleware
func (sh *strictHandler) GetppData(ctx *gin.Context, ueId externalRef0.VarUeId, params GetppDataParams) {
	var request GetppDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetppData(ctx, request.(GetppDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetppData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetppDataResponseObject); ok {
		if err := validResponse.VisitGetppDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifyPpData operation middleware
func (sh *strictHandler) ModifyPpData(ctx *gin.Context, ueId externalRef0.VarUeId, params ModifyPpDataParams) {
	var request ModifyPpDataRequestObject

	request.UeId = ueId
	request.Params = params

	var body ModifyPpDataApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifyPpData(ctx, request.(ModifyPpDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifyPpData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifyPpDataResponseObject); ok {
		if err := validResponse.VisitModifyPpDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryPPData operation middleware
func (sh *strictHandler) QueryPPData(ctx *gin.Context, ueId externalRef0.VarUeId, params QueryPPDataParams) {
	var request QueryPPDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryPPData(ctx, request.(QueryPPDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryPPData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryPPDataResponseObject); ok {
		if err := validResponse.VisitQueryPPDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryAuthSoR operation middleware
func (sh *strictHandler) QueryAuthSoR(ctx *gin.Context, ueId externalRef0.Supi, params QueryAuthSoRParams) {
	var request QueryAuthSoRRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryAuthSoR(ctx, request.(QueryAuthSoRRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryAuthSoR")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryAuthSoRResponseObject); ok {
		if err := validResponse.VisitQueryAuthSoRResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAuthenticationSoR operation middleware
func (sh *strictHandler) CreateAuthenticationSoR(ctx *gin.Context, ueId externalRef0.Supi, params CreateAuthenticationSoRParams) {
	var request CreateAuthenticationSoRRequestObject

	request.UeId = ueId
	request.Params = params

	var body CreateAuthenticationSoRJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAuthenticationSoR(ctx, request.(CreateAuthenticationSoRRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAuthenticationSoR")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateAuthenticationSoRResponseObject); ok {
		if err := validResponse.VisitCreateAuthenticationSoRResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryCagAck operation middleware
func (sh *strictHandler) QueryCagAck(ctx *gin.Context, ueId externalRef0.Supi, params QueryCagAckParams) {
	var request QueryCagAckRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryCagAck(ctx, request.(QueryCagAckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryCagAck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryCagAckResponseObject); ok {
		if err := validResponse.VisitQueryCagAckResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateCagUpdateAck operation middleware
func (sh *strictHandler) CreateCagUpdateAck(ctx *gin.Context, ueId externalRef0.Supi, params CreateCagUpdateAckParams) {
	var request CreateCagUpdateAckRequestObject

	request.UeId = ueId
	request.Params = params

	var body CreateCagUpdateAckJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCagUpdateAck(ctx, request.(CreateCagUpdateAckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCagUpdateAck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateCagUpdateAckResponseObject); ok {
		if err := validResponse.VisitCreateCagUpdateAckResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryNssaiAck operation middleware
func (sh *strictHandler) QueryNssaiAck(ctx *gin.Context, ueId externalRef0.Supi, params QueryNssaiAckParams) {
	var request QueryNssaiAckRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryNssaiAck(ctx, request.(QueryNssaiAckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryNssaiAck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryNssaiAckResponseObject); ok {
		if err := validResponse.VisitQueryNssaiAckResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateOrUpdateNssaiAck operation middleware
func (sh *strictHandler) CreateOrUpdateNssaiAck(ctx *gin.Context, ueId externalRef0.Supi, params CreateOrUpdateNssaiAckParams) {
	var request CreateOrUpdateNssaiAckRequestObject

	request.UeId = ueId
	request.Params = params

	var body CreateOrUpdateNssaiAckJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOrUpdateNssaiAck(ctx, request.(CreateOrUpdateNssaiAckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOrUpdateNssaiAck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateOrUpdateNssaiAckResponseObject); ok {
		if err := validResponse.VisitCreateOrUpdateNssaiAckResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryAuthUPU operation middleware
func (sh *strictHandler) QueryAuthUPU(ctx *gin.Context, ueId externalRef0.Supi, params QueryAuthUPUParams) {
	var request QueryAuthUPURequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryAuthUPU(ctx, request.(QueryAuthUPURequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryAuthUPU")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryAuthUPUResponseObject); ok {
		if err := validResponse.VisitQueryAuthUPUResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAuthenticationUPU operation middleware
func (sh *strictHandler) CreateAuthenticationUPU(ctx *gin.Context, ueId externalRef0.Supi, params CreateAuthenticationUPUParams) {
	var request CreateAuthenticationUPURequestObject

	request.UeId = ueId
	request.Params = params

	var body CreateAuthenticationUPUJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAuthenticationUPU(ctx, request.(CreateAuthenticationUPURequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAuthenticationUPU")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateAuthenticationUPUResponseObject); ok {
		if err := validResponse.VisitCreateAuthenticationUPUResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryV2xData operation middleware
func (sh *strictHandler) QueryV2xData(ctx *gin.Context, ueId externalRef0.VarUeId, params QueryV2xDataParams) {
	var request QueryV2xDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryV2xData(ctx, request.(QueryV2xDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryV2xData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryV2xDataResponseObject); ok {
		if err := validResponse.VisitQueryV2xDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryProvisionedData operation middleware
func (sh *strictHandler) QueryProvisionedData(ctx *gin.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params QueryProvisionedDataParams) {
	var request QueryProvisionedDataRequestObject

	request.UeId = ueId
	request.ServingPlmnId = servingPlmnId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryProvisionedData(ctx, request.(QueryProvisionedDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryProvisionedData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryProvisionedDataResponseObject); ok {
		if err := validResponse.VisitQueryProvisionedDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryAmData operation middleware
func (sh *strictHandler) QueryAmData(ctx *gin.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params QueryAmDataParams) {
	var request QueryAmDataRequestObject

	request.UeId = ueId
	request.ServingPlmnId = servingPlmnId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryAmData(ctx, request.(QueryAmDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryAmData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryAmDataResponseObject); ok {
		if err := validResponse.VisitQueryAmDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryLcsBcaData operation middleware
func (sh *strictHandler) QueryLcsBcaData(ctx *gin.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params QueryLcsBcaDataParams) {
	var request QueryLcsBcaDataRequestObject

	request.UeId = ueId
	request.ServingPlmnId = servingPlmnId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryLcsBcaData(ctx, request.(QueryLcsBcaDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryLcsBcaData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryLcsBcaDataResponseObject); ok {
		if err := validResponse.VisitQueryLcsBcaDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QuerySmData operation middleware
func (sh *strictHandler) QuerySmData(ctx *gin.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params QuerySmDataParams) {
	var request QuerySmDataRequestObject

	request.UeId = ueId
	request.ServingPlmnId = servingPlmnId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QuerySmData(ctx, request.(QuerySmDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QuerySmData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QuerySmDataResponseObject); ok {
		if err := validResponse.VisitQuerySmDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QuerySmfSelectData operation middleware
func (sh *strictHandler) QuerySmfSelectData(ctx *gin.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params QuerySmfSelectDataParams) {
	var request QuerySmfSelectDataRequestObject

	request.UeId = ueId
	request.ServingPlmnId = servingPlmnId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QuerySmfSelectData(ctx, request.(QuerySmfSelectDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QuerySmfSelectData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QuerySmfSelectDataResponseObject); ok {
		if err := validResponse.VisitQuerySmfSelectDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QuerySmsData operation middleware
func (sh *strictHandler) QuerySmsData(ctx *gin.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params QuerySmsDataParams) {
	var request QuerySmsDataRequestObject

	request.UeId = ueId
	request.ServingPlmnId = servingPlmnId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QuerySmsData(ctx, request.(QuerySmsDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QuerySmsData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QuerySmsDataResponseObject); ok {
		if err := validResponse.VisitQuerySmsDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QuerySmsMngData operation middleware
func (sh *strictHandler) QuerySmsMngData(ctx *gin.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params QuerySmsMngDataParams) {
	var request QuerySmsMngDataRequestObject

	request.UeId = ueId
	request.ServingPlmnId = servingPlmnId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QuerySmsMngData(ctx, request.(QuerySmsMngDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QuerySmsMngData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QuerySmsMngDataResponseObject); ok {
		if err := validResponse.VisitQuerySmsMngDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryTraceData operation middleware
func (sh *strictHandler) QueryTraceData(ctx *gin.Context, ueId externalRef0.VarUeId, servingPlmnId externalRef8.VarPlmnId, params QueryTraceDataParams) {
	var request QueryTraceDataRequestObject

	request.UeId = ueId
	request.ServingPlmnId = servingPlmnId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryTraceData(ctx, request.(QueryTraceDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryTraceData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryTraceDataResponseObject); ok {
		if err := validResponse.VisitQueryTraceDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
