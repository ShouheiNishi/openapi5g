// Package exposure provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.1-0.20240123090344-d326c01d279a DO NOT EDIT.
package exposure

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/models"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// QueryAccessAndMobilityDataParams defines parameters for QueryAccessAndMobilityData.
type QueryAccessAndMobilityDataParams struct {
	// SuppFeat Supported Features
	SuppFeat *externalRef0.SupportedFeatures `form:"supp-feat,omitempty" json:"supp-feat,omitempty"`
}

// QuerySessionManagementDataParams defines parameters for QuerySessionManagementData.
type QuerySessionManagementDataParams struct {
	// Ipv4Addr IPv4 Address of the UE
	Ipv4Addr *externalRef0.Ipv4Addr `form:"ipv4-addr,omitempty" json:"ipv4-addr,omitempty"`

	// Ipv6Prefix IPv6 Address Prefix of the UE
	Ipv6Prefix *externalRef0.Ipv6Prefix `form:"ipv6-prefix,omitempty" json:"ipv6-prefix,omitempty"`

	// Dnn DNN of the UE
	Dnn *externalRef0.Dnn `form:"dnn,omitempty" json:"dnn,omitempty"`

	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SuppFeat Supported Features
	SuppFeat *externalRef0.SupportedFeatures `form:"supp-feat,omitempty" json:"supp-feat,omitempty"`
}

// CreateIndividualExposureDataSubscriptionJSONRequestBody defines body for CreateIndividualExposureDataSubscription for application/json ContentType.
type CreateIndividualExposureDataSubscriptionJSONRequestBody = externalRef0.ExposureDataSubscription

// ReplaceIndividualExposureDataSubscriptionJSONRequestBody defines body for ReplaceIndividualExposureDataSubscription for application/json ContentType.
type ReplaceIndividualExposureDataSubscriptionJSONRequestBody = externalRef0.ExposureDataSubscription

// UpdateAccessAndMobilityDataApplicationMergePatchPlusJSONRequestBody defines body for UpdateAccessAndMobilityData for application/merge-patch+json ContentType.
type UpdateAccessAndMobilityDataApplicationMergePatchPlusJSONRequestBody = externalRef0.AccessAndMobilityData

// CreateOrReplaceAccessAndMobilityDataJSONRequestBody defines body for CreateOrReplaceAccessAndMobilityData for application/json ContentType.
type CreateOrReplaceAccessAndMobilityDataJSONRequestBody = externalRef0.AccessAndMobilityData

// CreateOrReplaceSessionManagementDataJSONRequestBody defines body for CreateOrReplaceSessionManagementData for application/json ContentType.
type CreateOrReplaceSessionManagementDataJSONRequestBody = externalRef0.PduSessionManagementData

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateIndividualExposureDataSubscriptionWithBody request with any body
	CreateIndividualExposureDataSubscriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIndividualExposureDataSubscription(ctx context.Context, body CreateIndividualExposureDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndividualExposureDataSubscription request
	DeleteIndividualExposureDataSubscription(ctx context.Context, subId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceIndividualExposureDataSubscriptionWithBody request with any body
	ReplaceIndividualExposureDataSubscriptionWithBody(ctx context.Context, subId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceIndividualExposureDataSubscription(ctx context.Context, subId string, body ReplaceIndividualExposureDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAccessAndMobilityData request
	DeleteAccessAndMobilityData(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryAccessAndMobilityData request
	QueryAccessAndMobilityData(ctx context.Context, ueId externalRef0.VarUeId, params *QueryAccessAndMobilityDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAccessAndMobilityDataWithBody request with any body
	UpdateAccessAndMobilityDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAccessAndMobilityDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, body UpdateAccessAndMobilityDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrReplaceAccessAndMobilityDataWithBody request with any body
	CreateOrReplaceAccessAndMobilityDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrReplaceAccessAndMobilityData(ctx context.Context, ueId externalRef0.VarUeId, body CreateOrReplaceAccessAndMobilityDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSessionManagementData request
	DeleteSessionManagementData(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuerySessionManagementData request
	QuerySessionManagementData(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, params *QuerySessionManagementDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrReplaceSessionManagementDataWithBody request with any body
	CreateOrReplaceSessionManagementDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrReplaceSessionManagementData(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, body CreateOrReplaceSessionManagementDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateIndividualExposureDataSubscriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualExposureDataSubscriptionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualExposureDataSubscription(ctx context.Context, body CreateIndividualExposureDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualExposureDataSubscriptionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndividualExposureDataSubscription(ctx context.Context, subId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndividualExposureDataSubscriptionRequest(c.Server, subId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceIndividualExposureDataSubscriptionWithBody(ctx context.Context, subId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceIndividualExposureDataSubscriptionRequestWithBody(c.Server, subId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceIndividualExposureDataSubscription(ctx context.Context, subId string, body ReplaceIndividualExposureDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceIndividualExposureDataSubscriptionRequest(c.Server, subId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAccessAndMobilityData(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccessAndMobilityDataRequest(c.Server, ueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryAccessAndMobilityData(ctx context.Context, ueId externalRef0.VarUeId, params *QueryAccessAndMobilityDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryAccessAndMobilityDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAccessAndMobilityDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAccessAndMobilityDataRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAccessAndMobilityDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, body UpdateAccessAndMobilityDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAccessAndMobilityDataRequestWithApplicationMergePatchPlusJSONBody(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceAccessAndMobilityDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceAccessAndMobilityDataRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceAccessAndMobilityData(ctx context.Context, ueId externalRef0.VarUeId, body CreateOrReplaceAccessAndMobilityDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceAccessAndMobilityDataRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSessionManagementData(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSessionManagementDataRequest(c.Server, ueId, pduSessionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuerySessionManagementData(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, params *QuerySessionManagementDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerySessionManagementDataRequest(c.Server, ueId, pduSessionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceSessionManagementDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceSessionManagementDataRequestWithBody(c.Server, ueId, pduSessionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceSessionManagementData(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, body CreateOrReplaceSessionManagementDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceSessionManagementDataRequest(c.Server, ueId, pduSessionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateIndividualExposureDataSubscriptionRequest calls the generic CreateIndividualExposureDataSubscription builder with application/json body
func NewCreateIndividualExposureDataSubscriptionRequest(server string, body CreateIndividualExposureDataSubscriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIndividualExposureDataSubscriptionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateIndividualExposureDataSubscriptionRequestWithBody generates requests for CreateIndividualExposureDataSubscription with any type of body
func NewCreateIndividualExposureDataSubscriptionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/exposure-data/subs-to-notify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIndividualExposureDataSubscriptionRequest generates requests for DeleteIndividualExposureDataSubscription
func NewDeleteIndividualExposureDataSubscriptionRequest(server string, subId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subId", runtime.ParamLocationPath, subId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/exposure-data/subs-to-notify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceIndividualExposureDataSubscriptionRequest calls the generic ReplaceIndividualExposureDataSubscription builder with application/json body
func NewReplaceIndividualExposureDataSubscriptionRequest(server string, subId string, body ReplaceIndividualExposureDataSubscriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceIndividualExposureDataSubscriptionRequestWithBody(server, subId, "application/json", bodyReader)
}

// NewReplaceIndividualExposureDataSubscriptionRequestWithBody generates requests for ReplaceIndividualExposureDataSubscription with any type of body
func NewReplaceIndividualExposureDataSubscriptionRequestWithBody(server string, subId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subId", runtime.ParamLocationPath, subId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/exposure-data/subs-to-notify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAccessAndMobilityDataRequest generates requests for DeleteAccessAndMobilityData
func NewDeleteAccessAndMobilityDataRequest(server string, ueId externalRef0.VarUeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/exposure-data/%s/access-and-mobility-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryAccessAndMobilityDataRequest generates requests for QueryAccessAndMobilityData
func NewQueryAccessAndMobilityDataRequest(server string, ueId externalRef0.VarUeId, params *QueryAccessAndMobilityDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/exposure-data/%s/access-and-mobility-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SuppFeat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supp-feat", runtime.ParamLocationQuery, *params.SuppFeat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAccessAndMobilityDataRequestWithApplicationMergePatchPlusJSONBody calls the generic UpdateAccessAndMobilityData builder with application/merge-patch+json body
func NewUpdateAccessAndMobilityDataRequestWithApplicationMergePatchPlusJSONBody(server string, ueId externalRef0.VarUeId, body UpdateAccessAndMobilityDataApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAccessAndMobilityDataRequestWithBody(server, ueId, "application/merge-patch+json", bodyReader)
}

// NewUpdateAccessAndMobilityDataRequestWithBody generates requests for UpdateAccessAndMobilityData with any type of body
func NewUpdateAccessAndMobilityDataRequestWithBody(server string, ueId externalRef0.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/exposure-data/%s/access-and-mobility-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateOrReplaceAccessAndMobilityDataRequest calls the generic CreateOrReplaceAccessAndMobilityData builder with application/json body
func NewCreateOrReplaceAccessAndMobilityDataRequest(server string, ueId externalRef0.VarUeId, body CreateOrReplaceAccessAndMobilityDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrReplaceAccessAndMobilityDataRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewCreateOrReplaceAccessAndMobilityDataRequestWithBody generates requests for CreateOrReplaceAccessAndMobilityData with any type of body
func NewCreateOrReplaceAccessAndMobilityDataRequestWithBody(server string, ueId externalRef0.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/exposure-data/%s/access-and-mobility-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSessionManagementDataRequest generates requests for DeleteSessionManagementData
func NewDeleteSessionManagementDataRequest(server string, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pduSessionId", runtime.ParamLocationPath, pduSessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/exposure-data/%s/session-management-data/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuerySessionManagementDataRequest generates requests for QuerySessionManagementData
func NewQuerySessionManagementDataRequest(server string, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, params *QuerySessionManagementDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pduSessionId", runtime.ParamLocationPath, pduSessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/exposure-data/%s/session-management-data/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ipv4Addr != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ipv4-addr", runtime.ParamLocationQuery, *params.Ipv4Addr); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ipv6Prefix != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ipv6-prefix", runtime.ParamLocationQuery, *params.Ipv6Prefix); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Dnn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnn", runtime.ParamLocationQuery, *params.Dnn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SuppFeat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supp-feat", runtime.ParamLocationQuery, *params.SuppFeat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrReplaceSessionManagementDataRequest calls the generic CreateOrReplaceSessionManagementData builder with application/json body
func NewCreateOrReplaceSessionManagementDataRequest(server string, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, body CreateOrReplaceSessionManagementDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrReplaceSessionManagementDataRequestWithBody(server, ueId, pduSessionId, "application/json", bodyReader)
}

// NewCreateOrReplaceSessionManagementDataRequestWithBody generates requests for CreateOrReplaceSessionManagementData with any type of body
func NewCreateOrReplaceSessionManagementDataRequestWithBody(server string, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pduSessionId", runtime.ParamLocationPath, pduSessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/exposure-data/%s/session-management-data/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateIndividualExposureDataSubscriptionWithBodyWithResponse request with any body
	CreateIndividualExposureDataSubscriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualExposureDataSubscriptionResponse, error)

	CreateIndividualExposureDataSubscriptionWithResponse(ctx context.Context, body CreateIndividualExposureDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualExposureDataSubscriptionResponse, error)

	// DeleteIndividualExposureDataSubscriptionWithResponse request
	DeleteIndividualExposureDataSubscriptionWithResponse(ctx context.Context, subId string, reqEditors ...RequestEditorFn) (*DeleteIndividualExposureDataSubscriptionResponse, error)

	// ReplaceIndividualExposureDataSubscriptionWithBodyWithResponse request with any body
	ReplaceIndividualExposureDataSubscriptionWithBodyWithResponse(ctx context.Context, subId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceIndividualExposureDataSubscriptionResponse, error)

	ReplaceIndividualExposureDataSubscriptionWithResponse(ctx context.Context, subId string, body ReplaceIndividualExposureDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceIndividualExposureDataSubscriptionResponse, error)

	// DeleteAccessAndMobilityDataWithResponse request
	DeleteAccessAndMobilityDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*DeleteAccessAndMobilityDataResponse, error)

	// QueryAccessAndMobilityDataWithResponse request
	QueryAccessAndMobilityDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryAccessAndMobilityDataParams, reqEditors ...RequestEditorFn) (*QueryAccessAndMobilityDataResponse, error)

	// UpdateAccessAndMobilityDataWithBodyWithResponse request with any body
	UpdateAccessAndMobilityDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccessAndMobilityDataResponse, error)

	UpdateAccessAndMobilityDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body UpdateAccessAndMobilityDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAccessAndMobilityDataResponse, error)

	// CreateOrReplaceAccessAndMobilityDataWithBodyWithResponse request with any body
	CreateOrReplaceAccessAndMobilityDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceAccessAndMobilityDataResponse, error)

	CreateOrReplaceAccessAndMobilityDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body CreateOrReplaceAccessAndMobilityDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceAccessAndMobilityDataResponse, error)

	// DeleteSessionManagementDataWithResponse request
	DeleteSessionManagementDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, reqEditors ...RequestEditorFn) (*DeleteSessionManagementDataResponse, error)

	// QuerySessionManagementDataWithResponse request
	QuerySessionManagementDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, params *QuerySessionManagementDataParams, reqEditors ...RequestEditorFn) (*QuerySessionManagementDataResponse, error)

	// CreateOrReplaceSessionManagementDataWithBodyWithResponse request with any body
	CreateOrReplaceSessionManagementDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceSessionManagementDataResponse, error)

	CreateOrReplaceSessionManagementDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, body CreateOrReplaceSessionManagementDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceSessionManagementDataResponse, error)
}

type CreateIndividualExposureDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef0.ExposureDataSubscription
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateIndividualExposureDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIndividualExposureDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndividualExposureDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteIndividualExposureDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndividualExposureDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceIndividualExposureDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.ExposureDataSubscription
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReplaceIndividualExposureDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceIndividualExposureDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAccessAndMobilityDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteAccessAndMobilityDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAccessAndMobilityDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryAccessAndMobilityDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.AccessAndMobilityData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QueryAccessAndMobilityDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryAccessAndMobilityDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAccessAndMobilityDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r UpdateAccessAndMobilityDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAccessAndMobilityDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrReplaceAccessAndMobilityDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.AccessAndMobilityData
	JSON201                       *externalRef0.AccessAndMobilityData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateOrReplaceAccessAndMobilityDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrReplaceAccessAndMobilityDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSessionManagementDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteSessionManagementDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSessionManagementDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerySessionManagementDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.PduSessionManagementData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r QuerySessionManagementDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerySessionManagementDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrReplaceSessionManagementDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.AccessAndMobilityData
	JSON201                       *externalRef0.PduSessionManagementData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateOrReplaceSessionManagementDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrReplaceSessionManagementDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateIndividualExposureDataSubscriptionWithBodyWithResponse request with arbitrary body returning *CreateIndividualExposureDataSubscriptionResponse
func (c *ClientWithResponses) CreateIndividualExposureDataSubscriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualExposureDataSubscriptionResponse, error) {
	rsp, err := c.CreateIndividualExposureDataSubscriptionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualExposureDataSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) CreateIndividualExposureDataSubscriptionWithResponse(ctx context.Context, body CreateIndividualExposureDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualExposureDataSubscriptionResponse, error) {
	rsp, err := c.CreateIndividualExposureDataSubscription(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualExposureDataSubscriptionResponse(rsp)
}

// DeleteIndividualExposureDataSubscriptionWithResponse request returning *DeleteIndividualExposureDataSubscriptionResponse
func (c *ClientWithResponses) DeleteIndividualExposureDataSubscriptionWithResponse(ctx context.Context, subId string, reqEditors ...RequestEditorFn) (*DeleteIndividualExposureDataSubscriptionResponse, error) {
	rsp, err := c.DeleteIndividualExposureDataSubscription(ctx, subId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndividualExposureDataSubscriptionResponse(rsp)
}

// ReplaceIndividualExposureDataSubscriptionWithBodyWithResponse request with arbitrary body returning *ReplaceIndividualExposureDataSubscriptionResponse
func (c *ClientWithResponses) ReplaceIndividualExposureDataSubscriptionWithBodyWithResponse(ctx context.Context, subId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceIndividualExposureDataSubscriptionResponse, error) {
	rsp, err := c.ReplaceIndividualExposureDataSubscriptionWithBody(ctx, subId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceIndividualExposureDataSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) ReplaceIndividualExposureDataSubscriptionWithResponse(ctx context.Context, subId string, body ReplaceIndividualExposureDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceIndividualExposureDataSubscriptionResponse, error) {
	rsp, err := c.ReplaceIndividualExposureDataSubscription(ctx, subId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceIndividualExposureDataSubscriptionResponse(rsp)
}

// DeleteAccessAndMobilityDataWithResponse request returning *DeleteAccessAndMobilityDataResponse
func (c *ClientWithResponses) DeleteAccessAndMobilityDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*DeleteAccessAndMobilityDataResponse, error) {
	rsp, err := c.DeleteAccessAndMobilityData(ctx, ueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccessAndMobilityDataResponse(rsp)
}

// QueryAccessAndMobilityDataWithResponse request returning *QueryAccessAndMobilityDataResponse
func (c *ClientWithResponses) QueryAccessAndMobilityDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *QueryAccessAndMobilityDataParams, reqEditors ...RequestEditorFn) (*QueryAccessAndMobilityDataResponse, error) {
	rsp, err := c.QueryAccessAndMobilityData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryAccessAndMobilityDataResponse(rsp)
}

// UpdateAccessAndMobilityDataWithBodyWithResponse request with arbitrary body returning *UpdateAccessAndMobilityDataResponse
func (c *ClientWithResponses) UpdateAccessAndMobilityDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccessAndMobilityDataResponse, error) {
	rsp, err := c.UpdateAccessAndMobilityDataWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccessAndMobilityDataResponse(rsp)
}

func (c *ClientWithResponses) UpdateAccessAndMobilityDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body UpdateAccessAndMobilityDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAccessAndMobilityDataResponse, error) {
	rsp, err := c.UpdateAccessAndMobilityDataWithApplicationMergePatchPlusJSONBody(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccessAndMobilityDataResponse(rsp)
}

// CreateOrReplaceAccessAndMobilityDataWithBodyWithResponse request with arbitrary body returning *CreateOrReplaceAccessAndMobilityDataResponse
func (c *ClientWithResponses) CreateOrReplaceAccessAndMobilityDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceAccessAndMobilityDataResponse, error) {
	rsp, err := c.CreateOrReplaceAccessAndMobilityDataWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceAccessAndMobilityDataResponse(rsp)
}

func (c *ClientWithResponses) CreateOrReplaceAccessAndMobilityDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body CreateOrReplaceAccessAndMobilityDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceAccessAndMobilityDataResponse, error) {
	rsp, err := c.CreateOrReplaceAccessAndMobilityData(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceAccessAndMobilityDataResponse(rsp)
}

// DeleteSessionManagementDataWithResponse request returning *DeleteSessionManagementDataResponse
func (c *ClientWithResponses) DeleteSessionManagementDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, reqEditors ...RequestEditorFn) (*DeleteSessionManagementDataResponse, error) {
	rsp, err := c.DeleteSessionManagementData(ctx, ueId, pduSessionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSessionManagementDataResponse(rsp)
}

// QuerySessionManagementDataWithResponse request returning *QuerySessionManagementDataResponse
func (c *ClientWithResponses) QuerySessionManagementDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, params *QuerySessionManagementDataParams, reqEditors ...RequestEditorFn) (*QuerySessionManagementDataResponse, error) {
	rsp, err := c.QuerySessionManagementData(ctx, ueId, pduSessionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerySessionManagementDataResponse(rsp)
}

// CreateOrReplaceSessionManagementDataWithBodyWithResponse request with arbitrary body returning *CreateOrReplaceSessionManagementDataResponse
func (c *ClientWithResponses) CreateOrReplaceSessionManagementDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceSessionManagementDataResponse, error) {
	rsp, err := c.CreateOrReplaceSessionManagementDataWithBody(ctx, ueId, pduSessionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceSessionManagementDataResponse(rsp)
}

func (c *ClientWithResponses) CreateOrReplaceSessionManagementDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, body CreateOrReplaceSessionManagementDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceSessionManagementDataResponse, error) {
	rsp, err := c.CreateOrReplaceSessionManagementData(ctx, ueId, pduSessionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceSessionManagementDataResponse(rsp)
}

// ParseCreateIndividualExposureDataSubscriptionResponse parses an HTTP response from a CreateIndividualExposureDataSubscriptionWithResponse call
func ParseCreateIndividualExposureDataSubscriptionResponse(rsp *http.Response) (*CreateIndividualExposureDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIndividualExposureDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef0.ExposureDataSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIndividualExposureDataSubscriptionResponse parses an HTTP response from a DeleteIndividualExposureDataSubscriptionWithResponse call
func ParseDeleteIndividualExposureDataSubscriptionResponse(rsp *http.Response) (*DeleteIndividualExposureDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndividualExposureDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceIndividualExposureDataSubscriptionResponse parses an HTTP response from a ReplaceIndividualExposureDataSubscriptionWithResponse call
func ParseReplaceIndividualExposureDataSubscriptionResponse(rsp *http.Response) (*ReplaceIndividualExposureDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceIndividualExposureDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.ExposureDataSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteAccessAndMobilityDataResponse parses an HTTP response from a DeleteAccessAndMobilityDataWithResponse call
func ParseDeleteAccessAndMobilityDataResponse(rsp *http.Response) (*DeleteAccessAndMobilityDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAccessAndMobilityDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryAccessAndMobilityDataResponse parses an HTTP response from a QueryAccessAndMobilityDataWithResponse call
func ParseQueryAccessAndMobilityDataResponse(rsp *http.Response) (*QueryAccessAndMobilityDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryAccessAndMobilityDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.AccessAndMobilityData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateAccessAndMobilityDataResponse parses an HTTP response from a UpdateAccessAndMobilityDataWithResponse call
func ParseUpdateAccessAndMobilityDataResponse(rsp *http.Response) (*UpdateAccessAndMobilityDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAccessAndMobilityDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateOrReplaceAccessAndMobilityDataResponse parses an HTTP response from a CreateOrReplaceAccessAndMobilityDataWithResponse call
func ParseCreateOrReplaceAccessAndMobilityDataResponse(rsp *http.Response) (*CreateOrReplaceAccessAndMobilityDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrReplaceAccessAndMobilityDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.AccessAndMobilityData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef0.AccessAndMobilityData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteSessionManagementDataResponse parses an HTTP response from a DeleteSessionManagementDataWithResponse call
func ParseDeleteSessionManagementDataResponse(rsp *http.Response) (*DeleteSessionManagementDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSessionManagementDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuerySessionManagementDataResponse parses an HTTP response from a QuerySessionManagementDataWithResponse call
func ParseQuerySessionManagementDataResponse(rsp *http.Response) (*QuerySessionManagementDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerySessionManagementDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.PduSessionManagementData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateOrReplaceSessionManagementDataResponse parses an HTTP response from a CreateOrReplaceSessionManagementDataWithResponse call
func ParseCreateOrReplaceSessionManagementDataResponse(rsp *http.Response) (*CreateOrReplaceSessionManagementDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrReplaceSessionManagementDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.AccessAndMobilityData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef0.PduSessionManagementData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a subscription to receive notification of exposure data changes
	// (POST /exposure-data/subs-to-notify)
	CreateIndividualExposureDataSubscription(c *gin.Context)
	// Deletes the individual Exposure Data subscription
	// (DELETE /exposure-data/subs-to-notify/{subId})
	DeleteIndividualExposureDataSubscription(c *gin.Context, subId string)
	// updates a subscription to receive notifications of exposure data changes
	// (PUT /exposure-data/subs-to-notify/{subId})
	ReplaceIndividualExposureDataSubscription(c *gin.Context, subId string)
	// Deletes the access and mobility exposure data for a UE
	// (DELETE /exposure-data/{ueId}/access-and-mobility-data)
	DeleteAccessAndMobilityData(c *gin.Context, ueId externalRef0.VarUeId)
	// Retrieves the access and mobility exposure data for a UE
	// (GET /exposure-data/{ueId}/access-and-mobility-data)
	QueryAccessAndMobilityData(c *gin.Context, ueId externalRef0.VarUeId, params QueryAccessAndMobilityDataParams)
	// Updates the access and mobility exposure data for a UE
	// (PATCH /exposure-data/{ueId}/access-and-mobility-data)
	UpdateAccessAndMobilityData(c *gin.Context, ueId externalRef0.VarUeId)
	// Creates and updates the access and mobility exposure data for a UE
	// (PUT /exposure-data/{ueId}/access-and-mobility-data)
	CreateOrReplaceAccessAndMobilityData(c *gin.Context, ueId externalRef0.VarUeId)
	// Deletes the session management data for a UE and for an individual PDU session
	// (DELETE /exposure-data/{ueId}/session-management-data/{pduSessionId})
	DeleteSessionManagementData(c *gin.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId)
	// Retrieves the session management data for a UE and for an individual PDU session
	// (GET /exposure-data/{ueId}/session-management-data/{pduSessionId})
	QuerySessionManagementData(c *gin.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, params QuerySessionManagementDataParams)
	// Creates and updates the session management data for a UE and for an individual PDU session
	// (PUT /exposure-data/{ueId}/session-management-data/{pduSessionId})
	CreateOrReplaceSessionManagementData(c *gin.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateIndividualExposureDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) CreateIndividualExposureDataSubscription(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateIndividualExposureDataSubscription(c)
}

// DeleteIndividualExposureDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) DeleteIndividualExposureDataSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "subId" -------------
	var subId string

	err = runtime.BindStyledParameterWithOptions("simple", "subId", c.Param("subId"), &subId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIndividualExposureDataSubscription(c, subId)
}

// ReplaceIndividualExposureDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) ReplaceIndividualExposureDataSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "subId" -------------
	var subId string

	err = runtime.BindStyledParameterWithOptions("simple", "subId", c.Param("subId"), &subId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReplaceIndividualExposureDataSubscription(c, subId)
}

// DeleteAccessAndMobilityData operation middleware
func (siw *ServerInterfaceWrapper) DeleteAccessAndMobilityData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAccessAndMobilityData(c, ueId)
}

// QueryAccessAndMobilityData operation middleware
func (siw *ServerInterfaceWrapper) QueryAccessAndMobilityData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryAccessAndMobilityDataParams

	// ------------- Optional query parameter "supp-feat" -------------

	err = runtime.BindQueryParameter("form", true, false, "supp-feat", c.Request.URL.Query(), &params.SuppFeat)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supp-feat: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryAccessAndMobilityData(c, ueId, params)
}

// UpdateAccessAndMobilityData operation middleware
func (siw *ServerInterfaceWrapper) UpdateAccessAndMobilityData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateAccessAndMobilityData(c, ueId)
}

// CreateOrReplaceAccessAndMobilityData operation middleware
func (siw *ServerInterfaceWrapper) CreateOrReplaceAccessAndMobilityData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrReplaceAccessAndMobilityData(c, ueId)
}

// DeleteSessionManagementData operation middleware
func (siw *ServerInterfaceWrapper) DeleteSessionManagementData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "pduSessionId" -------------
	var pduSessionId externalRef0.PduSessionId

	err = runtime.BindStyledParameterWithOptions("simple", "pduSessionId", c.Param("pduSessionId"), &pduSessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pduSessionId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteSessionManagementData(c, ueId, pduSessionId)
}

// QuerySessionManagementData operation middleware
func (siw *ServerInterfaceWrapper) QuerySessionManagementData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "pduSessionId" -------------
	var pduSessionId externalRef0.PduSessionId

	err = runtime.BindStyledParameterWithOptions("simple", "pduSessionId", c.Param("pduSessionId"), &pduSessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pduSessionId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QuerySessionManagementDataParams

	// ------------- Optional query parameter "ipv4-addr" -------------

	err = runtime.BindQueryParameter("form", true, false, "ipv4-addr", c.Request.URL.Query(), &params.Ipv4Addr)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ipv4-addr: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ipv6-prefix" -------------

	err = runtime.BindQueryParameter("form", true, false, "ipv6-prefix", c.Request.URL.Query(), &params.Ipv6Prefix)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ipv6-prefix: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "dnn" -------------

	err = runtime.BindQueryParameter("form", true, false, "dnn", c.Request.URL.Query(), &params.Dnn)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dnn: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supp-feat" -------------

	err = runtime.BindQueryParameter("form", true, false, "supp-feat", c.Request.URL.Query(), &params.SuppFeat)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supp-feat: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QuerySessionManagementData(c, ueId, pduSessionId, params)
}

// CreateOrReplaceSessionManagementData operation middleware
func (siw *ServerInterfaceWrapper) CreateOrReplaceSessionManagementData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "pduSessionId" -------------
	var pduSessionId externalRef0.PduSessionId

	err = runtime.BindStyledParameterWithOptions("simple", "pduSessionId", c.Param("pduSessionId"), &pduSessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pduSessionId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrReplaceSessionManagementData(c, ueId, pduSessionId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/exposure-data/subs-to-notify", wrapper.CreateIndividualExposureDataSubscription)
	router.DELETE(options.BaseURL+"/exposure-data/subs-to-notify/:subId", wrapper.DeleteIndividualExposureDataSubscription)
	router.PUT(options.BaseURL+"/exposure-data/subs-to-notify/:subId", wrapper.ReplaceIndividualExposureDataSubscription)
	router.DELETE(options.BaseURL+"/exposure-data/:ueId/access-and-mobility-data", wrapper.DeleteAccessAndMobilityData)
	router.GET(options.BaseURL+"/exposure-data/:ueId/access-and-mobility-data", wrapper.QueryAccessAndMobilityData)
	router.PATCH(options.BaseURL+"/exposure-data/:ueId/access-and-mobility-data", wrapper.UpdateAccessAndMobilityData)
	router.PUT(options.BaseURL+"/exposure-data/:ueId/access-and-mobility-data", wrapper.CreateOrReplaceAccessAndMobilityData)
	router.DELETE(options.BaseURL+"/exposure-data/:ueId/session-management-data/:pduSessionId", wrapper.DeleteSessionManagementData)
	router.GET(options.BaseURL+"/exposure-data/:ueId/session-management-data/:pduSessionId", wrapper.QuerySessionManagementData)
	router.PUT(options.BaseURL+"/exposure-data/:ueId/session-management-data/:pduSessionId", wrapper.CreateOrReplaceSessionManagementData)
}

type CreateIndividualExposureDataSubscriptionRequestObject struct {
	Body *CreateIndividualExposureDataSubscriptionJSONRequestBody
}

type CreateIndividualExposureDataSubscriptionResponseObject interface {
	VisitCreateIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error
}

type CreateIndividualExposureDataSubscription201ResponseHeaders struct {
	Location string
}

type CreateIndividualExposureDataSubscription201JSONResponse struct {
	Body    externalRef0.ExposureDataSubscription
	Headers CreateIndividualExposureDataSubscription201ResponseHeaders
}

func (response CreateIndividualExposureDataSubscription201JSONResponse) VisitCreateIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIndividualExposureDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualExposureDataSubscription400ApplicationProblemPlusJSONResponse) VisitCreateIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type CreateIndividualExposureDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualExposureDataSubscription401ApplicationProblemPlusJSONResponse) VisitCreateIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type CreateIndividualExposureDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualExposureDataSubscription403ApplicationProblemPlusJSONResponse) VisitCreateIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type CreateIndividualExposureDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualExposureDataSubscription404ApplicationProblemPlusJSONResponse) VisitCreateIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type CreateIndividualExposureDataSubscription411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualExposureDataSubscription411ApplicationProblemPlusJSONResponse) VisitCreateIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type CreateIndividualExposureDataSubscription413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualExposureDataSubscription413ApplicationProblemPlusJSONResponse) VisitCreateIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type CreateIndividualExposureDataSubscription415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualExposureDataSubscription415ApplicationProblemPlusJSONResponse) VisitCreateIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type CreateIndividualExposureDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualExposureDataSubscription429ApplicationProblemPlusJSONResponse) VisitCreateIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type CreateIndividualExposureDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualExposureDataSubscription500ApplicationProblemPlusJSONResponse) VisitCreateIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type CreateIndividualExposureDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualExposureDataSubscription503ApplicationProblemPlusJSONResponse) VisitCreateIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type CreateIndividualExposureDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateIndividualExposureDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitCreateIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualExposureDataSubscriptionRequestObject struct {
	SubId string `json:"subId"`
}

type DeleteIndividualExposureDataSubscriptionResponseObject interface {
	VisitDeleteIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error
}

type DeleteIndividualExposureDataSubscription204Response struct {
}

func (response DeleteIndividualExposureDataSubscription204Response) VisitDeleteIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIndividualExposureDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualExposureDataSubscription400ApplicationProblemPlusJSONResponse) VisitDeleteIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualExposureDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualExposureDataSubscription401ApplicationProblemPlusJSONResponse) VisitDeleteIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualExposureDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualExposureDataSubscription403ApplicationProblemPlusJSONResponse) VisitDeleteIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualExposureDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualExposureDataSubscription404ApplicationProblemPlusJSONResponse) VisitDeleteIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualExposureDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualExposureDataSubscription429ApplicationProblemPlusJSONResponse) VisitDeleteIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualExposureDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualExposureDataSubscription500ApplicationProblemPlusJSONResponse) VisitDeleteIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualExposureDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualExposureDataSubscription503ApplicationProblemPlusJSONResponse) VisitDeleteIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualExposureDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteIndividualExposureDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitDeleteIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReplaceIndividualExposureDataSubscriptionRequestObject struct {
	SubId string `json:"subId"`
	Body  *ReplaceIndividualExposureDataSubscriptionJSONRequestBody
}

type ReplaceIndividualExposureDataSubscriptionResponseObject interface {
	VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error
}

type ReplaceIndividualExposureDataSubscription200JSONResponse externalRef0.ExposureDataSubscription

func (response ReplaceIndividualExposureDataSubscription200JSONResponse) VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.ExposureDataSubscription(response))
}

type ReplaceIndividualExposureDataSubscription204Response struct {
}

func (response ReplaceIndividualExposureDataSubscription204Response) VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ReplaceIndividualExposureDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualExposureDataSubscription400ApplicationProblemPlusJSONResponse) VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualExposureDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualExposureDataSubscription401ApplicationProblemPlusJSONResponse) VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualExposureDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualExposureDataSubscription403ApplicationProblemPlusJSONResponse) VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualExposureDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualExposureDataSubscription404ApplicationProblemPlusJSONResponse) VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualExposureDataSubscription411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualExposureDataSubscription411ApplicationProblemPlusJSONResponse) VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualExposureDataSubscription413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualExposureDataSubscription413ApplicationProblemPlusJSONResponse) VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualExposureDataSubscription415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualExposureDataSubscription415ApplicationProblemPlusJSONResponse) VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualExposureDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualExposureDataSubscription429ApplicationProblemPlusJSONResponse) VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualExposureDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualExposureDataSubscription500ApplicationProblemPlusJSONResponse) VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualExposureDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualExposureDataSubscription503ApplicationProblemPlusJSONResponse) VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReplaceIndividualExposureDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReplaceIndividualExposureDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitReplaceIndividualExposureDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteAccessAndMobilityDataRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
}

type DeleteAccessAndMobilityDataResponseObject interface {
	VisitDeleteAccessAndMobilityDataResponse(w http.ResponseWriter) error
}

type DeleteAccessAndMobilityData204Response struct {
}

func (response DeleteAccessAndMobilityData204Response) VisitDeleteAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAccessAndMobilityData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteAccessAndMobilityData400ApplicationProblemPlusJSONResponse) VisitDeleteAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type DeleteAccessAndMobilityData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteAccessAndMobilityData401ApplicationProblemPlusJSONResponse) VisitDeleteAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type DeleteAccessAndMobilityData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteAccessAndMobilityData403ApplicationProblemPlusJSONResponse) VisitDeleteAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type DeleteAccessAndMobilityData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteAccessAndMobilityData404ApplicationProblemPlusJSONResponse) VisitDeleteAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type DeleteAccessAndMobilityData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteAccessAndMobilityData429ApplicationProblemPlusJSONResponse) VisitDeleteAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type DeleteAccessAndMobilityData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteAccessAndMobilityData500ApplicationProblemPlusJSONResponse) VisitDeleteAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type DeleteAccessAndMobilityData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteAccessAndMobilityData503ApplicationProblemPlusJSONResponse) VisitDeleteAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type DeleteAccessAndMobilityDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteAccessAndMobilityDatadefaultApplicationProblemPlusJSONResponse) VisitDeleteAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryAccessAndMobilityDataRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params QueryAccessAndMobilityDataParams
}

type QueryAccessAndMobilityDataResponseObject interface {
	VisitQueryAccessAndMobilityDataResponse(w http.ResponseWriter) error
}

type QueryAccessAndMobilityData200JSONResponse externalRef0.AccessAndMobilityData

func (response QueryAccessAndMobilityData200JSONResponse) VisitQueryAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.AccessAndMobilityData(response))
}

type QueryAccessAndMobilityData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response QueryAccessAndMobilityData400ApplicationProblemPlusJSONResponse) VisitQueryAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type QueryAccessAndMobilityData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response QueryAccessAndMobilityData401ApplicationProblemPlusJSONResponse) VisitQueryAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type QueryAccessAndMobilityData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response QueryAccessAndMobilityData403ApplicationProblemPlusJSONResponse) VisitQueryAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type QueryAccessAndMobilityData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response QueryAccessAndMobilityData404ApplicationProblemPlusJSONResponse) VisitQueryAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type QueryAccessAndMobilityData406Response externalRef0.N406Response

func (response QueryAccessAndMobilityData406Response) VisitQueryAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type QueryAccessAndMobilityData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response QueryAccessAndMobilityData414ApplicationProblemPlusJSONResponse) VisitQueryAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N414ApplicationProblemPlusJSONResponse))
}

type QueryAccessAndMobilityData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response QueryAccessAndMobilityData429ApplicationProblemPlusJSONResponse) VisitQueryAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type QueryAccessAndMobilityData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response QueryAccessAndMobilityData500ApplicationProblemPlusJSONResponse) VisitQueryAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type QueryAccessAndMobilityData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response QueryAccessAndMobilityData503ApplicationProblemPlusJSONResponse) VisitQueryAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type QueryAccessAndMobilityDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QueryAccessAndMobilityDatadefaultApplicationProblemPlusJSONResponse) VisitQueryAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateAccessAndMobilityDataRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
	Body *UpdateAccessAndMobilityDataApplicationMergePatchPlusJSONRequestBody
}

type UpdateAccessAndMobilityDataResponseObject interface {
	VisitUpdateAccessAndMobilityDataResponse(w http.ResponseWriter) error
}

type UpdateAccessAndMobilityData204Response struct {
}

func (response UpdateAccessAndMobilityData204Response) VisitUpdateAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateAccessAndMobilityData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response UpdateAccessAndMobilityData400ApplicationProblemPlusJSONResponse) VisitUpdateAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type UpdateAccessAndMobilityData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response UpdateAccessAndMobilityData401ApplicationProblemPlusJSONResponse) VisitUpdateAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type UpdateAccessAndMobilityData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response UpdateAccessAndMobilityData403ApplicationProblemPlusJSONResponse) VisitUpdateAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type UpdateAccessAndMobilityData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response UpdateAccessAndMobilityData404ApplicationProblemPlusJSONResponse) VisitUpdateAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type UpdateAccessAndMobilityData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response UpdateAccessAndMobilityData411ApplicationProblemPlusJSONResponse) VisitUpdateAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type UpdateAccessAndMobilityData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response UpdateAccessAndMobilityData413ApplicationProblemPlusJSONResponse) VisitUpdateAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type UpdateAccessAndMobilityData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response UpdateAccessAndMobilityData415ApplicationProblemPlusJSONResponse) VisitUpdateAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type UpdateAccessAndMobilityData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response UpdateAccessAndMobilityData429ApplicationProblemPlusJSONResponse) VisitUpdateAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type UpdateAccessAndMobilityData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response UpdateAccessAndMobilityData500ApplicationProblemPlusJSONResponse) VisitUpdateAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type UpdateAccessAndMobilityData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response UpdateAccessAndMobilityData503ApplicationProblemPlusJSONResponse) VisitUpdateAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type UpdateAccessAndMobilityDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UpdateAccessAndMobilityDatadefaultApplicationProblemPlusJSONResponse) VisitUpdateAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceAccessAndMobilityDataRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
	Body *CreateOrReplaceAccessAndMobilityDataJSONRequestBody
}

type CreateOrReplaceAccessAndMobilityDataResponseObject interface {
	VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error
}

type CreateOrReplaceAccessAndMobilityData200JSONResponse externalRef0.AccessAndMobilityData

func (response CreateOrReplaceAccessAndMobilityData200JSONResponse) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.AccessAndMobilityData(response))
}

type CreateOrReplaceAccessAndMobilityData201ResponseHeaders struct {
	Location string
}

type CreateOrReplaceAccessAndMobilityData201JSONResponse struct {
	Body    externalRef0.AccessAndMobilityData
	Headers CreateOrReplaceAccessAndMobilityData201ResponseHeaders
}

func (response CreateOrReplaceAccessAndMobilityData201JSONResponse) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceAccessAndMobilityData204Response struct {
}

func (response CreateOrReplaceAccessAndMobilityData204Response) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateOrReplaceAccessAndMobilityData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceAccessAndMobilityData400ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceAccessAndMobilityData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceAccessAndMobilityData401ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceAccessAndMobilityData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceAccessAndMobilityData403ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceAccessAndMobilityData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceAccessAndMobilityData404ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceAccessAndMobilityData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceAccessAndMobilityData411ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceAccessAndMobilityData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceAccessAndMobilityData413ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceAccessAndMobilityData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceAccessAndMobilityData415ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceAccessAndMobilityData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceAccessAndMobilityData429ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceAccessAndMobilityData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceAccessAndMobilityData500ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceAccessAndMobilityData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceAccessAndMobilityData503ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceAccessAndMobilityDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateOrReplaceAccessAndMobilityDatadefaultApplicationProblemPlusJSONResponse) VisitCreateOrReplaceAccessAndMobilityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteSessionManagementDataRequestObject struct {
	UeId         externalRef0.VarUeId      `json:"ueId"`
	PduSessionId externalRef0.PduSessionId `json:"pduSessionId"`
}

type DeleteSessionManagementDataResponseObject interface {
	VisitDeleteSessionManagementDataResponse(w http.ResponseWriter) error
}

type DeleteSessionManagementData204Response struct {
}

func (response DeleteSessionManagementData204Response) VisitDeleteSessionManagementDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteSessionManagementData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteSessionManagementData400ApplicationProblemPlusJSONResponse) VisitDeleteSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type DeleteSessionManagementData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteSessionManagementData401ApplicationProblemPlusJSONResponse) VisitDeleteSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type DeleteSessionManagementData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteSessionManagementData403ApplicationProblemPlusJSONResponse) VisitDeleteSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type DeleteSessionManagementData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteSessionManagementData404ApplicationProblemPlusJSONResponse) VisitDeleteSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type DeleteSessionManagementData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteSessionManagementData429ApplicationProblemPlusJSONResponse) VisitDeleteSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type DeleteSessionManagementData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteSessionManagementData500ApplicationProblemPlusJSONResponse) VisitDeleteSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type DeleteSessionManagementData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteSessionManagementData503ApplicationProblemPlusJSONResponse) VisitDeleteSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type DeleteSessionManagementDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteSessionManagementDatadefaultApplicationProblemPlusJSONResponse) VisitDeleteSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySessionManagementDataRequestObject struct {
	UeId         externalRef0.VarUeId      `json:"ueId"`
	PduSessionId externalRef0.PduSessionId `json:"pduSessionId"`
	Params       QuerySessionManagementDataParams
}

type QuerySessionManagementDataResponseObject interface {
	VisitQuerySessionManagementDataResponse(w http.ResponseWriter) error
}

type QuerySessionManagementData200JSONResponse externalRef0.PduSessionManagementData

func (response QuerySessionManagementData200JSONResponse) VisitQuerySessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.PduSessionManagementData(response))
}

type QuerySessionManagementData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response QuerySessionManagementData400ApplicationProblemPlusJSONResponse) VisitQuerySessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type QuerySessionManagementData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response QuerySessionManagementData401ApplicationProblemPlusJSONResponse) VisitQuerySessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type QuerySessionManagementData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response QuerySessionManagementData403ApplicationProblemPlusJSONResponse) VisitQuerySessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type QuerySessionManagementData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response QuerySessionManagementData404ApplicationProblemPlusJSONResponse) VisitQuerySessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type QuerySessionManagementData406Response externalRef0.N406Response

func (response QuerySessionManagementData406Response) VisitQuerySessionManagementDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type QuerySessionManagementData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response QuerySessionManagementData414ApplicationProblemPlusJSONResponse) VisitQuerySessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N414ApplicationProblemPlusJSONResponse))
}

type QuerySessionManagementData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response QuerySessionManagementData429ApplicationProblemPlusJSONResponse) VisitQuerySessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type QuerySessionManagementData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response QuerySessionManagementData500ApplicationProblemPlusJSONResponse) VisitQuerySessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type QuerySessionManagementData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response QuerySessionManagementData503ApplicationProblemPlusJSONResponse) VisitQuerySessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type QuerySessionManagementDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response QuerySessionManagementDatadefaultApplicationProblemPlusJSONResponse) VisitQuerySessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceSessionManagementDataRequestObject struct {
	UeId         externalRef0.VarUeId      `json:"ueId"`
	PduSessionId externalRef0.PduSessionId `json:"pduSessionId"`
	Body         *CreateOrReplaceSessionManagementDataJSONRequestBody
}

type CreateOrReplaceSessionManagementDataResponseObject interface {
	VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error
}

type CreateOrReplaceSessionManagementData200JSONResponse externalRef0.AccessAndMobilityData

func (response CreateOrReplaceSessionManagementData200JSONResponse) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.AccessAndMobilityData(response))
}

type CreateOrReplaceSessionManagementData201ResponseHeaders struct {
	Location string
}

type CreateOrReplaceSessionManagementData201JSONResponse struct {
	Body    externalRef0.PduSessionManagementData
	Headers CreateOrReplaceSessionManagementData201ResponseHeaders
}

func (response CreateOrReplaceSessionManagementData201JSONResponse) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceSessionManagementData204Response struct {
}

func (response CreateOrReplaceSessionManagementData204Response) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateOrReplaceSessionManagementData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceSessionManagementData400ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceSessionManagementData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceSessionManagementData401ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceSessionManagementData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceSessionManagementData403ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceSessionManagementData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceSessionManagementData404ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceSessionManagementData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceSessionManagementData411ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceSessionManagementData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceSessionManagementData413ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceSessionManagementData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceSessionManagementData415ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceSessionManagementData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceSessionManagementData429ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceSessionManagementData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceSessionManagementData500ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceSessionManagementData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceSessionManagementData503ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type CreateOrReplaceSessionManagementDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateOrReplaceSessionManagementDatadefaultApplicationProblemPlusJSONResponse) VisitCreateOrReplaceSessionManagementDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create a subscription to receive notification of exposure data changes
	// (POST /exposure-data/subs-to-notify)
	CreateIndividualExposureDataSubscription(ctx context.Context, request CreateIndividualExposureDataSubscriptionRequestObject) (CreateIndividualExposureDataSubscriptionResponseObject, error)
	// Deletes the individual Exposure Data subscription
	// (DELETE /exposure-data/subs-to-notify/{subId})
	DeleteIndividualExposureDataSubscription(ctx context.Context, request DeleteIndividualExposureDataSubscriptionRequestObject) (DeleteIndividualExposureDataSubscriptionResponseObject, error)
	// updates a subscription to receive notifications of exposure data changes
	// (PUT /exposure-data/subs-to-notify/{subId})
	ReplaceIndividualExposureDataSubscription(ctx context.Context, request ReplaceIndividualExposureDataSubscriptionRequestObject) (ReplaceIndividualExposureDataSubscriptionResponseObject, error)
	// Deletes the access and mobility exposure data for a UE
	// (DELETE /exposure-data/{ueId}/access-and-mobility-data)
	DeleteAccessAndMobilityData(ctx context.Context, request DeleteAccessAndMobilityDataRequestObject) (DeleteAccessAndMobilityDataResponseObject, error)
	// Retrieves the access and mobility exposure data for a UE
	// (GET /exposure-data/{ueId}/access-and-mobility-data)
	QueryAccessAndMobilityData(ctx context.Context, request QueryAccessAndMobilityDataRequestObject) (QueryAccessAndMobilityDataResponseObject, error)
	// Updates the access and mobility exposure data for a UE
	// (PATCH /exposure-data/{ueId}/access-and-mobility-data)
	UpdateAccessAndMobilityData(ctx context.Context, request UpdateAccessAndMobilityDataRequestObject) (UpdateAccessAndMobilityDataResponseObject, error)
	// Creates and updates the access and mobility exposure data for a UE
	// (PUT /exposure-data/{ueId}/access-and-mobility-data)
	CreateOrReplaceAccessAndMobilityData(ctx context.Context, request CreateOrReplaceAccessAndMobilityDataRequestObject) (CreateOrReplaceAccessAndMobilityDataResponseObject, error)
	// Deletes the session management data for a UE and for an individual PDU session
	// (DELETE /exposure-data/{ueId}/session-management-data/{pduSessionId})
	DeleteSessionManagementData(ctx context.Context, request DeleteSessionManagementDataRequestObject) (DeleteSessionManagementDataResponseObject, error)
	// Retrieves the session management data for a UE and for an individual PDU session
	// (GET /exposure-data/{ueId}/session-management-data/{pduSessionId})
	QuerySessionManagementData(ctx context.Context, request QuerySessionManagementDataRequestObject) (QuerySessionManagementDataResponseObject, error)
	// Creates and updates the session management data for a UE and for an individual PDU session
	// (PUT /exposure-data/{ueId}/session-management-data/{pduSessionId})
	CreateOrReplaceSessionManagementData(ctx context.Context, request CreateOrReplaceSessionManagementDataRequestObject) (CreateOrReplaceSessionManagementDataResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CreateIndividualExposureDataSubscription operation middleware
func (sh *strictHandler) CreateIndividualExposureDataSubscription(ctx *gin.Context) {
	var request CreateIndividualExposureDataSubscriptionRequestObject

	var body CreateIndividualExposureDataSubscriptionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateIndividualExposureDataSubscription(ctx, request.(CreateIndividualExposureDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateIndividualExposureDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateIndividualExposureDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitCreateIndividualExposureDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIndividualExposureDataSubscription operation middleware
func (sh *strictHandler) DeleteIndividualExposureDataSubscription(ctx *gin.Context, subId string) {
	var request DeleteIndividualExposureDataSubscriptionRequestObject

	request.SubId = subId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIndividualExposureDataSubscription(ctx, request.(DeleteIndividualExposureDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIndividualExposureDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteIndividualExposureDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitDeleteIndividualExposureDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplaceIndividualExposureDataSubscription operation middleware
func (sh *strictHandler) ReplaceIndividualExposureDataSubscription(ctx *gin.Context, subId string) {
	var request ReplaceIndividualExposureDataSubscriptionRequestObject

	request.SubId = subId

	var body ReplaceIndividualExposureDataSubscriptionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReplaceIndividualExposureDataSubscription(ctx, request.(ReplaceIndividualExposureDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplaceIndividualExposureDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReplaceIndividualExposureDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitReplaceIndividualExposureDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAccessAndMobilityData operation middleware
func (sh *strictHandler) DeleteAccessAndMobilityData(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request DeleteAccessAndMobilityDataRequestObject

	request.UeId = ueId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAccessAndMobilityData(ctx, request.(DeleteAccessAndMobilityDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAccessAndMobilityData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteAccessAndMobilityDataResponseObject); ok {
		if err := validResponse.VisitDeleteAccessAndMobilityDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryAccessAndMobilityData operation middleware
func (sh *strictHandler) QueryAccessAndMobilityData(ctx *gin.Context, ueId externalRef0.VarUeId, params QueryAccessAndMobilityDataParams) {
	var request QueryAccessAndMobilityDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryAccessAndMobilityData(ctx, request.(QueryAccessAndMobilityDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryAccessAndMobilityData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryAccessAndMobilityDataResponseObject); ok {
		if err := validResponse.VisitQueryAccessAndMobilityDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateAccessAndMobilityData operation middleware
func (sh *strictHandler) UpdateAccessAndMobilityData(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request UpdateAccessAndMobilityDataRequestObject

	request.UeId = ueId

	var body UpdateAccessAndMobilityDataApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateAccessAndMobilityData(ctx, request.(UpdateAccessAndMobilityDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateAccessAndMobilityData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateAccessAndMobilityDataResponseObject); ok {
		if err := validResponse.VisitUpdateAccessAndMobilityDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateOrReplaceAccessAndMobilityData operation middleware
func (sh *strictHandler) CreateOrReplaceAccessAndMobilityData(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request CreateOrReplaceAccessAndMobilityDataRequestObject

	request.UeId = ueId

	var body CreateOrReplaceAccessAndMobilityDataJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOrReplaceAccessAndMobilityData(ctx, request.(CreateOrReplaceAccessAndMobilityDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOrReplaceAccessAndMobilityData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateOrReplaceAccessAndMobilityDataResponseObject); ok {
		if err := validResponse.VisitCreateOrReplaceAccessAndMobilityDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSessionManagementData operation middleware
func (sh *strictHandler) DeleteSessionManagementData(ctx *gin.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId) {
	var request DeleteSessionManagementDataRequestObject

	request.UeId = ueId
	request.PduSessionId = pduSessionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSessionManagementData(ctx, request.(DeleteSessionManagementDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSessionManagementData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteSessionManagementDataResponseObject); ok {
		if err := validResponse.VisitDeleteSessionManagementDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QuerySessionManagementData operation middleware
func (sh *strictHandler) QuerySessionManagementData(ctx *gin.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId, params QuerySessionManagementDataParams) {
	var request QuerySessionManagementDataRequestObject

	request.UeId = ueId
	request.PduSessionId = pduSessionId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QuerySessionManagementData(ctx, request.(QuerySessionManagementDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QuerySessionManagementData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QuerySessionManagementDataResponseObject); ok {
		if err := validResponse.VisitQuerySessionManagementDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateOrReplaceSessionManagementData operation middleware
func (sh *strictHandler) CreateOrReplaceSessionManagementData(ctx *gin.Context, ueId externalRef0.VarUeId, pduSessionId externalRef0.PduSessionId) {
	var request CreateOrReplaceSessionManagementDataRequestObject

	request.UeId = ueId
	request.PduSessionId = pduSessionId

	var body CreateOrReplaceSessionManagementDataJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOrReplaceSessionManagementData(ctx, request.(CreateOrReplaceSessionManagementDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOrReplaceSessionManagementData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateOrReplaceSessionManagementDataResponseObject); ok {
		if err := validResponse.VisitCreateOrReplaceSessionManagementDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
