// Package policy provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package policy

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/commondata"
	externalRef1 "github.com/ShouheiNishi/openapi5g/northbound/commondata"
	externalRef2 "github.com/ShouheiNishi/openapi5g/pcf/BDTpolicy"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for BdtPolicyStatus.
const (
	INVALID BdtPolicyStatus = "INVALID"
	VALID   BdtPolicyStatus = "VALID"
)

// Defines values for Periodicity.
const (
	DAILY   Periodicity = "DAILY"
	HOURLY  Periodicity = "HOURLY"
	MONTHLY Periodicity = "MONTHLY"
	WEEKLY  Periodicity = "WEEKLY"
	YEARLY  Periodicity = "YEARLY"
)

// Defines values for UsageMonLevel.
const (
	SERVICELEVEL UsageMonLevel = "SERVICE_LEVEL"
	SESSIONLEVEL UsageMonLevel = "SESSION_LEVEL"
)

// AmPolicyData Contains the AM policy data for a given subscriber.
type AmPolicyData struct {
	PraInfos             *map[string]externalRef0.PresenceInfo `json:"praInfos,omitempty"`
	SubscCats            []string                              `json:"subscCats,omitempty"`
	AdditionalProperties map[string]interface{}                `json:"-"`
}

// BdtData Contains the background data transfer data.
type BdtData struct {
	AspId string `json:"aspId"`

	// BdtRefId string identifying a BDT Reference ID as defined in subclause 5.3.3 of 3GPP TS 29.154.
	BdtRefId *externalRef1.BdtReferenceId `json:"bdtRefId,omitempty"`

	// BdtpStatus Indicates the validation status of a negotiated BDT policy.
	BdtpStatus *BdtPolicyStatus       `json:"bdtpStatus,omitempty"`
	Dnn        *externalRef0.Dnn      `json:"dnn,omitempty"`
	NumOfUes   *externalRef0.Uinteger `json:"numOfUes,omitempty"`

	// NwAreaInfo Describes a network area information in which the NF service consumer requests the number of UEs.
	NwAreaInfo *externalRef2.NetworkAreaInfo   `json:"nwAreaInfo,omitempty"`
	Snssai     *externalRef0.Snssai            `json:"snssai,omitempty"`
	SuppFeat   *externalRef0.SupportedFeatures `json:"suppFeat,omitempty"`

	// TrafficDes Identify a traffic descriptor as defined in Figure 5.2.2 of 3GPP TS 24.526, octets v+5 to w. (Original reference TS29122_ResourceManagementOfBdt.yaml#/components/schemas/TrafficDescriptor)
	TrafficDes *string `json:"trafficDes,omitempty"`

	// TransPolicy Describes a transfer policy.
	TransPolicy          externalRef2.TransferPolicy  `json:"transPolicy"`
	VolPerUe             *externalRef1.UsageThreshold `json:"volPerUe,omitempty"`
	AdditionalProperties map[string]interface{}       `json:"-"`
}

// BdtDataPatch Contains the modified background data transfer data.
type BdtDataPatch struct {
	// BdtpStatus Indicates the validation status of a negotiated BDT policy.
	BdtpStatus *BdtPolicyStatus `json:"bdtpStatus,omitempty"`

	// TransPolicy Describes a transfer policy.
	TransPolicy          *externalRef2.TransferPolicy `json:"transPolicy,omitempty"`
	AdditionalProperties map[string]interface{}       `json:"-"`
}

// BdtPolicyStatus Indicates the validation status of a negotiated BDT policy.
type BdtPolicyStatus string

// DnnRouteSelectionDescriptor Contains the route selector parameters (PDU session types, SSC modes and ATSSS information) per DNN
type DnnRouteSelectionDescriptor struct {
	// AtsssInfo Indicates whether MA PDU session establishment is allowed for this DNN. When set to value true MA PDU session establishment is allowed for this DNN.
	AtsssInfo            *bool                         `json:"atsssInfo,omitempty"`
	Dnn                  externalRef0.Dnn              `json:"dnn"`
	PduSessTypes         []externalRef0.PduSessionType `json:"pduSessTypes,omitempty"`
	SscModes             []externalRef0.SscMode        `json:"sscModes,omitempty"`
	AdditionalProperties map[string]interface{}        `json:"-"`
}

// IpIndex defines model for IpIndex.
type IpIndex = int

// ItemPath Identifies a fragment (subset of resource data) of a given resource.
type ItemPath = string

// LimitIdToMonitoringKey Contains the limit identifier and the corresponding monitoring key for a given S-NSSAI and DNN.
type LimitIdToMonitoringKey struct {
	LimitId              string                 `json:"limitId"`
	Monkey               []string               `json:"monkey,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NotificationItem Identifies a data change notification when the change occurs in a fragment (subset of resource data) of a given resource.
type NotificationItem struct {
	NotifItems           []UpdatedItem          `json:"notifItems"`
	ResourceId           externalRef0.Uri       `json:"resourceId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// OsId defines model for OsId.
type OsId = openapi_types.UUID

// Periodicity defines model for Periodicity.
type Periodicity string

// PlmnRouteSelectionDescriptor Contains the route selection descriptors (combinations of SNSSAI, DNNs, PDU session types, SSC modes and ATSSS information) allowed by subscription to the UE for a serving PLMN
type PlmnRouteSelectionDescriptor struct {
	ServingPlmn          externalRef0.PlmnId              `json:"servingPlmn"`
	SnssaiRouteSelDescs  []SnssaiRouteSelectionDescriptor `json:"snssaiRouteSelDescs,omitempty"`
	AdditionalProperties map[string]interface{}           `json:"-"`
}

// PolicyDataChangeNotification Contains changed policy data for which notification was requested.
type PolicyDataChangeNotification struct {
	// SponsorConnectivityData Contains the sponsored data connectivity related information for a sponsor identifier.
	SponsorConnectivityData *SponsorConnectivityData `json:"SponsorConnectivityData,omitempty"`

	// AmPolicyData Contains the AM policy data for a given subscriber.
	AmPolicyData *AmPolicyData `json:"amPolicyData,omitempty"`

	// BdtData Contains the background data transfer data.
	BdtData *BdtData `json:"bdtData,omitempty"`

	// BdtRefId string identifying a BDT Reference ID as defined in subclause 5.3.3 of 3GPP TS 29.154.
	BdtRefId     *externalRef1.BdtReferenceId `json:"bdtRefId,omitempty"`
	DelResources []externalRef0.Uri           `json:"delResources,omitempty"`
	NotifId      *string                      `json:"notifId,omitempty"`

	// OpSpecData Original reference TS29505_Subscription_Data.yaml#/components/schemas/OperatorSpecificDataContainer
	OpSpecData    interface{}             `json:"opSpecData,omitempty"`
	OpSpecDataMap *map[string]interface{} `json:"opSpecDataMap,omitempty"`
	PlmnId        *externalRef0.PlmnId    `json:"plmnId,omitempty"`

	// PlmnUePolicySet Contains the UE policy data for a given subscriber.
	PlmnUePolicySet   *UePolicySet       `json:"plmnUePolicySet,omitempty"`
	ReportedFragments []NotificationItem `json:"reportedFragments,omitempty"`

	// SmPolicyData Contains the SM policy data for a given subscriber.
	SmPolicyData *SmPolicyData        `json:"smPolicyData,omitempty"`
	SponsorId    *string              `json:"sponsorId,omitempty"`
	UeId         externalRef0.VarUeId `json:"ueId,omitempty"`

	// UePolicySet Contains the UE policy data for a given subscriber.
	UePolicySet *UePolicySet `json:"uePolicySet,omitempty"`

	// UsageMonData Contains remain allowed usage data for a subscriber.
	UsageMonData         *UsageMonData          `json:"usageMonData,omitempty"`
	UsageMonId           *string                `json:"usageMonId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PolicyDataSubscription Identifies a subscription to policy data change notification.
type PolicyDataSubscription struct {
	Expiry                *externalRef0.DateTime          `json:"expiry,omitempty"`
	MonResItems           []ResourceItem                  `json:"monResItems,omitempty"`
	MonitoredResourceUris []externalRef0.Uri              `json:"monitoredResourceUris"`
	NotifId               *string                         `json:"notifId,omitempty"`
	NotificationUri       externalRef0.Uri                `json:"notificationUri"`
	SupportedFeatures     *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties  map[string]interface{}          `json:"-"`
}

// ResourceItem Identifies a subscription to policy data change notification when the change occurs in a fragment (subset of resource data) of a given resource.
type ResourceItem struct {
	Items                []ItemPath             `json:"items"`
	MonResourceUri       externalRef0.Uri       `json:"monResourceUri"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmPolicyData Contains the SM policy data for a given subscriber.
type SmPolicyData struct {
	SmPolicySnssaiData   map[string]SmPolicySnssaiData   `json:"smPolicySnssaiData"`
	SuppFeat             *externalRef0.SupportedFeatures `json:"suppFeat,omitempty"`
	UmData               *map[string]UsageMonData        `json:"umData,omitempty"`
	UmDataLimits         *map[string]UsageMonDataLimit   `json:"umDataLimits,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// SmPolicyDataPatch Contains the SM policy data for a given subscriber.
type SmPolicyDataPatch struct {
	SmPolicySnssaiData   *map[string]SmPolicySnssaiDataPatch `json:"smPolicySnssaiData,omitempty"`
	UmData               *map[string]UsageMonData            `json:"umData"`
	AdditionalProperties map[string]interface{}              `json:"-"`
}

// SmPolicyDnnData Contains the SM policy data for a given DNN (and S-NSSAI).
type SmPolicyDnnData struct {
	AdcSupport      *bool                                      `json:"adcSupport,omitempty"`
	AllowedServices []string                                   `json:"allowedServices,omitempty"`
	BdtRefIds       *map[string]*externalRef1.BdtReferenceIdRm `json:"bdtRefIds"`

	// ChfInfo Original reference TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/ChargingInformation
	ChfInfo              interface{}                           `json:"chfInfo,omitempty"`
	Dnn                  externalRef0.Dnn                      `json:"dnn"`
	GbrDl                externalRef0.BitRate                  `json:"gbrDl,omitempty"`
	GbrUl                externalRef0.BitRate                  `json:"gbrUl,omitempty"`
	ImsSignallingPrio    *bool                                 `json:"imsSignallingPrio,omitempty"`
	Ipv4Index            *IpIndex                              `json:"ipv4Index,omitempty"`
	Ipv6Index            *IpIndex                              `json:"ipv6Index,omitempty"`
	LocRoutNotAllowed    *bool                                 `json:"locRoutNotAllowed,omitempty"`
	McsPriority          *bool                                 `json:"mcsPriority,omitempty"`
	McsPriorityLevel     *int                                  `json:"mcsPriorityLevel,omitempty"`
	MpsPriority          *bool                                 `json:"mpsPriority,omitempty"`
	MpsPriorityLevel     *int                                  `json:"mpsPriorityLevel,omitempty"`
	Offline              *bool                                 `json:"offline,omitempty"`
	Online               *bool                                 `json:"online,omitempty"`
	PraInfos             *map[string]externalRef0.PresenceInfo `json:"praInfos,omitempty"`
	RefUmDataLimitIds    *map[string]*LimitIdToMonitoringKey   `json:"refUmDataLimitIds,omitempty"`
	SubscCats            []string                              `json:"subscCats,omitempty"`
	SubscSpendingLimits  *bool                                 `json:"subscSpendingLimits,omitempty"`
	AdditionalProperties map[string]interface{}                `json:"-"`
}

// SmPolicyDnnDataPatch Contains the SM policy data for a given DNN (and S-NSSAI).
type SmPolicyDnnDataPatch struct {
	BdtRefIds            *map[string]*externalRef1.BdtReferenceIdRm `json:"bdtRefIds"`
	Dnn                  externalRef0.Dnn                           `json:"dnn"`
	AdditionalProperties map[string]interface{}                     `json:"-"`
}

// SmPolicySnssaiData Contains the SM policy data for a given subscriber and S-NSSAI.
type SmPolicySnssaiData struct {
	SmPolicyDnnData      *map[string]SmPolicyDnnData `json:"smPolicyDnnData,omitempty"`
	Snssai               externalRef0.Snssai         `json:"snssai"`
	AdditionalProperties map[string]interface{}      `json:"-"`
}

// SmPolicySnssaiDataPatch Contains the SM policy data for a given subscriber and S-NSSAI.
type SmPolicySnssaiDataPatch struct {
	SmPolicyDnnData      *map[string]SmPolicyDnnDataPatch `json:"smPolicyDnnData,omitempty"`
	Snssai               externalRef0.Snssai              `json:"snssai"`
	AdditionalProperties map[string]interface{}           `json:"-"`
}

// SnssaiRouteSelectionDescriptor Contains the route selector parameters (DNNs, PDU session types, SSC modes and ATSSS information) per SNSSAI
type SnssaiRouteSelectionDescriptor struct {
	DnnRouteSelDescs     []DnnRouteSelectionDescriptor `json:"dnnRouteSelDescs,omitempty"`
	Snssai               externalRef0.Snssai           `json:"snssai"`
	AdditionalProperties map[string]interface{}        `json:"-"`
}

// SponsorConnectivityData Contains the sponsored data connectivity related information for a sponsor identifier.
type SponsorConnectivityData struct {
	AspIds               []string               `json:"aspIds"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TimePeriod Contains the periodicity for the defined usage monitoring data limits.
type TimePeriod struct {
	MaxNumPeriod         *externalRef0.Uinteger `json:"maxNumPeriod,omitempty"`
	Period               Periodicity            `json:"period"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UePolicySection Contains the UE policy section.
type UePolicySection struct {
	UePolicySectionInfo  externalRef0.Bytes     `json:"uePolicySectionInfo"`
	Upsi                 string                 `json:"upsi"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UePolicySet Contains the UE policy data for a given subscriber.
type UePolicySet struct {
	AllowedRouteSelDescs *map[string]PlmnRouteSelectionDescriptor `json:"allowedRouteSelDescs,omitempty"`
	AndspInd             *bool                                    `json:"andspInd,omitempty"`
	OsIds                []OsId                                   `json:"osIds,omitempty"`
	Pei                  externalRef0.Pei                         `json:"pei,omitempty"`
	PraInfos             *map[string]externalRef0.PresenceInfo    `json:"praInfos,omitempty"`
	SubscCats            []string                                 `json:"subscCats,omitempty"`
	SuppFeat             *externalRef0.SupportedFeatures          `json:"suppFeat,omitempty"`
	UePolicySections     *map[string]UePolicySection              `json:"uePolicySections,omitempty"`
	Upsis                []string                                 `json:"upsis,omitempty"`
	AdditionalProperties map[string]interface{}                   `json:"-"`
}

// UePolicySetPatch Contains the UE policy set for a given subscriber.
type UePolicySetPatch struct {
	AndspInd             *bool                       `json:"andspInd,omitempty"`
	OsIds                []OsId                      `json:"osIds,omitempty"`
	Pei                  externalRef0.Pei            `json:"pei,omitempty"`
	UePolicySections     *map[string]UePolicySection `json:"uePolicySections,omitempty"`
	Upsis                []string                    `json:"upsis,omitempty"`
	AdditionalProperties map[string]interface{}      `json:"-"`
}

// UpdatedItem Identifies a fragment of a resource.
type UpdatedItem struct {
	// Item Identifies a fragment (subset of resource data) of a given resource.
	Item                 ItemPath               `json:"item"`
	Value                interface{}            `json:"value"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UsageMonData Contains remain allowed usage data for a subscriber.
type UsageMonData struct {
	AllowedUsage         *externalRef1.UsageThreshold    `json:"allowedUsage,omitempty"`
	LimitId              string                          `json:"limitId"`
	ResetTime            *externalRef0.DateTime          `json:"resetTime,omitempty"`
	Scopes               *map[string]UsageMonDataScope   `json:"scopes,omitempty"`
	SuppFeat             *externalRef0.SupportedFeatures `json:"suppFeat,omitempty"`
	UmLevel              *UsageMonLevel                  `json:"umLevel,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// UsageMonDataLimit Contains usage monitoring control data for a subscriber.
type UsageMonDataLimit struct {
	EndDate *externalRef0.DateTime `json:"endDate,omitempty"`
	LimitId string                 `json:"limitId"`

	// ResetPeriod Contains the periodicity for the defined usage monitoring data limits.
	ResetPeriod          *TimePeriod                   `json:"resetPeriod,omitempty"`
	Scopes               *map[string]UsageMonDataScope `json:"scopes,omitempty"`
	StartDate            *externalRef0.DateTime        `json:"startDate,omitempty"`
	UmLevel              *UsageMonLevel                `json:"umLevel,omitempty"`
	UsageLimit           *externalRef1.UsageThreshold  `json:"usageLimit,omitempty"`
	AdditionalProperties map[string]interface{}        `json:"-"`
}

// UsageMonDataScope Contains a SNSSAI and DNN combinations to which the UsageMonData instance belongs to.
type UsageMonDataScope struct {
	Dnn                  []externalRef0.Dnn     `json:"dnn,omitempty"`
	Snssai               externalRef0.Snssai    `json:"snssai"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UsageMonLevel defines model for UsageMonLevel.
type UsageMonLevel string

// ReadBdtDataParams defines parameters for ReadBdtData.
type ReadBdtDataParams struct {
	// BdtRefIds List of the BDT reference identifiers.
	BdtRefIds *[]externalRef1.BdtReferenceId `form:"bdt-ref-ids,omitempty" json:"bdt-ref-ids,omitempty"`

	// SuppFeat Supported Features
	SuppFeat *externalRef0.SupportedFeatures `form:"supp-feat,omitempty" json:"supp-feat,omitempty"`
}

// ReadIndividualBdtDataParams defines parameters for ReadIndividualBdtData.
type ReadIndividualBdtDataParams struct {
	// SuppFeat Supported Features
	SuppFeat *externalRef0.SupportedFeatures `form:"supp-feat,omitempty" json:"supp-feat,omitempty"`
}

// ReadOperatorSpecificDataParams defines parameters for ReadOperatorSpecificData.
type ReadOperatorSpecificDataParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SuppFeat Supported Features
	SuppFeat *externalRef0.SupportedFeatures `form:"supp-feat,omitempty" json:"supp-feat,omitempty"`
}

// UpdateOperatorSpecificDataApplicationJSONPatchPlusJSONBody defines parameters for UpdateOperatorSpecificData.
type UpdateOperatorSpecificDataApplicationJSONPatchPlusJSONBody = []externalRef0.PatchItem

// ReplaceOperatorSpecificDataJSONBody defines parameters for ReplaceOperatorSpecificData.
type ReplaceOperatorSpecificDataJSONBody map[string]interface{}

// ReadSessionManagementPolicyDataParams defines parameters for ReadSessionManagementPolicyData.
type ReadSessionManagementPolicyDataParams struct {
	Snssai *externalRef0.Snssai `form:"snssai,omitempty" json:"snssai,omitempty"`
	Dnn    *externalRef0.Dnn    `form:"dnn,omitempty" json:"dnn,omitempty"`

	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SuppFeat Supported Features
	SuppFeat *externalRef0.SupportedFeatures `form:"supp-feat,omitempty" json:"supp-feat,omitempty"`
}

// ReadUsageMonitoringInformationParams defines parameters for ReadUsageMonitoringInformation.
type ReadUsageMonitoringInformationParams struct {
	// SuppFeat Supported Features
	SuppFeat *externalRef0.SupportedFeatures `form:"supp-feat,omitempty" json:"supp-feat,omitempty"`
}

// ReadUEPolicySetParams defines parameters for ReadUEPolicySet.
type ReadUEPolicySetParams struct {
	// SuppFeat Supported Features
	SuppFeat *externalRef0.SupportedFeatures `form:"supp-feat,omitempty" json:"supp-feat,omitempty"`
}

// UpdateIndividualBdtDataApplicationMergePatchPlusJSONRequestBody defines body for UpdateIndividualBdtData for application/merge-patch+json ContentType.
type UpdateIndividualBdtDataApplicationMergePatchPlusJSONRequestBody = BdtDataPatch

// CreateIndividualBdtDataJSONRequestBody defines body for CreateIndividualBdtData for application/json ContentType.
type CreateIndividualBdtDataJSONRequestBody = BdtData

// CreateIndividualPolicyDataSubscriptionJSONRequestBody defines body for CreateIndividualPolicyDataSubscription for application/json ContentType.
type CreateIndividualPolicyDataSubscriptionJSONRequestBody = PolicyDataSubscription

// ReplaceIndividualPolicyDataSubscriptionJSONRequestBody defines body for ReplaceIndividualPolicyDataSubscription for application/json ContentType.
type ReplaceIndividualPolicyDataSubscriptionJSONRequestBody = PolicyDataSubscription

// UpdateOperatorSpecificDataApplicationJSONPatchPlusJSONRequestBody defines body for UpdateOperatorSpecificData for application/json-patch+json ContentType.
type UpdateOperatorSpecificDataApplicationJSONPatchPlusJSONRequestBody = UpdateOperatorSpecificDataApplicationJSONPatchPlusJSONBody

// ReplaceOperatorSpecificDataJSONRequestBody defines body for ReplaceOperatorSpecificData for application/json ContentType.
type ReplaceOperatorSpecificDataJSONRequestBody ReplaceOperatorSpecificDataJSONBody

// UpdateSessionManagementPolicyDataApplicationMergePatchPlusJSONRequestBody defines body for UpdateSessionManagementPolicyData for application/merge-patch+json ContentType.
type UpdateSessionManagementPolicyDataApplicationMergePatchPlusJSONRequestBody = SmPolicyDataPatch

// CreateUsageMonitoringResourceJSONRequestBody defines body for CreateUsageMonitoringResource for application/json ContentType.
type CreateUsageMonitoringResourceJSONRequestBody = UsageMonData

// UpdateUEPolicySetApplicationMergePatchPlusJSONRequestBody defines body for UpdateUEPolicySet for application/merge-patch+json ContentType.
type UpdateUEPolicySetApplicationMergePatchPlusJSONRequestBody = UePolicySetPatch

// CreateOrReplaceUEPolicySetJSONRequestBody defines body for CreateOrReplaceUEPolicySet for application/json ContentType.
type CreateOrReplaceUEPolicySetJSONRequestBody = UePolicySet

// Getter for additional properties for AmPolicyData. Returns the specified
// element and whether it was found
func (a AmPolicyData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmPolicyData
func (a *AmPolicyData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmPolicyData to handle AdditionalProperties
func (a *AmPolicyData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["praInfos"]; found {
		err = json.Unmarshal(raw, &a.PraInfos)
		if err != nil {
			return fmt.Errorf("error reading 'praInfos': %w", err)
		}
		delete(object, "praInfos")
	}

	if raw, found := object["subscCats"]; found {
		err = json.Unmarshal(raw, &a.SubscCats)
		if err != nil {
			return fmt.Errorf("error reading 'subscCats': %w", err)
		}
		delete(object, "subscCats")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmPolicyData to handle AdditionalProperties
func (a AmPolicyData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.PraInfos != nil {
		object["praInfos"], err = json.Marshal(a.PraInfos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'praInfos': %w", err)
		}
	}

	if len(a.SubscCats) != 0 {
		object["subscCats"], err = json.Marshal(a.SubscCats)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscCats': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BdtData. Returns the specified
// element and whether it was found
func (a BdtData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BdtData
func (a *BdtData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BdtData to handle AdditionalProperties
func (a *BdtData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["aspId"]; found {
		err = json.Unmarshal(raw, &a.AspId)
		if err != nil {
			return fmt.Errorf("error reading 'aspId': %w", err)
		}
		delete(object, "aspId")
	}

	if raw, found := object["bdtRefId"]; found {
		err = json.Unmarshal(raw, &a.BdtRefId)
		if err != nil {
			return fmt.Errorf("error reading 'bdtRefId': %w", err)
		}
		delete(object, "bdtRefId")
	}

	if raw, found := object["bdtpStatus"]; found {
		err = json.Unmarshal(raw, &a.BdtpStatus)
		if err != nil {
			return fmt.Errorf("error reading 'bdtpStatus': %w", err)
		}
		delete(object, "bdtpStatus")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["numOfUes"]; found {
		err = json.Unmarshal(raw, &a.NumOfUes)
		if err != nil {
			return fmt.Errorf("error reading 'numOfUes': %w", err)
		}
		delete(object, "numOfUes")
	}

	if raw, found := object["nwAreaInfo"]; found {
		err = json.Unmarshal(raw, &a.NwAreaInfo)
		if err != nil {
			return fmt.Errorf("error reading 'nwAreaInfo': %w", err)
		}
		delete(object, "nwAreaInfo")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if raw, found := object["trafficDes"]; found {
		err = json.Unmarshal(raw, &a.TrafficDes)
		if err != nil {
			return fmt.Errorf("error reading 'trafficDes': %w", err)
		}
		delete(object, "trafficDes")
	}

	if raw, found := object["transPolicy"]; found {
		err = json.Unmarshal(raw, &a.TransPolicy)
		if err != nil {
			return fmt.Errorf("error reading 'transPolicy': %w", err)
		}
		delete(object, "transPolicy")
	}

	if raw, found := object["volPerUe"]; found {
		err = json.Unmarshal(raw, &a.VolPerUe)
		if err != nil {
			return fmt.Errorf("error reading 'volPerUe': %w", err)
		}
		delete(object, "volPerUe")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BdtData to handle AdditionalProperties
func (a BdtData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["aspId"], err = json.Marshal(a.AspId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'aspId': %w", err)
	}

	if a.BdtRefId != nil {
		object["bdtRefId"], err = json.Marshal(a.BdtRefId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bdtRefId': %w", err)
		}
	}

	if a.BdtpStatus != nil {
		object["bdtpStatus"], err = json.Marshal(a.BdtpStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bdtpStatus': %w", err)
		}
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if a.NumOfUes != nil {
		object["numOfUes"], err = json.Marshal(a.NumOfUes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'numOfUes': %w", err)
		}
	}

	if a.NwAreaInfo != nil {
		object["nwAreaInfo"], err = json.Marshal(a.NwAreaInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nwAreaInfo': %w", err)
		}
	}

	if a.Snssai != nil {
		object["snssai"], err = json.Marshal(a.Snssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
		}
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	if a.TrafficDes != nil {
		object["trafficDes"], err = json.Marshal(a.TrafficDes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficDes': %w", err)
		}
	}

	object["transPolicy"], err = json.Marshal(a.TransPolicy)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'transPolicy': %w", err)
	}

	if a.VolPerUe != nil {
		object["volPerUe"], err = json.Marshal(a.VolPerUe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'volPerUe': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BdtDataPatch. Returns the specified
// element and whether it was found
func (a BdtDataPatch) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BdtDataPatch
func (a *BdtDataPatch) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BdtDataPatch to handle AdditionalProperties
func (a *BdtDataPatch) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bdtpStatus"]; found {
		err = json.Unmarshal(raw, &a.BdtpStatus)
		if err != nil {
			return fmt.Errorf("error reading 'bdtpStatus': %w", err)
		}
		delete(object, "bdtpStatus")
	}

	if raw, found := object["transPolicy"]; found {
		err = json.Unmarshal(raw, &a.TransPolicy)
		if err != nil {
			return fmt.Errorf("error reading 'transPolicy': %w", err)
		}
		delete(object, "transPolicy")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BdtDataPatch to handle AdditionalProperties
func (a BdtDataPatch) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BdtpStatus != nil {
		object["bdtpStatus"], err = json.Marshal(a.BdtpStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bdtpStatus': %w", err)
		}
	}

	if a.TransPolicy != nil {
		object["transPolicy"], err = json.Marshal(a.TransPolicy)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'transPolicy': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DnnRouteSelectionDescriptor. Returns the specified
// element and whether it was found
func (a DnnRouteSelectionDescriptor) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DnnRouteSelectionDescriptor
func (a *DnnRouteSelectionDescriptor) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DnnRouteSelectionDescriptor to handle AdditionalProperties
func (a *DnnRouteSelectionDescriptor) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["atsssInfo"]; found {
		err = json.Unmarshal(raw, &a.AtsssInfo)
		if err != nil {
			return fmt.Errorf("error reading 'atsssInfo': %w", err)
		}
		delete(object, "atsssInfo")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["pduSessTypes"]; found {
		err = json.Unmarshal(raw, &a.PduSessTypes)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessTypes': %w", err)
		}
		delete(object, "pduSessTypes")
	}

	if raw, found := object["sscModes"]; found {
		err = json.Unmarshal(raw, &a.SscModes)
		if err != nil {
			return fmt.Errorf("error reading 'sscModes': %w", err)
		}
		delete(object, "sscModes")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DnnRouteSelectionDescriptor to handle AdditionalProperties
func (a DnnRouteSelectionDescriptor) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AtsssInfo != nil {
		object["atsssInfo"], err = json.Marshal(a.AtsssInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'atsssInfo': %w", err)
		}
	}

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
	}

	if len(a.PduSessTypes) != 0 {
		object["pduSessTypes"], err = json.Marshal(a.PduSessTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessTypes': %w", err)
		}
	}

	if len(a.SscModes) != 0 {
		object["sscModes"], err = json.Marshal(a.SscModes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sscModes': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LimitIdToMonitoringKey. Returns the specified
// element and whether it was found
func (a LimitIdToMonitoringKey) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LimitIdToMonitoringKey
func (a *LimitIdToMonitoringKey) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LimitIdToMonitoringKey to handle AdditionalProperties
func (a *LimitIdToMonitoringKey) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["limitId"]; found {
		err = json.Unmarshal(raw, &a.LimitId)
		if err != nil {
			return fmt.Errorf("error reading 'limitId': %w", err)
		}
		delete(object, "limitId")
	}

	if raw, found := object["monkey"]; found {
		err = json.Unmarshal(raw, &a.Monkey)
		if err != nil {
			return fmt.Errorf("error reading 'monkey': %w", err)
		}
		delete(object, "monkey")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LimitIdToMonitoringKey to handle AdditionalProperties
func (a LimitIdToMonitoringKey) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["limitId"], err = json.Marshal(a.LimitId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'limitId': %w", err)
	}

	if len(a.Monkey) != 0 {
		object["monkey"], err = json.Marshal(a.Monkey)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'monkey': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NotificationItem. Returns the specified
// element and whether it was found
func (a NotificationItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NotificationItem
func (a *NotificationItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NotificationItem to handle AdditionalProperties
func (a *NotificationItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["notifItems"]; found {
		err = json.Unmarshal(raw, &a.NotifItems)
		if err != nil {
			return fmt.Errorf("error reading 'notifItems': %w", err)
		}
		delete(object, "notifItems")
	}

	if raw, found := object["resourceId"]; found {
		err = json.Unmarshal(raw, &a.ResourceId)
		if err != nil {
			return fmt.Errorf("error reading 'resourceId': %w", err)
		}
		delete(object, "resourceId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NotificationItem to handle AdditionalProperties
func (a NotificationItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["notifItems"], err = json.Marshal(a.NotifItems)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifItems': %w", err)
	}

	object["resourceId"], err = json.Marshal(a.ResourceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'resourceId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PlmnRouteSelectionDescriptor. Returns the specified
// element and whether it was found
func (a PlmnRouteSelectionDescriptor) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PlmnRouteSelectionDescriptor
func (a *PlmnRouteSelectionDescriptor) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PlmnRouteSelectionDescriptor to handle AdditionalProperties
func (a *PlmnRouteSelectionDescriptor) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["servingPlmn"]; found {
		err = json.Unmarshal(raw, &a.ServingPlmn)
		if err != nil {
			return fmt.Errorf("error reading 'servingPlmn': %w", err)
		}
		delete(object, "servingPlmn")
	}

	if raw, found := object["snssaiRouteSelDescs"]; found {
		err = json.Unmarshal(raw, &a.SnssaiRouteSelDescs)
		if err != nil {
			return fmt.Errorf("error reading 'snssaiRouteSelDescs': %w", err)
		}
		delete(object, "snssaiRouteSelDescs")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PlmnRouteSelectionDescriptor to handle AdditionalProperties
func (a PlmnRouteSelectionDescriptor) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["servingPlmn"], err = json.Marshal(a.ServingPlmn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'servingPlmn': %w", err)
	}

	if len(a.SnssaiRouteSelDescs) != 0 {
		object["snssaiRouteSelDescs"], err = json.Marshal(a.SnssaiRouteSelDescs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssaiRouteSelDescs': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PolicyDataChangeNotification. Returns the specified
// element and whether it was found
func (a PolicyDataChangeNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PolicyDataChangeNotification
func (a *PolicyDataChangeNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PolicyDataChangeNotification to handle AdditionalProperties
func (a *PolicyDataChangeNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["SponsorConnectivityData"]; found {
		err = json.Unmarshal(raw, &a.SponsorConnectivityData)
		if err != nil {
			return fmt.Errorf("error reading 'SponsorConnectivityData': %w", err)
		}
		delete(object, "SponsorConnectivityData")
	}

	if raw, found := object["amPolicyData"]; found {
		err = json.Unmarshal(raw, &a.AmPolicyData)
		if err != nil {
			return fmt.Errorf("error reading 'amPolicyData': %w", err)
		}
		delete(object, "amPolicyData")
	}

	if raw, found := object["bdtData"]; found {
		err = json.Unmarshal(raw, &a.BdtData)
		if err != nil {
			return fmt.Errorf("error reading 'bdtData': %w", err)
		}
		delete(object, "bdtData")
	}

	if raw, found := object["bdtRefId"]; found {
		err = json.Unmarshal(raw, &a.BdtRefId)
		if err != nil {
			return fmt.Errorf("error reading 'bdtRefId': %w", err)
		}
		delete(object, "bdtRefId")
	}

	if raw, found := object["delResources"]; found {
		err = json.Unmarshal(raw, &a.DelResources)
		if err != nil {
			return fmt.Errorf("error reading 'delResources': %w", err)
		}
		delete(object, "delResources")
	}

	if raw, found := object["notifId"]; found {
		err = json.Unmarshal(raw, &a.NotifId)
		if err != nil {
			return fmt.Errorf("error reading 'notifId': %w", err)
		}
		delete(object, "notifId")
	}

	if raw, found := object["opSpecData"]; found {
		err = json.Unmarshal(raw, &a.OpSpecData)
		if err != nil {
			return fmt.Errorf("error reading 'opSpecData': %w", err)
		}
		delete(object, "opSpecData")
	}

	if raw, found := object["opSpecDataMap"]; found {
		err = json.Unmarshal(raw, &a.OpSpecDataMap)
		if err != nil {
			return fmt.Errorf("error reading 'opSpecDataMap': %w", err)
		}
		delete(object, "opSpecDataMap")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["plmnUePolicySet"]; found {
		err = json.Unmarshal(raw, &a.PlmnUePolicySet)
		if err != nil {
			return fmt.Errorf("error reading 'plmnUePolicySet': %w", err)
		}
		delete(object, "plmnUePolicySet")
	}

	if raw, found := object["reportedFragments"]; found {
		err = json.Unmarshal(raw, &a.ReportedFragments)
		if err != nil {
			return fmt.Errorf("error reading 'reportedFragments': %w", err)
		}
		delete(object, "reportedFragments")
	}

	if raw, found := object["smPolicyData"]; found {
		err = json.Unmarshal(raw, &a.SmPolicyData)
		if err != nil {
			return fmt.Errorf("error reading 'smPolicyData': %w", err)
		}
		delete(object, "smPolicyData")
	}

	if raw, found := object["sponsorId"]; found {
		err = json.Unmarshal(raw, &a.SponsorId)
		if err != nil {
			return fmt.Errorf("error reading 'sponsorId': %w", err)
		}
		delete(object, "sponsorId")
	}

	if raw, found := object["ueId"]; found {
		err = json.Unmarshal(raw, &a.UeId)
		if err != nil {
			return fmt.Errorf("error reading 'ueId': %w", err)
		}
		delete(object, "ueId")
	}

	if raw, found := object["uePolicySet"]; found {
		err = json.Unmarshal(raw, &a.UePolicySet)
		if err != nil {
			return fmt.Errorf("error reading 'uePolicySet': %w", err)
		}
		delete(object, "uePolicySet")
	}

	if raw, found := object["usageMonData"]; found {
		err = json.Unmarshal(raw, &a.UsageMonData)
		if err != nil {
			return fmt.Errorf("error reading 'usageMonData': %w", err)
		}
		delete(object, "usageMonData")
	}

	if raw, found := object["usageMonId"]; found {
		err = json.Unmarshal(raw, &a.UsageMonId)
		if err != nil {
			return fmt.Errorf("error reading 'usageMonId': %w", err)
		}
		delete(object, "usageMonId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PolicyDataChangeNotification to handle AdditionalProperties
func (a PolicyDataChangeNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.SponsorConnectivityData != nil {
		object["SponsorConnectivityData"], err = json.Marshal(a.SponsorConnectivityData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'SponsorConnectivityData': %w", err)
		}
	}

	if a.AmPolicyData != nil {
		object["amPolicyData"], err = json.Marshal(a.AmPolicyData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amPolicyData': %w", err)
		}
	}

	if a.BdtData != nil {
		object["bdtData"], err = json.Marshal(a.BdtData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bdtData': %w", err)
		}
	}

	if a.BdtRefId != nil {
		object["bdtRefId"], err = json.Marshal(a.BdtRefId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bdtRefId': %w", err)
		}
	}

	if len(a.DelResources) != 0 {
		object["delResources"], err = json.Marshal(a.DelResources)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'delResources': %w", err)
		}
	}

	if a.NotifId != nil {
		object["notifId"], err = json.Marshal(a.NotifId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifId': %w", err)
		}
	}

	if a.OpSpecData != nil {
		object["opSpecData"], err = json.Marshal(a.OpSpecData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'opSpecData': %w", err)
		}
	}

	if a.OpSpecDataMap != nil {
		object["opSpecDataMap"], err = json.Marshal(a.OpSpecDataMap)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'opSpecDataMap': %w", err)
		}
	}

	if a.PlmnId != nil {
		object["plmnId"], err = json.Marshal(a.PlmnId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
		}
	}

	if a.PlmnUePolicySet != nil {
		object["plmnUePolicySet"], err = json.Marshal(a.PlmnUePolicySet)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnUePolicySet': %w", err)
		}
	}

	if len(a.ReportedFragments) != 0 {
		object["reportedFragments"], err = json.Marshal(a.ReportedFragments)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportedFragments': %w", err)
		}
	}

	if a.SmPolicyData != nil {
		object["smPolicyData"], err = json.Marshal(a.SmPolicyData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smPolicyData': %w", err)
		}
	}

	if a.SponsorId != nil {
		object["sponsorId"], err = json.Marshal(a.SponsorId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sponsorId': %w", err)
		}
	}

	if len(a.UeId) != 0 {
		object["ueId"], err = json.Marshal(a.UeId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueId': %w", err)
		}
	}

	if a.UePolicySet != nil {
		object["uePolicySet"], err = json.Marshal(a.UePolicySet)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uePolicySet': %w", err)
		}
	}

	if a.UsageMonData != nil {
		object["usageMonData"], err = json.Marshal(a.UsageMonData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'usageMonData': %w", err)
		}
	}

	if a.UsageMonId != nil {
		object["usageMonId"], err = json.Marshal(a.UsageMonId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'usageMonId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PolicyDataSubscription. Returns the specified
// element and whether it was found
func (a PolicyDataSubscription) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PolicyDataSubscription
func (a *PolicyDataSubscription) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PolicyDataSubscription to handle AdditionalProperties
func (a *PolicyDataSubscription) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["expiry"]; found {
		err = json.Unmarshal(raw, &a.Expiry)
		if err != nil {
			return fmt.Errorf("error reading 'expiry': %w", err)
		}
		delete(object, "expiry")
	}

	if raw, found := object["monResItems"]; found {
		err = json.Unmarshal(raw, &a.MonResItems)
		if err != nil {
			return fmt.Errorf("error reading 'monResItems': %w", err)
		}
		delete(object, "monResItems")
	}

	if raw, found := object["monitoredResourceUris"]; found {
		err = json.Unmarshal(raw, &a.MonitoredResourceUris)
		if err != nil {
			return fmt.Errorf("error reading 'monitoredResourceUris': %w", err)
		}
		delete(object, "monitoredResourceUris")
	}

	if raw, found := object["notifId"]; found {
		err = json.Unmarshal(raw, &a.NotifId)
		if err != nil {
			return fmt.Errorf("error reading 'notifId': %w", err)
		}
		delete(object, "notifId")
	}

	if raw, found := object["notificationUri"]; found {
		err = json.Unmarshal(raw, &a.NotificationUri)
		if err != nil {
			return fmt.Errorf("error reading 'notificationUri': %w", err)
		}
		delete(object, "notificationUri")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PolicyDataSubscription to handle AdditionalProperties
func (a PolicyDataSubscription) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Expiry != nil {
		object["expiry"], err = json.Marshal(a.Expiry)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expiry': %w", err)
		}
	}

	if len(a.MonResItems) != 0 {
		object["monResItems"], err = json.Marshal(a.MonResItems)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'monResItems': %w", err)
		}
	}

	object["monitoredResourceUris"], err = json.Marshal(a.MonitoredResourceUris)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'monitoredResourceUris': %w", err)
	}

	if a.NotifId != nil {
		object["notifId"], err = json.Marshal(a.NotifId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifId': %w", err)
		}
	}

	object["notificationUri"], err = json.Marshal(a.NotificationUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notificationUri': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ResourceItem. Returns the specified
// element and whether it was found
func (a ResourceItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ResourceItem
func (a *ResourceItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ResourceItem to handle AdditionalProperties
func (a *ResourceItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["items"]; found {
		err = json.Unmarshal(raw, &a.Items)
		if err != nil {
			return fmt.Errorf("error reading 'items': %w", err)
		}
		delete(object, "items")
	}

	if raw, found := object["monResourceUri"]; found {
		err = json.Unmarshal(raw, &a.MonResourceUri)
		if err != nil {
			return fmt.Errorf("error reading 'monResourceUri': %w", err)
		}
		delete(object, "monResourceUri")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ResourceItem to handle AdditionalProperties
func (a ResourceItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["items"], err = json.Marshal(a.Items)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'items': %w", err)
	}

	object["monResourceUri"], err = json.Marshal(a.MonResourceUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'monResourceUri': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmPolicyData. Returns the specified
// element and whether it was found
func (a SmPolicyData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmPolicyData
func (a *SmPolicyData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmPolicyData to handle AdditionalProperties
func (a *SmPolicyData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["smPolicySnssaiData"]; found {
		err = json.Unmarshal(raw, &a.SmPolicySnssaiData)
		if err != nil {
			return fmt.Errorf("error reading 'smPolicySnssaiData': %w", err)
		}
		delete(object, "smPolicySnssaiData")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if raw, found := object["umData"]; found {
		err = json.Unmarshal(raw, &a.UmData)
		if err != nil {
			return fmt.Errorf("error reading 'umData': %w", err)
		}
		delete(object, "umData")
	}

	if raw, found := object["umDataLimits"]; found {
		err = json.Unmarshal(raw, &a.UmDataLimits)
		if err != nil {
			return fmt.Errorf("error reading 'umDataLimits': %w", err)
		}
		delete(object, "umDataLimits")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmPolicyData to handle AdditionalProperties
func (a SmPolicyData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["smPolicySnssaiData"], err = json.Marshal(a.SmPolicySnssaiData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'smPolicySnssaiData': %w", err)
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	if a.UmData != nil {
		object["umData"], err = json.Marshal(a.UmData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'umData': %w", err)
		}
	}

	if a.UmDataLimits != nil {
		object["umDataLimits"], err = json.Marshal(a.UmDataLimits)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'umDataLimits': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmPolicyDataPatch. Returns the specified
// element and whether it was found
func (a SmPolicyDataPatch) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmPolicyDataPatch
func (a *SmPolicyDataPatch) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmPolicyDataPatch to handle AdditionalProperties
func (a *SmPolicyDataPatch) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["smPolicySnssaiData"]; found {
		err = json.Unmarshal(raw, &a.SmPolicySnssaiData)
		if err != nil {
			return fmt.Errorf("error reading 'smPolicySnssaiData': %w", err)
		}
		delete(object, "smPolicySnssaiData")
	}

	if raw, found := object["umData"]; found {
		err = json.Unmarshal(raw, &a.UmData)
		if err != nil {
			return fmt.Errorf("error reading 'umData': %w", err)
		}
		delete(object, "umData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmPolicyDataPatch to handle AdditionalProperties
func (a SmPolicyDataPatch) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.SmPolicySnssaiData != nil {
		object["smPolicySnssaiData"], err = json.Marshal(a.SmPolicySnssaiData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smPolicySnssaiData': %w", err)
		}
	}

	object["umData"], err = json.Marshal(a.UmData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'umData': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmPolicyDnnData. Returns the specified
// element and whether it was found
func (a SmPolicyDnnData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmPolicyDnnData
func (a *SmPolicyDnnData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmPolicyDnnData to handle AdditionalProperties
func (a *SmPolicyDnnData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["adcSupport"]; found {
		err = json.Unmarshal(raw, &a.AdcSupport)
		if err != nil {
			return fmt.Errorf("error reading 'adcSupport': %w", err)
		}
		delete(object, "adcSupport")
	}

	if raw, found := object["allowedServices"]; found {
		err = json.Unmarshal(raw, &a.AllowedServices)
		if err != nil {
			return fmt.Errorf("error reading 'allowedServices': %w", err)
		}
		delete(object, "allowedServices")
	}

	if raw, found := object["bdtRefIds"]; found {
		err = json.Unmarshal(raw, &a.BdtRefIds)
		if err != nil {
			return fmt.Errorf("error reading 'bdtRefIds': %w", err)
		}
		delete(object, "bdtRefIds")
	}

	if raw, found := object["chfInfo"]; found {
		err = json.Unmarshal(raw, &a.ChfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'chfInfo': %w", err)
		}
		delete(object, "chfInfo")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["gbrDl"]; found {
		err = json.Unmarshal(raw, &a.GbrDl)
		if err != nil {
			return fmt.Errorf("error reading 'gbrDl': %w", err)
		}
		delete(object, "gbrDl")
	}

	if raw, found := object["gbrUl"]; found {
		err = json.Unmarshal(raw, &a.GbrUl)
		if err != nil {
			return fmt.Errorf("error reading 'gbrUl': %w", err)
		}
		delete(object, "gbrUl")
	}

	if raw, found := object["imsSignallingPrio"]; found {
		err = json.Unmarshal(raw, &a.ImsSignallingPrio)
		if err != nil {
			return fmt.Errorf("error reading 'imsSignallingPrio': %w", err)
		}
		delete(object, "imsSignallingPrio")
	}

	if raw, found := object["ipv4Index"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Index)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Index': %w", err)
		}
		delete(object, "ipv4Index")
	}

	if raw, found := object["ipv6Index"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Index)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Index': %w", err)
		}
		delete(object, "ipv6Index")
	}

	if raw, found := object["locRoutNotAllowed"]; found {
		err = json.Unmarshal(raw, &a.LocRoutNotAllowed)
		if err != nil {
			return fmt.Errorf("error reading 'locRoutNotAllowed': %w", err)
		}
		delete(object, "locRoutNotAllowed")
	}

	if raw, found := object["mcsPriority"]; found {
		err = json.Unmarshal(raw, &a.McsPriority)
		if err != nil {
			return fmt.Errorf("error reading 'mcsPriority': %w", err)
		}
		delete(object, "mcsPriority")
	}

	if raw, found := object["mcsPriorityLevel"]; found {
		err = json.Unmarshal(raw, &a.McsPriorityLevel)
		if err != nil {
			return fmt.Errorf("error reading 'mcsPriorityLevel': %w", err)
		}
		delete(object, "mcsPriorityLevel")
	}

	if raw, found := object["mpsPriority"]; found {
		err = json.Unmarshal(raw, &a.MpsPriority)
		if err != nil {
			return fmt.Errorf("error reading 'mpsPriority': %w", err)
		}
		delete(object, "mpsPriority")
	}

	if raw, found := object["mpsPriorityLevel"]; found {
		err = json.Unmarshal(raw, &a.MpsPriorityLevel)
		if err != nil {
			return fmt.Errorf("error reading 'mpsPriorityLevel': %w", err)
		}
		delete(object, "mpsPriorityLevel")
	}

	if raw, found := object["offline"]; found {
		err = json.Unmarshal(raw, &a.Offline)
		if err != nil {
			return fmt.Errorf("error reading 'offline': %w", err)
		}
		delete(object, "offline")
	}

	if raw, found := object["online"]; found {
		err = json.Unmarshal(raw, &a.Online)
		if err != nil {
			return fmt.Errorf("error reading 'online': %w", err)
		}
		delete(object, "online")
	}

	if raw, found := object["praInfos"]; found {
		err = json.Unmarshal(raw, &a.PraInfos)
		if err != nil {
			return fmt.Errorf("error reading 'praInfos': %w", err)
		}
		delete(object, "praInfos")
	}

	if raw, found := object["refUmDataLimitIds"]; found {
		err = json.Unmarshal(raw, &a.RefUmDataLimitIds)
		if err != nil {
			return fmt.Errorf("error reading 'refUmDataLimitIds': %w", err)
		}
		delete(object, "refUmDataLimitIds")
	}

	if raw, found := object["subscCats"]; found {
		err = json.Unmarshal(raw, &a.SubscCats)
		if err != nil {
			return fmt.Errorf("error reading 'subscCats': %w", err)
		}
		delete(object, "subscCats")
	}

	if raw, found := object["subscSpendingLimits"]; found {
		err = json.Unmarshal(raw, &a.SubscSpendingLimits)
		if err != nil {
			return fmt.Errorf("error reading 'subscSpendingLimits': %w", err)
		}
		delete(object, "subscSpendingLimits")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmPolicyDnnData to handle AdditionalProperties
func (a SmPolicyDnnData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AdcSupport != nil {
		object["adcSupport"], err = json.Marshal(a.AdcSupport)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'adcSupport': %w", err)
		}
	}

	if len(a.AllowedServices) != 0 {
		object["allowedServices"], err = json.Marshal(a.AllowedServices)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedServices': %w", err)
		}
	}

	object["bdtRefIds"], err = json.Marshal(a.BdtRefIds)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'bdtRefIds': %w", err)
	}

	if a.ChfInfo != nil {
		object["chfInfo"], err = json.Marshal(a.ChfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'chfInfo': %w", err)
		}
	}

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
	}

	if len(a.GbrDl) != 0 {
		object["gbrDl"], err = json.Marshal(a.GbrDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gbrDl': %w", err)
		}
	}

	if len(a.GbrUl) != 0 {
		object["gbrUl"], err = json.Marshal(a.GbrUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gbrUl': %w", err)
		}
	}

	if a.ImsSignallingPrio != nil {
		object["imsSignallingPrio"], err = json.Marshal(a.ImsSignallingPrio)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'imsSignallingPrio': %w", err)
		}
	}

	if a.Ipv4Index != nil {
		object["ipv4Index"], err = json.Marshal(a.Ipv4Index)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Index': %w", err)
		}
	}

	if a.Ipv6Index != nil {
		object["ipv6Index"], err = json.Marshal(a.Ipv6Index)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Index': %w", err)
		}
	}

	if a.LocRoutNotAllowed != nil {
		object["locRoutNotAllowed"], err = json.Marshal(a.LocRoutNotAllowed)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locRoutNotAllowed': %w", err)
		}
	}

	if a.McsPriority != nil {
		object["mcsPriority"], err = json.Marshal(a.McsPriority)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mcsPriority': %w", err)
		}
	}

	if a.McsPriorityLevel != nil {
		object["mcsPriorityLevel"], err = json.Marshal(a.McsPriorityLevel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mcsPriorityLevel': %w", err)
		}
	}

	if a.MpsPriority != nil {
		object["mpsPriority"], err = json.Marshal(a.MpsPriority)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mpsPriority': %w", err)
		}
	}

	if a.MpsPriorityLevel != nil {
		object["mpsPriorityLevel"], err = json.Marshal(a.MpsPriorityLevel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mpsPriorityLevel': %w", err)
		}
	}

	if a.Offline != nil {
		object["offline"], err = json.Marshal(a.Offline)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'offline': %w", err)
		}
	}

	if a.Online != nil {
		object["online"], err = json.Marshal(a.Online)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'online': %w", err)
		}
	}

	if a.PraInfos != nil {
		object["praInfos"], err = json.Marshal(a.PraInfos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'praInfos': %w", err)
		}
	}

	if a.RefUmDataLimitIds != nil {
		object["refUmDataLimitIds"], err = json.Marshal(a.RefUmDataLimitIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'refUmDataLimitIds': %w", err)
		}
	}

	if len(a.SubscCats) != 0 {
		object["subscCats"], err = json.Marshal(a.SubscCats)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscCats': %w", err)
		}
	}

	if a.SubscSpendingLimits != nil {
		object["subscSpendingLimits"], err = json.Marshal(a.SubscSpendingLimits)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscSpendingLimits': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmPolicyDnnDataPatch. Returns the specified
// element and whether it was found
func (a SmPolicyDnnDataPatch) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmPolicyDnnDataPatch
func (a *SmPolicyDnnDataPatch) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmPolicyDnnDataPatch to handle AdditionalProperties
func (a *SmPolicyDnnDataPatch) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bdtRefIds"]; found {
		err = json.Unmarshal(raw, &a.BdtRefIds)
		if err != nil {
			return fmt.Errorf("error reading 'bdtRefIds': %w", err)
		}
		delete(object, "bdtRefIds")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmPolicyDnnDataPatch to handle AdditionalProperties
func (a SmPolicyDnnDataPatch) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["bdtRefIds"], err = json.Marshal(a.BdtRefIds)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'bdtRefIds': %w", err)
	}

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmPolicySnssaiData. Returns the specified
// element and whether it was found
func (a SmPolicySnssaiData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmPolicySnssaiData
func (a *SmPolicySnssaiData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmPolicySnssaiData to handle AdditionalProperties
func (a *SmPolicySnssaiData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["smPolicyDnnData"]; found {
		err = json.Unmarshal(raw, &a.SmPolicyDnnData)
		if err != nil {
			return fmt.Errorf("error reading 'smPolicyDnnData': %w", err)
		}
		delete(object, "smPolicyDnnData")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmPolicySnssaiData to handle AdditionalProperties
func (a SmPolicySnssaiData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.SmPolicyDnnData != nil {
		object["smPolicyDnnData"], err = json.Marshal(a.SmPolicyDnnData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smPolicyDnnData': %w", err)
		}
	}

	object["snssai"], err = json.Marshal(a.Snssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmPolicySnssaiDataPatch. Returns the specified
// element and whether it was found
func (a SmPolicySnssaiDataPatch) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmPolicySnssaiDataPatch
func (a *SmPolicySnssaiDataPatch) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmPolicySnssaiDataPatch to handle AdditionalProperties
func (a *SmPolicySnssaiDataPatch) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["smPolicyDnnData"]; found {
		err = json.Unmarshal(raw, &a.SmPolicyDnnData)
		if err != nil {
			return fmt.Errorf("error reading 'smPolicyDnnData': %w", err)
		}
		delete(object, "smPolicyDnnData")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmPolicySnssaiDataPatch to handle AdditionalProperties
func (a SmPolicySnssaiDataPatch) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.SmPolicyDnnData != nil {
		object["smPolicyDnnData"], err = json.Marshal(a.SmPolicyDnnData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smPolicyDnnData': %w", err)
		}
	}

	object["snssai"], err = json.Marshal(a.Snssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SnssaiRouteSelectionDescriptor. Returns the specified
// element and whether it was found
func (a SnssaiRouteSelectionDescriptor) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SnssaiRouteSelectionDescriptor
func (a *SnssaiRouteSelectionDescriptor) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SnssaiRouteSelectionDescriptor to handle AdditionalProperties
func (a *SnssaiRouteSelectionDescriptor) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnnRouteSelDescs"]; found {
		err = json.Unmarshal(raw, &a.DnnRouteSelDescs)
		if err != nil {
			return fmt.Errorf("error reading 'dnnRouteSelDescs': %w", err)
		}
		delete(object, "dnnRouteSelDescs")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SnssaiRouteSelectionDescriptor to handle AdditionalProperties
func (a SnssaiRouteSelectionDescriptor) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.DnnRouteSelDescs) != 0 {
		object["dnnRouteSelDescs"], err = json.Marshal(a.DnnRouteSelDescs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnnRouteSelDescs': %w", err)
		}
	}

	object["snssai"], err = json.Marshal(a.Snssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SponsorConnectivityData. Returns the specified
// element and whether it was found
func (a SponsorConnectivityData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SponsorConnectivityData
func (a *SponsorConnectivityData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SponsorConnectivityData to handle AdditionalProperties
func (a *SponsorConnectivityData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["aspIds"]; found {
		err = json.Unmarshal(raw, &a.AspIds)
		if err != nil {
			return fmt.Errorf("error reading 'aspIds': %w", err)
		}
		delete(object, "aspIds")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SponsorConnectivityData to handle AdditionalProperties
func (a SponsorConnectivityData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["aspIds"], err = json.Marshal(a.AspIds)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'aspIds': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TimePeriod. Returns the specified
// element and whether it was found
func (a TimePeriod) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TimePeriod
func (a *TimePeriod) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TimePeriod to handle AdditionalProperties
func (a *TimePeriod) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["maxNumPeriod"]; found {
		err = json.Unmarshal(raw, &a.MaxNumPeriod)
		if err != nil {
			return fmt.Errorf("error reading 'maxNumPeriod': %w", err)
		}
		delete(object, "maxNumPeriod")
	}

	if raw, found := object["period"]; found {
		err = json.Unmarshal(raw, &a.Period)
		if err != nil {
			return fmt.Errorf("error reading 'period': %w", err)
		}
		delete(object, "period")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TimePeriod to handle AdditionalProperties
func (a TimePeriod) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.MaxNumPeriod != nil {
		object["maxNumPeriod"], err = json.Marshal(a.MaxNumPeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxNumPeriod': %w", err)
		}
	}

	object["period"], err = json.Marshal(a.Period)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'period': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UePolicySection. Returns the specified
// element and whether it was found
func (a UePolicySection) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UePolicySection
func (a *UePolicySection) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UePolicySection to handle AdditionalProperties
func (a *UePolicySection) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["uePolicySectionInfo"]; found {
		err = json.Unmarshal(raw, &a.UePolicySectionInfo)
		if err != nil {
			return fmt.Errorf("error reading 'uePolicySectionInfo': %w", err)
		}
		delete(object, "uePolicySectionInfo")
	}

	if raw, found := object["upsi"]; found {
		err = json.Unmarshal(raw, &a.Upsi)
		if err != nil {
			return fmt.Errorf("error reading 'upsi': %w", err)
		}
		delete(object, "upsi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UePolicySection to handle AdditionalProperties
func (a UePolicySection) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["uePolicySectionInfo"], err = json.Marshal(a.UePolicySectionInfo)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'uePolicySectionInfo': %w", err)
	}

	object["upsi"], err = json.Marshal(a.Upsi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'upsi': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UePolicySet. Returns the specified
// element and whether it was found
func (a UePolicySet) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UePolicySet
func (a *UePolicySet) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UePolicySet to handle AdditionalProperties
func (a *UePolicySet) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedRouteSelDescs"]; found {
		err = json.Unmarshal(raw, &a.AllowedRouteSelDescs)
		if err != nil {
			return fmt.Errorf("error reading 'allowedRouteSelDescs': %w", err)
		}
		delete(object, "allowedRouteSelDescs")
	}

	if raw, found := object["andspInd"]; found {
		err = json.Unmarshal(raw, &a.AndspInd)
		if err != nil {
			return fmt.Errorf("error reading 'andspInd': %w", err)
		}
		delete(object, "andspInd")
	}

	if raw, found := object["osIds"]; found {
		err = json.Unmarshal(raw, &a.OsIds)
		if err != nil {
			return fmt.Errorf("error reading 'osIds': %w", err)
		}
		delete(object, "osIds")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["praInfos"]; found {
		err = json.Unmarshal(raw, &a.PraInfos)
		if err != nil {
			return fmt.Errorf("error reading 'praInfos': %w", err)
		}
		delete(object, "praInfos")
	}

	if raw, found := object["subscCats"]; found {
		err = json.Unmarshal(raw, &a.SubscCats)
		if err != nil {
			return fmt.Errorf("error reading 'subscCats': %w", err)
		}
		delete(object, "subscCats")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if raw, found := object["uePolicySections"]; found {
		err = json.Unmarshal(raw, &a.UePolicySections)
		if err != nil {
			return fmt.Errorf("error reading 'uePolicySections': %w", err)
		}
		delete(object, "uePolicySections")
	}

	if raw, found := object["upsis"]; found {
		err = json.Unmarshal(raw, &a.Upsis)
		if err != nil {
			return fmt.Errorf("error reading 'upsis': %w", err)
		}
		delete(object, "upsis")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UePolicySet to handle AdditionalProperties
func (a UePolicySet) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AllowedRouteSelDescs != nil {
		object["allowedRouteSelDescs"], err = json.Marshal(a.AllowedRouteSelDescs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedRouteSelDescs': %w", err)
		}
	}

	if a.AndspInd != nil {
		object["andspInd"], err = json.Marshal(a.AndspInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'andspInd': %w", err)
		}
	}

	if len(a.OsIds) != 0 {
		object["osIds"], err = json.Marshal(a.OsIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'osIds': %w", err)
		}
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.PraInfos != nil {
		object["praInfos"], err = json.Marshal(a.PraInfos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'praInfos': %w", err)
		}
	}

	if len(a.SubscCats) != 0 {
		object["subscCats"], err = json.Marshal(a.SubscCats)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscCats': %w", err)
		}
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	if a.UePolicySections != nil {
		object["uePolicySections"], err = json.Marshal(a.UePolicySections)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uePolicySections': %w", err)
		}
	}

	if len(a.Upsis) != 0 {
		object["upsis"], err = json.Marshal(a.Upsis)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upsis': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UePolicySetPatch. Returns the specified
// element and whether it was found
func (a UePolicySetPatch) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UePolicySetPatch
func (a *UePolicySetPatch) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UePolicySetPatch to handle AdditionalProperties
func (a *UePolicySetPatch) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["andspInd"]; found {
		err = json.Unmarshal(raw, &a.AndspInd)
		if err != nil {
			return fmt.Errorf("error reading 'andspInd': %w", err)
		}
		delete(object, "andspInd")
	}

	if raw, found := object["osIds"]; found {
		err = json.Unmarshal(raw, &a.OsIds)
		if err != nil {
			return fmt.Errorf("error reading 'osIds': %w", err)
		}
		delete(object, "osIds")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["uePolicySections"]; found {
		err = json.Unmarshal(raw, &a.UePolicySections)
		if err != nil {
			return fmt.Errorf("error reading 'uePolicySections': %w", err)
		}
		delete(object, "uePolicySections")
	}

	if raw, found := object["upsis"]; found {
		err = json.Unmarshal(raw, &a.Upsis)
		if err != nil {
			return fmt.Errorf("error reading 'upsis': %w", err)
		}
		delete(object, "upsis")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UePolicySetPatch to handle AdditionalProperties
func (a UePolicySetPatch) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AndspInd != nil {
		object["andspInd"], err = json.Marshal(a.AndspInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'andspInd': %w", err)
		}
	}

	if len(a.OsIds) != 0 {
		object["osIds"], err = json.Marshal(a.OsIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'osIds': %w", err)
		}
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.UePolicySections != nil {
		object["uePolicySections"], err = json.Marshal(a.UePolicySections)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uePolicySections': %w", err)
		}
	}

	if len(a.Upsis) != 0 {
		object["upsis"], err = json.Marshal(a.Upsis)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upsis': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpdatedItem. Returns the specified
// element and whether it was found
func (a UpdatedItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpdatedItem
func (a *UpdatedItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpdatedItem to handle AdditionalProperties
func (a *UpdatedItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["item"]; found {
		err = json.Unmarshal(raw, &a.Item)
		if err != nil {
			return fmt.Errorf("error reading 'item': %w", err)
		}
		delete(object, "item")
	}

	if raw, found := object["value"]; found {
		err = json.Unmarshal(raw, &a.Value)
		if err != nil {
			return fmt.Errorf("error reading 'value': %w", err)
		}
		delete(object, "value")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpdatedItem to handle AdditionalProperties
func (a UpdatedItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["item"], err = json.Marshal(a.Item)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'item': %w", err)
	}

	object["value"], err = json.Marshal(a.Value)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'value': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UsageMonData. Returns the specified
// element and whether it was found
func (a UsageMonData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UsageMonData
func (a *UsageMonData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UsageMonData to handle AdditionalProperties
func (a *UsageMonData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedUsage"]; found {
		err = json.Unmarshal(raw, &a.AllowedUsage)
		if err != nil {
			return fmt.Errorf("error reading 'allowedUsage': %w", err)
		}
		delete(object, "allowedUsage")
	}

	if raw, found := object["limitId"]; found {
		err = json.Unmarshal(raw, &a.LimitId)
		if err != nil {
			return fmt.Errorf("error reading 'limitId': %w", err)
		}
		delete(object, "limitId")
	}

	if raw, found := object["resetTime"]; found {
		err = json.Unmarshal(raw, &a.ResetTime)
		if err != nil {
			return fmt.Errorf("error reading 'resetTime': %w", err)
		}
		delete(object, "resetTime")
	}

	if raw, found := object["scopes"]; found {
		err = json.Unmarshal(raw, &a.Scopes)
		if err != nil {
			return fmt.Errorf("error reading 'scopes': %w", err)
		}
		delete(object, "scopes")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if raw, found := object["umLevel"]; found {
		err = json.Unmarshal(raw, &a.UmLevel)
		if err != nil {
			return fmt.Errorf("error reading 'umLevel': %w", err)
		}
		delete(object, "umLevel")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UsageMonData to handle AdditionalProperties
func (a UsageMonData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AllowedUsage != nil {
		object["allowedUsage"], err = json.Marshal(a.AllowedUsage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedUsage': %w", err)
		}
	}

	object["limitId"], err = json.Marshal(a.LimitId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'limitId': %w", err)
	}

	if a.ResetTime != nil {
		object["resetTime"], err = json.Marshal(a.ResetTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resetTime': %w", err)
		}
	}

	if a.Scopes != nil {
		object["scopes"], err = json.Marshal(a.Scopes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scopes': %w", err)
		}
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	if a.UmLevel != nil {
		object["umLevel"], err = json.Marshal(a.UmLevel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'umLevel': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UsageMonDataLimit. Returns the specified
// element and whether it was found
func (a UsageMonDataLimit) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UsageMonDataLimit
func (a *UsageMonDataLimit) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UsageMonDataLimit to handle AdditionalProperties
func (a *UsageMonDataLimit) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["endDate"]; found {
		err = json.Unmarshal(raw, &a.EndDate)
		if err != nil {
			return fmt.Errorf("error reading 'endDate': %w", err)
		}
		delete(object, "endDate")
	}

	if raw, found := object["limitId"]; found {
		err = json.Unmarshal(raw, &a.LimitId)
		if err != nil {
			return fmt.Errorf("error reading 'limitId': %w", err)
		}
		delete(object, "limitId")
	}

	if raw, found := object["resetPeriod"]; found {
		err = json.Unmarshal(raw, &a.ResetPeriod)
		if err != nil {
			return fmt.Errorf("error reading 'resetPeriod': %w", err)
		}
		delete(object, "resetPeriod")
	}

	if raw, found := object["scopes"]; found {
		err = json.Unmarshal(raw, &a.Scopes)
		if err != nil {
			return fmt.Errorf("error reading 'scopes': %w", err)
		}
		delete(object, "scopes")
	}

	if raw, found := object["startDate"]; found {
		err = json.Unmarshal(raw, &a.StartDate)
		if err != nil {
			return fmt.Errorf("error reading 'startDate': %w", err)
		}
		delete(object, "startDate")
	}

	if raw, found := object["umLevel"]; found {
		err = json.Unmarshal(raw, &a.UmLevel)
		if err != nil {
			return fmt.Errorf("error reading 'umLevel': %w", err)
		}
		delete(object, "umLevel")
	}

	if raw, found := object["usageLimit"]; found {
		err = json.Unmarshal(raw, &a.UsageLimit)
		if err != nil {
			return fmt.Errorf("error reading 'usageLimit': %w", err)
		}
		delete(object, "usageLimit")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UsageMonDataLimit to handle AdditionalProperties
func (a UsageMonDataLimit) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EndDate != nil {
		object["endDate"], err = json.Marshal(a.EndDate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'endDate': %w", err)
		}
	}

	object["limitId"], err = json.Marshal(a.LimitId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'limitId': %w", err)
	}

	if a.ResetPeriod != nil {
		object["resetPeriod"], err = json.Marshal(a.ResetPeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resetPeriod': %w", err)
		}
	}

	if a.Scopes != nil {
		object["scopes"], err = json.Marshal(a.Scopes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scopes': %w", err)
		}
	}

	if a.StartDate != nil {
		object["startDate"], err = json.Marshal(a.StartDate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'startDate': %w", err)
		}
	}

	if a.UmLevel != nil {
		object["umLevel"], err = json.Marshal(a.UmLevel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'umLevel': %w", err)
		}
	}

	if a.UsageLimit != nil {
		object["usageLimit"], err = json.Marshal(a.UsageLimit)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'usageLimit': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UsageMonDataScope. Returns the specified
// element and whether it was found
func (a UsageMonDataScope) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UsageMonDataScope
func (a *UsageMonDataScope) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UsageMonDataScope to handle AdditionalProperties
func (a *UsageMonDataScope) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UsageMonDataScope to handle AdditionalProperties
func (a UsageMonDataScope) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Dnn) != 0 {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	object["snssai"], err = json.Marshal(a.Snssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ReadBdtData request
	ReadBdtData(ctx context.Context, params *ReadBdtDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndividualBdtData request
	DeleteIndividualBdtData(ctx context.Context, bdtReferenceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadIndividualBdtData request
	ReadIndividualBdtData(ctx context.Context, bdtReferenceId string, params *ReadIndividualBdtDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIndividualBdtDataWithBody request with any body
	UpdateIndividualBdtDataWithBody(ctx context.Context, bdtReferenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIndividualBdtDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, bdtReferenceId string, body UpdateIndividualBdtDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIndividualBdtDataWithBody request with any body
	CreateIndividualBdtDataWithBody(ctx context.Context, bdtReferenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIndividualBdtData(ctx context.Context, bdtReferenceId string, body CreateIndividualBdtDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadPlmnUePolicySet request
	ReadPlmnUePolicySet(ctx context.Context, plmnId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadSponsorConnectivityData request
	ReadSponsorConnectivityData(ctx context.Context, sponsorId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIndividualPolicyDataSubscriptionWithBody request with any body
	CreateIndividualPolicyDataSubscriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIndividualPolicyDataSubscription(ctx context.Context, body CreateIndividualPolicyDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndividualPolicyDataSubscription request
	DeleteIndividualPolicyDataSubscription(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceIndividualPolicyDataSubscriptionWithBody request with any body
	ReplaceIndividualPolicyDataSubscriptionWithBody(ctx context.Context, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceIndividualPolicyDataSubscription(ctx context.Context, subsId string, body ReplaceIndividualPolicyDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadAccessAndMobilityPolicyData request
	ReadAccessAndMobilityPolicyData(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadOperatorSpecificData request
	ReadOperatorSpecificData(ctx context.Context, ueId externalRef0.VarUeId, params *ReadOperatorSpecificDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOperatorSpecificDataWithBody request with any body
	UpdateOperatorSpecificDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOperatorSpecificDataWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, body UpdateOperatorSpecificDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceOperatorSpecificDataWithBody request with any body
	ReplaceOperatorSpecificDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceOperatorSpecificData(ctx context.Context, ueId externalRef0.VarUeId, body ReplaceOperatorSpecificDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadSessionManagementPolicyData request
	ReadSessionManagementPolicyData(ctx context.Context, ueId externalRef0.VarUeId, params *ReadSessionManagementPolicyDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSessionManagementPolicyDataWithBody request with any body
	UpdateSessionManagementPolicyDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSessionManagementPolicyDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, body UpdateSessionManagementPolicyDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUsageMonitoringInformation request
	DeleteUsageMonitoringInformation(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadUsageMonitoringInformation request
	ReadUsageMonitoringInformation(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, params *ReadUsageMonitoringInformationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUsageMonitoringResourceWithBody request with any body
	CreateUsageMonitoringResourceWithBody(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUsageMonitoringResource(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, body CreateUsageMonitoringResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadUEPolicySet request
	ReadUEPolicySet(ctx context.Context, ueId externalRef0.VarUeId, params *ReadUEPolicySetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUEPolicySetWithBody request with any body
	UpdateUEPolicySetWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUEPolicySetWithApplicationMergePatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, body UpdateUEPolicySetApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrReplaceUEPolicySetWithBody request with any body
	CreateOrReplaceUEPolicySetWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrReplaceUEPolicySet(ctx context.Context, ueId externalRef0.VarUeId, body CreateOrReplaceUEPolicySetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ReadBdtData(ctx context.Context, params *ReadBdtDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadBdtDataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndividualBdtData(ctx context.Context, bdtReferenceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndividualBdtDataRequest(c.Server, bdtReferenceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadIndividualBdtData(ctx context.Context, bdtReferenceId string, params *ReadIndividualBdtDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadIndividualBdtDataRequest(c.Server, bdtReferenceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIndividualBdtDataWithBody(ctx context.Context, bdtReferenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIndividualBdtDataRequestWithBody(c.Server, bdtReferenceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIndividualBdtDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, bdtReferenceId string, body UpdateIndividualBdtDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIndividualBdtDataRequestWithApplicationMergePatchPlusJSONBody(c.Server, bdtReferenceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualBdtDataWithBody(ctx context.Context, bdtReferenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualBdtDataRequestWithBody(c.Server, bdtReferenceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualBdtData(ctx context.Context, bdtReferenceId string, body CreateIndividualBdtDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualBdtDataRequest(c.Server, bdtReferenceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadPlmnUePolicySet(ctx context.Context, plmnId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadPlmnUePolicySetRequest(c.Server, plmnId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadSponsorConnectivityData(ctx context.Context, sponsorId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadSponsorConnectivityDataRequest(c.Server, sponsorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualPolicyDataSubscriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualPolicyDataSubscriptionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualPolicyDataSubscription(ctx context.Context, body CreateIndividualPolicyDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualPolicyDataSubscriptionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndividualPolicyDataSubscription(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndividualPolicyDataSubscriptionRequest(c.Server, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceIndividualPolicyDataSubscriptionWithBody(ctx context.Context, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceIndividualPolicyDataSubscriptionRequestWithBody(c.Server, subsId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceIndividualPolicyDataSubscription(ctx context.Context, subsId string, body ReplaceIndividualPolicyDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceIndividualPolicyDataSubscriptionRequest(c.Server, subsId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadAccessAndMobilityPolicyData(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadAccessAndMobilityPolicyDataRequest(c.Server, ueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadOperatorSpecificData(ctx context.Context, ueId externalRef0.VarUeId, params *ReadOperatorSpecificDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadOperatorSpecificDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOperatorSpecificDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOperatorSpecificDataRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOperatorSpecificDataWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, body UpdateOperatorSpecificDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOperatorSpecificDataRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceOperatorSpecificDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceOperatorSpecificDataRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceOperatorSpecificData(ctx context.Context, ueId externalRef0.VarUeId, body ReplaceOperatorSpecificDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceOperatorSpecificDataRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadSessionManagementPolicyData(ctx context.Context, ueId externalRef0.VarUeId, params *ReadSessionManagementPolicyDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadSessionManagementPolicyDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSessionManagementPolicyDataWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSessionManagementPolicyDataRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSessionManagementPolicyDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, body UpdateSessionManagementPolicyDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSessionManagementPolicyDataRequestWithApplicationMergePatchPlusJSONBody(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUsageMonitoringInformation(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUsageMonitoringInformationRequest(c.Server, ueId, usageMonId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadUsageMonitoringInformation(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, params *ReadUsageMonitoringInformationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadUsageMonitoringInformationRequest(c.Server, ueId, usageMonId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUsageMonitoringResourceWithBody(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUsageMonitoringResourceRequestWithBody(c.Server, ueId, usageMonId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUsageMonitoringResource(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, body CreateUsageMonitoringResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUsageMonitoringResourceRequest(c.Server, ueId, usageMonId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadUEPolicySet(ctx context.Context, ueId externalRef0.VarUeId, params *ReadUEPolicySetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadUEPolicySetRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUEPolicySetWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUEPolicySetRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUEPolicySetWithApplicationMergePatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, body UpdateUEPolicySetApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUEPolicySetRequestWithApplicationMergePatchPlusJSONBody(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceUEPolicySetWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceUEPolicySetRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceUEPolicySet(ctx context.Context, ueId externalRef0.VarUeId, body CreateOrReplaceUEPolicySetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceUEPolicySetRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewReadBdtDataRequest generates requests for ReadBdtData
func NewReadBdtDataRequest(server string, params *ReadBdtDataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/bdt-data")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BdtRefIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "bdt-ref-ids", runtime.ParamLocationQuery, *params.BdtRefIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SuppFeat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supp-feat", runtime.ParamLocationQuery, *params.SuppFeat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIndividualBdtDataRequest generates requests for DeleteIndividualBdtData
func NewDeleteIndividualBdtDataRequest(server string, bdtReferenceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bdtReferenceId", runtime.ParamLocationPath, bdtReferenceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/bdt-data/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadIndividualBdtDataRequest generates requests for ReadIndividualBdtData
func NewReadIndividualBdtDataRequest(server string, bdtReferenceId string, params *ReadIndividualBdtDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bdtReferenceId", runtime.ParamLocationPath, bdtReferenceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/bdt-data/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SuppFeat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supp-feat", runtime.ParamLocationQuery, *params.SuppFeat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIndividualBdtDataRequestWithApplicationMergePatchPlusJSONBody calls the generic UpdateIndividualBdtData builder with application/merge-patch+json body
func NewUpdateIndividualBdtDataRequestWithApplicationMergePatchPlusJSONBody(server string, bdtReferenceId string, body UpdateIndividualBdtDataApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIndividualBdtDataRequestWithBody(server, bdtReferenceId, "application/merge-patch+json", bodyReader)
}

// NewUpdateIndividualBdtDataRequestWithBody generates requests for UpdateIndividualBdtData with any type of body
func NewUpdateIndividualBdtDataRequestWithBody(server string, bdtReferenceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bdtReferenceId", runtime.ParamLocationPath, bdtReferenceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/bdt-data/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateIndividualBdtDataRequest calls the generic CreateIndividualBdtData builder with application/json body
func NewCreateIndividualBdtDataRequest(server string, bdtReferenceId string, body CreateIndividualBdtDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIndividualBdtDataRequestWithBody(server, bdtReferenceId, "application/json", bodyReader)
}

// NewCreateIndividualBdtDataRequestWithBody generates requests for CreateIndividualBdtData with any type of body
func NewCreateIndividualBdtDataRequestWithBody(server string, bdtReferenceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bdtReferenceId", runtime.ParamLocationPath, bdtReferenceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/bdt-data/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReadPlmnUePolicySetRequest generates requests for ReadPlmnUePolicySet
func NewReadPlmnUePolicySetRequest(server string, plmnId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "plmnId", runtime.ParamLocationPath, plmnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/plmns/%s/ue-policy-set", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadSponsorConnectivityDataRequest generates requests for ReadSponsorConnectivityData
func NewReadSponsorConnectivityDataRequest(server string, sponsorId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sponsorId", runtime.ParamLocationPath, sponsorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/sponsor-connectivity-data/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIndividualPolicyDataSubscriptionRequest calls the generic CreateIndividualPolicyDataSubscription builder with application/json body
func NewCreateIndividualPolicyDataSubscriptionRequest(server string, body CreateIndividualPolicyDataSubscriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIndividualPolicyDataSubscriptionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateIndividualPolicyDataSubscriptionRequestWithBody generates requests for CreateIndividualPolicyDataSubscription with any type of body
func NewCreateIndividualPolicyDataSubscriptionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/subs-to-notify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIndividualPolicyDataSubscriptionRequest generates requests for DeleteIndividualPolicyDataSubscription
func NewDeleteIndividualPolicyDataSubscriptionRequest(server string, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/subs-to-notify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceIndividualPolicyDataSubscriptionRequest calls the generic ReplaceIndividualPolicyDataSubscription builder with application/json body
func NewReplaceIndividualPolicyDataSubscriptionRequest(server string, subsId string, body ReplaceIndividualPolicyDataSubscriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceIndividualPolicyDataSubscriptionRequestWithBody(server, subsId, "application/json", bodyReader)
}

// NewReplaceIndividualPolicyDataSubscriptionRequestWithBody generates requests for ReplaceIndividualPolicyDataSubscription with any type of body
func NewReplaceIndividualPolicyDataSubscriptionRequestWithBody(server string, subsId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/subs-to-notify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReadAccessAndMobilityPolicyDataRequest generates requests for ReadAccessAndMobilityPolicyData
func NewReadAccessAndMobilityPolicyDataRequest(server string, ueId externalRef0.VarUeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/ues/%s/am-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadOperatorSpecificDataRequest generates requests for ReadOperatorSpecificData
func NewReadOperatorSpecificDataRequest(server string, ueId externalRef0.VarUeId, params *ReadOperatorSpecificDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/ues/%s/operator-specific-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SuppFeat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supp-feat", runtime.ParamLocationQuery, *params.SuppFeat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOperatorSpecificDataRequestWithApplicationJSONPatchPlusJSONBody calls the generic UpdateOperatorSpecificData builder with application/json-patch+json body
func NewUpdateOperatorSpecificDataRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef0.VarUeId, body UpdateOperatorSpecificDataApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOperatorSpecificDataRequestWithBody(server, ueId, "application/json-patch+json", bodyReader)
}

// NewUpdateOperatorSpecificDataRequestWithBody generates requests for UpdateOperatorSpecificData with any type of body
func NewUpdateOperatorSpecificDataRequestWithBody(server string, ueId externalRef0.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/ues/%s/operator-specific-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceOperatorSpecificDataRequest calls the generic ReplaceOperatorSpecificData builder with application/json body
func NewReplaceOperatorSpecificDataRequest(server string, ueId externalRef0.VarUeId, body ReplaceOperatorSpecificDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceOperatorSpecificDataRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewReplaceOperatorSpecificDataRequestWithBody generates requests for ReplaceOperatorSpecificData with any type of body
func NewReplaceOperatorSpecificDataRequestWithBody(server string, ueId externalRef0.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/ues/%s/operator-specific-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReadSessionManagementPolicyDataRequest generates requests for ReadSessionManagementPolicyData
func NewReadSessionManagementPolicyDataRequest(server string, ueId externalRef0.VarUeId, params *ReadSessionManagementPolicyDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/ues/%s/sm-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Snssai != nil {

			if queryParamBuf, err := json.Marshal(*params.Snssai); err != nil {
				return nil, err
			} else {
				queryValues.Add("snssai", string(queryParamBuf))
			}

		}

		if params.Dnn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnn", runtime.ParamLocationQuery, *params.Dnn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SuppFeat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supp-feat", runtime.ParamLocationQuery, *params.SuppFeat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSessionManagementPolicyDataRequestWithApplicationMergePatchPlusJSONBody calls the generic UpdateSessionManagementPolicyData builder with application/merge-patch+json body
func NewUpdateSessionManagementPolicyDataRequestWithApplicationMergePatchPlusJSONBody(server string, ueId externalRef0.VarUeId, body UpdateSessionManagementPolicyDataApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSessionManagementPolicyDataRequestWithBody(server, ueId, "application/merge-patch+json", bodyReader)
}

// NewUpdateSessionManagementPolicyDataRequestWithBody generates requests for UpdateSessionManagementPolicyData with any type of body
func NewUpdateSessionManagementPolicyDataRequestWithBody(server string, ueId externalRef0.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/ues/%s/sm-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUsageMonitoringInformationRequest generates requests for DeleteUsageMonitoringInformation
func NewDeleteUsageMonitoringInformationRequest(server string, ueId externalRef0.VarUeId, usageMonId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "usageMonId", runtime.ParamLocationPath, usageMonId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/ues/%s/sm-data/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadUsageMonitoringInformationRequest generates requests for ReadUsageMonitoringInformation
func NewReadUsageMonitoringInformationRequest(server string, ueId externalRef0.VarUeId, usageMonId string, params *ReadUsageMonitoringInformationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "usageMonId", runtime.ParamLocationPath, usageMonId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/ues/%s/sm-data/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SuppFeat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supp-feat", runtime.ParamLocationQuery, *params.SuppFeat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUsageMonitoringResourceRequest calls the generic CreateUsageMonitoringResource builder with application/json body
func NewCreateUsageMonitoringResourceRequest(server string, ueId externalRef0.VarUeId, usageMonId string, body CreateUsageMonitoringResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUsageMonitoringResourceRequestWithBody(server, ueId, usageMonId, "application/json", bodyReader)
}

// NewCreateUsageMonitoringResourceRequestWithBody generates requests for CreateUsageMonitoringResource with any type of body
func NewCreateUsageMonitoringResourceRequestWithBody(server string, ueId externalRef0.VarUeId, usageMonId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "usageMonId", runtime.ParamLocationPath, usageMonId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/ues/%s/sm-data/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReadUEPolicySetRequest generates requests for ReadUEPolicySet
func NewReadUEPolicySetRequest(server string, ueId externalRef0.VarUeId, params *ReadUEPolicySetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/ues/%s/ue-policy-set", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SuppFeat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supp-feat", runtime.ParamLocationQuery, *params.SuppFeat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUEPolicySetRequestWithApplicationMergePatchPlusJSONBody calls the generic UpdateUEPolicySet builder with application/merge-patch+json body
func NewUpdateUEPolicySetRequestWithApplicationMergePatchPlusJSONBody(server string, ueId externalRef0.VarUeId, body UpdateUEPolicySetApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUEPolicySetRequestWithBody(server, ueId, "application/merge-patch+json", bodyReader)
}

// NewUpdateUEPolicySetRequestWithBody generates requests for UpdateUEPolicySet with any type of body
func NewUpdateUEPolicySetRequestWithBody(server string, ueId externalRef0.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/ues/%s/ue-policy-set", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateOrReplaceUEPolicySetRequest calls the generic CreateOrReplaceUEPolicySet builder with application/json body
func NewCreateOrReplaceUEPolicySetRequest(server string, ueId externalRef0.VarUeId, body CreateOrReplaceUEPolicySetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrReplaceUEPolicySetRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewCreateOrReplaceUEPolicySetRequestWithBody generates requests for CreateOrReplaceUEPolicySet with any type of body
func NewCreateOrReplaceUEPolicySetRequestWithBody(server string, ueId externalRef0.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy-data/ues/%s/ue-policy-set", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ReadBdtDataWithResponse request
	ReadBdtDataWithResponse(ctx context.Context, params *ReadBdtDataParams, reqEditors ...RequestEditorFn) (*ReadBdtDataResponse, error)

	// DeleteIndividualBdtDataWithResponse request
	DeleteIndividualBdtDataWithResponse(ctx context.Context, bdtReferenceId string, reqEditors ...RequestEditorFn) (*DeleteIndividualBdtDataResponse, error)

	// ReadIndividualBdtDataWithResponse request
	ReadIndividualBdtDataWithResponse(ctx context.Context, bdtReferenceId string, params *ReadIndividualBdtDataParams, reqEditors ...RequestEditorFn) (*ReadIndividualBdtDataResponse, error)

	// UpdateIndividualBdtDataWithBodyWithResponse request with any body
	UpdateIndividualBdtDataWithBodyWithResponse(ctx context.Context, bdtReferenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIndividualBdtDataResponse, error)

	UpdateIndividualBdtDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, bdtReferenceId string, body UpdateIndividualBdtDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIndividualBdtDataResponse, error)

	// CreateIndividualBdtDataWithBodyWithResponse request with any body
	CreateIndividualBdtDataWithBodyWithResponse(ctx context.Context, bdtReferenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualBdtDataResponse, error)

	CreateIndividualBdtDataWithResponse(ctx context.Context, bdtReferenceId string, body CreateIndividualBdtDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualBdtDataResponse, error)

	// ReadPlmnUePolicySetWithResponse request
	ReadPlmnUePolicySetWithResponse(ctx context.Context, plmnId string, reqEditors ...RequestEditorFn) (*ReadPlmnUePolicySetResponse, error)

	// ReadSponsorConnectivityDataWithResponse request
	ReadSponsorConnectivityDataWithResponse(ctx context.Context, sponsorId string, reqEditors ...RequestEditorFn) (*ReadSponsorConnectivityDataResponse, error)

	// CreateIndividualPolicyDataSubscriptionWithBodyWithResponse request with any body
	CreateIndividualPolicyDataSubscriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualPolicyDataSubscriptionResponse, error)

	CreateIndividualPolicyDataSubscriptionWithResponse(ctx context.Context, body CreateIndividualPolicyDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualPolicyDataSubscriptionResponse, error)

	// DeleteIndividualPolicyDataSubscriptionWithResponse request
	DeleteIndividualPolicyDataSubscriptionWithResponse(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*DeleteIndividualPolicyDataSubscriptionResponse, error)

	// ReplaceIndividualPolicyDataSubscriptionWithBodyWithResponse request with any body
	ReplaceIndividualPolicyDataSubscriptionWithBodyWithResponse(ctx context.Context, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceIndividualPolicyDataSubscriptionResponse, error)

	ReplaceIndividualPolicyDataSubscriptionWithResponse(ctx context.Context, subsId string, body ReplaceIndividualPolicyDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceIndividualPolicyDataSubscriptionResponse, error)

	// ReadAccessAndMobilityPolicyDataWithResponse request
	ReadAccessAndMobilityPolicyDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*ReadAccessAndMobilityPolicyDataResponse, error)

	// ReadOperatorSpecificDataWithResponse request
	ReadOperatorSpecificDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *ReadOperatorSpecificDataParams, reqEditors ...RequestEditorFn) (*ReadOperatorSpecificDataResponse, error)

	// UpdateOperatorSpecificDataWithBodyWithResponse request with any body
	UpdateOperatorSpecificDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOperatorSpecificDataResponse, error)

	UpdateOperatorSpecificDataWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body UpdateOperatorSpecificDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOperatorSpecificDataResponse, error)

	// ReplaceOperatorSpecificDataWithBodyWithResponse request with any body
	ReplaceOperatorSpecificDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceOperatorSpecificDataResponse, error)

	ReplaceOperatorSpecificDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body ReplaceOperatorSpecificDataJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceOperatorSpecificDataResponse, error)

	// ReadSessionManagementPolicyDataWithResponse request
	ReadSessionManagementPolicyDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *ReadSessionManagementPolicyDataParams, reqEditors ...RequestEditorFn) (*ReadSessionManagementPolicyDataResponse, error)

	// UpdateSessionManagementPolicyDataWithBodyWithResponse request with any body
	UpdateSessionManagementPolicyDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSessionManagementPolicyDataResponse, error)

	UpdateSessionManagementPolicyDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body UpdateSessionManagementPolicyDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSessionManagementPolicyDataResponse, error)

	// DeleteUsageMonitoringInformationWithResponse request
	DeleteUsageMonitoringInformationWithResponse(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, reqEditors ...RequestEditorFn) (*DeleteUsageMonitoringInformationResponse, error)

	// ReadUsageMonitoringInformationWithResponse request
	ReadUsageMonitoringInformationWithResponse(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, params *ReadUsageMonitoringInformationParams, reqEditors ...RequestEditorFn) (*ReadUsageMonitoringInformationResponse, error)

	// CreateUsageMonitoringResourceWithBodyWithResponse request with any body
	CreateUsageMonitoringResourceWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUsageMonitoringResourceResponse, error)

	CreateUsageMonitoringResourceWithResponse(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, body CreateUsageMonitoringResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUsageMonitoringResourceResponse, error)

	// ReadUEPolicySetWithResponse request
	ReadUEPolicySetWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *ReadUEPolicySetParams, reqEditors ...RequestEditorFn) (*ReadUEPolicySetResponse, error)

	// UpdateUEPolicySetWithBodyWithResponse request with any body
	UpdateUEPolicySetWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUEPolicySetResponse, error)

	UpdateUEPolicySetWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body UpdateUEPolicySetApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUEPolicySetResponse, error)

	// CreateOrReplaceUEPolicySetWithBodyWithResponse request with any body
	CreateOrReplaceUEPolicySetWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceUEPolicySetResponse, error)

	CreateOrReplaceUEPolicySetWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body CreateOrReplaceUEPolicySetJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceUEPolicySetResponse, error)
}

type ReadBdtDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]BdtData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadBdtDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadBdtDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndividualBdtDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteIndividualBdtDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndividualBdtDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadIndividualBdtDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *BdtData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadIndividualBdtDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadIndividualBdtDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIndividualBdtDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *BdtData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r UpdateIndividualBdtDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIndividualBdtDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIndividualBdtDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *BdtData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateIndividualBdtDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIndividualBdtDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadPlmnUePolicySetResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *UePolicySet
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON412     *externalRef0.N412
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadPlmnUePolicySetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadPlmnUePolicySetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadSponsorConnectivityDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *SponsorConnectivityData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadSponsorConnectivityDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadSponsorConnectivityDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIndividualPolicyDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *PolicyDataSubscription
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateIndividualPolicyDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIndividualPolicyDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndividualPolicyDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteIndividualPolicyDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndividualPolicyDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceIndividualPolicyDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *PolicyDataSubscription
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReplaceIndividualPolicyDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceIndividualPolicyDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadAccessAndMobilityPolicyDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *AmPolicyData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadAccessAndMobilityPolicyDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadAccessAndMobilityPolicyDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadOperatorSpecificDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *map[string]interface{}
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadOperatorSpecificDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadOperatorSpecificDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOperatorSpecificDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.PatchResult
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r UpdateOperatorSpecificDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOperatorSpecificDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceOperatorSpecificDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *map[string]interface{}
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReplaceOperatorSpecificDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceOperatorSpecificDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadSessionManagementPolicyDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *SmPolicyData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadSessionManagementPolicyDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadSessionManagementPolicyDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSessionManagementPolicyDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *SmPolicyData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r UpdateSessionManagementPolicyDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSessionManagementPolicyDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUsageMonitoringInformationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteUsageMonitoringInformationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUsageMonitoringInformationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadUsageMonitoringInformationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *UsageMonData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadUsageMonitoringInformationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadUsageMonitoringInformationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUsageMonitoringResourceResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *UsageMonData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateUsageMonitoringResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUsageMonitoringResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadUEPolicySetResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *UePolicySet
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadUEPolicySetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadUEPolicySetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUEPolicySetResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r UpdateUEPolicySetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUEPolicySetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrReplaceUEPolicySetResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *UePolicySet
	JSON201                       *UePolicySet
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateOrReplaceUEPolicySetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrReplaceUEPolicySetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ReadBdtDataWithResponse request returning *ReadBdtDataResponse
func (c *ClientWithResponses) ReadBdtDataWithResponse(ctx context.Context, params *ReadBdtDataParams, reqEditors ...RequestEditorFn) (*ReadBdtDataResponse, error) {
	rsp, err := c.ReadBdtData(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadBdtDataResponse(rsp)
}

// DeleteIndividualBdtDataWithResponse request returning *DeleteIndividualBdtDataResponse
func (c *ClientWithResponses) DeleteIndividualBdtDataWithResponse(ctx context.Context, bdtReferenceId string, reqEditors ...RequestEditorFn) (*DeleteIndividualBdtDataResponse, error) {
	rsp, err := c.DeleteIndividualBdtData(ctx, bdtReferenceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndividualBdtDataResponse(rsp)
}

// ReadIndividualBdtDataWithResponse request returning *ReadIndividualBdtDataResponse
func (c *ClientWithResponses) ReadIndividualBdtDataWithResponse(ctx context.Context, bdtReferenceId string, params *ReadIndividualBdtDataParams, reqEditors ...RequestEditorFn) (*ReadIndividualBdtDataResponse, error) {
	rsp, err := c.ReadIndividualBdtData(ctx, bdtReferenceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadIndividualBdtDataResponse(rsp)
}

// UpdateIndividualBdtDataWithBodyWithResponse request with arbitrary body returning *UpdateIndividualBdtDataResponse
func (c *ClientWithResponses) UpdateIndividualBdtDataWithBodyWithResponse(ctx context.Context, bdtReferenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIndividualBdtDataResponse, error) {
	rsp, err := c.UpdateIndividualBdtDataWithBody(ctx, bdtReferenceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIndividualBdtDataResponse(rsp)
}

func (c *ClientWithResponses) UpdateIndividualBdtDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, bdtReferenceId string, body UpdateIndividualBdtDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIndividualBdtDataResponse, error) {
	rsp, err := c.UpdateIndividualBdtDataWithApplicationMergePatchPlusJSONBody(ctx, bdtReferenceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIndividualBdtDataResponse(rsp)
}

// CreateIndividualBdtDataWithBodyWithResponse request with arbitrary body returning *CreateIndividualBdtDataResponse
func (c *ClientWithResponses) CreateIndividualBdtDataWithBodyWithResponse(ctx context.Context, bdtReferenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualBdtDataResponse, error) {
	rsp, err := c.CreateIndividualBdtDataWithBody(ctx, bdtReferenceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualBdtDataResponse(rsp)
}

func (c *ClientWithResponses) CreateIndividualBdtDataWithResponse(ctx context.Context, bdtReferenceId string, body CreateIndividualBdtDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualBdtDataResponse, error) {
	rsp, err := c.CreateIndividualBdtData(ctx, bdtReferenceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualBdtDataResponse(rsp)
}

// ReadPlmnUePolicySetWithResponse request returning *ReadPlmnUePolicySetResponse
func (c *ClientWithResponses) ReadPlmnUePolicySetWithResponse(ctx context.Context, plmnId string, reqEditors ...RequestEditorFn) (*ReadPlmnUePolicySetResponse, error) {
	rsp, err := c.ReadPlmnUePolicySet(ctx, plmnId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadPlmnUePolicySetResponse(rsp)
}

// ReadSponsorConnectivityDataWithResponse request returning *ReadSponsorConnectivityDataResponse
func (c *ClientWithResponses) ReadSponsorConnectivityDataWithResponse(ctx context.Context, sponsorId string, reqEditors ...RequestEditorFn) (*ReadSponsorConnectivityDataResponse, error) {
	rsp, err := c.ReadSponsorConnectivityData(ctx, sponsorId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadSponsorConnectivityDataResponse(rsp)
}

// CreateIndividualPolicyDataSubscriptionWithBodyWithResponse request with arbitrary body returning *CreateIndividualPolicyDataSubscriptionResponse
func (c *ClientWithResponses) CreateIndividualPolicyDataSubscriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualPolicyDataSubscriptionResponse, error) {
	rsp, err := c.CreateIndividualPolicyDataSubscriptionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualPolicyDataSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) CreateIndividualPolicyDataSubscriptionWithResponse(ctx context.Context, body CreateIndividualPolicyDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualPolicyDataSubscriptionResponse, error) {
	rsp, err := c.CreateIndividualPolicyDataSubscription(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualPolicyDataSubscriptionResponse(rsp)
}

// DeleteIndividualPolicyDataSubscriptionWithResponse request returning *DeleteIndividualPolicyDataSubscriptionResponse
func (c *ClientWithResponses) DeleteIndividualPolicyDataSubscriptionWithResponse(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*DeleteIndividualPolicyDataSubscriptionResponse, error) {
	rsp, err := c.DeleteIndividualPolicyDataSubscription(ctx, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndividualPolicyDataSubscriptionResponse(rsp)
}

// ReplaceIndividualPolicyDataSubscriptionWithBodyWithResponse request with arbitrary body returning *ReplaceIndividualPolicyDataSubscriptionResponse
func (c *ClientWithResponses) ReplaceIndividualPolicyDataSubscriptionWithBodyWithResponse(ctx context.Context, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceIndividualPolicyDataSubscriptionResponse, error) {
	rsp, err := c.ReplaceIndividualPolicyDataSubscriptionWithBody(ctx, subsId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceIndividualPolicyDataSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) ReplaceIndividualPolicyDataSubscriptionWithResponse(ctx context.Context, subsId string, body ReplaceIndividualPolicyDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceIndividualPolicyDataSubscriptionResponse, error) {
	rsp, err := c.ReplaceIndividualPolicyDataSubscription(ctx, subsId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceIndividualPolicyDataSubscriptionResponse(rsp)
}

// ReadAccessAndMobilityPolicyDataWithResponse request returning *ReadAccessAndMobilityPolicyDataResponse
func (c *ClientWithResponses) ReadAccessAndMobilityPolicyDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, reqEditors ...RequestEditorFn) (*ReadAccessAndMobilityPolicyDataResponse, error) {
	rsp, err := c.ReadAccessAndMobilityPolicyData(ctx, ueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadAccessAndMobilityPolicyDataResponse(rsp)
}

// ReadOperatorSpecificDataWithResponse request returning *ReadOperatorSpecificDataResponse
func (c *ClientWithResponses) ReadOperatorSpecificDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *ReadOperatorSpecificDataParams, reqEditors ...RequestEditorFn) (*ReadOperatorSpecificDataResponse, error) {
	rsp, err := c.ReadOperatorSpecificData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadOperatorSpecificDataResponse(rsp)
}

// UpdateOperatorSpecificDataWithBodyWithResponse request with arbitrary body returning *UpdateOperatorSpecificDataResponse
func (c *ClientWithResponses) UpdateOperatorSpecificDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOperatorSpecificDataResponse, error) {
	rsp, err := c.UpdateOperatorSpecificDataWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOperatorSpecificDataResponse(rsp)
}

func (c *ClientWithResponses) UpdateOperatorSpecificDataWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body UpdateOperatorSpecificDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOperatorSpecificDataResponse, error) {
	rsp, err := c.UpdateOperatorSpecificDataWithApplicationJSONPatchPlusJSONBody(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOperatorSpecificDataResponse(rsp)
}

// ReplaceOperatorSpecificDataWithBodyWithResponse request with arbitrary body returning *ReplaceOperatorSpecificDataResponse
func (c *ClientWithResponses) ReplaceOperatorSpecificDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceOperatorSpecificDataResponse, error) {
	rsp, err := c.ReplaceOperatorSpecificDataWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceOperatorSpecificDataResponse(rsp)
}

func (c *ClientWithResponses) ReplaceOperatorSpecificDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body ReplaceOperatorSpecificDataJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceOperatorSpecificDataResponse, error) {
	rsp, err := c.ReplaceOperatorSpecificData(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceOperatorSpecificDataResponse(rsp)
}

// ReadSessionManagementPolicyDataWithResponse request returning *ReadSessionManagementPolicyDataResponse
func (c *ClientWithResponses) ReadSessionManagementPolicyDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *ReadSessionManagementPolicyDataParams, reqEditors ...RequestEditorFn) (*ReadSessionManagementPolicyDataResponse, error) {
	rsp, err := c.ReadSessionManagementPolicyData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadSessionManagementPolicyDataResponse(rsp)
}

// UpdateSessionManagementPolicyDataWithBodyWithResponse request with arbitrary body returning *UpdateSessionManagementPolicyDataResponse
func (c *ClientWithResponses) UpdateSessionManagementPolicyDataWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSessionManagementPolicyDataResponse, error) {
	rsp, err := c.UpdateSessionManagementPolicyDataWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSessionManagementPolicyDataResponse(rsp)
}

func (c *ClientWithResponses) UpdateSessionManagementPolicyDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body UpdateSessionManagementPolicyDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSessionManagementPolicyDataResponse, error) {
	rsp, err := c.UpdateSessionManagementPolicyDataWithApplicationMergePatchPlusJSONBody(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSessionManagementPolicyDataResponse(rsp)
}

// DeleteUsageMonitoringInformationWithResponse request returning *DeleteUsageMonitoringInformationResponse
func (c *ClientWithResponses) DeleteUsageMonitoringInformationWithResponse(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, reqEditors ...RequestEditorFn) (*DeleteUsageMonitoringInformationResponse, error) {
	rsp, err := c.DeleteUsageMonitoringInformation(ctx, ueId, usageMonId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUsageMonitoringInformationResponse(rsp)
}

// ReadUsageMonitoringInformationWithResponse request returning *ReadUsageMonitoringInformationResponse
func (c *ClientWithResponses) ReadUsageMonitoringInformationWithResponse(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, params *ReadUsageMonitoringInformationParams, reqEditors ...RequestEditorFn) (*ReadUsageMonitoringInformationResponse, error) {
	rsp, err := c.ReadUsageMonitoringInformation(ctx, ueId, usageMonId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadUsageMonitoringInformationResponse(rsp)
}

// CreateUsageMonitoringResourceWithBodyWithResponse request with arbitrary body returning *CreateUsageMonitoringResourceResponse
func (c *ClientWithResponses) CreateUsageMonitoringResourceWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUsageMonitoringResourceResponse, error) {
	rsp, err := c.CreateUsageMonitoringResourceWithBody(ctx, ueId, usageMonId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUsageMonitoringResourceResponse(rsp)
}

func (c *ClientWithResponses) CreateUsageMonitoringResourceWithResponse(ctx context.Context, ueId externalRef0.VarUeId, usageMonId string, body CreateUsageMonitoringResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUsageMonitoringResourceResponse, error) {
	rsp, err := c.CreateUsageMonitoringResource(ctx, ueId, usageMonId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUsageMonitoringResourceResponse(rsp)
}

// ReadUEPolicySetWithResponse request returning *ReadUEPolicySetResponse
func (c *ClientWithResponses) ReadUEPolicySetWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *ReadUEPolicySetParams, reqEditors ...RequestEditorFn) (*ReadUEPolicySetResponse, error) {
	rsp, err := c.ReadUEPolicySet(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadUEPolicySetResponse(rsp)
}

// UpdateUEPolicySetWithBodyWithResponse request with arbitrary body returning *UpdateUEPolicySetResponse
func (c *ClientWithResponses) UpdateUEPolicySetWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUEPolicySetResponse, error) {
	rsp, err := c.UpdateUEPolicySetWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUEPolicySetResponse(rsp)
}

func (c *ClientWithResponses) UpdateUEPolicySetWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body UpdateUEPolicySetApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUEPolicySetResponse, error) {
	rsp, err := c.UpdateUEPolicySetWithApplicationMergePatchPlusJSONBody(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUEPolicySetResponse(rsp)
}

// CreateOrReplaceUEPolicySetWithBodyWithResponse request with arbitrary body returning *CreateOrReplaceUEPolicySetResponse
func (c *ClientWithResponses) CreateOrReplaceUEPolicySetWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceUEPolicySetResponse, error) {
	rsp, err := c.CreateOrReplaceUEPolicySetWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceUEPolicySetResponse(rsp)
}

func (c *ClientWithResponses) CreateOrReplaceUEPolicySetWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body CreateOrReplaceUEPolicySetJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceUEPolicySetResponse, error) {
	rsp, err := c.CreateOrReplaceUEPolicySet(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceUEPolicySetResponse(rsp)
}

// ParseReadBdtDataResponse parses an HTTP response from a ReadBdtDataWithResponse call
func ParseReadBdtDataResponse(rsp *http.Response) (*ReadBdtDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadBdtDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BdtData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIndividualBdtDataResponse parses an HTTP response from a DeleteIndividualBdtDataWithResponse call
func ParseDeleteIndividualBdtDataResponse(rsp *http.Response) (*DeleteIndividualBdtDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndividualBdtDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadIndividualBdtDataResponse parses an HTTP response from a ReadIndividualBdtDataWithResponse call
func ParseReadIndividualBdtDataResponse(rsp *http.Response) (*ReadIndividualBdtDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadIndividualBdtDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BdtData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateIndividualBdtDataResponse parses an HTTP response from a UpdateIndividualBdtDataWithResponse call
func ParseUpdateIndividualBdtDataResponse(rsp *http.Response) (*UpdateIndividualBdtDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIndividualBdtDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BdtData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateIndividualBdtDataResponse parses an HTTP response from a CreateIndividualBdtDataWithResponse call
func ParseCreateIndividualBdtDataResponse(rsp *http.Response) (*CreateIndividualBdtDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIndividualBdtDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BdtData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadPlmnUePolicySetResponse parses an HTTP response from a ReadPlmnUePolicySetWithResponse call
func ParseReadPlmnUePolicySetResponse(rsp *http.Response) (*ReadPlmnUePolicySetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadPlmnUePolicySetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UePolicySet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest externalRef0.N412
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadSponsorConnectivityDataResponse parses an HTTP response from a ReadSponsorConnectivityDataWithResponse call
func ParseReadSponsorConnectivityDataResponse(rsp *http.Response) (*ReadSponsorConnectivityDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadSponsorConnectivityDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SponsorConnectivityData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateIndividualPolicyDataSubscriptionResponse parses an HTTP response from a CreateIndividualPolicyDataSubscriptionWithResponse call
func ParseCreateIndividualPolicyDataSubscriptionResponse(rsp *http.Response) (*CreateIndividualPolicyDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIndividualPolicyDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PolicyDataSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIndividualPolicyDataSubscriptionResponse parses an HTTP response from a DeleteIndividualPolicyDataSubscriptionWithResponse call
func ParseDeleteIndividualPolicyDataSubscriptionResponse(rsp *http.Response) (*DeleteIndividualPolicyDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndividualPolicyDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceIndividualPolicyDataSubscriptionResponse parses an HTTP response from a ReplaceIndividualPolicyDataSubscriptionWithResponse call
func ParseReplaceIndividualPolicyDataSubscriptionResponse(rsp *http.Response) (*ReplaceIndividualPolicyDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceIndividualPolicyDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyDataSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadAccessAndMobilityPolicyDataResponse parses an HTTP response from a ReadAccessAndMobilityPolicyDataWithResponse call
func ParseReadAccessAndMobilityPolicyDataResponse(rsp *http.Response) (*ReadAccessAndMobilityPolicyDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadAccessAndMobilityPolicyDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AmPolicyData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadOperatorSpecificDataResponse parses an HTTP response from a ReadOperatorSpecificDataWithResponse call
func ParseReadOperatorSpecificDataResponse(rsp *http.Response) (*ReadOperatorSpecificDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadOperatorSpecificDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateOperatorSpecificDataResponse parses an HTTP response from a UpdateOperatorSpecificDataWithResponse call
func ParseUpdateOperatorSpecificDataResponse(rsp *http.Response) (*UpdateOperatorSpecificDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOperatorSpecificDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceOperatorSpecificDataResponse parses an HTTP response from a ReplaceOperatorSpecificDataWithResponse call
func ParseReplaceOperatorSpecificDataResponse(rsp *http.Response) (*ReplaceOperatorSpecificDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceOperatorSpecificDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadSessionManagementPolicyDataResponse parses an HTTP response from a ReadSessionManagementPolicyDataWithResponse call
func ParseReadSessionManagementPolicyDataResponse(rsp *http.Response) (*ReadSessionManagementPolicyDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadSessionManagementPolicyDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmPolicyData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateSessionManagementPolicyDataResponse parses an HTTP response from a UpdateSessionManagementPolicyDataWithResponse call
func ParseUpdateSessionManagementPolicyDataResponse(rsp *http.Response) (*UpdateSessionManagementPolicyDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSessionManagementPolicyDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmPolicyData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteUsageMonitoringInformationResponse parses an HTTP response from a DeleteUsageMonitoringInformationWithResponse call
func ParseDeleteUsageMonitoringInformationResponse(rsp *http.Response) (*DeleteUsageMonitoringInformationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUsageMonitoringInformationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadUsageMonitoringInformationResponse parses an HTTP response from a ReadUsageMonitoringInformationWithResponse call
func ParseReadUsageMonitoringInformationResponse(rsp *http.Response) (*ReadUsageMonitoringInformationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadUsageMonitoringInformationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UsageMonData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateUsageMonitoringResourceResponse parses an HTTP response from a CreateUsageMonitoringResourceWithResponse call
func ParseCreateUsageMonitoringResourceResponse(rsp *http.Response) (*CreateUsageMonitoringResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUsageMonitoringResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UsageMonData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadUEPolicySetResponse parses an HTTP response from a ReadUEPolicySetWithResponse call
func ParseReadUEPolicySetResponse(rsp *http.Response) (*ReadUEPolicySetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadUEPolicySetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UePolicySet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateUEPolicySetResponse parses an HTTP response from a UpdateUEPolicySetWithResponse call
func ParseUpdateUEPolicySetResponse(rsp *http.Response) (*UpdateUEPolicySetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUEPolicySetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateOrReplaceUEPolicySetResponse parses an HTTP response from a CreateOrReplaceUEPolicySetWithResponse call
func ParseCreateOrReplaceUEPolicySetResponse(rsp *http.Response) (*CreateOrReplaceUEPolicySetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrReplaceUEPolicySetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UePolicySet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UePolicySet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieves the BDT data collection
	// (GET /policy-data/bdt-data)
	ReadBdtData(c *gin.Context, params ReadBdtDataParams)
	// Deletes an BDT data resource associated with an BDT reference Id
	// (DELETE /policy-data/bdt-data/{bdtReferenceId})
	DeleteIndividualBdtData(c *gin.Context, bdtReferenceId string)
	// Retrieves the BDT data information associated with a BDT reference Id
	// (GET /policy-data/bdt-data/{bdtReferenceId})
	ReadIndividualBdtData(c *gin.Context, bdtReferenceId string, params ReadIndividualBdtDataParams)
	// Modifies an BDT data resource associated with an BDT reference Id
	// (PATCH /policy-data/bdt-data/{bdtReferenceId})
	UpdateIndividualBdtData(c *gin.Context, bdtReferenceId string)
	// Creates an BDT data resource associated with an BDT reference Id
	// (PUT /policy-data/bdt-data/{bdtReferenceId})
	CreateIndividualBdtData(c *gin.Context, bdtReferenceId string)
	// Retrieve the UE policy set data for an H-PLMN
	// (GET /policy-data/plmns/{plmnId}/ue-policy-set)
	ReadPlmnUePolicySet(c *gin.Context, plmnId string)
	// Retrieves the sponsored connectivity information for a given sponsorId
	// (GET /policy-data/sponsor-connectivity-data/{sponsorId})
	ReadSponsorConnectivityData(c *gin.Context, sponsorId string)
	// Create a subscription to receive notification of policy data changes
	// (POST /policy-data/subs-to-notify)
	CreateIndividualPolicyDataSubscription(c *gin.Context)
	// Delete the individual Policy Data subscription
	// (DELETE /policy-data/subs-to-notify/{subsId})
	DeleteIndividualPolicyDataSubscription(c *gin.Context, subsId string)
	// Modify a subscription to receive notification of policy data changes
	// (PUT /policy-data/subs-to-notify/{subsId})
	ReplaceIndividualPolicyDataSubscription(c *gin.Context, subsId string)
	// Retrieves the access and mobility policy data for a subscriber
	// (GET /policy-data/ues/{ueId}/am-data)
	ReadAccessAndMobilityPolicyData(c *gin.Context, ueId externalRef0.VarUeId)
	// Retrieve the operator specific policy data of an UE
	// (GET /policy-data/ues/{ueId}/operator-specific-data)
	ReadOperatorSpecificData(c *gin.Context, ueId externalRef0.VarUeId, params ReadOperatorSpecificDataParams)
	// Modify the operator specific policy data of an UE
	// (PATCH /policy-data/ues/{ueId}/operator-specific-data)
	UpdateOperatorSpecificData(c *gin.Context, ueId externalRef0.VarUeId)
	// Modify the operator specific policy data of an UE
	// (PUT /policy-data/ues/{ueId}/operator-specific-data)
	ReplaceOperatorSpecificData(c *gin.Context, ueId externalRef0.VarUeId)
	// Retrieves the session management policy data for a subscriber
	// (GET /policy-data/ues/{ueId}/sm-data)
	ReadSessionManagementPolicyData(c *gin.Context, ueId externalRef0.VarUeId, params ReadSessionManagementPolicyDataParams)
	// Modify the session management policy data for a subscriber
	// (PATCH /policy-data/ues/{ueId}/sm-data)
	UpdateSessionManagementPolicyData(c *gin.Context, ueId externalRef0.VarUeId)
	// Delete a usage monitoring resource
	// (DELETE /policy-data/ues/{ueId}/sm-data/{usageMonId})
	DeleteUsageMonitoringInformation(c *gin.Context, ueId externalRef0.VarUeId, usageMonId string)
	// Retrieve a usage monitoring resource
	// (GET /policy-data/ues/{ueId}/sm-data/{usageMonId})
	ReadUsageMonitoringInformation(c *gin.Context, ueId externalRef0.VarUeId, usageMonId string, params ReadUsageMonitoringInformationParams)
	// Create a usage monitoring resource
	// (PUT /policy-data/ues/{ueId}/sm-data/{usageMonId})
	CreateUsageMonitoringResource(c *gin.Context, ueId externalRef0.VarUeId, usageMonId string)
	// Retrieves the UE policy set data for a subscriber
	// (GET /policy-data/ues/{ueId}/ue-policy-set)
	ReadUEPolicySet(c *gin.Context, ueId externalRef0.VarUeId, params ReadUEPolicySetParams)
	// Modify the UE policy set data for a subscriber
	// (PATCH /policy-data/ues/{ueId}/ue-policy-set)
	UpdateUEPolicySet(c *gin.Context, ueId externalRef0.VarUeId)
	// Create or modify the UE policy set data for a subscriber
	// (PUT /policy-data/ues/{ueId}/ue-policy-set)
	CreateOrReplaceUEPolicySet(c *gin.Context, ueId externalRef0.VarUeId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ReadBdtData operation middleware
func (siw *ServerInterfaceWrapper) ReadBdtData(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadBdtDataParams

	// ------------- Optional query parameter "bdt-ref-ids" -------------

	err = runtime.BindQueryParameter("form", false, false, "bdt-ref-ids", c.Request.URL.Query(), &params.BdtRefIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bdt-ref-ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supp-feat" -------------

	err = runtime.BindQueryParameter("form", true, false, "supp-feat", c.Request.URL.Query(), &params.SuppFeat)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supp-feat: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadBdtData(c, params)
}

// DeleteIndividualBdtData operation middleware
func (siw *ServerInterfaceWrapper) DeleteIndividualBdtData(c *gin.Context) {

	var err error

	// ------------- Path parameter "bdtReferenceId" -------------
	var bdtReferenceId string

	err = runtime.BindStyledParameter("simple", false, "bdtReferenceId", c.Param("bdtReferenceId"), &bdtReferenceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bdtReferenceId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIndividualBdtData(c, bdtReferenceId)
}

// ReadIndividualBdtData operation middleware
func (siw *ServerInterfaceWrapper) ReadIndividualBdtData(c *gin.Context) {

	var err error

	// ------------- Path parameter "bdtReferenceId" -------------
	var bdtReferenceId string

	err = runtime.BindStyledParameter("simple", false, "bdtReferenceId", c.Param("bdtReferenceId"), &bdtReferenceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bdtReferenceId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadIndividualBdtDataParams

	// ------------- Optional query parameter "supp-feat" -------------

	err = runtime.BindQueryParameter("form", true, false, "supp-feat", c.Request.URL.Query(), &params.SuppFeat)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supp-feat: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadIndividualBdtData(c, bdtReferenceId, params)
}

// UpdateIndividualBdtData operation middleware
func (siw *ServerInterfaceWrapper) UpdateIndividualBdtData(c *gin.Context) {

	var err error

	// ------------- Path parameter "bdtReferenceId" -------------
	var bdtReferenceId string

	err = runtime.BindStyledParameter("simple", false, "bdtReferenceId", c.Param("bdtReferenceId"), &bdtReferenceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bdtReferenceId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateIndividualBdtData(c, bdtReferenceId)
}

// CreateIndividualBdtData operation middleware
func (siw *ServerInterfaceWrapper) CreateIndividualBdtData(c *gin.Context) {

	var err error

	// ------------- Path parameter "bdtReferenceId" -------------
	var bdtReferenceId string

	err = runtime.BindStyledParameter("simple", false, "bdtReferenceId", c.Param("bdtReferenceId"), &bdtReferenceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bdtReferenceId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateIndividualBdtData(c, bdtReferenceId)
}

// ReadPlmnUePolicySet operation middleware
func (siw *ServerInterfaceWrapper) ReadPlmnUePolicySet(c *gin.Context) {

	var err error

	// ------------- Path parameter "plmnId" -------------
	var plmnId string

	err = runtime.BindStyledParameter("simple", false, "plmnId", c.Param("plmnId"), &plmnId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter plmnId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadPlmnUePolicySet(c, plmnId)
}

// ReadSponsorConnectivityData operation middleware
func (siw *ServerInterfaceWrapper) ReadSponsorConnectivityData(c *gin.Context) {

	var err error

	// ------------- Path parameter "sponsorId" -------------
	var sponsorId string

	err = runtime.BindStyledParameter("simple", false, "sponsorId", c.Param("sponsorId"), &sponsorId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sponsorId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadSponsorConnectivityData(c, sponsorId)
}

// CreateIndividualPolicyDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) CreateIndividualPolicyDataSubscription(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateIndividualPolicyDataSubscription(c)
}

// DeleteIndividualPolicyDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) DeleteIndividualPolicyDataSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIndividualPolicyDataSubscription(c, subsId)
}

// ReplaceIndividualPolicyDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) ReplaceIndividualPolicyDataSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReplaceIndividualPolicyDataSubscription(c, subsId)
}

// ReadAccessAndMobilityPolicyData operation middleware
func (siw *ServerInterfaceWrapper) ReadAccessAndMobilityPolicyData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadAccessAndMobilityPolicyData(c, ueId)
}

// ReadOperatorSpecificData operation middleware
func (siw *ServerInterfaceWrapper) ReadOperatorSpecificData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadOperatorSpecificDataParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supp-feat" -------------

	err = runtime.BindQueryParameter("form", true, false, "supp-feat", c.Request.URL.Query(), &params.SuppFeat)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supp-feat: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadOperatorSpecificData(c, ueId, params)
}

// UpdateOperatorSpecificData operation middleware
func (siw *ServerInterfaceWrapper) UpdateOperatorSpecificData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateOperatorSpecificData(c, ueId)
}

// ReplaceOperatorSpecificData operation middleware
func (siw *ServerInterfaceWrapper) ReplaceOperatorSpecificData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReplaceOperatorSpecificData(c, ueId)
}

// ReadSessionManagementPolicyData operation middleware
func (siw *ServerInterfaceWrapper) ReadSessionManagementPolicyData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadSessionManagementPolicyDataParams

	// ------------- Optional query parameter "snssai" -------------

	if paramValue := c.Query("snssai"); paramValue != "" {

		var value externalRef0.Snssai
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'snssai' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.Snssai = &value

	}

	// ------------- Optional query parameter "dnn" -------------

	err = runtime.BindQueryParameter("form", true, false, "dnn", c.Request.URL.Query(), &params.Dnn)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dnn: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supp-feat" -------------

	err = runtime.BindQueryParameter("form", true, false, "supp-feat", c.Request.URL.Query(), &params.SuppFeat)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supp-feat: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadSessionManagementPolicyData(c, ueId, params)
}

// UpdateSessionManagementPolicyData operation middleware
func (siw *ServerInterfaceWrapper) UpdateSessionManagementPolicyData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateSessionManagementPolicyData(c, ueId)
}

// DeleteUsageMonitoringInformation operation middleware
func (siw *ServerInterfaceWrapper) DeleteUsageMonitoringInformation(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "usageMonId" -------------
	var usageMonId string

	err = runtime.BindStyledParameter("simple", false, "usageMonId", c.Param("usageMonId"), &usageMonId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter usageMonId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUsageMonitoringInformation(c, ueId, usageMonId)
}

// ReadUsageMonitoringInformation operation middleware
func (siw *ServerInterfaceWrapper) ReadUsageMonitoringInformation(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "usageMonId" -------------
	var usageMonId string

	err = runtime.BindStyledParameter("simple", false, "usageMonId", c.Param("usageMonId"), &usageMonId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter usageMonId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadUsageMonitoringInformationParams

	// ------------- Optional query parameter "supp-feat" -------------

	err = runtime.BindQueryParameter("form", true, false, "supp-feat", c.Request.URL.Query(), &params.SuppFeat)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supp-feat: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadUsageMonitoringInformation(c, ueId, usageMonId, params)
}

// CreateUsageMonitoringResource operation middleware
func (siw *ServerInterfaceWrapper) CreateUsageMonitoringResource(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "usageMonId" -------------
	var usageMonId string

	err = runtime.BindStyledParameter("simple", false, "usageMonId", c.Param("usageMonId"), &usageMonId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter usageMonId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUsageMonitoringResource(c, ueId, usageMonId)
}

// ReadUEPolicySet operation middleware
func (siw *ServerInterfaceWrapper) ReadUEPolicySet(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadUEPolicySetParams

	// ------------- Optional query parameter "supp-feat" -------------

	err = runtime.BindQueryParameter("form", true, false, "supp-feat", c.Request.URL.Query(), &params.SuppFeat)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supp-feat: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadUEPolicySet(c, ueId, params)
}

// UpdateUEPolicySet operation middleware
func (siw *ServerInterfaceWrapper) UpdateUEPolicySet(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUEPolicySet(c, ueId)
}

// CreateOrReplaceUEPolicySet operation middleware
func (siw *ServerInterfaceWrapper) CreateOrReplaceUEPolicySet(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrReplaceUEPolicySet(c, ueId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/policy-data/bdt-data", wrapper.ReadBdtData)
	router.DELETE(options.BaseURL+"/policy-data/bdt-data/:bdtReferenceId", wrapper.DeleteIndividualBdtData)
	router.GET(options.BaseURL+"/policy-data/bdt-data/:bdtReferenceId", wrapper.ReadIndividualBdtData)
	router.PATCH(options.BaseURL+"/policy-data/bdt-data/:bdtReferenceId", wrapper.UpdateIndividualBdtData)
	router.PUT(options.BaseURL+"/policy-data/bdt-data/:bdtReferenceId", wrapper.CreateIndividualBdtData)
	router.GET(options.BaseURL+"/policy-data/plmns/:plmnId/ue-policy-set", wrapper.ReadPlmnUePolicySet)
	router.GET(options.BaseURL+"/policy-data/sponsor-connectivity-data/:sponsorId", wrapper.ReadSponsorConnectivityData)
	router.POST(options.BaseURL+"/policy-data/subs-to-notify", wrapper.CreateIndividualPolicyDataSubscription)
	router.DELETE(options.BaseURL+"/policy-data/subs-to-notify/:subsId", wrapper.DeleteIndividualPolicyDataSubscription)
	router.PUT(options.BaseURL+"/policy-data/subs-to-notify/:subsId", wrapper.ReplaceIndividualPolicyDataSubscription)
	router.GET(options.BaseURL+"/policy-data/ues/:ueId/am-data", wrapper.ReadAccessAndMobilityPolicyData)
	router.GET(options.BaseURL+"/policy-data/ues/:ueId/operator-specific-data", wrapper.ReadOperatorSpecificData)
	router.PATCH(options.BaseURL+"/policy-data/ues/:ueId/operator-specific-data", wrapper.UpdateOperatorSpecificData)
	router.PUT(options.BaseURL+"/policy-data/ues/:ueId/operator-specific-data", wrapper.ReplaceOperatorSpecificData)
	router.GET(options.BaseURL+"/policy-data/ues/:ueId/sm-data", wrapper.ReadSessionManagementPolicyData)
	router.PATCH(options.BaseURL+"/policy-data/ues/:ueId/sm-data", wrapper.UpdateSessionManagementPolicyData)
	router.DELETE(options.BaseURL+"/policy-data/ues/:ueId/sm-data/:usageMonId", wrapper.DeleteUsageMonitoringInformation)
	router.GET(options.BaseURL+"/policy-data/ues/:ueId/sm-data/:usageMonId", wrapper.ReadUsageMonitoringInformation)
	router.PUT(options.BaseURL+"/policy-data/ues/:ueId/sm-data/:usageMonId", wrapper.CreateUsageMonitoringResource)
	router.GET(options.BaseURL+"/policy-data/ues/:ueId/ue-policy-set", wrapper.ReadUEPolicySet)
	router.PATCH(options.BaseURL+"/policy-data/ues/:ueId/ue-policy-set", wrapper.UpdateUEPolicySet)
	router.PUT(options.BaseURL+"/policy-data/ues/:ueId/ue-policy-set", wrapper.CreateOrReplaceUEPolicySet)
}

type ReadBdtDataRequestObject struct {
	Params ReadBdtDataParams
}

type ReadBdtDataResponseObject interface {
	VisitReadBdtDataResponse(w http.ResponseWriter) error
}

type ReadBdtData200JSONResponse []BdtData

func (response ReadBdtData200JSONResponse) VisitReadBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadBdtData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadBdtData400ApplicationProblemPlusJSONResponse) VisitReadBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadBdtData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadBdtData401ApplicationProblemPlusJSONResponse) VisitReadBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadBdtData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadBdtData403ApplicationProblemPlusJSONResponse) VisitReadBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReadBdtData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadBdtData404ApplicationProblemPlusJSONResponse) VisitReadBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadBdtData406Response externalRef0.N406Response

func (response ReadBdtData406Response) VisitReadBdtDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadBdtData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadBdtData429ApplicationProblemPlusJSONResponse) VisitReadBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ReadBdtData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadBdtData500ApplicationProblemPlusJSONResponse) VisitReadBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadBdtData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadBdtData503ApplicationProblemPlusJSONResponse) VisitReadBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ReadBdtDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadBdtDatadefaultApplicationProblemPlusJSONResponse) VisitReadBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualBdtDataRequestObject struct {
	BdtReferenceId string `json:"bdtReferenceId"`
}

type DeleteIndividualBdtDataResponseObject interface {
	VisitDeleteIndividualBdtDataResponse(w http.ResponseWriter) error
}

type DeleteIndividualBdtData204Response struct {
}

func (response DeleteIndividualBdtData204Response) VisitDeleteIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIndividualBdtData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualBdtData400ApplicationProblemPlusJSONResponse) VisitDeleteIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualBdtData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualBdtData401ApplicationProblemPlusJSONResponse) VisitDeleteIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualBdtData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualBdtData403ApplicationProblemPlusJSONResponse) VisitDeleteIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualBdtData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualBdtData404ApplicationProblemPlusJSONResponse) VisitDeleteIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualBdtData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualBdtData429ApplicationProblemPlusJSONResponse) VisitDeleteIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualBdtData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualBdtData500ApplicationProblemPlusJSONResponse) VisitDeleteIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualBdtData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualBdtData503ApplicationProblemPlusJSONResponse) VisitDeleteIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualBdtDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteIndividualBdtDatadefaultApplicationProblemPlusJSONResponse) VisitDeleteIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadIndividualBdtDataRequestObject struct {
	BdtReferenceId string `json:"bdtReferenceId"`
	Params         ReadIndividualBdtDataParams
}

type ReadIndividualBdtDataResponseObject interface {
	VisitReadIndividualBdtDataResponse(w http.ResponseWriter) error
}

type ReadIndividualBdtData200JSONResponse BdtData

func (response ReadIndividualBdtData200JSONResponse) VisitReadIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualBdtData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualBdtData400ApplicationProblemPlusJSONResponse) VisitReadIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualBdtData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualBdtData401ApplicationProblemPlusJSONResponse) VisitReadIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualBdtData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualBdtData403ApplicationProblemPlusJSONResponse) VisitReadIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualBdtData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualBdtData404ApplicationProblemPlusJSONResponse) VisitReadIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualBdtData406Response externalRef0.N406Response

func (response ReadIndividualBdtData406Response) VisitReadIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadIndividualBdtData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualBdtData429ApplicationProblemPlusJSONResponse) VisitReadIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualBdtData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualBdtData500ApplicationProblemPlusJSONResponse) VisitReadIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualBdtData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualBdtData503ApplicationProblemPlusJSONResponse) VisitReadIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualBdtDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadIndividualBdtDatadefaultApplicationProblemPlusJSONResponse) VisitReadIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateIndividualBdtDataRequestObject struct {
	BdtReferenceId string `json:"bdtReferenceId"`
	Body           *UpdateIndividualBdtDataApplicationMergePatchPlusJSONRequestBody
}

type UpdateIndividualBdtDataResponseObject interface {
	VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error
}

type UpdateIndividualBdtData200JSONResponse BdtData

func (response UpdateIndividualBdtData200JSONResponse) VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualBdtData204Response struct {
}

func (response UpdateIndividualBdtData204Response) VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateIndividualBdtData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualBdtData400ApplicationProblemPlusJSONResponse) VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualBdtData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualBdtData401ApplicationProblemPlusJSONResponse) VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualBdtData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualBdtData403ApplicationProblemPlusJSONResponse) VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualBdtData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualBdtData404ApplicationProblemPlusJSONResponse) VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualBdtData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualBdtData411ApplicationProblemPlusJSONResponse) VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualBdtData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualBdtData413ApplicationProblemPlusJSONResponse) VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualBdtData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualBdtData415ApplicationProblemPlusJSONResponse) VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualBdtData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualBdtData429ApplicationProblemPlusJSONResponse) VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualBdtData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualBdtData500ApplicationProblemPlusJSONResponse) VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualBdtData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualBdtData503ApplicationProblemPlusJSONResponse) VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualBdtDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UpdateIndividualBdtDatadefaultApplicationProblemPlusJSONResponse) VisitUpdateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIndividualBdtDataRequestObject struct {
	BdtReferenceId string `json:"bdtReferenceId"`
	Body           *CreateIndividualBdtDataJSONRequestBody
}

type CreateIndividualBdtDataResponseObject interface {
	VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error
}

type CreateIndividualBdtData201ResponseHeaders struct {
	Location string
}

type CreateIndividualBdtData201JSONResponse struct {
	Body    BdtData
	Headers CreateIndividualBdtData201ResponseHeaders
}

func (response CreateIndividualBdtData201JSONResponse) VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIndividualBdtData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualBdtData400ApplicationProblemPlusJSONResponse) VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualBdtData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualBdtData401ApplicationProblemPlusJSONResponse) VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualBdtData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualBdtData403ApplicationProblemPlusJSONResponse) VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualBdtData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualBdtData404ApplicationProblemPlusJSONResponse) VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualBdtData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualBdtData411ApplicationProblemPlusJSONResponse) VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualBdtData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualBdtData413ApplicationProblemPlusJSONResponse) VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualBdtData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualBdtData414ApplicationProblemPlusJSONResponse) VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualBdtData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualBdtData415ApplicationProblemPlusJSONResponse) VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualBdtData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualBdtData429ApplicationProblemPlusJSONResponse) VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualBdtData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualBdtData500ApplicationProblemPlusJSONResponse) VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualBdtData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualBdtData503ApplicationProblemPlusJSONResponse) VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualBdtDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateIndividualBdtDatadefaultApplicationProblemPlusJSONResponse) VisitCreateIndividualBdtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadPlmnUePolicySetRequestObject struct {
	PlmnId string `json:"plmnId"`
}

type ReadPlmnUePolicySetResponseObject interface {
	VisitReadPlmnUePolicySetResponse(w http.ResponseWriter) error
}

type ReadPlmnUePolicySet200JSONResponse UePolicySet

func (response ReadPlmnUePolicySet200JSONResponse) VisitReadPlmnUePolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadPlmnUePolicySet400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadPlmnUePolicySet400ApplicationProblemPlusJSONResponse) VisitReadPlmnUePolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadPlmnUePolicySet401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadPlmnUePolicySet401ApplicationProblemPlusJSONResponse) VisitReadPlmnUePolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadPlmnUePolicySet403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadPlmnUePolicySet403ApplicationProblemPlusJSONResponse) VisitReadPlmnUePolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReadPlmnUePolicySet404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadPlmnUePolicySet404ApplicationProblemPlusJSONResponse) VisitReadPlmnUePolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadPlmnUePolicySet406Response externalRef0.N406Response

func (response ReadPlmnUePolicySet406Response) VisitReadPlmnUePolicySetResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadPlmnUePolicySet412ApplicationProblemPlusJSONResponse struct {
	externalRef0.N412ApplicationProblemPlusJSONResponse
}

func (response ReadPlmnUePolicySet412ApplicationProblemPlusJSONResponse) VisitReadPlmnUePolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type ReadPlmnUePolicySet429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadPlmnUePolicySet429ApplicationProblemPlusJSONResponse) VisitReadPlmnUePolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ReadPlmnUePolicySet500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadPlmnUePolicySet500ApplicationProblemPlusJSONResponse) VisitReadPlmnUePolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadPlmnUePolicySet503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadPlmnUePolicySet503ApplicationProblemPlusJSONResponse) VisitReadPlmnUePolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ReadPlmnUePolicySetdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadPlmnUePolicySetdefaultApplicationProblemPlusJSONResponse) VisitReadPlmnUePolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadSponsorConnectivityDataRequestObject struct {
	SponsorId string `json:"sponsorId"`
}

type ReadSponsorConnectivityDataResponseObject interface {
	VisitReadSponsorConnectivityDataResponse(w http.ResponseWriter) error
}

type ReadSponsorConnectivityData200JSONResponse SponsorConnectivityData

func (response ReadSponsorConnectivityData200JSONResponse) VisitReadSponsorConnectivityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadSponsorConnectivityData204Response struct {
}

func (response ReadSponsorConnectivityData204Response) VisitReadSponsorConnectivityDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ReadSponsorConnectivityData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadSponsorConnectivityData400ApplicationProblemPlusJSONResponse) VisitReadSponsorConnectivityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadSponsorConnectivityData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadSponsorConnectivityData401ApplicationProblemPlusJSONResponse) VisitReadSponsorConnectivityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadSponsorConnectivityData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadSponsorConnectivityData403ApplicationProblemPlusJSONResponse) VisitReadSponsorConnectivityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReadSponsorConnectivityData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadSponsorConnectivityData404ApplicationProblemPlusJSONResponse) VisitReadSponsorConnectivityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadSponsorConnectivityData406Response externalRef0.N406Response

func (response ReadSponsorConnectivityData406Response) VisitReadSponsorConnectivityDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadSponsorConnectivityData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadSponsorConnectivityData429ApplicationProblemPlusJSONResponse) VisitReadSponsorConnectivityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ReadSponsorConnectivityData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadSponsorConnectivityData500ApplicationProblemPlusJSONResponse) VisitReadSponsorConnectivityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadSponsorConnectivityData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadSponsorConnectivityData503ApplicationProblemPlusJSONResponse) VisitReadSponsorConnectivityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ReadSponsorConnectivityDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadSponsorConnectivityDatadefaultApplicationProblemPlusJSONResponse) VisitReadSponsorConnectivityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIndividualPolicyDataSubscriptionRequestObject struct {
	Body *CreateIndividualPolicyDataSubscriptionJSONRequestBody
}

type CreateIndividualPolicyDataSubscriptionResponseObject interface {
	VisitCreateIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error
}

type CreateIndividualPolicyDataSubscription201ResponseHeaders struct {
	Location string
}

type CreateIndividualPolicyDataSubscription201JSONResponse struct {
	Body    PolicyDataSubscription
	Headers CreateIndividualPolicyDataSubscription201ResponseHeaders
}

func (response CreateIndividualPolicyDataSubscription201JSONResponse) VisitCreateIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIndividualPolicyDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualPolicyDataSubscription400ApplicationProblemPlusJSONResponse) VisitCreateIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualPolicyDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualPolicyDataSubscription401ApplicationProblemPlusJSONResponse) VisitCreateIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualPolicyDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualPolicyDataSubscription403ApplicationProblemPlusJSONResponse) VisitCreateIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualPolicyDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualPolicyDataSubscription404ApplicationProblemPlusJSONResponse) VisitCreateIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualPolicyDataSubscription411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualPolicyDataSubscription411ApplicationProblemPlusJSONResponse) VisitCreateIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualPolicyDataSubscription413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualPolicyDataSubscription413ApplicationProblemPlusJSONResponse) VisitCreateIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualPolicyDataSubscription415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualPolicyDataSubscription415ApplicationProblemPlusJSONResponse) VisitCreateIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualPolicyDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualPolicyDataSubscription429ApplicationProblemPlusJSONResponse) VisitCreateIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualPolicyDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualPolicyDataSubscription500ApplicationProblemPlusJSONResponse) VisitCreateIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualPolicyDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualPolicyDataSubscription503ApplicationProblemPlusJSONResponse) VisitCreateIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualPolicyDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateIndividualPolicyDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitCreateIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualPolicyDataSubscriptionRequestObject struct {
	SubsId string `json:"subsId"`
}

type DeleteIndividualPolicyDataSubscriptionResponseObject interface {
	VisitDeleteIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error
}

type DeleteIndividualPolicyDataSubscription204Response struct {
}

func (response DeleteIndividualPolicyDataSubscription204Response) VisitDeleteIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIndividualPolicyDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPolicyDataSubscription400ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualPolicyDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPolicyDataSubscription401ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualPolicyDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPolicyDataSubscription403ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualPolicyDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPolicyDataSubscription404ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualPolicyDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPolicyDataSubscription429ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualPolicyDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPolicyDataSubscription500ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualPolicyDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPolicyDataSubscription503ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualPolicyDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteIndividualPolicyDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitDeleteIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReplaceIndividualPolicyDataSubscriptionRequestObject struct {
	SubsId string `json:"subsId"`
	Body   *ReplaceIndividualPolicyDataSubscriptionJSONRequestBody
}

type ReplaceIndividualPolicyDataSubscriptionResponseObject interface {
	VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error
}

type ReplaceIndividualPolicyDataSubscription200JSONResponse PolicyDataSubscription

func (response ReplaceIndividualPolicyDataSubscription200JSONResponse) VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualPolicyDataSubscription204Response struct {
}

func (response ReplaceIndividualPolicyDataSubscription204Response) VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ReplaceIndividualPolicyDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualPolicyDataSubscription400ApplicationProblemPlusJSONResponse) VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualPolicyDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualPolicyDataSubscription401ApplicationProblemPlusJSONResponse) VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualPolicyDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualPolicyDataSubscription403ApplicationProblemPlusJSONResponse) VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualPolicyDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualPolicyDataSubscription404ApplicationProblemPlusJSONResponse) VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualPolicyDataSubscription411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualPolicyDataSubscription411ApplicationProblemPlusJSONResponse) VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualPolicyDataSubscription413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualPolicyDataSubscription413ApplicationProblemPlusJSONResponse) VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualPolicyDataSubscription415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualPolicyDataSubscription415ApplicationProblemPlusJSONResponse) VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualPolicyDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualPolicyDataSubscription429ApplicationProblemPlusJSONResponse) VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualPolicyDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualPolicyDataSubscription500ApplicationProblemPlusJSONResponse) VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualPolicyDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualPolicyDataSubscription503ApplicationProblemPlusJSONResponse) VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualPolicyDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReplaceIndividualPolicyDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitReplaceIndividualPolicyDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadAccessAndMobilityPolicyDataRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
}

type ReadAccessAndMobilityPolicyDataResponseObject interface {
	VisitReadAccessAndMobilityPolicyDataResponse(w http.ResponseWriter) error
}

type ReadAccessAndMobilityPolicyData200JSONResponse AmPolicyData

func (response ReadAccessAndMobilityPolicyData200JSONResponse) VisitReadAccessAndMobilityPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadAccessAndMobilityPolicyData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadAccessAndMobilityPolicyData400ApplicationProblemPlusJSONResponse) VisitReadAccessAndMobilityPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadAccessAndMobilityPolicyData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadAccessAndMobilityPolicyData401ApplicationProblemPlusJSONResponse) VisitReadAccessAndMobilityPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadAccessAndMobilityPolicyData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadAccessAndMobilityPolicyData403ApplicationProblemPlusJSONResponse) VisitReadAccessAndMobilityPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReadAccessAndMobilityPolicyData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadAccessAndMobilityPolicyData404ApplicationProblemPlusJSONResponse) VisitReadAccessAndMobilityPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadAccessAndMobilityPolicyData406Response externalRef0.N406Response

func (response ReadAccessAndMobilityPolicyData406Response) VisitReadAccessAndMobilityPolicyDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadAccessAndMobilityPolicyData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadAccessAndMobilityPolicyData429ApplicationProblemPlusJSONResponse) VisitReadAccessAndMobilityPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ReadAccessAndMobilityPolicyData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadAccessAndMobilityPolicyData500ApplicationProblemPlusJSONResponse) VisitReadAccessAndMobilityPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadAccessAndMobilityPolicyData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadAccessAndMobilityPolicyData503ApplicationProblemPlusJSONResponse) VisitReadAccessAndMobilityPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ReadAccessAndMobilityPolicyDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadAccessAndMobilityPolicyDatadefaultApplicationProblemPlusJSONResponse) VisitReadAccessAndMobilityPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadOperatorSpecificDataRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params ReadOperatorSpecificDataParams
}

type ReadOperatorSpecificDataResponseObject interface {
	VisitReadOperatorSpecificDataResponse(w http.ResponseWriter) error
}

type ReadOperatorSpecificData200JSONResponse map[string]interface{}

func (response ReadOperatorSpecificData200JSONResponse) VisitReadOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadOperatorSpecificData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadOperatorSpecificData400ApplicationProblemPlusJSONResponse) VisitReadOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadOperatorSpecificData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadOperatorSpecificData401ApplicationProblemPlusJSONResponse) VisitReadOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadOperatorSpecificData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadOperatorSpecificData403ApplicationProblemPlusJSONResponse) VisitReadOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReadOperatorSpecificData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadOperatorSpecificData404ApplicationProblemPlusJSONResponse) VisitReadOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadOperatorSpecificData406Response externalRef0.N406Response

func (response ReadOperatorSpecificData406Response) VisitReadOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadOperatorSpecificData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response ReadOperatorSpecificData414ApplicationProblemPlusJSONResponse) VisitReadOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(response)
}

type ReadOperatorSpecificData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadOperatorSpecificData429ApplicationProblemPlusJSONResponse) VisitReadOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ReadOperatorSpecificData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadOperatorSpecificData500ApplicationProblemPlusJSONResponse) VisitReadOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadOperatorSpecificData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadOperatorSpecificData503ApplicationProblemPlusJSONResponse) VisitReadOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ReadOperatorSpecificDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadOperatorSpecificDatadefaultApplicationProblemPlusJSONResponse) VisitReadOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateOperatorSpecificDataRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
	Body *UpdateOperatorSpecificDataApplicationJSONPatchPlusJSONRequestBody
}

type UpdateOperatorSpecificDataResponseObject interface {
	VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error
}

type UpdateOperatorSpecificData200JSONResponse externalRef0.PatchResult

func (response UpdateOperatorSpecificData200JSONResponse) VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateOperatorSpecificData204Response struct {
}

func (response UpdateOperatorSpecificData204Response) VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateOperatorSpecificData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response UpdateOperatorSpecificData400ApplicationProblemPlusJSONResponse) VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateOperatorSpecificData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response UpdateOperatorSpecificData401ApplicationProblemPlusJSONResponse) VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateOperatorSpecificData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response UpdateOperatorSpecificData403ApplicationProblemPlusJSONResponse) VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateOperatorSpecificData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response UpdateOperatorSpecificData404ApplicationProblemPlusJSONResponse) VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateOperatorSpecificData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response UpdateOperatorSpecificData411ApplicationProblemPlusJSONResponse) VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type UpdateOperatorSpecificData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response UpdateOperatorSpecificData413ApplicationProblemPlusJSONResponse) VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type UpdateOperatorSpecificData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response UpdateOperatorSpecificData415ApplicationProblemPlusJSONResponse) VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type UpdateOperatorSpecificData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response UpdateOperatorSpecificData429ApplicationProblemPlusJSONResponse) VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type UpdateOperatorSpecificData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response UpdateOperatorSpecificData500ApplicationProblemPlusJSONResponse) VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateOperatorSpecificData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response UpdateOperatorSpecificData503ApplicationProblemPlusJSONResponse) VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type UpdateOperatorSpecificDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UpdateOperatorSpecificDatadefaultApplicationProblemPlusJSONResponse) VisitUpdateOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReplaceOperatorSpecificDataRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
	Body *ReplaceOperatorSpecificDataJSONRequestBody
}

type ReplaceOperatorSpecificDataResponseObject interface {
	VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error
}

type ReplaceOperatorSpecificData200JSONResponse map[string]interface{}

func (response ReplaceOperatorSpecificData200JSONResponse) VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceOperatorSpecificData204Response struct {
}

func (response ReplaceOperatorSpecificData204Response) VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ReplaceOperatorSpecificData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReplaceOperatorSpecificData400ApplicationProblemPlusJSONResponse) VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceOperatorSpecificData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReplaceOperatorSpecificData401ApplicationProblemPlusJSONResponse) VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceOperatorSpecificData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReplaceOperatorSpecificData403ApplicationProblemPlusJSONResponse) VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceOperatorSpecificData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReplaceOperatorSpecificData404ApplicationProblemPlusJSONResponse) VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceOperatorSpecificData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response ReplaceOperatorSpecificData411ApplicationProblemPlusJSONResponse) VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceOperatorSpecificData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response ReplaceOperatorSpecificData413ApplicationProblemPlusJSONResponse) VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceOperatorSpecificData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response ReplaceOperatorSpecificData415ApplicationProblemPlusJSONResponse) VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceOperatorSpecificData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReplaceOperatorSpecificData429ApplicationProblemPlusJSONResponse) VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceOperatorSpecificData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReplaceOperatorSpecificData500ApplicationProblemPlusJSONResponse) VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceOperatorSpecificData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReplaceOperatorSpecificData503ApplicationProblemPlusJSONResponse) VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceOperatorSpecificDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReplaceOperatorSpecificDatadefaultApplicationProblemPlusJSONResponse) VisitReplaceOperatorSpecificDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadSessionManagementPolicyDataRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params ReadSessionManagementPolicyDataParams
}

type ReadSessionManagementPolicyDataResponseObject interface {
	VisitReadSessionManagementPolicyDataResponse(w http.ResponseWriter) error
}

type ReadSessionManagementPolicyData200JSONResponse SmPolicyData

func (response ReadSessionManagementPolicyData200JSONResponse) VisitReadSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadSessionManagementPolicyData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadSessionManagementPolicyData400ApplicationProblemPlusJSONResponse) VisitReadSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadSessionManagementPolicyData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadSessionManagementPolicyData401ApplicationProblemPlusJSONResponse) VisitReadSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadSessionManagementPolicyData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadSessionManagementPolicyData403ApplicationProblemPlusJSONResponse) VisitReadSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReadSessionManagementPolicyData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadSessionManagementPolicyData404ApplicationProblemPlusJSONResponse) VisitReadSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadSessionManagementPolicyData406Response externalRef0.N406Response

func (response ReadSessionManagementPolicyData406Response) VisitReadSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadSessionManagementPolicyData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response ReadSessionManagementPolicyData414ApplicationProblemPlusJSONResponse) VisitReadSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(response)
}

type ReadSessionManagementPolicyData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadSessionManagementPolicyData429ApplicationProblemPlusJSONResponse) VisitReadSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ReadSessionManagementPolicyData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadSessionManagementPolicyData500ApplicationProblemPlusJSONResponse) VisitReadSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadSessionManagementPolicyData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadSessionManagementPolicyData503ApplicationProblemPlusJSONResponse) VisitReadSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ReadSessionManagementPolicyDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadSessionManagementPolicyDatadefaultApplicationProblemPlusJSONResponse) VisitReadSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateSessionManagementPolicyDataRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
	Body *UpdateSessionManagementPolicyDataApplicationMergePatchPlusJSONRequestBody
}

type UpdateSessionManagementPolicyDataResponseObject interface {
	VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error
}

type UpdateSessionManagementPolicyData200JSONResponse SmPolicyData

func (response UpdateSessionManagementPolicyData200JSONResponse) VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSessionManagementPolicyData204Response struct {
}

func (response UpdateSessionManagementPolicyData204Response) VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateSessionManagementPolicyData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response UpdateSessionManagementPolicyData400ApplicationProblemPlusJSONResponse) VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSessionManagementPolicyData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response UpdateSessionManagementPolicyData401ApplicationProblemPlusJSONResponse) VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSessionManagementPolicyData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response UpdateSessionManagementPolicyData403ApplicationProblemPlusJSONResponse) VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSessionManagementPolicyData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response UpdateSessionManagementPolicyData404ApplicationProblemPlusJSONResponse) VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSessionManagementPolicyData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response UpdateSessionManagementPolicyData411ApplicationProblemPlusJSONResponse) VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSessionManagementPolicyData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response UpdateSessionManagementPolicyData413ApplicationProblemPlusJSONResponse) VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSessionManagementPolicyData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response UpdateSessionManagementPolicyData415ApplicationProblemPlusJSONResponse) VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSessionManagementPolicyData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response UpdateSessionManagementPolicyData429ApplicationProblemPlusJSONResponse) VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSessionManagementPolicyData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response UpdateSessionManagementPolicyData500ApplicationProblemPlusJSONResponse) VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSessionManagementPolicyData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response UpdateSessionManagementPolicyData503ApplicationProblemPlusJSONResponse) VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSessionManagementPolicyDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UpdateSessionManagementPolicyDatadefaultApplicationProblemPlusJSONResponse) VisitUpdateSessionManagementPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteUsageMonitoringInformationRequestObject struct {
	UeId       externalRef0.VarUeId `json:"ueId"`
	UsageMonId string               `json:"usageMonId"`
}

type DeleteUsageMonitoringInformationResponseObject interface {
	VisitDeleteUsageMonitoringInformationResponse(w http.ResponseWriter) error
}

type DeleteUsageMonitoringInformation204Response struct {
}

func (response DeleteUsageMonitoringInformation204Response) VisitDeleteUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUsageMonitoringInformation400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteUsageMonitoringInformation400ApplicationProblemPlusJSONResponse) VisitDeleteUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsageMonitoringInformation401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteUsageMonitoringInformation401ApplicationProblemPlusJSONResponse) VisitDeleteUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsageMonitoringInformation403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteUsageMonitoringInformation403ApplicationProblemPlusJSONResponse) VisitDeleteUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsageMonitoringInformation404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteUsageMonitoringInformation404ApplicationProblemPlusJSONResponse) VisitDeleteUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsageMonitoringInformation429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteUsageMonitoringInformation429ApplicationProblemPlusJSONResponse) VisitDeleteUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsageMonitoringInformation500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteUsageMonitoringInformation500ApplicationProblemPlusJSONResponse) VisitDeleteUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsageMonitoringInformation503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteUsageMonitoringInformation503ApplicationProblemPlusJSONResponse) VisitDeleteUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsageMonitoringInformationdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteUsageMonitoringInformationdefaultApplicationProblemPlusJSONResponse) VisitDeleteUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadUsageMonitoringInformationRequestObject struct {
	UeId       externalRef0.VarUeId `json:"ueId"`
	UsageMonId string               `json:"usageMonId"`
	Params     ReadUsageMonitoringInformationParams
}

type ReadUsageMonitoringInformationResponseObject interface {
	VisitReadUsageMonitoringInformationResponse(w http.ResponseWriter) error
}

type ReadUsageMonitoringInformation200JSONResponse UsageMonData

func (response ReadUsageMonitoringInformation200JSONResponse) VisitReadUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadUsageMonitoringInformation204Response struct {
}

func (response ReadUsageMonitoringInformation204Response) VisitReadUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ReadUsageMonitoringInformation400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadUsageMonitoringInformation400ApplicationProblemPlusJSONResponse) VisitReadUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadUsageMonitoringInformation401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadUsageMonitoringInformation401ApplicationProblemPlusJSONResponse) VisitReadUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadUsageMonitoringInformation403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadUsageMonitoringInformation403ApplicationProblemPlusJSONResponse) VisitReadUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReadUsageMonitoringInformation404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadUsageMonitoringInformation404ApplicationProblemPlusJSONResponse) VisitReadUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadUsageMonitoringInformation406Response externalRef0.N406Response

func (response ReadUsageMonitoringInformation406Response) VisitReadUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadUsageMonitoringInformation414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response ReadUsageMonitoringInformation414ApplicationProblemPlusJSONResponse) VisitReadUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(response)
}

type ReadUsageMonitoringInformation429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadUsageMonitoringInformation429ApplicationProblemPlusJSONResponse) VisitReadUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ReadUsageMonitoringInformation500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadUsageMonitoringInformation500ApplicationProblemPlusJSONResponse) VisitReadUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadUsageMonitoringInformation503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadUsageMonitoringInformation503ApplicationProblemPlusJSONResponse) VisitReadUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ReadUsageMonitoringInformationdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadUsageMonitoringInformationdefaultApplicationProblemPlusJSONResponse) VisitReadUsageMonitoringInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateUsageMonitoringResourceRequestObject struct {
	UeId       externalRef0.VarUeId `json:"ueId"`
	UsageMonId string               `json:"usageMonId"`
	Body       *CreateUsageMonitoringResourceJSONRequestBody
}

type CreateUsageMonitoringResourceResponseObject interface {
	VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error
}

type CreateUsageMonitoringResource201ResponseHeaders struct {
	Location string
}

type CreateUsageMonitoringResource201JSONResponse struct {
	Body    UsageMonData
	Headers CreateUsageMonitoringResource201ResponseHeaders
}

func (response CreateUsageMonitoringResource201JSONResponse) VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateUsageMonitoringResource400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateUsageMonitoringResource400ApplicationProblemPlusJSONResponse) VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateUsageMonitoringResource401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateUsageMonitoringResource401ApplicationProblemPlusJSONResponse) VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateUsageMonitoringResource403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateUsageMonitoringResource403ApplicationProblemPlusJSONResponse) VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateUsageMonitoringResource404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateUsageMonitoringResource404ApplicationProblemPlusJSONResponse) VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateUsageMonitoringResource411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateUsageMonitoringResource411ApplicationProblemPlusJSONResponse) VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type CreateUsageMonitoringResource413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateUsageMonitoringResource413ApplicationProblemPlusJSONResponse) VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type CreateUsageMonitoringResource414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response CreateUsageMonitoringResource414ApplicationProblemPlusJSONResponse) VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(response)
}

type CreateUsageMonitoringResource415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateUsageMonitoringResource415ApplicationProblemPlusJSONResponse) VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type CreateUsageMonitoringResource429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateUsageMonitoringResource429ApplicationProblemPlusJSONResponse) VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type CreateUsageMonitoringResource500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateUsageMonitoringResource500ApplicationProblemPlusJSONResponse) VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateUsageMonitoringResource503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateUsageMonitoringResource503ApplicationProblemPlusJSONResponse) VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type CreateUsageMonitoringResourcedefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateUsageMonitoringResourcedefaultApplicationProblemPlusJSONResponse) VisitCreateUsageMonitoringResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadUEPolicySetRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params ReadUEPolicySetParams
}

type ReadUEPolicySetResponseObject interface {
	VisitReadUEPolicySetResponse(w http.ResponseWriter) error
}

type ReadUEPolicySet200JSONResponse UePolicySet

func (response ReadUEPolicySet200JSONResponse) VisitReadUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadUEPolicySet400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadUEPolicySet400ApplicationProblemPlusJSONResponse) VisitReadUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadUEPolicySet401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadUEPolicySet401ApplicationProblemPlusJSONResponse) VisitReadUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadUEPolicySet403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadUEPolicySet403ApplicationProblemPlusJSONResponse) VisitReadUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReadUEPolicySet404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadUEPolicySet404ApplicationProblemPlusJSONResponse) VisitReadUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadUEPolicySet406Response externalRef0.N406Response

func (response ReadUEPolicySet406Response) VisitReadUEPolicySetResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadUEPolicySet429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadUEPolicySet429ApplicationProblemPlusJSONResponse) VisitReadUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ReadUEPolicySet500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadUEPolicySet500ApplicationProblemPlusJSONResponse) VisitReadUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadUEPolicySet503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadUEPolicySet503ApplicationProblemPlusJSONResponse) VisitReadUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ReadUEPolicySetdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadUEPolicySetdefaultApplicationProblemPlusJSONResponse) VisitReadUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateUEPolicySetRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
	Body *UpdateUEPolicySetApplicationMergePatchPlusJSONRequestBody
}

type UpdateUEPolicySetResponseObject interface {
	VisitUpdateUEPolicySetResponse(w http.ResponseWriter) error
}

type UpdateUEPolicySet204Response struct {
}

func (response UpdateUEPolicySet204Response) VisitUpdateUEPolicySetResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateUEPolicySet400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response UpdateUEPolicySet400ApplicationProblemPlusJSONResponse) VisitUpdateUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUEPolicySet401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response UpdateUEPolicySet401ApplicationProblemPlusJSONResponse) VisitUpdateUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUEPolicySet403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response UpdateUEPolicySet403ApplicationProblemPlusJSONResponse) VisitUpdateUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUEPolicySet404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response UpdateUEPolicySet404ApplicationProblemPlusJSONResponse) VisitUpdateUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUEPolicySet411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response UpdateUEPolicySet411ApplicationProblemPlusJSONResponse) VisitUpdateUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUEPolicySet413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response UpdateUEPolicySet413ApplicationProblemPlusJSONResponse) VisitUpdateUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUEPolicySet415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response UpdateUEPolicySet415ApplicationProblemPlusJSONResponse) VisitUpdateUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUEPolicySet429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response UpdateUEPolicySet429ApplicationProblemPlusJSONResponse) VisitUpdateUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUEPolicySet500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response UpdateUEPolicySet500ApplicationProblemPlusJSONResponse) VisitUpdateUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUEPolicySet503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response UpdateUEPolicySet503ApplicationProblemPlusJSONResponse) VisitUpdateUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUEPolicySetdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UpdateUEPolicySetdefaultApplicationProblemPlusJSONResponse) VisitUpdateUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceUEPolicySetRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
	Body *CreateOrReplaceUEPolicySetJSONRequestBody
}

type CreateOrReplaceUEPolicySetResponseObject interface {
	VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error
}

type CreateOrReplaceUEPolicySet200JSONResponse UePolicySet

func (response CreateOrReplaceUEPolicySet200JSONResponse) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceUEPolicySet201ResponseHeaders struct {
	Location string
}

type CreateOrReplaceUEPolicySet201JSONResponse struct {
	Body    UePolicySet
	Headers CreateOrReplaceUEPolicySet201ResponseHeaders
}

func (response CreateOrReplaceUEPolicySet201JSONResponse) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceUEPolicySet204Response struct {
}

func (response CreateOrReplaceUEPolicySet204Response) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateOrReplaceUEPolicySet400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceUEPolicySet400ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceUEPolicySet401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceUEPolicySet401ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceUEPolicySet403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceUEPolicySet403ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceUEPolicySet404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceUEPolicySet404ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceUEPolicySet411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceUEPolicySet411ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceUEPolicySet413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceUEPolicySet413ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceUEPolicySet415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceUEPolicySet415ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceUEPolicySet429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceUEPolicySet429ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceUEPolicySet500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceUEPolicySet500ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceUEPolicySet503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceUEPolicySet503ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceUEPolicySetdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateOrReplaceUEPolicySetdefaultApplicationProblemPlusJSONResponse) VisitCreateOrReplaceUEPolicySetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Retrieves the BDT data collection
	// (GET /policy-data/bdt-data)
	ReadBdtData(ctx context.Context, request ReadBdtDataRequestObject) (ReadBdtDataResponseObject, error)
	// Deletes an BDT data resource associated with an BDT reference Id
	// (DELETE /policy-data/bdt-data/{bdtReferenceId})
	DeleteIndividualBdtData(ctx context.Context, request DeleteIndividualBdtDataRequestObject) (DeleteIndividualBdtDataResponseObject, error)
	// Retrieves the BDT data information associated with a BDT reference Id
	// (GET /policy-data/bdt-data/{bdtReferenceId})
	ReadIndividualBdtData(ctx context.Context, request ReadIndividualBdtDataRequestObject) (ReadIndividualBdtDataResponseObject, error)
	// Modifies an BDT data resource associated with an BDT reference Id
	// (PATCH /policy-data/bdt-data/{bdtReferenceId})
	UpdateIndividualBdtData(ctx context.Context, request UpdateIndividualBdtDataRequestObject) (UpdateIndividualBdtDataResponseObject, error)
	// Creates an BDT data resource associated with an BDT reference Id
	// (PUT /policy-data/bdt-data/{bdtReferenceId})
	CreateIndividualBdtData(ctx context.Context, request CreateIndividualBdtDataRequestObject) (CreateIndividualBdtDataResponseObject, error)
	// Retrieve the UE policy set data for an H-PLMN
	// (GET /policy-data/plmns/{plmnId}/ue-policy-set)
	ReadPlmnUePolicySet(ctx context.Context, request ReadPlmnUePolicySetRequestObject) (ReadPlmnUePolicySetResponseObject, error)
	// Retrieves the sponsored connectivity information for a given sponsorId
	// (GET /policy-data/sponsor-connectivity-data/{sponsorId})
	ReadSponsorConnectivityData(ctx context.Context, request ReadSponsorConnectivityDataRequestObject) (ReadSponsorConnectivityDataResponseObject, error)
	// Create a subscription to receive notification of policy data changes
	// (POST /policy-data/subs-to-notify)
	CreateIndividualPolicyDataSubscription(ctx context.Context, request CreateIndividualPolicyDataSubscriptionRequestObject) (CreateIndividualPolicyDataSubscriptionResponseObject, error)
	// Delete the individual Policy Data subscription
	// (DELETE /policy-data/subs-to-notify/{subsId})
	DeleteIndividualPolicyDataSubscription(ctx context.Context, request DeleteIndividualPolicyDataSubscriptionRequestObject) (DeleteIndividualPolicyDataSubscriptionResponseObject, error)
	// Modify a subscription to receive notification of policy data changes
	// (PUT /policy-data/subs-to-notify/{subsId})
	ReplaceIndividualPolicyDataSubscription(ctx context.Context, request ReplaceIndividualPolicyDataSubscriptionRequestObject) (ReplaceIndividualPolicyDataSubscriptionResponseObject, error)
	// Retrieves the access and mobility policy data for a subscriber
	// (GET /policy-data/ues/{ueId}/am-data)
	ReadAccessAndMobilityPolicyData(ctx context.Context, request ReadAccessAndMobilityPolicyDataRequestObject) (ReadAccessAndMobilityPolicyDataResponseObject, error)
	// Retrieve the operator specific policy data of an UE
	// (GET /policy-data/ues/{ueId}/operator-specific-data)
	ReadOperatorSpecificData(ctx context.Context, request ReadOperatorSpecificDataRequestObject) (ReadOperatorSpecificDataResponseObject, error)
	// Modify the operator specific policy data of an UE
	// (PATCH /policy-data/ues/{ueId}/operator-specific-data)
	UpdateOperatorSpecificData(ctx context.Context, request UpdateOperatorSpecificDataRequestObject) (UpdateOperatorSpecificDataResponseObject, error)
	// Modify the operator specific policy data of an UE
	// (PUT /policy-data/ues/{ueId}/operator-specific-data)
	ReplaceOperatorSpecificData(ctx context.Context, request ReplaceOperatorSpecificDataRequestObject) (ReplaceOperatorSpecificDataResponseObject, error)
	// Retrieves the session management policy data for a subscriber
	// (GET /policy-data/ues/{ueId}/sm-data)
	ReadSessionManagementPolicyData(ctx context.Context, request ReadSessionManagementPolicyDataRequestObject) (ReadSessionManagementPolicyDataResponseObject, error)
	// Modify the session management policy data for a subscriber
	// (PATCH /policy-data/ues/{ueId}/sm-data)
	UpdateSessionManagementPolicyData(ctx context.Context, request UpdateSessionManagementPolicyDataRequestObject) (UpdateSessionManagementPolicyDataResponseObject, error)
	// Delete a usage monitoring resource
	// (DELETE /policy-data/ues/{ueId}/sm-data/{usageMonId})
	DeleteUsageMonitoringInformation(ctx context.Context, request DeleteUsageMonitoringInformationRequestObject) (DeleteUsageMonitoringInformationResponseObject, error)
	// Retrieve a usage monitoring resource
	// (GET /policy-data/ues/{ueId}/sm-data/{usageMonId})
	ReadUsageMonitoringInformation(ctx context.Context, request ReadUsageMonitoringInformationRequestObject) (ReadUsageMonitoringInformationResponseObject, error)
	// Create a usage monitoring resource
	// (PUT /policy-data/ues/{ueId}/sm-data/{usageMonId})
	CreateUsageMonitoringResource(ctx context.Context, request CreateUsageMonitoringResourceRequestObject) (CreateUsageMonitoringResourceResponseObject, error)
	// Retrieves the UE policy set data for a subscriber
	// (GET /policy-data/ues/{ueId}/ue-policy-set)
	ReadUEPolicySet(ctx context.Context, request ReadUEPolicySetRequestObject) (ReadUEPolicySetResponseObject, error)
	// Modify the UE policy set data for a subscriber
	// (PATCH /policy-data/ues/{ueId}/ue-policy-set)
	UpdateUEPolicySet(ctx context.Context, request UpdateUEPolicySetRequestObject) (UpdateUEPolicySetResponseObject, error)
	// Create or modify the UE policy set data for a subscriber
	// (PUT /policy-data/ues/{ueId}/ue-policy-set)
	CreateOrReplaceUEPolicySet(ctx context.Context, request CreateOrReplaceUEPolicySetRequestObject) (CreateOrReplaceUEPolicySetResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ReadBdtData operation middleware
func (sh *strictHandler) ReadBdtData(ctx *gin.Context, params ReadBdtDataParams) {
	var request ReadBdtDataRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadBdtData(ctx, request.(ReadBdtDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadBdtData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadBdtDataResponseObject); ok {
		if err := validResponse.VisitReadBdtDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIndividualBdtData operation middleware
func (sh *strictHandler) DeleteIndividualBdtData(ctx *gin.Context, bdtReferenceId string) {
	var request DeleteIndividualBdtDataRequestObject

	request.BdtReferenceId = bdtReferenceId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIndividualBdtData(ctx, request.(DeleteIndividualBdtDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIndividualBdtData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteIndividualBdtDataResponseObject); ok {
		if err := validResponse.VisitDeleteIndividualBdtDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadIndividualBdtData operation middleware
func (sh *strictHandler) ReadIndividualBdtData(ctx *gin.Context, bdtReferenceId string, params ReadIndividualBdtDataParams) {
	var request ReadIndividualBdtDataRequestObject

	request.BdtReferenceId = bdtReferenceId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadIndividualBdtData(ctx, request.(ReadIndividualBdtDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadIndividualBdtData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadIndividualBdtDataResponseObject); ok {
		if err := validResponse.VisitReadIndividualBdtDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateIndividualBdtData operation middleware
func (sh *strictHandler) UpdateIndividualBdtData(ctx *gin.Context, bdtReferenceId string) {
	var request UpdateIndividualBdtDataRequestObject

	request.BdtReferenceId = bdtReferenceId

	var body UpdateIndividualBdtDataApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateIndividualBdtData(ctx, request.(UpdateIndividualBdtDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateIndividualBdtData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateIndividualBdtDataResponseObject); ok {
		if err := validResponse.VisitUpdateIndividualBdtDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateIndividualBdtData operation middleware
func (sh *strictHandler) CreateIndividualBdtData(ctx *gin.Context, bdtReferenceId string) {
	var request CreateIndividualBdtDataRequestObject

	request.BdtReferenceId = bdtReferenceId

	var body CreateIndividualBdtDataJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateIndividualBdtData(ctx, request.(CreateIndividualBdtDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateIndividualBdtData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateIndividualBdtDataResponseObject); ok {
		if err := validResponse.VisitCreateIndividualBdtDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadPlmnUePolicySet operation middleware
func (sh *strictHandler) ReadPlmnUePolicySet(ctx *gin.Context, plmnId string) {
	var request ReadPlmnUePolicySetRequestObject

	request.PlmnId = plmnId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadPlmnUePolicySet(ctx, request.(ReadPlmnUePolicySetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadPlmnUePolicySet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadPlmnUePolicySetResponseObject); ok {
		if err := validResponse.VisitReadPlmnUePolicySetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadSponsorConnectivityData operation middleware
func (sh *strictHandler) ReadSponsorConnectivityData(ctx *gin.Context, sponsorId string) {
	var request ReadSponsorConnectivityDataRequestObject

	request.SponsorId = sponsorId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadSponsorConnectivityData(ctx, request.(ReadSponsorConnectivityDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadSponsorConnectivityData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadSponsorConnectivityDataResponseObject); ok {
		if err := validResponse.VisitReadSponsorConnectivityDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateIndividualPolicyDataSubscription operation middleware
func (sh *strictHandler) CreateIndividualPolicyDataSubscription(ctx *gin.Context) {
	var request CreateIndividualPolicyDataSubscriptionRequestObject

	var body CreateIndividualPolicyDataSubscriptionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateIndividualPolicyDataSubscription(ctx, request.(CreateIndividualPolicyDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateIndividualPolicyDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateIndividualPolicyDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitCreateIndividualPolicyDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIndividualPolicyDataSubscription operation middleware
func (sh *strictHandler) DeleteIndividualPolicyDataSubscription(ctx *gin.Context, subsId string) {
	var request DeleteIndividualPolicyDataSubscriptionRequestObject

	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIndividualPolicyDataSubscription(ctx, request.(DeleteIndividualPolicyDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIndividualPolicyDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteIndividualPolicyDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitDeleteIndividualPolicyDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplaceIndividualPolicyDataSubscription operation middleware
func (sh *strictHandler) ReplaceIndividualPolicyDataSubscription(ctx *gin.Context, subsId string) {
	var request ReplaceIndividualPolicyDataSubscriptionRequestObject

	request.SubsId = subsId

	var body ReplaceIndividualPolicyDataSubscriptionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReplaceIndividualPolicyDataSubscription(ctx, request.(ReplaceIndividualPolicyDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplaceIndividualPolicyDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReplaceIndividualPolicyDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitReplaceIndividualPolicyDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadAccessAndMobilityPolicyData operation middleware
func (sh *strictHandler) ReadAccessAndMobilityPolicyData(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request ReadAccessAndMobilityPolicyDataRequestObject

	request.UeId = ueId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadAccessAndMobilityPolicyData(ctx, request.(ReadAccessAndMobilityPolicyDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadAccessAndMobilityPolicyData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadAccessAndMobilityPolicyDataResponseObject); ok {
		if err := validResponse.VisitReadAccessAndMobilityPolicyDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadOperatorSpecificData operation middleware
func (sh *strictHandler) ReadOperatorSpecificData(ctx *gin.Context, ueId externalRef0.VarUeId, params ReadOperatorSpecificDataParams) {
	var request ReadOperatorSpecificDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadOperatorSpecificData(ctx, request.(ReadOperatorSpecificDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadOperatorSpecificData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadOperatorSpecificDataResponseObject); ok {
		if err := validResponse.VisitReadOperatorSpecificDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateOperatorSpecificData operation middleware
func (sh *strictHandler) UpdateOperatorSpecificData(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request UpdateOperatorSpecificDataRequestObject

	request.UeId = ueId

	var body UpdateOperatorSpecificDataApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateOperatorSpecificData(ctx, request.(UpdateOperatorSpecificDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateOperatorSpecificData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateOperatorSpecificDataResponseObject); ok {
		if err := validResponse.VisitUpdateOperatorSpecificDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplaceOperatorSpecificData operation middleware
func (sh *strictHandler) ReplaceOperatorSpecificData(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request ReplaceOperatorSpecificDataRequestObject

	request.UeId = ueId

	var body ReplaceOperatorSpecificDataJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReplaceOperatorSpecificData(ctx, request.(ReplaceOperatorSpecificDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplaceOperatorSpecificData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReplaceOperatorSpecificDataResponseObject); ok {
		if err := validResponse.VisitReplaceOperatorSpecificDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadSessionManagementPolicyData operation middleware
func (sh *strictHandler) ReadSessionManagementPolicyData(ctx *gin.Context, ueId externalRef0.VarUeId, params ReadSessionManagementPolicyDataParams) {
	var request ReadSessionManagementPolicyDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadSessionManagementPolicyData(ctx, request.(ReadSessionManagementPolicyDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadSessionManagementPolicyData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadSessionManagementPolicyDataResponseObject); ok {
		if err := validResponse.VisitReadSessionManagementPolicyDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateSessionManagementPolicyData operation middleware
func (sh *strictHandler) UpdateSessionManagementPolicyData(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request UpdateSessionManagementPolicyDataRequestObject

	request.UeId = ueId

	var body UpdateSessionManagementPolicyDataApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSessionManagementPolicyData(ctx, request.(UpdateSessionManagementPolicyDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSessionManagementPolicyData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateSessionManagementPolicyDataResponseObject); ok {
		if err := validResponse.VisitUpdateSessionManagementPolicyDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUsageMonitoringInformation operation middleware
func (sh *strictHandler) DeleteUsageMonitoringInformation(ctx *gin.Context, ueId externalRef0.VarUeId, usageMonId string) {
	var request DeleteUsageMonitoringInformationRequestObject

	request.UeId = ueId
	request.UsageMonId = usageMonId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUsageMonitoringInformation(ctx, request.(DeleteUsageMonitoringInformationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUsageMonitoringInformation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteUsageMonitoringInformationResponseObject); ok {
		if err := validResponse.VisitDeleteUsageMonitoringInformationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadUsageMonitoringInformation operation middleware
func (sh *strictHandler) ReadUsageMonitoringInformation(ctx *gin.Context, ueId externalRef0.VarUeId, usageMonId string, params ReadUsageMonitoringInformationParams) {
	var request ReadUsageMonitoringInformationRequestObject

	request.UeId = ueId
	request.UsageMonId = usageMonId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadUsageMonitoringInformation(ctx, request.(ReadUsageMonitoringInformationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadUsageMonitoringInformation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadUsageMonitoringInformationResponseObject); ok {
		if err := validResponse.VisitReadUsageMonitoringInformationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUsageMonitoringResource operation middleware
func (sh *strictHandler) CreateUsageMonitoringResource(ctx *gin.Context, ueId externalRef0.VarUeId, usageMonId string) {
	var request CreateUsageMonitoringResourceRequestObject

	request.UeId = ueId
	request.UsageMonId = usageMonId

	var body CreateUsageMonitoringResourceJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUsageMonitoringResource(ctx, request.(CreateUsageMonitoringResourceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUsageMonitoringResource")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateUsageMonitoringResourceResponseObject); ok {
		if err := validResponse.VisitCreateUsageMonitoringResourceResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadUEPolicySet operation middleware
func (sh *strictHandler) ReadUEPolicySet(ctx *gin.Context, ueId externalRef0.VarUeId, params ReadUEPolicySetParams) {
	var request ReadUEPolicySetRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadUEPolicySet(ctx, request.(ReadUEPolicySetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadUEPolicySet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadUEPolicySetResponseObject); ok {
		if err := validResponse.VisitReadUEPolicySetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateUEPolicySet operation middleware
func (sh *strictHandler) UpdateUEPolicySet(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request UpdateUEPolicySetRequestObject

	request.UeId = ueId

	var body UpdateUEPolicySetApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUEPolicySet(ctx, request.(UpdateUEPolicySetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUEPolicySet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateUEPolicySetResponseObject); ok {
		if err := validResponse.VisitUpdateUEPolicySetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateOrReplaceUEPolicySet operation middleware
func (sh *strictHandler) CreateOrReplaceUEPolicySet(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request CreateOrReplaceUEPolicySetRequestObject

	request.UeId = ueId

	var body CreateOrReplaceUEPolicySetJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOrReplaceUEPolicySet(ctx, request.(CreateOrReplaceUEPolicySetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOrReplaceUEPolicySet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateOrReplaceUEPolicySetResponseObject); ok {
		if err := validResponse.VisitCreateOrReplaceUEPolicySetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
