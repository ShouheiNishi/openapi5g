// Package subscription provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package subscription

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/ausf/sor"
	externalRef1 "github.com/ShouheiNishi/openapi5g/ausf/upu"
	externalRef2 "github.com/ShouheiNishi/openapi5g/commondata"
	externalRef4 "github.com/ShouheiNishi/openapi5g/udm/ee"
	externalRef5 "github.com/ShouheiNishi/openapi5g/udm/niddau"
	externalRef6 "github.com/ShouheiNishi/openapi5g/udm/pp"
	externalRef7 "github.com/ShouheiNishi/openapi5g/udm/sdm"
	externalRef8 "github.com/ShouheiNishi/openapi5g/udm/ueau"
	externalRef9 "github.com/ShouheiNishi/openapi5g/udm/uecm"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// Defines values for AuthMethod.
const (
	EAPAKAPRIME AuthMethod = "EAP_AKA_PRIME"
	EAPTLS      AuthMethod = "EAP_TLS"
	N5GAKA      AuthMethod = "5G_AKA"
)

// Defines values for ContextDataSetName.
const (
	AMF3GPP          ContextDataSetName = "AMF_3GPP"
	AMFNON3GPP       ContextDataSetName = "AMF_NON_3GPP"
	EESUBSCRIPTIONS  ContextDataSetName = "EE_SUBSCRIPTIONS"
	IPSMGW           ContextDataSetName = "IP_SM_GW"
	SDMSUBSCRIPTIONS ContextDataSetName = "SDM_SUBSCRIPTIONS"
	SMFREG           ContextDataSetName = "SMF_REG"
	SMSF3GPP         ContextDataSetName = "SMSF_3GPP"
	SMSFNON3GPP      ContextDataSetName = "SMSF_NON_3GPP"
	SUBSTONOTIFY     ContextDataSetName = "SUBS_TO_NOTIFY"
)

// Defines values for DataSetName.
const (
	DataSetNameAM         DataSetName = "AM"
	DataSetNameLCSBCA     DataSetName = "LCS_BCA"
	DataSetNameLCSMO      DataSetName = "LCS_MO"
	DataSetNameLCSPRIVACY DataSetName = "LCS_PRIVACY"
	DataSetNameSM         DataSetName = "SM"
	DataSetNameSMFSEL     DataSetName = "SMF_SEL"
	DataSetNameSMSMNG     DataSetName = "SMS_MNG"
	DataSetNameSMSSUB     DataSetName = "SMS_SUB"
	DataSetNameTRACE      DataSetName = "TRACE"
	DataSetNameV2X        DataSetName = "V2X"
)

// Defines values for OperatorSpecificDataContainerDataType.
const (
	Boolean OperatorSpecificDataContainerDataType = "boolean"
	Integer OperatorSpecificDataContainerDataType = "integer"
	Number  OperatorSpecificDataContainerDataType = "number"
	Object  OperatorSpecificDataContainerDataType = "object"
	String  OperatorSpecificDataContainerDataType = "string"
)

// Defines values for PpDataType.
const (
	PpDataTypeACSINFO                      PpDataType = "ACS_INFO"
	PpDataTypeCOMMUNICATIONCHARACTERISTICS PpDataType = "COMMUNICATION_CHARACTERISTICS"
	PpDataTypeECRESTRICTION                PpDataType = "EC_RESTRICTION"
	PpDataTypeEXPECTEDUEBEHAVIOUR          PpDataType = "EXPECTED_UE_BEHAVIOUR"
	PpDataTypeLCSPRIVACY                   PpDataType = "LCS_PRIVACY"
	PpDataTypeSORINFO                      PpDataType = "SOR_INFO"
	PpDataTypeSTNSR                        PpDataType = "STN_SR"
	PpDataTypeTRACE                        PpDataType = "TRACE"
)

// Defines values for Sign.
const (
	NEGATIVE Sign = "NEGATIVE"
	POSITIVE Sign = "POSITIVE"
)

// Defines values for SqnScheme.
const (
	GENERAL      SqnScheme = "GENERAL"
	NONTIMEBASED SqnScheme = "NON_TIME_BASED"
	TIMEBASED    SqnScheme = "TIME_BASED"
)

// Defines values for UeUpdateStatus.
const (
	ACKRECEIVED         UeUpdateStatus = "ACK_RECEIVED"
	NEGATIVEACKRECEIVED UeUpdateStatus = "NEGATIVE_ACK_RECEIVED"
	NOTSENT             UeUpdateStatus = "NOT_SENT"
	SENTNOACKREQUIRED   UeUpdateStatus = "SENT_NO_ACK_REQUIRED"
	WAITINGFORACK       UeUpdateStatus = "WAITING_FOR_ACK"
)

// AccessAndMobilitySubscriptionData defines model for AccessAndMobilitySubscriptionData.
type AccessAndMobilitySubscriptionData = externalRef7.AccessAndMobilitySubscriptionData

// AllowedMtcProviderInfo defines model for AllowedMtcProviderInfo.
type AllowedMtcProviderInfo struct {
	AfId                   *string                              `json:"afId,omitempty"`
	MtcProviderInformation *externalRef2.MtcProviderInformation `json:"mtcProviderInformation,omitempty"`
	AdditionalProperties   map[string]interface{}               `json:"-"`
}

// Amf3GppAccessRegistration defines model for Amf3GppAccessRegistration.
type Amf3GppAccessRegistration = externalRef9.Amf3GppAccessRegistration

// AmfNon3GppAccessRegistration defines model for AmfNon3GppAccessRegistration.
type AmfNon3GppAccessRegistration = externalRef9.AmfNon3GppAccessRegistration

// AmfSubscriptionInfo defines model for AmfSubscriptionInfo.
type AmfSubscriptionInfo struct {
	AmfInstanceId                 externalRef2.NfInstanceId `json:"amfInstanceId"`
	SubsChangeNotifyCorrelationId *string                   `json:"subsChangeNotifyCorrelationId,omitempty"`
	SubscriptionId                externalRef2.Uri          `json:"subscriptionId"`
	AdditionalProperties          map[string]interface{}    `json:"-"`
}

// AuthMethod defines model for AuthMethod.
type AuthMethod string

// AuthenticationSubscription defines model for AuthenticationSubscription.
type AuthenticationSubscription struct {
	AlgorithmId                   *string                `json:"algorithmId,omitempty"`
	AuthenticationManagementField string                 `json:"authenticationManagementField,omitempty"`
	AuthenticationMethod          AuthMethod             `json:"authenticationMethod"`
	EncOpcKey                     *string                `json:"encOpcKey,omitempty"`
	EncPermanentKey               *string                `json:"encPermanentKey,omitempty"`
	EncTopcKey                    *string                `json:"encTopcKey,omitempty"`
	N5gcAuthMethod                *AuthMethod            `json:"n5gcAuthMethod,omitempty"`
	ProtectionParameterId         *string                `json:"protectionParameterId,omitempty"`
	RgAuthenticationInd           *bool                  `json:"rgAuthenticationInd,omitempty"`
	SequenceNumber                *SequenceNumber        `json:"sequenceNumber,omitempty"`
	Supi                          externalRef2.Supi      `json:"supi,omitempty"`
	VectorGenerationInHss         *bool                  `json:"vectorGenerationInHss,omitempty"`
	AdditionalProperties          map[string]interface{} `json:"-"`
}

// AuthorizationData defines model for AuthorizationData.
type AuthorizationData = externalRef5.AuthorizationData

// CagAckData defines model for CagAckData.
type CagAckData struct {
	ProvisioningTime     externalRef2.DateTime  `json:"provisioningTime"`
	UeUpdateStatus       UeUpdateStatus         `json:"ueUpdateStatus"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ContextDataSetName defines model for ContextDataSetName.
type ContextDataSetName string

// ContextDataSets defines model for ContextDataSets.
type ContextDataSets struct {
	Amf3Gpp                       *Amf3GppAccessRegistration      `json:"amf3Gpp,omitempty"`
	AmfNon3Gpp                    *AmfNon3GppAccessRegistration   `json:"amfNon3Gpp,omitempty"`
	EeSubscriptions               []EeSubscription                `json:"eeSubscriptions,omitempty"`
	IpSmGw                        *IpSmGwRegistration             `json:"ipSmGw,omitempty"`
	SdmSubscriptions              []SdmSubscription               `json:"sdmSubscriptions,omitempty"`
	SmfRegistrations              *SmfRegList                     `json:"smfRegistrations,omitempty"`
	Smsf3GppAccess                *SmsfRegistration               `json:"smsf3GppAccess,omitempty"`
	SmsfNon3GppAccess             *SmsfRegistration               `json:"smsfNon3GppAccess,omitempty"`
	SubscriptionDataSubscriptions []SubscriptionDataSubscriptions `json:"subscriptionDataSubscriptions,omitempty"`
	AdditionalProperties          map[string]interface{}          `json:"-"`
}

// ContextDatasetNames defines model for ContextDatasetNames.
type ContextDatasetNames = []ContextDataSetName

// DataChangeNotify defines model for DataChangeNotify.
type DataChangeNotify struct {
	AdditionalSdmSubscriptions    []externalRef7.SdmSubscription   `json:"additionalSdmSubscriptions,omitempty"`
	NotifyItems                   []externalRef2.NotifyItem        `json:"notifyItems,omitempty"`
	OriginalCallbackReference     []externalRef2.Uri               `json:"originalCallbackReference,omitempty"`
	SdmSubscription               *externalRef7.SdmSubscription    `json:"sdmSubscription,omitempty"`
	SubscriptionDataSubscriptions *[]SubscriptionDataSubscriptions `json:"subscriptionDataSubscriptions,omitempty"`
	UeId                          externalRef2.VarUeId             `json:"ueId,omitempty"`
	AdditionalProperties          map[string]interface{}           `json:"-"`
}

// DataSetName defines model for DataSetName.
type DataSetName string

// DatasetNames defines model for DatasetNames.
type DatasetNames = []DataSetName

// Dnn defines model for Dnn.
type Dnn = externalRef2.Dnn

// EeGroupProfileData defines model for EeGroupProfileData.
type EeGroupProfileData struct {
	// AllowedMtcProvider A map (list of key-value pairs where EventType serves as key) of MTC provider lists. In addition to defined EventTypes, the key value "ALL" may be used to identify a map entry which contains a list of MtcProviders that are allowed monitoring all Event Types.
	AllowedMtcProvider   *map[string][]MtcProvider       `json:"allowedMtcProvider,omitempty"`
	RestrictedEventTypes *[]externalRef4.EventType       `json:"restrictedEventTypes,omitempty"`
	SupportedFeatures    *externalRef2.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// EeProfileData defines model for EeProfileData.
type EeProfileData struct {
	// AllowedMtcProvider A map (list of key-value pairs where EventType serves as key) of MTC provider lists. In addition to defined EventTypes, the key value "ALL" may be used to identify a map entry which contains a list of MtcProviders that are allowed monitoring all Event Types.
	AllowedMtcProvider   *map[string][]MtcProvider       `json:"allowedMtcProvider,omitempty"`
	RestrictedEventTypes *[]externalRef4.EventType       `json:"restrictedEventTypes,omitempty"`
	SupportedFeatures    *externalRef2.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// EeSubscription defines model for EeSubscription.
type EeSubscription = externalRef4.EeSubscription

// EnhancedCoverageRestrictionData defines model for EnhancedCoverageRestrictionData.
type EnhancedCoverageRestrictionData = externalRef7.EnhancedCoverageRestrictionData

// HssSubscriptionInfo Information related to active subscriptions at the HSS(s)
type HssSubscriptionInfo struct {
	HssSubscriptionList  []HssSubscriptionItem  `json:"hssSubscriptionList"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// HssSubscriptionItem Contains info about a single HSS event subscription
type HssSubscriptionItem struct {
	HssInstanceId        externalRef2.NfInstanceId `json:"hssInstanceId"`
	SubscriptionId       externalRef2.Uri          `json:"subscriptionId"`
	AdditionalProperties map[string]interface{}    `json:"-"`
}

// IdentityData defines model for IdentityData.
type IdentityData struct {
	GpsiList             []externalRef2.Gpsi    `json:"gpsiList,omitempty"`
	SupiList             []externalRef2.Supi    `json:"supiList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// IpSmGwRegistration defines model for IpSmGwRegistration.
type IpSmGwRegistration = externalRef9.IpSmGwRegistration

// LcsBroadcastAssistanceTypesData defines model for LcsBroadcastAssistanceTypesData.
type LcsBroadcastAssistanceTypesData = externalRef7.LcsBroadcastAssistanceTypesData

// LcsMoData defines model for LcsMoData.
type LcsMoData = externalRef7.LcsMoData

// LcsPrivacyData defines model for LcsPrivacyData.
type LcsPrivacyData = externalRef7.LcsPrivacyData

// LocationInfo defines model for LocationInfo.
type LocationInfo = externalRef9.LocationInfo

// MessageWaitingData defines model for MessageWaitingData.
type MessageWaitingData struct {
	MwdList              []SmscData             `json:"mwdList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// MtcProvider defines model for MtcProvider.
type MtcProvider struct {
	AfId                   *string                              `json:"afId,omitempty"`
	MtcProviderInformation *externalRef2.MtcProviderInformation `json:"mtcProviderInformation,omitempty"`
	AdditionalProperties   map[string]interface{}               `json:"-"`
}

// NssaiAckData defines model for NssaiAckData.
type NssaiAckData struct {
	ProvisioningTime     externalRef2.DateTime  `json:"provisioningTime"`
	UeUpdateStatus       UeUpdateStatus         `json:"ueUpdateStatus"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// OperatorSpecificDataContainer defines model for OperatorSpecificDataContainer.
type OperatorSpecificDataContainer struct {
	DataType             OperatorSpecificDataContainerDataType `json:"dataType"`
	DataTypeDefinition   *string                               `json:"dataTypeDefinition,omitempty"`
	SupportedFeatures    *externalRef2.SupportedFeatures       `json:"supportedFeatures,omitempty"`
	Value                OperatorSpecificDataContainer_Value   `json:"value"`
	AdditionalProperties map[string]interface{}                `json:"-"`
}

// OperatorSpecificDataContainerDataType defines model for OperatorSpecificDataContainer.DataType.
type OperatorSpecificDataContainerDataType string

// OperatorSpecificDataContainerValue0 defines model for .
type OperatorSpecificDataContainerValue0 = string

// OperatorSpecificDataContainerValue1 defines model for .
type OperatorSpecificDataContainerValue1 = int

// OperatorSpecificDataContainerValue2 defines model for .
type OperatorSpecificDataContainerValue2 = float32

// OperatorSpecificDataContainerValue3 defines model for .
type OperatorSpecificDataContainerValue3 = bool

// OperatorSpecificDataContainerValue4 defines model for .
type OperatorSpecificDataContainerValue4 = map[string]interface{}

// OperatorSpecificDataContainer_Value defines model for OperatorSpecificDataContainer.Value.
type OperatorSpecificDataContainer_Value struct {
	union json.RawMessage
}

// Pp5gVnGroupProfileData defines model for Pp5gVnGroupProfileData.
type Pp5gVnGroupProfileData struct {
	// AllowedMtcProviders A map (list of key-value pairs where external VN group identifier serves as key) of AllowedMtcProviderInfo lists. In addition to defined external VN group identifier, the key value "ALL" may be used to identify a map entry which contains a list of AllowedMtcProviderInfo that are allowed operating all the external group identifiers.
	AllowedMtcProviders  *map[string][]AllowedMtcProviderInfo `json:"allowedMtcProviders,omitempty"`
	SupportedFeatures    *externalRef2.SupportedFeatures      `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}               `json:"-"`
}

// PpData defines model for PpData.
type PpData = externalRef6.PpData

// PpDataType defines model for PpDataType.
type PpDataType string

// PpProfileData defines model for PpProfileData.
type PpProfileData struct {
	// AllowedMtcProviders A map (list of key-value pairs where PpDataType serves as key) of AllowedMtcProviderInfo lists. In addition to defined PpDataType, the key value "ALL" may be used to identify a map entry which contains a list of AllowedMtcProviderInfo that are allowed to provision all types of the PP data for the user using UDM ParameterProvision service.
	AllowedMtcProviders  *map[string][]AllowedMtcProviderInfo `json:"allowedMtcProviders,omitempty"`
	SupportedFeatures    *externalRef2.SupportedFeatures      `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}               `json:"-"`
}

// ProvisionedDataSets defines model for ProvisionedDataSets.
type ProvisionedDataSets struct {
	AmData               *AccessAndMobilitySubscriptionData   `json:"amData,omitempty"`
	LcsBcaData           *LcsBroadcastAssistanceTypesData     `json:"lcsBcaData,omitempty"`
	LcsMoData            *LcsMoData                           `json:"lcsMoData,omitempty"`
	LcsPrivacyData       *LcsPrivacyData                      `json:"lcsPrivacyData,omitempty"`
	SmData               *[]SessionManagementSubscriptionData `json:"smData,omitempty"`
	SmfSelData           *SmfSelectionSubscriptionData        `json:"smfSelData,omitempty"`
	SmsMngData           *SmsManagementSubscriptionData       `json:"smsMngData,omitempty"`
	SmsSubsData          *SmsSubscriptionData                 `json:"smsSubsData,omitempty"`
	TraceData            *externalRef2.TraceData              `json:"traceData"`
	V2xData              *V2xSubscriptionData                 `json:"v2xData,omitempty"`
	AdditionalProperties map[string]interface{}               `json:"-"`
}

// SdmSubscription defines model for SdmSubscription.
type SdmSubscription = externalRef7.SdmSubscription

// SequenceNumber defines model for SequenceNumber.
type SequenceNumber struct {
	DifSign              Sign                   `json:"difSign,omitempty"`
	IndLength            *int                   `json:"indLength,omitempty"`
	LastIndexes          *map[string]int        `json:"lastIndexes,omitempty"`
	Sqn                  string                 `json:"sqn,omitempty"`
	SqnScheme            *SqnScheme             `json:"sqnScheme,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SessionManagementSubscriptionData defines model for SessionManagementSubscriptionData.
type SessionManagementSubscriptionData = externalRef7.SessionManagementSubscriptionData

// Sign defines model for Sign.
type Sign string

// SmfRegList defines model for SmfRegList.
type SmfRegList = []SmfRegistration

// SmfRegistration defines model for SmfRegistration.
type SmfRegistration = externalRef9.SmfRegistration

// SmfSelectionSubscriptionData defines model for SmfSelectionSubscriptionData.
type SmfSelectionSubscriptionData = externalRef7.SmfSelectionSubscriptionData

// SmfSubscriptionInfo Information related to active subscriptions at the SMF(s)
type SmfSubscriptionInfo struct {
	SmfSubscriptionList  []SmfSubscriptionItem  `json:"smfSubscriptionList"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmfSubscriptionItem Contains info about a single SMF event subscription
type SmfSubscriptionItem struct {
	SmfInstanceId        externalRef2.NfInstanceId `json:"smfInstanceId"`
	SubscriptionId       externalRef2.Uri          `json:"subscriptionId"`
	AdditionalProperties map[string]interface{}    `json:"-"`
}

// SmsManagementSubscriptionData defines model for SmsManagementSubscriptionData.
type SmsManagementSubscriptionData = externalRef7.SmsManagementSubscriptionData

// SmsSubscriptionData defines model for SmsSubscriptionData.
type SmsSubscriptionData = externalRef7.SmsSubscriptionData

// SmscData defines model for SmscData.
type SmscData struct {
	SmscDiameterAddress  *externalRef9.NetworkNodeDiameterAddress `json:"smscDiameterAddress,omitempty"`
	SmscMapAddress       externalRef9.E164Number                  `json:"smscMapAddress,omitempty"`
	AdditionalProperties map[string]interface{}                   `json:"-"`
}

// SmsfRegistration defines model for SmsfRegistration.
type SmsfRegistration = externalRef9.SmsfRegistration

// SorData defines model for SorData.
type SorData struct {
	ProvisioningTime     externalRef2.DateTime  `json:"provisioningTime"`
	SorMacIue            externalRef0.SorMac    `json:"sorMacIue,omitempty"`
	SorXmacIue           externalRef0.SorMac    `json:"sorXmacIue,omitempty"`
	UeUpdateStatus       UeUpdateStatus         `json:"ueUpdateStatus"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SqnScheme defines model for SqnScheme.
type SqnScheme string

// SubscriptionDataSubscriptions defines model for SubscriptionDataSubscriptions.
type SubscriptionDataSubscriptions struct {
	CallbackReference         externalRef2.Uri                `json:"callbackReference"`
	Expiry                    *externalRef2.DateTime          `json:"expiry,omitempty"`
	MonitoredResourceUris     []externalRef2.Uri              `json:"monitoredResourceUris"`
	OriginalCallbackReference *externalRef2.Uri               `json:"originalCallbackReference,omitempty"`
	SdmSubscription           *externalRef7.SdmSubscription   `json:"sdmSubscription,omitempty"`
	SubscriptionId            *string                         `json:"subscriptionId,omitempty"`
	SupportedFeatures         *externalRef2.SupportedFeatures `json:"supportedFeatures,omitempty"`
	UeId                      externalRef2.VarUeId            `json:"ueId,omitempty"`
	UniqueSubscription        *bool                           `json:"uniqueSubscription,omitempty"`
	AdditionalProperties      map[string]interface{}          `json:"-"`
}

// UeUpdateStatus defines model for UeUpdateStatus.
type UeUpdateStatus string

// UpuData defines model for UpuData.
type UpuData struct {
	ProvisioningTime     externalRef2.DateTime  `json:"provisioningTime"`
	UeUpdateStatus       UeUpdateStatus         `json:"ueUpdateStatus"`
	UpuMacIue            externalRef1.UpuMac    `json:"upuMacIue,omitempty"`
	UpuXmacIue           externalRef1.UpuMac    `json:"upuXmacIue,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// V2xSubscriptionData defines model for V2xSubscriptionData.
type V2xSubscriptionData = externalRef7.V2xSubscriptionData

// VarPlmnId defines model for VarPlmnId.
type VarPlmnId = string

// VarSnssai defines model for VarSnssai.
type VarSnssai = externalRef2.Snssai

// VarUeGroupId defines model for VarUeGroupId.
type VarUeGroupId = string

// Query5GVnGroupParams defines parameters for Query5GVnGroup.
type Query5GVnGroupParams struct {
	// Gpsis List of GPSIs
	Gpsis *[]externalRef2.Gpsi `form:"gpsis,omitempty" json:"gpsis,omitempty"`
}

// Query5GVnGroupInternalParams defines parameters for Query5GVnGroupInternal.
type Query5GVnGroupInternalParams struct {
	// InternalGroupIds List of Internal Group IDs
	InternalGroupIds []externalRef2.GroupId `form:"internal-group-ids" json:"internal-group-ids"`
}

// Query5GVNGroupPPDataParams defines parameters for Query5GVNGroupPPData.
type Query5GVNGroupPPDataParams struct {
	// ExtGroupIds List of external VN group identifiers
	ExtGroupIds *[]externalRef7.ExtGroupId `form:"ext-group-ids,omitempty" json:"ext-group-ids,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// Modify5GVnGroupApplicationJSONPatchPlusJSONBody defines parameters for Modify5GVnGroup.
type Modify5GVnGroupApplicationJSONPatchPlusJSONBody = []externalRef2.PatchItem

// Modify5GVnGroupParams defines parameters for Modify5GVnGroup.
type Modify5GVnGroupParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// GetGroupIdentifiersParams defines parameters for GetGroupIdentifiers.
type GetGroupIdentifiersParams struct {
	// ExtGroupId External Group Identifier
	ExtGroupId *externalRef7.ExtGroupId `form:"ext-group-id,omitempty" json:"ext-group-id,omitempty"`

	// IntGroupId Internal Group Identifier
	IntGroupId *externalRef2.GroupId `form:"int-group-id,omitempty" json:"int-group-id,omitempty"`

	// UeIdInd Indication whether UE identifiers are required or not
	UeIdInd *bool `form:"ue-id-ind,omitempty" json:"ue-id-ind,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryGroupEEDataParams defines parameters for QueryGroupEEData.
type QueryGroupEEDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryEeGroupSubscriptionsParams defines parameters for QueryEeGroupSubscriptions.
type QueryEeGroupSubscriptionsParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// ModifyEeGroupSubscriptionApplicationJSONPatchPlusJSONBody defines parameters for ModifyEeGroupSubscription.
type ModifyEeGroupSubscriptionApplicationJSONPatchPlusJSONBody = []externalRef2.PatchItem

// ModifyEeGroupSubscriptionParams defines parameters for ModifyEeGroupSubscription.
type ModifyEeGroupSubscriptionParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// GetSharedDataParams defines parameters for GetSharedData.
type GetSharedDataParams struct {
	// SharedDataIds List of shared data ids
	SharedDataIds externalRef7.SharedDataIds `form:"shared-data-ids" json:"shared-data-ids"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// GetIndividualSharedDataParams defines parameters for GetIndividualSharedData.
type GetIndividualSharedDataParams struct {
	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// RemoveMultipleSubscriptionDataSubscriptionsParams defines parameters for RemoveMultipleSubscriptionDataSubscriptions.
type RemoveMultipleSubscriptionDataSubscriptionsParams struct {
	// UeId UE ID
	UeId externalRef2.VarUeId `form:"ue-id" json:"ue-id"`

	// NfInstanceId NF Instance ID
	NfInstanceId *externalRef2.NfInstanceId `form:"nf-instance-id,omitempty" json:"nf-instance-id,omitempty"`

	// DeleteAllNfs Flag to delete subscriptions from all NFs
	DeleteAllNfs *bool `form:"delete-all-nfs,omitempty" json:"delete-all-nfs,omitempty"`

	// ImplicitUnsubscribeIndication Implicit Unsubscribe Indication
	ImplicitUnsubscribeIndication *bool `form:"implicit-unsubscribe-indication,omitempty" json:"implicit-unsubscribe-indication,omitempty"`
}

// QuerySubsToNotifyParams defines parameters for QuerySubsToNotify.
type QuerySubsToNotifyParams struct {
	// UeId UE id
	UeId externalRef2.VarUeId `form:"ue-id" json:"ue-id"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// ModifysubscriptionDataSubscriptionApplicationJSONPatchPlusJSONBody defines parameters for ModifysubscriptionDataSubscription.
type ModifysubscriptionDataSubscriptionApplicationJSONPatchPlusJSONBody = []externalRef2.PatchItem

// ModifysubscriptionDataSubscriptionParams defines parameters for ModifysubscriptionDataSubscription.
type ModifysubscriptionDataSubscriptionParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryAuthenticationStatusParams defines parameters for QueryAuthenticationStatus.
type QueryAuthenticationStatusParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryIndividualAuthenticationStatusParams defines parameters for QueryIndividualAuthenticationStatus.
type QueryIndividualAuthenticationStatusParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryAuthSubsDataParams defines parameters for QueryAuthSubsData.
type QueryAuthSubsDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// ModifyAuthenticationSubscriptionApplicationJSONPatchPlusJSONBody defines parameters for ModifyAuthenticationSubscription.
type ModifyAuthenticationSubscriptionApplicationJSONPatchPlusJSONBody = []externalRef2.PatchItem

// ModifyAuthenticationSubscriptionParams defines parameters for ModifyAuthenticationSubscription.
type ModifyAuthenticationSubscriptionParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryContextDataParams defines parameters for QueryContextData.
type QueryContextDataParams struct {
	// ContextDatasetNames List of context dataset names
	ContextDatasetNames ContextDatasetNames `form:"context-dataset-names" json:"context-dataset-names"`
}

// QueryAmfContext3gppParams defines parameters for QueryAmfContext3gpp.
type QueryAmfContext3gppParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// AmfContext3gppApplicationJSONPatchPlusJSONBody defines parameters for AmfContext3gpp.
type AmfContext3gppApplicationJSONPatchPlusJSONBody = []externalRef2.PatchItem

// AmfContext3gppParams defines parameters for AmfContext3gpp.
type AmfContext3gppParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryAmfContextNon3gppParams defines parameters for QueryAmfContextNon3gpp.
type QueryAmfContextNon3gppParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// AmfContextNon3gppApplicationJSONPatchPlusJSONBody defines parameters for AmfContextNon3gpp.
type AmfContextNon3gppApplicationJSONPatchPlusJSONBody = []externalRef2.PatchItem

// AmfContextNon3gppParams defines parameters for AmfContextNon3gpp.
type AmfContextNon3gppParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryeesubscriptionsParams defines parameters for Queryeesubscriptions.
type QueryeesubscriptionsParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// ModifyEesubscriptionApplicationJSONPatchPlusJSONBody defines parameters for ModifyEesubscription.
type ModifyEesubscriptionApplicationJSONPatchPlusJSONBody = []externalRef2.PatchItem

// ModifyEesubscriptionParams defines parameters for ModifyEesubscription.
type ModifyEesubscriptionParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// ModifyAmfSubscriptionInfoApplicationJSONPatchPlusJSONBody defines parameters for ModifyAmfSubscriptionInfo.
type ModifyAmfSubscriptionInfoApplicationJSONPatchPlusJSONBody = []externalRef2.PatchItem

// ModifyAmfSubscriptionInfoParams defines parameters for ModifyAmfSubscriptionInfo.
type ModifyAmfSubscriptionInfoParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// CreateAMFSubscriptionsJSONBody defines parameters for CreateAMFSubscriptions.
type CreateAMFSubscriptionsJSONBody = []AmfSubscriptionInfo

// ModifyHssSubscriptionInfoApplicationJSONPatchPlusJSONBody defines parameters for ModifyHssSubscriptionInfo.
type ModifyHssSubscriptionInfoApplicationJSONPatchPlusJSONBody = []externalRef2.PatchItem

// ModifyHssSubscriptionInfoParams defines parameters for ModifyHssSubscriptionInfo.
type ModifyHssSubscriptionInfoParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// ModifySmfSubscriptionInfoApplicationJSONPatchPlusJSONBody defines parameters for ModifySmfSubscriptionInfo.
type ModifySmfSubscriptionInfoApplicationJSONPatchPlusJSONBody = []externalRef2.PatchItem

// ModifySmfSubscriptionInfoParams defines parameters for ModifySmfSubscriptionInfo.
type ModifySmfSubscriptionInfoParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryIpSmGwContextParams defines parameters for QueryIpSmGwContext.
type QueryIpSmGwContextParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// ModifyIpSmGwContextApplicationJSONPatchPlusJSONBody defines parameters for ModifyIpSmGwContext.
type ModifyIpSmGwContextApplicationJSONPatchPlusJSONBody = []externalRef2.PatchItem

// QueryUeLocationParams defines parameters for QueryUeLocation.
type QueryUeLocationParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryMessageWaitingDataParams defines parameters for QueryMessageWaitingData.
type QueryMessageWaitingDataParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// ModifyMessageWaitingDataApplicationJSONPatchPlusJSONBody defines parameters for ModifyMessageWaitingData.
type ModifyMessageWaitingDataApplicationJSONPatchPlusJSONBody = []externalRef2.PatchItem

// QuerysdmsubscriptionsParams defines parameters for Querysdmsubscriptions.
type QuerysdmsubscriptionsParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// ModifysdmSubscriptionApplicationJSONPatchPlusJSONBody defines parameters for ModifysdmSubscription.
type ModifysdmSubscriptionApplicationJSONPatchPlusJSONBody = []externalRef2.PatchItem

// ModifysdmSubscriptionParams defines parameters for ModifysdmSubscription.
type ModifysdmSubscriptionParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// ModifyHssSDMSubscriptionInfoApplicationJSONPatchPlusJSONBody defines parameters for ModifyHssSDMSubscriptionInfo.
type ModifyHssSDMSubscriptionInfoApplicationJSONPatchPlusJSONBody = []externalRef2.PatchItem

// ModifyHssSDMSubscriptionInfoParams defines parameters for ModifyHssSDMSubscriptionInfo.
type ModifyHssSDMSubscriptionInfoParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QuerySmfRegListParams defines parameters for QuerySmfRegList.
type QuerySmfRegListParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QuerySmfRegistrationParams defines parameters for QuerySmfRegistration.
type QuerySmfRegistrationParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QuerySmsfContext3gppParams defines parameters for QuerySmsfContext3gpp.
type QuerySmsfContext3gppParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QuerySmsfContextNon3gppParams defines parameters for QuerySmsfContextNon3gpp.
type QuerySmsfContextNon3gppParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryCoverageRestrictionDataParams defines parameters for QueryCoverageRestrictionData.
type QueryCoverageRestrictionDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// QueryEEDataParams defines parameters for QueryEEData.
type QueryEEDataParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// GetIdentityDataParams defines parameters for GetIdentityData.
type GetIdentityDataParams struct {
	// AppPortId Application port identifier
	AppPortId *externalRef7.AppPortId `form:"app-port-id,omitempty" json:"app-port-id,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// QueryLcsMoDataParams defines parameters for QueryLcsMoData.
type QueryLcsMoDataParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// QueryLcsPrivacyDataParams defines parameters for QueryLcsPrivacyData.
type QueryLcsPrivacyDataParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetNiddAuDataParams defines parameters for GetNiddAuData.
type GetNiddAuDataParams struct {
	// SingleNssai single NSSAI
	SingleNssai VarSnssai `form:"single-nssai" json:"single-nssai"`

	// Dnn DNN
	Dnn Dnn `form:"dnn" json:"dnn"`

	// MtcProviderInformation MTC Provider Information
	MtcProviderInformation externalRef2.MtcProviderInformation `form:"mtc-provider-information" json:"mtc-provider-information"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// QueryOperSpecDataParams defines parameters for QueryOperSpecData.
type QueryOperSpecDataParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// ModifyOperSpecDataApplicationJSONPatchPlusJSONBody defines parameters for ModifyOperSpecData.
type ModifyOperSpecDataApplicationJSONPatchPlusJSONBody = []externalRef2.PatchItem

// ModifyOperSpecDataParams defines parameters for ModifyOperSpecData.
type ModifyOperSpecDataParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// GetppDataParams defines parameters for GetppData.
type GetppDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// ModifyPpDataApplicationJSONPatchPlusJSONBody defines parameters for ModifyPpData.
type ModifyPpDataApplicationJSONPatchPlusJSONBody = []externalRef2.PatchItem

// ModifyPpDataParams defines parameters for ModifyPpData.
type ModifyPpDataParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryPPDataParams defines parameters for QueryPPData.
type QueryPPDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryAuthSoRParams defines parameters for QueryAuthSoR.
type QueryAuthSoRParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// CreateAuthenticationSoRParams defines parameters for CreateAuthenticationSoR.
type CreateAuthenticationSoRParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryCagAckParams defines parameters for QueryCagAck.
type QueryCagAckParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// CreateCagUpdateAckParams defines parameters for CreateCagUpdateAck.
type CreateCagUpdateAckParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryNssaiAckParams defines parameters for QueryNssaiAck.
type QueryNssaiAckParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// CreateOrUpdateNssaiAckParams defines parameters for CreateOrUpdateNssaiAck.
type CreateOrUpdateNssaiAckParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryAuthUPUParams defines parameters for QueryAuthUPU.
type QueryAuthUPUParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// CreateAuthenticationUPUParams defines parameters for CreateAuthenticationUPU.
type CreateAuthenticationUPUParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// QueryV2xDataParams defines parameters for QueryV2xData.
type QueryV2xDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// QueryProvisionedDataParams defines parameters for QueryProvisionedData.
type QueryProvisionedDataParams struct {
	// DatasetNames List of dataset names
	DatasetNames *DatasetNames `form:"dataset-names,omitempty" json:"dataset-names,omitempty"`
}

// QueryAmDataParams defines parameters for QueryAmData.
type QueryAmDataParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// QueryLcsBcaDataParams defines parameters for QueryLcsBcaData.
type QueryLcsBcaDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// QuerySmDataParams defines parameters for QuerySmData.
type QuerySmDataParams struct {
	// SingleNssai single NSSAI
	SingleNssai *VarSnssai `form:"single-nssai,omitempty" json:"single-nssai,omitempty"`

	// Dnn DNN
	Dnn *Dnn `form:"dnn,omitempty" json:"dnn,omitempty"`

	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// QuerySmfSelectDataParams defines parameters for QuerySmfSelectData.
type QuerySmfSelectDataParams struct {
	// Fields attributes to be retrieved
	Fields *[]string `form:"fields,omitempty" json:"fields,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// QuerySmsDataParams defines parameters for QuerySmsData.
type QuerySmsDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// QuerySmsMngDataParams defines parameters for QuerySmsMngData.
type QuerySmsMngDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// QueryTraceDataParams defines parameters for QueryTraceData.
type QueryTraceDataParams struct {
	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// Modify5GVnGroupApplicationJSONPatchPlusJSONRequestBody defines body for Modify5GVnGroup for application/json-patch+json ContentType.
type Modify5GVnGroupApplicationJSONPatchPlusJSONRequestBody = Modify5GVnGroupApplicationJSONPatchPlusJSONBody

// Create5GVnGroupJSONRequestBody defines body for Create5GVnGroup for application/json ContentType.
type Create5GVnGroupJSONRequestBody = externalRef6.N5GVnGroupConfiguration

// CreateEeGroupSubscriptionsJSONRequestBody defines body for CreateEeGroupSubscriptions for application/json ContentType.
type CreateEeGroupSubscriptionsJSONRequestBody = EeSubscription

// ModifyEeGroupSubscriptionApplicationJSONPatchPlusJSONRequestBody defines body for ModifyEeGroupSubscription for application/json-patch+json ContentType.
type ModifyEeGroupSubscriptionApplicationJSONPatchPlusJSONRequestBody = ModifyEeGroupSubscriptionApplicationJSONPatchPlusJSONBody

// UpdateEeGroupSubscriptionsJSONRequestBody defines body for UpdateEeGroupSubscriptions for application/json ContentType.
type UpdateEeGroupSubscriptionsJSONRequestBody = EeSubscription

// SubscriptionDataSubscriptionsJSONRequestBody defines body for SubscriptionDataSubscriptions for application/json ContentType.
type SubscriptionDataSubscriptionsJSONRequestBody = SubscriptionDataSubscriptions

// ModifysubscriptionDataSubscriptionApplicationJSONPatchPlusJSONRequestBody defines body for ModifysubscriptionDataSubscription for application/json-patch+json ContentType.
type ModifysubscriptionDataSubscriptionApplicationJSONPatchPlusJSONRequestBody = ModifysubscriptionDataSubscriptionApplicationJSONPatchPlusJSONBody

// CreateAuthenticationStatusJSONRequestBody defines body for CreateAuthenticationStatus for application/json ContentType.
type CreateAuthenticationStatusJSONRequestBody = externalRef8.AuthEvent

// CreateIndividualAuthenticationStatusJSONRequestBody defines body for CreateIndividualAuthenticationStatus for application/json ContentType.
type CreateIndividualAuthenticationStatusJSONRequestBody = externalRef8.AuthEvent

// ModifyAuthenticationSubscriptionApplicationJSONPatchPlusJSONRequestBody defines body for ModifyAuthenticationSubscription for application/json-patch+json ContentType.
type ModifyAuthenticationSubscriptionApplicationJSONPatchPlusJSONRequestBody = ModifyAuthenticationSubscriptionApplicationJSONPatchPlusJSONBody

// AmfContext3gppApplicationJSONPatchPlusJSONRequestBody defines body for AmfContext3gpp for application/json-patch+json ContentType.
type AmfContext3gppApplicationJSONPatchPlusJSONRequestBody = AmfContext3gppApplicationJSONPatchPlusJSONBody

// CreateAmfContext3gppJSONRequestBody defines body for CreateAmfContext3gpp for application/json ContentType.
type CreateAmfContext3gppJSONRequestBody = Amf3GppAccessRegistration

// AmfContextNon3gppApplicationJSONPatchPlusJSONRequestBody defines body for AmfContextNon3gpp for application/json-patch+json ContentType.
type AmfContextNon3gppApplicationJSONPatchPlusJSONRequestBody = AmfContextNon3gppApplicationJSONPatchPlusJSONBody

// CreateAmfContextNon3gppJSONRequestBody defines body for CreateAmfContextNon3gpp for application/json ContentType.
type CreateAmfContextNon3gppJSONRequestBody = AmfNon3GppAccessRegistration

// CreateEeSubscriptionsJSONRequestBody defines body for CreateEeSubscriptions for application/json ContentType.
type CreateEeSubscriptionsJSONRequestBody = EeSubscription

// ModifyEesubscriptionApplicationJSONPatchPlusJSONRequestBody defines body for ModifyEesubscription for application/json-patch+json ContentType.
type ModifyEesubscriptionApplicationJSONPatchPlusJSONRequestBody = ModifyEesubscriptionApplicationJSONPatchPlusJSONBody

// UpdateEesubscriptionsJSONRequestBody defines body for UpdateEesubscriptions for application/json ContentType.
type UpdateEesubscriptionsJSONRequestBody = EeSubscription

// ModifyAmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody defines body for ModifyAmfSubscriptionInfo for application/json-patch+json ContentType.
type ModifyAmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody = ModifyAmfSubscriptionInfoApplicationJSONPatchPlusJSONBody

// CreateAMFSubscriptionsJSONRequestBody defines body for CreateAMFSubscriptions for application/json ContentType.
type CreateAMFSubscriptionsJSONRequestBody = CreateAMFSubscriptionsJSONBody

// ModifyHssSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody defines body for ModifyHssSubscriptionInfo for application/json-patch+json ContentType.
type ModifyHssSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody = ModifyHssSubscriptionInfoApplicationJSONPatchPlusJSONBody

// CreateHSSSubscriptionsJSONRequestBody defines body for CreateHSSSubscriptions for application/json ContentType.
type CreateHSSSubscriptionsJSONRequestBody = HssSubscriptionInfo

// ModifySmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody defines body for ModifySmfSubscriptionInfo for application/json-patch+json ContentType.
type ModifySmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody = ModifySmfSubscriptionInfoApplicationJSONPatchPlusJSONBody

// CreateSMFSubscriptionsJSONRequestBody defines body for CreateSMFSubscriptions for application/json ContentType.
type CreateSMFSubscriptionsJSONRequestBody = SmfSubscriptionInfo

// ModifyIpSmGwContextApplicationJSONPatchPlusJSONRequestBody defines body for ModifyIpSmGwContext for application/json-patch+json ContentType.
type ModifyIpSmGwContextApplicationJSONPatchPlusJSONRequestBody = ModifyIpSmGwContextApplicationJSONPatchPlusJSONBody

// CreateIpSmGwContextJSONRequestBody defines body for CreateIpSmGwContext for application/json ContentType.
type CreateIpSmGwContextJSONRequestBody = IpSmGwRegistration

// ModifyMessageWaitingDataApplicationJSONPatchPlusJSONRequestBody defines body for ModifyMessageWaitingData for application/json-patch+json ContentType.
type ModifyMessageWaitingDataApplicationJSONPatchPlusJSONRequestBody = ModifyMessageWaitingDataApplicationJSONPatchPlusJSONBody

// CreateMessageWaitingDataJSONRequestBody defines body for CreateMessageWaitingData for application/json ContentType.
type CreateMessageWaitingDataJSONRequestBody = MessageWaitingData

// CreateSdmSubscriptionsJSONRequestBody defines body for CreateSdmSubscriptions for application/json ContentType.
type CreateSdmSubscriptionsJSONRequestBody = SdmSubscription

// ModifysdmSubscriptionApplicationJSONPatchPlusJSONRequestBody defines body for ModifysdmSubscription for application/json-patch+json ContentType.
type ModifysdmSubscriptionApplicationJSONPatchPlusJSONRequestBody = ModifysdmSubscriptionApplicationJSONPatchPlusJSONBody

// UpdatesdmsubscriptionsJSONRequestBody defines body for Updatesdmsubscriptions for application/json ContentType.
type UpdatesdmsubscriptionsJSONRequestBody = SdmSubscription

// ModifyHssSDMSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody defines body for ModifyHssSDMSubscriptionInfo for application/json-patch+json ContentType.
type ModifyHssSDMSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody = ModifyHssSDMSubscriptionInfoApplicationJSONPatchPlusJSONBody

// CreateHSSSDMSubscriptionsJSONRequestBody defines body for CreateHSSSDMSubscriptions for application/json ContentType.
type CreateHSSSDMSubscriptionsJSONRequestBody = HssSubscriptionInfo

// CreateOrUpdateSmfRegistrationJSONRequestBody defines body for CreateOrUpdateSmfRegistration for application/json ContentType.
type CreateOrUpdateSmfRegistrationJSONRequestBody = SmfRegistration

// CreateSmsfContext3gppJSONRequestBody defines body for CreateSmsfContext3gpp for application/json ContentType.
type CreateSmsfContext3gppJSONRequestBody = SmsfRegistration

// CreateSmsfContextNon3gppJSONRequestBody defines body for CreateSmsfContextNon3gpp for application/json ContentType.
type CreateSmsfContextNon3gppJSONRequestBody = SmsfRegistration

// ModifyOperSpecDataApplicationJSONPatchPlusJSONRequestBody defines body for ModifyOperSpecData for application/json-patch+json ContentType.
type ModifyOperSpecDataApplicationJSONPatchPlusJSONRequestBody = ModifyOperSpecDataApplicationJSONPatchPlusJSONBody

// ModifyPpDataApplicationJSONPatchPlusJSONRequestBody defines body for ModifyPpData for application/json-patch+json ContentType.
type ModifyPpDataApplicationJSONPatchPlusJSONRequestBody = ModifyPpDataApplicationJSONPatchPlusJSONBody

// CreateAuthenticationSoRJSONRequestBody defines body for CreateAuthenticationSoR for application/json ContentType.
type CreateAuthenticationSoRJSONRequestBody = SorData

// CreateCagUpdateAckJSONRequestBody defines body for CreateCagUpdateAck for application/json ContentType.
type CreateCagUpdateAckJSONRequestBody = CagAckData

// CreateOrUpdateNssaiAckJSONRequestBody defines body for CreateOrUpdateNssaiAck for application/json ContentType.
type CreateOrUpdateNssaiAckJSONRequestBody = NssaiAckData

// CreateAuthenticationUPUJSONRequestBody defines body for CreateAuthenticationUPU for application/json ContentType.
type CreateAuthenticationUPUJSONRequestBody = UpuData

// Getter for additional properties for AllowedMtcProviderInfo. Returns the specified
// element and whether it was found
func (a AllowedMtcProviderInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AllowedMtcProviderInfo
func (a *AllowedMtcProviderInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AllowedMtcProviderInfo to handle AdditionalProperties
func (a *AllowedMtcProviderInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afId"]; found {
		err = json.Unmarshal(raw, &a.AfId)
		if err != nil {
			return fmt.Errorf("error reading 'afId': %w", err)
		}
		delete(object, "afId")
	}

	if raw, found := object["mtcProviderInformation"]; found {
		err = json.Unmarshal(raw, &a.MtcProviderInformation)
		if err != nil {
			return fmt.Errorf("error reading 'mtcProviderInformation': %w", err)
		}
		delete(object, "mtcProviderInformation")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AllowedMtcProviderInfo to handle AdditionalProperties
func (a AllowedMtcProviderInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfId != nil {
		object["afId"], err = json.Marshal(a.AfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afId': %w", err)
		}
	}

	if a.MtcProviderInformation != nil {
		object["mtcProviderInformation"], err = json.Marshal(a.MtcProviderInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtcProviderInformation': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfSubscriptionInfo. Returns the specified
// element and whether it was found
func (a AmfSubscriptionInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfSubscriptionInfo
func (a *AmfSubscriptionInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfSubscriptionInfo to handle AdditionalProperties
func (a *AmfSubscriptionInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["amfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'amfInstanceId': %w", err)
		}
		delete(object, "amfInstanceId")
	}

	if raw, found := object["subsChangeNotifyCorrelationId"]; found {
		err = json.Unmarshal(raw, &a.SubsChangeNotifyCorrelationId)
		if err != nil {
			return fmt.Errorf("error reading 'subsChangeNotifyCorrelationId': %w", err)
		}
		delete(object, "subsChangeNotifyCorrelationId")
	}

	if raw, found := object["subscriptionId"]; found {
		err = json.Unmarshal(raw, &a.SubscriptionId)
		if err != nil {
			return fmt.Errorf("error reading 'subscriptionId': %w", err)
		}
		delete(object, "subscriptionId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfSubscriptionInfo to handle AdditionalProperties
func (a AmfSubscriptionInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["amfInstanceId"], err = json.Marshal(a.AmfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'amfInstanceId': %w", err)
	}

	if a.SubsChangeNotifyCorrelationId != nil {
		object["subsChangeNotifyCorrelationId"], err = json.Marshal(a.SubsChangeNotifyCorrelationId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subsChangeNotifyCorrelationId': %w", err)
		}
	}

	object["subscriptionId"], err = json.Marshal(a.SubscriptionId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subscriptionId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AuthenticationSubscription. Returns the specified
// element and whether it was found
func (a AuthenticationSubscription) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AuthenticationSubscription
func (a *AuthenticationSubscription) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AuthenticationSubscription to handle AdditionalProperties
func (a *AuthenticationSubscription) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["algorithmId"]; found {
		err = json.Unmarshal(raw, &a.AlgorithmId)
		if err != nil {
			return fmt.Errorf("error reading 'algorithmId': %w", err)
		}
		delete(object, "algorithmId")
	}

	if raw, found := object["authenticationManagementField"]; found {
		err = json.Unmarshal(raw, &a.AuthenticationManagementField)
		if err != nil {
			return fmt.Errorf("error reading 'authenticationManagementField': %w", err)
		}
		delete(object, "authenticationManagementField")
	}

	if raw, found := object["authenticationMethod"]; found {
		err = json.Unmarshal(raw, &a.AuthenticationMethod)
		if err != nil {
			return fmt.Errorf("error reading 'authenticationMethod': %w", err)
		}
		delete(object, "authenticationMethod")
	}

	if raw, found := object["encOpcKey"]; found {
		err = json.Unmarshal(raw, &a.EncOpcKey)
		if err != nil {
			return fmt.Errorf("error reading 'encOpcKey': %w", err)
		}
		delete(object, "encOpcKey")
	}

	if raw, found := object["encPermanentKey"]; found {
		err = json.Unmarshal(raw, &a.EncPermanentKey)
		if err != nil {
			return fmt.Errorf("error reading 'encPermanentKey': %w", err)
		}
		delete(object, "encPermanentKey")
	}

	if raw, found := object["encTopcKey"]; found {
		err = json.Unmarshal(raw, &a.EncTopcKey)
		if err != nil {
			return fmt.Errorf("error reading 'encTopcKey': %w", err)
		}
		delete(object, "encTopcKey")
	}

	if raw, found := object["n5gcAuthMethod"]; found {
		err = json.Unmarshal(raw, &a.N5gcAuthMethod)
		if err != nil {
			return fmt.Errorf("error reading 'n5gcAuthMethod': %w", err)
		}
		delete(object, "n5gcAuthMethod")
	}

	if raw, found := object["protectionParameterId"]; found {
		err = json.Unmarshal(raw, &a.ProtectionParameterId)
		if err != nil {
			return fmt.Errorf("error reading 'protectionParameterId': %w", err)
		}
		delete(object, "protectionParameterId")
	}

	if raw, found := object["rgAuthenticationInd"]; found {
		err = json.Unmarshal(raw, &a.RgAuthenticationInd)
		if err != nil {
			return fmt.Errorf("error reading 'rgAuthenticationInd': %w", err)
		}
		delete(object, "rgAuthenticationInd")
	}

	if raw, found := object["sequenceNumber"]; found {
		err = json.Unmarshal(raw, &a.SequenceNumber)
		if err != nil {
			return fmt.Errorf("error reading 'sequenceNumber': %w", err)
		}
		delete(object, "sequenceNumber")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["vectorGenerationInHss"]; found {
		err = json.Unmarshal(raw, &a.VectorGenerationInHss)
		if err != nil {
			return fmt.Errorf("error reading 'vectorGenerationInHss': %w", err)
		}
		delete(object, "vectorGenerationInHss")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AuthenticationSubscription to handle AdditionalProperties
func (a AuthenticationSubscription) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AlgorithmId != nil {
		object["algorithmId"], err = json.Marshal(a.AlgorithmId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'algorithmId': %w", err)
		}
	}

	if len(a.AuthenticationManagementField) != 0 {
		object["authenticationManagementField"], err = json.Marshal(a.AuthenticationManagementField)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'authenticationManagementField': %w", err)
		}
	}

	object["authenticationMethod"], err = json.Marshal(a.AuthenticationMethod)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'authenticationMethod': %w", err)
	}

	if a.EncOpcKey != nil {
		object["encOpcKey"], err = json.Marshal(a.EncOpcKey)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'encOpcKey': %w", err)
		}
	}

	if a.EncPermanentKey != nil {
		object["encPermanentKey"], err = json.Marshal(a.EncPermanentKey)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'encPermanentKey': %w", err)
		}
	}

	if a.EncTopcKey != nil {
		object["encTopcKey"], err = json.Marshal(a.EncTopcKey)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'encTopcKey': %w", err)
		}
	}

	if a.N5gcAuthMethod != nil {
		object["n5gcAuthMethod"], err = json.Marshal(a.N5gcAuthMethod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n5gcAuthMethod': %w", err)
		}
	}

	if a.ProtectionParameterId != nil {
		object["protectionParameterId"], err = json.Marshal(a.ProtectionParameterId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'protectionParameterId': %w", err)
		}
	}

	if a.RgAuthenticationInd != nil {
		object["rgAuthenticationInd"], err = json.Marshal(a.RgAuthenticationInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rgAuthenticationInd': %w", err)
		}
	}

	if a.SequenceNumber != nil {
		object["sequenceNumber"], err = json.Marshal(a.SequenceNumber)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sequenceNumber': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.VectorGenerationInHss != nil {
		object["vectorGenerationInHss"], err = json.Marshal(a.VectorGenerationInHss)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vectorGenerationInHss': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CagAckData. Returns the specified
// element and whether it was found
func (a CagAckData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CagAckData
func (a *CagAckData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CagAckData to handle AdditionalProperties
func (a *CagAckData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["provisioningTime"]; found {
		err = json.Unmarshal(raw, &a.ProvisioningTime)
		if err != nil {
			return fmt.Errorf("error reading 'provisioningTime': %w", err)
		}
		delete(object, "provisioningTime")
	}

	if raw, found := object["ueUpdateStatus"]; found {
		err = json.Unmarshal(raw, &a.UeUpdateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'ueUpdateStatus': %w", err)
		}
		delete(object, "ueUpdateStatus")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CagAckData to handle AdditionalProperties
func (a CagAckData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["provisioningTime"], err = json.Marshal(a.ProvisioningTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'provisioningTime': %w", err)
	}

	object["ueUpdateStatus"], err = json.Marshal(a.UeUpdateStatus)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ueUpdateStatus': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ContextDataSets. Returns the specified
// element and whether it was found
func (a ContextDataSets) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ContextDataSets
func (a *ContextDataSets) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ContextDataSets to handle AdditionalProperties
func (a *ContextDataSets) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["amf3Gpp"]; found {
		err = json.Unmarshal(raw, &a.Amf3Gpp)
		if err != nil {
			return fmt.Errorf("error reading 'amf3Gpp': %w", err)
		}
		delete(object, "amf3Gpp")
	}

	if raw, found := object["amfNon3Gpp"]; found {
		err = json.Unmarshal(raw, &a.AmfNon3Gpp)
		if err != nil {
			return fmt.Errorf("error reading 'amfNon3Gpp': %w", err)
		}
		delete(object, "amfNon3Gpp")
	}

	if raw, found := object["eeSubscriptions"]; found {
		err = json.Unmarshal(raw, &a.EeSubscriptions)
		if err != nil {
			return fmt.Errorf("error reading 'eeSubscriptions': %w", err)
		}
		delete(object, "eeSubscriptions")
	}

	if raw, found := object["ipSmGw"]; found {
		err = json.Unmarshal(raw, &a.IpSmGw)
		if err != nil {
			return fmt.Errorf("error reading 'ipSmGw': %w", err)
		}
		delete(object, "ipSmGw")
	}

	if raw, found := object["sdmSubscriptions"]; found {
		err = json.Unmarshal(raw, &a.SdmSubscriptions)
		if err != nil {
			return fmt.Errorf("error reading 'sdmSubscriptions': %w", err)
		}
		delete(object, "sdmSubscriptions")
	}

	if raw, found := object["smfRegistrations"]; found {
		err = json.Unmarshal(raw, &a.SmfRegistrations)
		if err != nil {
			return fmt.Errorf("error reading 'smfRegistrations': %w", err)
		}
		delete(object, "smfRegistrations")
	}

	if raw, found := object["smsf3GppAccess"]; found {
		err = json.Unmarshal(raw, &a.Smsf3GppAccess)
		if err != nil {
			return fmt.Errorf("error reading 'smsf3GppAccess': %w", err)
		}
		delete(object, "smsf3GppAccess")
	}

	if raw, found := object["smsfNon3GppAccess"]; found {
		err = json.Unmarshal(raw, &a.SmsfNon3GppAccess)
		if err != nil {
			return fmt.Errorf("error reading 'smsfNon3GppAccess': %w", err)
		}
		delete(object, "smsfNon3GppAccess")
	}

	if raw, found := object["subscriptionDataSubscriptions"]; found {
		err = json.Unmarshal(raw, &a.SubscriptionDataSubscriptions)
		if err != nil {
			return fmt.Errorf("error reading 'subscriptionDataSubscriptions': %w", err)
		}
		delete(object, "subscriptionDataSubscriptions")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ContextDataSets to handle AdditionalProperties
func (a ContextDataSets) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Amf3Gpp != nil {
		object["amf3Gpp"], err = json.Marshal(a.Amf3Gpp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amf3Gpp': %w", err)
		}
	}

	if a.AmfNon3Gpp != nil {
		object["amfNon3Gpp"], err = json.Marshal(a.AmfNon3Gpp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfNon3Gpp': %w", err)
		}
	}

	if len(a.EeSubscriptions) != 0 {
		object["eeSubscriptions"], err = json.Marshal(a.EeSubscriptions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eeSubscriptions': %w", err)
		}
	}

	if a.IpSmGw != nil {
		object["ipSmGw"], err = json.Marshal(a.IpSmGw)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipSmGw': %w", err)
		}
	}

	if len(a.SdmSubscriptions) != 0 {
		object["sdmSubscriptions"], err = json.Marshal(a.SdmSubscriptions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sdmSubscriptions': %w", err)
		}
	}

	if a.SmfRegistrations != nil {
		object["smfRegistrations"], err = json.Marshal(a.SmfRegistrations)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfRegistrations': %w", err)
		}
	}

	if a.Smsf3GppAccess != nil {
		object["smsf3GppAccess"], err = json.Marshal(a.Smsf3GppAccess)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsf3GppAccess': %w", err)
		}
	}

	if a.SmsfNon3GppAccess != nil {
		object["smsfNon3GppAccess"], err = json.Marshal(a.SmsfNon3GppAccess)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsfNon3GppAccess': %w", err)
		}
	}

	if len(a.SubscriptionDataSubscriptions) != 0 {
		object["subscriptionDataSubscriptions"], err = json.Marshal(a.SubscriptionDataSubscriptions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscriptionDataSubscriptions': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DataChangeNotify. Returns the specified
// element and whether it was found
func (a DataChangeNotify) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DataChangeNotify
func (a *DataChangeNotify) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DataChangeNotify to handle AdditionalProperties
func (a *DataChangeNotify) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["additionalSdmSubscriptions"]; found {
		err = json.Unmarshal(raw, &a.AdditionalSdmSubscriptions)
		if err != nil {
			return fmt.Errorf("error reading 'additionalSdmSubscriptions': %w", err)
		}
		delete(object, "additionalSdmSubscriptions")
	}

	if raw, found := object["notifyItems"]; found {
		err = json.Unmarshal(raw, &a.NotifyItems)
		if err != nil {
			return fmt.Errorf("error reading 'notifyItems': %w", err)
		}
		delete(object, "notifyItems")
	}

	if raw, found := object["originalCallbackReference"]; found {
		err = json.Unmarshal(raw, &a.OriginalCallbackReference)
		if err != nil {
			return fmt.Errorf("error reading 'originalCallbackReference': %w", err)
		}
		delete(object, "originalCallbackReference")
	}

	if raw, found := object["sdmSubscription"]; found {
		err = json.Unmarshal(raw, &a.SdmSubscription)
		if err != nil {
			return fmt.Errorf("error reading 'sdmSubscription': %w", err)
		}
		delete(object, "sdmSubscription")
	}

	if raw, found := object["subscriptionDataSubscriptions"]; found {
		err = json.Unmarshal(raw, &a.SubscriptionDataSubscriptions)
		if err != nil {
			return fmt.Errorf("error reading 'subscriptionDataSubscriptions': %w", err)
		}
		delete(object, "subscriptionDataSubscriptions")
	}

	if raw, found := object["ueId"]; found {
		err = json.Unmarshal(raw, &a.UeId)
		if err != nil {
			return fmt.Errorf("error reading 'ueId': %w", err)
		}
		delete(object, "ueId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DataChangeNotify to handle AdditionalProperties
func (a DataChangeNotify) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AdditionalSdmSubscriptions) != 0 {
		object["additionalSdmSubscriptions"], err = json.Marshal(a.AdditionalSdmSubscriptions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalSdmSubscriptions': %w", err)
		}
	}

	if len(a.NotifyItems) != 0 {
		object["notifyItems"], err = json.Marshal(a.NotifyItems)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifyItems': %w", err)
		}
	}

	if len(a.OriginalCallbackReference) != 0 {
		object["originalCallbackReference"], err = json.Marshal(a.OriginalCallbackReference)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'originalCallbackReference': %w", err)
		}
	}

	if a.SdmSubscription != nil {
		object["sdmSubscription"], err = json.Marshal(a.SdmSubscription)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sdmSubscription': %w", err)
		}
	}

	if a.SubscriptionDataSubscriptions != nil {
		object["subscriptionDataSubscriptions"], err = json.Marshal(a.SubscriptionDataSubscriptions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscriptionDataSubscriptions': %w", err)
		}
	}

	if len(a.UeId) != 0 {
		object["ueId"], err = json.Marshal(a.UeId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EeGroupProfileData. Returns the specified
// element and whether it was found
func (a EeGroupProfileData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EeGroupProfileData
func (a *EeGroupProfileData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EeGroupProfileData to handle AdditionalProperties
func (a *EeGroupProfileData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedMtcProvider"]; found {
		err = json.Unmarshal(raw, &a.AllowedMtcProvider)
		if err != nil {
			return fmt.Errorf("error reading 'allowedMtcProvider': %w", err)
		}
		delete(object, "allowedMtcProvider")
	}

	if raw, found := object["restrictedEventTypes"]; found {
		err = json.Unmarshal(raw, &a.RestrictedEventTypes)
		if err != nil {
			return fmt.Errorf("error reading 'restrictedEventTypes': %w", err)
		}
		delete(object, "restrictedEventTypes")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EeGroupProfileData to handle AdditionalProperties
func (a EeGroupProfileData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AllowedMtcProvider != nil {
		object["allowedMtcProvider"], err = json.Marshal(a.AllowedMtcProvider)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedMtcProvider': %w", err)
		}
	}

	if a.RestrictedEventTypes != nil {
		object["restrictedEventTypes"], err = json.Marshal(a.RestrictedEventTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'restrictedEventTypes': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EeProfileData. Returns the specified
// element and whether it was found
func (a EeProfileData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EeProfileData
func (a *EeProfileData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EeProfileData to handle AdditionalProperties
func (a *EeProfileData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedMtcProvider"]; found {
		err = json.Unmarshal(raw, &a.AllowedMtcProvider)
		if err != nil {
			return fmt.Errorf("error reading 'allowedMtcProvider': %w", err)
		}
		delete(object, "allowedMtcProvider")
	}

	if raw, found := object["restrictedEventTypes"]; found {
		err = json.Unmarshal(raw, &a.RestrictedEventTypes)
		if err != nil {
			return fmt.Errorf("error reading 'restrictedEventTypes': %w", err)
		}
		delete(object, "restrictedEventTypes")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EeProfileData to handle AdditionalProperties
func (a EeProfileData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AllowedMtcProvider != nil {
		object["allowedMtcProvider"], err = json.Marshal(a.AllowedMtcProvider)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedMtcProvider': %w", err)
		}
	}

	if a.RestrictedEventTypes != nil {
		object["restrictedEventTypes"], err = json.Marshal(a.RestrictedEventTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'restrictedEventTypes': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HssSubscriptionInfo. Returns the specified
// element and whether it was found
func (a HssSubscriptionInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HssSubscriptionInfo
func (a *HssSubscriptionInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HssSubscriptionInfo to handle AdditionalProperties
func (a *HssSubscriptionInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["hssSubscriptionList"]; found {
		err = json.Unmarshal(raw, &a.HssSubscriptionList)
		if err != nil {
			return fmt.Errorf("error reading 'hssSubscriptionList': %w", err)
		}
		delete(object, "hssSubscriptionList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HssSubscriptionInfo to handle AdditionalProperties
func (a HssSubscriptionInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["hssSubscriptionList"], err = json.Marshal(a.HssSubscriptionList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'hssSubscriptionList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HssSubscriptionItem. Returns the specified
// element and whether it was found
func (a HssSubscriptionItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HssSubscriptionItem
func (a *HssSubscriptionItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HssSubscriptionItem to handle AdditionalProperties
func (a *HssSubscriptionItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["hssInstanceId"]; found {
		err = json.Unmarshal(raw, &a.HssInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'hssInstanceId': %w", err)
		}
		delete(object, "hssInstanceId")
	}

	if raw, found := object["subscriptionId"]; found {
		err = json.Unmarshal(raw, &a.SubscriptionId)
		if err != nil {
			return fmt.Errorf("error reading 'subscriptionId': %w", err)
		}
		delete(object, "subscriptionId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HssSubscriptionItem to handle AdditionalProperties
func (a HssSubscriptionItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["hssInstanceId"], err = json.Marshal(a.HssInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'hssInstanceId': %w", err)
	}

	object["subscriptionId"], err = json.Marshal(a.SubscriptionId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subscriptionId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for IdentityData. Returns the specified
// element and whether it was found
func (a IdentityData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for IdentityData
func (a *IdentityData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for IdentityData to handle AdditionalProperties
func (a *IdentityData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["gpsiList"]; found {
		err = json.Unmarshal(raw, &a.GpsiList)
		if err != nil {
			return fmt.Errorf("error reading 'gpsiList': %w", err)
		}
		delete(object, "gpsiList")
	}

	if raw, found := object["supiList"]; found {
		err = json.Unmarshal(raw, &a.SupiList)
		if err != nil {
			return fmt.Errorf("error reading 'supiList': %w", err)
		}
		delete(object, "supiList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for IdentityData to handle AdditionalProperties
func (a IdentityData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.GpsiList) != 0 {
		object["gpsiList"], err = json.Marshal(a.GpsiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsiList': %w", err)
		}
	}

	if len(a.SupiList) != 0 {
		object["supiList"], err = json.Marshal(a.SupiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supiList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MessageWaitingData. Returns the specified
// element and whether it was found
func (a MessageWaitingData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MessageWaitingData
func (a *MessageWaitingData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MessageWaitingData to handle AdditionalProperties
func (a *MessageWaitingData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["mwdList"]; found {
		err = json.Unmarshal(raw, &a.MwdList)
		if err != nil {
			return fmt.Errorf("error reading 'mwdList': %w", err)
		}
		delete(object, "mwdList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MessageWaitingData to handle AdditionalProperties
func (a MessageWaitingData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.MwdList) != 0 {
		object["mwdList"], err = json.Marshal(a.MwdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mwdList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MtcProvider. Returns the specified
// element and whether it was found
func (a MtcProvider) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MtcProvider
func (a *MtcProvider) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MtcProvider to handle AdditionalProperties
func (a *MtcProvider) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afId"]; found {
		err = json.Unmarshal(raw, &a.AfId)
		if err != nil {
			return fmt.Errorf("error reading 'afId': %w", err)
		}
		delete(object, "afId")
	}

	if raw, found := object["mtcProviderInformation"]; found {
		err = json.Unmarshal(raw, &a.MtcProviderInformation)
		if err != nil {
			return fmt.Errorf("error reading 'mtcProviderInformation': %w", err)
		}
		delete(object, "mtcProviderInformation")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MtcProvider to handle AdditionalProperties
func (a MtcProvider) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfId != nil {
		object["afId"], err = json.Marshal(a.AfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afId': %w", err)
		}
	}

	if a.MtcProviderInformation != nil {
		object["mtcProviderInformation"], err = json.Marshal(a.MtcProviderInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtcProviderInformation': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NssaiAckData. Returns the specified
// element and whether it was found
func (a NssaiAckData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NssaiAckData
func (a *NssaiAckData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NssaiAckData to handle AdditionalProperties
func (a *NssaiAckData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["provisioningTime"]; found {
		err = json.Unmarshal(raw, &a.ProvisioningTime)
		if err != nil {
			return fmt.Errorf("error reading 'provisioningTime': %w", err)
		}
		delete(object, "provisioningTime")
	}

	if raw, found := object["ueUpdateStatus"]; found {
		err = json.Unmarshal(raw, &a.UeUpdateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'ueUpdateStatus': %w", err)
		}
		delete(object, "ueUpdateStatus")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NssaiAckData to handle AdditionalProperties
func (a NssaiAckData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["provisioningTime"], err = json.Marshal(a.ProvisioningTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'provisioningTime': %w", err)
	}

	object["ueUpdateStatus"], err = json.Marshal(a.UeUpdateStatus)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ueUpdateStatus': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for OperatorSpecificDataContainer. Returns the specified
// element and whether it was found
func (a OperatorSpecificDataContainer) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for OperatorSpecificDataContainer
func (a *OperatorSpecificDataContainer) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for OperatorSpecificDataContainer to handle AdditionalProperties
func (a *OperatorSpecificDataContainer) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dataType"]; found {
		err = json.Unmarshal(raw, &a.DataType)
		if err != nil {
			return fmt.Errorf("error reading 'dataType': %w", err)
		}
		delete(object, "dataType")
	}

	if raw, found := object["dataTypeDefinition"]; found {
		err = json.Unmarshal(raw, &a.DataTypeDefinition)
		if err != nil {
			return fmt.Errorf("error reading 'dataTypeDefinition': %w", err)
		}
		delete(object, "dataTypeDefinition")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["value"]; found {
		err = json.Unmarshal(raw, &a.Value)
		if err != nil {
			return fmt.Errorf("error reading 'value': %w", err)
		}
		delete(object, "value")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for OperatorSpecificDataContainer to handle AdditionalProperties
func (a OperatorSpecificDataContainer) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["dataType"], err = json.Marshal(a.DataType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dataType': %w", err)
	}

	if a.DataTypeDefinition != nil {
		object["dataTypeDefinition"], err = json.Marshal(a.DataTypeDefinition)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dataTypeDefinition': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	object["value"], err = json.Marshal(a.Value)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'value': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Pp5gVnGroupProfileData. Returns the specified
// element and whether it was found
func (a Pp5gVnGroupProfileData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Pp5gVnGroupProfileData
func (a *Pp5gVnGroupProfileData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Pp5gVnGroupProfileData to handle AdditionalProperties
func (a *Pp5gVnGroupProfileData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedMtcProviders"]; found {
		err = json.Unmarshal(raw, &a.AllowedMtcProviders)
		if err != nil {
			return fmt.Errorf("error reading 'allowedMtcProviders': %w", err)
		}
		delete(object, "allowedMtcProviders")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Pp5gVnGroupProfileData to handle AdditionalProperties
func (a Pp5gVnGroupProfileData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AllowedMtcProviders != nil {
		object["allowedMtcProviders"], err = json.Marshal(a.AllowedMtcProviders)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedMtcProviders': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PpProfileData. Returns the specified
// element and whether it was found
func (a PpProfileData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PpProfileData
func (a *PpProfileData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PpProfileData to handle AdditionalProperties
func (a *PpProfileData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedMtcProviders"]; found {
		err = json.Unmarshal(raw, &a.AllowedMtcProviders)
		if err != nil {
			return fmt.Errorf("error reading 'allowedMtcProviders': %w", err)
		}
		delete(object, "allowedMtcProviders")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PpProfileData to handle AdditionalProperties
func (a PpProfileData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AllowedMtcProviders != nil {
		object["allowedMtcProviders"], err = json.Marshal(a.AllowedMtcProviders)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedMtcProviders': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ProvisionedDataSets. Returns the specified
// element and whether it was found
func (a ProvisionedDataSets) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProvisionedDataSets
func (a *ProvisionedDataSets) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProvisionedDataSets to handle AdditionalProperties
func (a *ProvisionedDataSets) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["amData"]; found {
		err = json.Unmarshal(raw, &a.AmData)
		if err != nil {
			return fmt.Errorf("error reading 'amData': %w", err)
		}
		delete(object, "amData")
	}

	if raw, found := object["lcsBcaData"]; found {
		err = json.Unmarshal(raw, &a.LcsBcaData)
		if err != nil {
			return fmt.Errorf("error reading 'lcsBcaData': %w", err)
		}
		delete(object, "lcsBcaData")
	}

	if raw, found := object["lcsMoData"]; found {
		err = json.Unmarshal(raw, &a.LcsMoData)
		if err != nil {
			return fmt.Errorf("error reading 'lcsMoData': %w", err)
		}
		delete(object, "lcsMoData")
	}

	if raw, found := object["lcsPrivacyData"]; found {
		err = json.Unmarshal(raw, &a.LcsPrivacyData)
		if err != nil {
			return fmt.Errorf("error reading 'lcsPrivacyData': %w", err)
		}
		delete(object, "lcsPrivacyData")
	}

	if raw, found := object["smData"]; found {
		err = json.Unmarshal(raw, &a.SmData)
		if err != nil {
			return fmt.Errorf("error reading 'smData': %w", err)
		}
		delete(object, "smData")
	}

	if raw, found := object["smfSelData"]; found {
		err = json.Unmarshal(raw, &a.SmfSelData)
		if err != nil {
			return fmt.Errorf("error reading 'smfSelData': %w", err)
		}
		delete(object, "smfSelData")
	}

	if raw, found := object["smsMngData"]; found {
		err = json.Unmarshal(raw, &a.SmsMngData)
		if err != nil {
			return fmt.Errorf("error reading 'smsMngData': %w", err)
		}
		delete(object, "smsMngData")
	}

	if raw, found := object["smsSubsData"]; found {
		err = json.Unmarshal(raw, &a.SmsSubsData)
		if err != nil {
			return fmt.Errorf("error reading 'smsSubsData': %w", err)
		}
		delete(object, "smsSubsData")
	}

	if raw, found := object["traceData"]; found {
		err = json.Unmarshal(raw, &a.TraceData)
		if err != nil {
			return fmt.Errorf("error reading 'traceData': %w", err)
		}
		delete(object, "traceData")
	}

	if raw, found := object["v2xData"]; found {
		err = json.Unmarshal(raw, &a.V2xData)
		if err != nil {
			return fmt.Errorf("error reading 'v2xData': %w", err)
		}
		delete(object, "v2xData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProvisionedDataSets to handle AdditionalProperties
func (a ProvisionedDataSets) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AmData != nil {
		object["amData"], err = json.Marshal(a.AmData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amData': %w", err)
		}
	}

	if a.LcsBcaData != nil {
		object["lcsBcaData"], err = json.Marshal(a.LcsBcaData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsBcaData': %w", err)
		}
	}

	if a.LcsMoData != nil {
		object["lcsMoData"], err = json.Marshal(a.LcsMoData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsMoData': %w", err)
		}
	}

	if a.LcsPrivacyData != nil {
		object["lcsPrivacyData"], err = json.Marshal(a.LcsPrivacyData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsPrivacyData': %w", err)
		}
	}

	if a.SmData != nil {
		object["smData"], err = json.Marshal(a.SmData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smData': %w", err)
		}
	}

	if a.SmfSelData != nil {
		object["smfSelData"], err = json.Marshal(a.SmfSelData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfSelData': %w", err)
		}
	}

	if a.SmsMngData != nil {
		object["smsMngData"], err = json.Marshal(a.SmsMngData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsMngData': %w", err)
		}
	}

	if a.SmsSubsData != nil {
		object["smsSubsData"], err = json.Marshal(a.SmsSubsData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsSubsData': %w", err)
		}
	}

	object["traceData"], err = json.Marshal(a.TraceData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'traceData': %w", err)
	}

	if a.V2xData != nil {
		object["v2xData"], err = json.Marshal(a.V2xData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'v2xData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SequenceNumber. Returns the specified
// element and whether it was found
func (a SequenceNumber) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SequenceNumber
func (a *SequenceNumber) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SequenceNumber to handle AdditionalProperties
func (a *SequenceNumber) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["difSign"]; found {
		err = json.Unmarshal(raw, &a.DifSign)
		if err != nil {
			return fmt.Errorf("error reading 'difSign': %w", err)
		}
		delete(object, "difSign")
	}

	if raw, found := object["indLength"]; found {
		err = json.Unmarshal(raw, &a.IndLength)
		if err != nil {
			return fmt.Errorf("error reading 'indLength': %w", err)
		}
		delete(object, "indLength")
	}

	if raw, found := object["lastIndexes"]; found {
		err = json.Unmarshal(raw, &a.LastIndexes)
		if err != nil {
			return fmt.Errorf("error reading 'lastIndexes': %w", err)
		}
		delete(object, "lastIndexes")
	}

	if raw, found := object["sqn"]; found {
		err = json.Unmarshal(raw, &a.Sqn)
		if err != nil {
			return fmt.Errorf("error reading 'sqn': %w", err)
		}
		delete(object, "sqn")
	}

	if raw, found := object["sqnScheme"]; found {
		err = json.Unmarshal(raw, &a.SqnScheme)
		if err != nil {
			return fmt.Errorf("error reading 'sqnScheme': %w", err)
		}
		delete(object, "sqnScheme")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SequenceNumber to handle AdditionalProperties
func (a SequenceNumber) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.DifSign) != 0 {
		object["difSign"], err = json.Marshal(a.DifSign)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'difSign': %w", err)
		}
	}

	if a.IndLength != nil {
		object["indLength"], err = json.Marshal(a.IndLength)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'indLength': %w", err)
		}
	}

	if a.LastIndexes != nil {
		object["lastIndexes"], err = json.Marshal(a.LastIndexes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lastIndexes': %w", err)
		}
	}

	if len(a.Sqn) != 0 {
		object["sqn"], err = json.Marshal(a.Sqn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sqn': %w", err)
		}
	}

	if a.SqnScheme != nil {
		object["sqnScheme"], err = json.Marshal(a.SqnScheme)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sqnScheme': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmfSubscriptionInfo. Returns the specified
// element and whether it was found
func (a SmfSubscriptionInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmfSubscriptionInfo
func (a *SmfSubscriptionInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmfSubscriptionInfo to handle AdditionalProperties
func (a *SmfSubscriptionInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["smfSubscriptionList"]; found {
		err = json.Unmarshal(raw, &a.SmfSubscriptionList)
		if err != nil {
			return fmt.Errorf("error reading 'smfSubscriptionList': %w", err)
		}
		delete(object, "smfSubscriptionList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmfSubscriptionInfo to handle AdditionalProperties
func (a SmfSubscriptionInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["smfSubscriptionList"], err = json.Marshal(a.SmfSubscriptionList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'smfSubscriptionList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmfSubscriptionItem. Returns the specified
// element and whether it was found
func (a SmfSubscriptionItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmfSubscriptionItem
func (a *SmfSubscriptionItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmfSubscriptionItem to handle AdditionalProperties
func (a *SmfSubscriptionItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["smfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.SmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'smfInstanceId': %w", err)
		}
		delete(object, "smfInstanceId")
	}

	if raw, found := object["subscriptionId"]; found {
		err = json.Unmarshal(raw, &a.SubscriptionId)
		if err != nil {
			return fmt.Errorf("error reading 'subscriptionId': %w", err)
		}
		delete(object, "subscriptionId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmfSubscriptionItem to handle AdditionalProperties
func (a SmfSubscriptionItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["smfInstanceId"], err = json.Marshal(a.SmfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'smfInstanceId': %w", err)
	}

	object["subscriptionId"], err = json.Marshal(a.SubscriptionId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subscriptionId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmscData. Returns the specified
// element and whether it was found
func (a SmscData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmscData
func (a *SmscData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmscData to handle AdditionalProperties
func (a *SmscData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["smscDiameterAddress"]; found {
		err = json.Unmarshal(raw, &a.SmscDiameterAddress)
		if err != nil {
			return fmt.Errorf("error reading 'smscDiameterAddress': %w", err)
		}
		delete(object, "smscDiameterAddress")
	}

	if raw, found := object["smscMapAddress"]; found {
		err = json.Unmarshal(raw, &a.SmscMapAddress)
		if err != nil {
			return fmt.Errorf("error reading 'smscMapAddress': %w", err)
		}
		delete(object, "smscMapAddress")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmscData to handle AdditionalProperties
func (a SmscData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.SmscDiameterAddress != nil {
		object["smscDiameterAddress"], err = json.Marshal(a.SmscDiameterAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smscDiameterAddress': %w", err)
		}
	}

	if len(a.SmscMapAddress) != 0 {
		object["smscMapAddress"], err = json.Marshal(a.SmscMapAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smscMapAddress': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SorData. Returns the specified
// element and whether it was found
func (a SorData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SorData
func (a *SorData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SorData to handle AdditionalProperties
func (a *SorData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["provisioningTime"]; found {
		err = json.Unmarshal(raw, &a.ProvisioningTime)
		if err != nil {
			return fmt.Errorf("error reading 'provisioningTime': %w", err)
		}
		delete(object, "provisioningTime")
	}

	if raw, found := object["sorMacIue"]; found {
		err = json.Unmarshal(raw, &a.SorMacIue)
		if err != nil {
			return fmt.Errorf("error reading 'sorMacIue': %w", err)
		}
		delete(object, "sorMacIue")
	}

	if raw, found := object["sorXmacIue"]; found {
		err = json.Unmarshal(raw, &a.SorXmacIue)
		if err != nil {
			return fmt.Errorf("error reading 'sorXmacIue': %w", err)
		}
		delete(object, "sorXmacIue")
	}

	if raw, found := object["ueUpdateStatus"]; found {
		err = json.Unmarshal(raw, &a.UeUpdateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'ueUpdateStatus': %w", err)
		}
		delete(object, "ueUpdateStatus")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SorData to handle AdditionalProperties
func (a SorData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["provisioningTime"], err = json.Marshal(a.ProvisioningTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'provisioningTime': %w", err)
	}

	if len(a.SorMacIue) != 0 {
		object["sorMacIue"], err = json.Marshal(a.SorMacIue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sorMacIue': %w", err)
		}
	}

	if len(a.SorXmacIue) != 0 {
		object["sorXmacIue"], err = json.Marshal(a.SorXmacIue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sorXmacIue': %w", err)
		}
	}

	object["ueUpdateStatus"], err = json.Marshal(a.UeUpdateStatus)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ueUpdateStatus': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SubscriptionDataSubscriptions. Returns the specified
// element and whether it was found
func (a SubscriptionDataSubscriptions) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SubscriptionDataSubscriptions
func (a *SubscriptionDataSubscriptions) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SubscriptionDataSubscriptions to handle AdditionalProperties
func (a *SubscriptionDataSubscriptions) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["callbackReference"]; found {
		err = json.Unmarshal(raw, &a.CallbackReference)
		if err != nil {
			return fmt.Errorf("error reading 'callbackReference': %w", err)
		}
		delete(object, "callbackReference")
	}

	if raw, found := object["expiry"]; found {
		err = json.Unmarshal(raw, &a.Expiry)
		if err != nil {
			return fmt.Errorf("error reading 'expiry': %w", err)
		}
		delete(object, "expiry")
	}

	if raw, found := object["monitoredResourceUris"]; found {
		err = json.Unmarshal(raw, &a.MonitoredResourceUris)
		if err != nil {
			return fmt.Errorf("error reading 'monitoredResourceUris': %w", err)
		}
		delete(object, "monitoredResourceUris")
	}

	if raw, found := object["originalCallbackReference"]; found {
		err = json.Unmarshal(raw, &a.OriginalCallbackReference)
		if err != nil {
			return fmt.Errorf("error reading 'originalCallbackReference': %w", err)
		}
		delete(object, "originalCallbackReference")
	}

	if raw, found := object["sdmSubscription"]; found {
		err = json.Unmarshal(raw, &a.SdmSubscription)
		if err != nil {
			return fmt.Errorf("error reading 'sdmSubscription': %w", err)
		}
		delete(object, "sdmSubscription")
	}

	if raw, found := object["subscriptionId"]; found {
		err = json.Unmarshal(raw, &a.SubscriptionId)
		if err != nil {
			return fmt.Errorf("error reading 'subscriptionId': %w", err)
		}
		delete(object, "subscriptionId")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["ueId"]; found {
		err = json.Unmarshal(raw, &a.UeId)
		if err != nil {
			return fmt.Errorf("error reading 'ueId': %w", err)
		}
		delete(object, "ueId")
	}

	if raw, found := object["uniqueSubscription"]; found {
		err = json.Unmarshal(raw, &a.UniqueSubscription)
		if err != nil {
			return fmt.Errorf("error reading 'uniqueSubscription': %w", err)
		}
		delete(object, "uniqueSubscription")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SubscriptionDataSubscriptions to handle AdditionalProperties
func (a SubscriptionDataSubscriptions) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["callbackReference"], err = json.Marshal(a.CallbackReference)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'callbackReference': %w", err)
	}

	if a.Expiry != nil {
		object["expiry"], err = json.Marshal(a.Expiry)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expiry': %w", err)
		}
	}

	object["monitoredResourceUris"], err = json.Marshal(a.MonitoredResourceUris)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'monitoredResourceUris': %w", err)
	}

	if a.OriginalCallbackReference != nil {
		object["originalCallbackReference"], err = json.Marshal(a.OriginalCallbackReference)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'originalCallbackReference': %w", err)
		}
	}

	if a.SdmSubscription != nil {
		object["sdmSubscription"], err = json.Marshal(a.SdmSubscription)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sdmSubscription': %w", err)
		}
	}

	if a.SubscriptionId != nil {
		object["subscriptionId"], err = json.Marshal(a.SubscriptionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscriptionId': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if len(a.UeId) != 0 {
		object["ueId"], err = json.Marshal(a.UeId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueId': %w", err)
		}
	}

	if a.UniqueSubscription != nil {
		object["uniqueSubscription"], err = json.Marshal(a.UniqueSubscription)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uniqueSubscription': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpuData. Returns the specified
// element and whether it was found
func (a UpuData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpuData
func (a *UpuData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpuData to handle AdditionalProperties
func (a *UpuData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["provisioningTime"]; found {
		err = json.Unmarshal(raw, &a.ProvisioningTime)
		if err != nil {
			return fmt.Errorf("error reading 'provisioningTime': %w", err)
		}
		delete(object, "provisioningTime")
	}

	if raw, found := object["ueUpdateStatus"]; found {
		err = json.Unmarshal(raw, &a.UeUpdateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'ueUpdateStatus': %w", err)
		}
		delete(object, "ueUpdateStatus")
	}

	if raw, found := object["upuMacIue"]; found {
		err = json.Unmarshal(raw, &a.UpuMacIue)
		if err != nil {
			return fmt.Errorf("error reading 'upuMacIue': %w", err)
		}
		delete(object, "upuMacIue")
	}

	if raw, found := object["upuXmacIue"]; found {
		err = json.Unmarshal(raw, &a.UpuXmacIue)
		if err != nil {
			return fmt.Errorf("error reading 'upuXmacIue': %w", err)
		}
		delete(object, "upuXmacIue")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpuData to handle AdditionalProperties
func (a UpuData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["provisioningTime"], err = json.Marshal(a.ProvisioningTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'provisioningTime': %w", err)
	}

	object["ueUpdateStatus"], err = json.Marshal(a.UeUpdateStatus)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ueUpdateStatus': %w", err)
	}

	if len(a.UpuMacIue) != 0 {
		object["upuMacIue"], err = json.Marshal(a.UpuMacIue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upuMacIue': %w", err)
		}
	}

	if len(a.UpuXmacIue) != 0 {
		object["upuXmacIue"], err = json.Marshal(a.UpuXmacIue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upuXmacIue': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsOperatorSpecificDataContainerValue0 returns the union data inside the OperatorSpecificDataContainer_Value as a OperatorSpecificDataContainerValue0
func (t OperatorSpecificDataContainer_Value) AsOperatorSpecificDataContainerValue0() (OperatorSpecificDataContainerValue0, error) {
	var body OperatorSpecificDataContainerValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOperatorSpecificDataContainerValue0 overwrites any union data inside the OperatorSpecificDataContainer_Value as the provided OperatorSpecificDataContainerValue0
func (t *OperatorSpecificDataContainer_Value) FromOperatorSpecificDataContainerValue0(v OperatorSpecificDataContainerValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOperatorSpecificDataContainerValue0 performs a merge with any union data inside the OperatorSpecificDataContainer_Value, using the provided OperatorSpecificDataContainerValue0
func (t *OperatorSpecificDataContainer_Value) MergeOperatorSpecificDataContainerValue0(v OperatorSpecificDataContainerValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsOperatorSpecificDataContainerValue1 returns the union data inside the OperatorSpecificDataContainer_Value as a OperatorSpecificDataContainerValue1
func (t OperatorSpecificDataContainer_Value) AsOperatorSpecificDataContainerValue1() (OperatorSpecificDataContainerValue1, error) {
	var body OperatorSpecificDataContainerValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOperatorSpecificDataContainerValue1 overwrites any union data inside the OperatorSpecificDataContainer_Value as the provided OperatorSpecificDataContainerValue1
func (t *OperatorSpecificDataContainer_Value) FromOperatorSpecificDataContainerValue1(v OperatorSpecificDataContainerValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOperatorSpecificDataContainerValue1 performs a merge with any union data inside the OperatorSpecificDataContainer_Value, using the provided OperatorSpecificDataContainerValue1
func (t *OperatorSpecificDataContainer_Value) MergeOperatorSpecificDataContainerValue1(v OperatorSpecificDataContainerValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsOperatorSpecificDataContainerValue2 returns the union data inside the OperatorSpecificDataContainer_Value as a OperatorSpecificDataContainerValue2
func (t OperatorSpecificDataContainer_Value) AsOperatorSpecificDataContainerValue2() (OperatorSpecificDataContainerValue2, error) {
	var body OperatorSpecificDataContainerValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOperatorSpecificDataContainerValue2 overwrites any union data inside the OperatorSpecificDataContainer_Value as the provided OperatorSpecificDataContainerValue2
func (t *OperatorSpecificDataContainer_Value) FromOperatorSpecificDataContainerValue2(v OperatorSpecificDataContainerValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOperatorSpecificDataContainerValue2 performs a merge with any union data inside the OperatorSpecificDataContainer_Value, using the provided OperatorSpecificDataContainerValue2
func (t *OperatorSpecificDataContainer_Value) MergeOperatorSpecificDataContainerValue2(v OperatorSpecificDataContainerValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsOperatorSpecificDataContainerValue3 returns the union data inside the OperatorSpecificDataContainer_Value as a OperatorSpecificDataContainerValue3
func (t OperatorSpecificDataContainer_Value) AsOperatorSpecificDataContainerValue3() (OperatorSpecificDataContainerValue3, error) {
	var body OperatorSpecificDataContainerValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOperatorSpecificDataContainerValue3 overwrites any union data inside the OperatorSpecificDataContainer_Value as the provided OperatorSpecificDataContainerValue3
func (t *OperatorSpecificDataContainer_Value) FromOperatorSpecificDataContainerValue3(v OperatorSpecificDataContainerValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOperatorSpecificDataContainerValue3 performs a merge with any union data inside the OperatorSpecificDataContainer_Value, using the provided OperatorSpecificDataContainerValue3
func (t *OperatorSpecificDataContainer_Value) MergeOperatorSpecificDataContainerValue3(v OperatorSpecificDataContainerValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsOperatorSpecificDataContainerValue4 returns the union data inside the OperatorSpecificDataContainer_Value as a OperatorSpecificDataContainerValue4
func (t OperatorSpecificDataContainer_Value) AsOperatorSpecificDataContainerValue4() (OperatorSpecificDataContainerValue4, error) {
	var body OperatorSpecificDataContainerValue4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOperatorSpecificDataContainerValue4 overwrites any union data inside the OperatorSpecificDataContainer_Value as the provided OperatorSpecificDataContainerValue4
func (t *OperatorSpecificDataContainer_Value) FromOperatorSpecificDataContainerValue4(v OperatorSpecificDataContainerValue4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOperatorSpecificDataContainerValue4 performs a merge with any union data inside the OperatorSpecificDataContainer_Value, using the provided OperatorSpecificDataContainerValue4
func (t *OperatorSpecificDataContainer_Value) MergeOperatorSpecificDataContainerValue4(v OperatorSpecificDataContainerValue4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t OperatorSpecificDataContainer_Value) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OperatorSpecificDataContainer_Value) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Query5GVnGroup request
	Query5GVnGroup(ctx context.Context, params *Query5GVnGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Query5GVnGroupInternal request
	Query5GVnGroupInternal(ctx context.Context, params *Query5GVnGroupInternalParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Query5GVNGroupPPData request
	Query5GVNGroupPPData(ctx context.Context, params *Query5GVNGroupPPDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete5GVnGroup request
	Delete5GVnGroup(ctx context.Context, externalGroupId externalRef7.ExtGroupId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get5GVnGroupConfiguration request
	Get5GVnGroupConfiguration(ctx context.Context, externalGroupId externalRef7.ExtGroupId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Modify5GVnGroupWithBody request with any body
	Modify5GVnGroupWithBody(ctx context.Context, externalGroupId externalRef7.ExtGroupId, params *Modify5GVnGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Modify5GVnGroupWithApplicationJSONPatchPlusJSONBody(ctx context.Context, externalGroupId externalRef7.ExtGroupId, params *Modify5GVnGroupParams, body Modify5GVnGroupApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Create5GVnGroupWithBody request with any body
	Create5GVnGroupWithBody(ctx context.Context, externalGroupId externalRef7.ExtGroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Create5GVnGroup(ctx context.Context, externalGroupId externalRef7.ExtGroupId, body Create5GVnGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupIdentifiers request
	GetGroupIdentifiers(ctx context.Context, params *GetGroupIdentifiersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryGroupEEData request
	QueryGroupEEData(ctx context.Context, ueGroupId VarUeGroupId, params *QueryGroupEEDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryEeGroupSubscriptions request
	QueryEeGroupSubscriptions(ctx context.Context, ueGroupId VarUeGroupId, params *QueryEeGroupSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEeGroupSubscriptionsWithBody request with any body
	CreateEeGroupSubscriptionsWithBody(ctx context.Context, ueGroupId VarUeGroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEeGroupSubscriptions(ctx context.Context, ueGroupId VarUeGroupId, body CreateEeGroupSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveEeGroupSubscriptions request
	RemoveEeGroupSubscriptions(ctx context.Context, ueGroupId VarUeGroupId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryEeGroupSubscription request
	QueryEeGroupSubscription(ctx context.Context, ueGroupId VarUeGroupId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyEeGroupSubscriptionWithBody request with any body
	ModifyEeGroupSubscriptionWithBody(ctx context.Context, ueGroupId VarUeGroupId, subsId string, params *ModifyEeGroupSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyEeGroupSubscriptionWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueGroupId VarUeGroupId, subsId string, params *ModifyEeGroupSubscriptionParams, body ModifyEeGroupSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEeGroupSubscriptionsWithBody request with any body
	UpdateEeGroupSubscriptionsWithBody(ctx context.Context, ueGroupId VarUeGroupId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEeGroupSubscriptions(ctx context.Context, ueGroupId VarUeGroupId, subsId string, body UpdateEeGroupSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSharedData request
	GetSharedData(ctx context.Context, params *GetSharedDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndividualSharedData request
	GetIndividualSharedData(ctx context.Context, sharedDataId externalRef7.SharedDataId, params *GetIndividualSharedDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveMultipleSubscriptionDataSubscriptions request
	RemoveMultipleSubscriptionDataSubscriptions(ctx context.Context, params *RemoveMultipleSubscriptionDataSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuerySubsToNotify request
	QuerySubsToNotify(ctx context.Context, params *QuerySubsToNotifyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubscriptionDataSubscriptionsWithBody request with any body
	SubscriptionDataSubscriptionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubscriptionDataSubscriptions(ctx context.Context, body SubscriptionDataSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemovesubscriptionDataSubscriptions request
	RemovesubscriptionDataSubscriptions(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuerySubscriptionDataSubscriptions request
	QuerySubscriptionDataSubscriptions(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifysubscriptionDataSubscriptionWithBody request with any body
	ModifysubscriptionDataSubscriptionWithBody(ctx context.Context, subsId string, params *ModifysubscriptionDataSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifysubscriptionDataSubscriptionWithApplicationJSONPatchPlusJSONBody(ctx context.Context, subsId string, params *ModifysubscriptionDataSubscriptionParams, body ModifysubscriptionDataSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAuthenticationStatus request
	DeleteAuthenticationStatus(ctx context.Context, ueId externalRef2.Supi, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryAuthenticationStatus request
	QueryAuthenticationStatus(ctx context.Context, ueId externalRef2.Supi, params *QueryAuthenticationStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAuthenticationStatusWithBody request with any body
	CreateAuthenticationStatusWithBody(ctx context.Context, ueId externalRef2.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAuthenticationStatus(ctx context.Context, ueId externalRef2.Supi, body CreateAuthenticationStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndividualAuthenticationStatus request
	DeleteIndividualAuthenticationStatus(ctx context.Context, ueId externalRef2.Supi, servingNetworkName externalRef8.ServingNetworkName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryIndividualAuthenticationStatus request
	QueryIndividualAuthenticationStatus(ctx context.Context, ueId externalRef2.Supi, servingNetworkName externalRef8.ServingNetworkName, params *QueryIndividualAuthenticationStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIndividualAuthenticationStatusWithBody request with any body
	CreateIndividualAuthenticationStatusWithBody(ctx context.Context, ueId externalRef2.Supi, servingNetworkName externalRef8.ServingNetworkName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIndividualAuthenticationStatus(ctx context.Context, ueId externalRef2.Supi, servingNetworkName externalRef8.ServingNetworkName, body CreateIndividualAuthenticationStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryAuthSubsData request
	QueryAuthSubsData(ctx context.Context, ueId externalRef2.Supi, params *QueryAuthSubsDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyAuthenticationSubscriptionWithBody request with any body
	ModifyAuthenticationSubscriptionWithBody(ctx context.Context, ueId externalRef2.Supi, params *ModifyAuthenticationSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyAuthenticationSubscriptionWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef2.Supi, params *ModifyAuthenticationSubscriptionParams, body ModifyAuthenticationSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryContextData request
	QueryContextData(ctx context.Context, ueId externalRef2.VarUeId, params *QueryContextDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryAmfContext3gpp request
	QueryAmfContext3gpp(ctx context.Context, ueId externalRef2.VarUeId, params *QueryAmfContext3gppParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AmfContext3gppWithBody request with any body
	AmfContext3gppWithBody(ctx context.Context, ueId externalRef2.VarUeId, params *AmfContext3gppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AmfContext3gppWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef2.VarUeId, params *AmfContext3gppParams, body AmfContext3gppApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAmfContext3gppWithBody request with any body
	CreateAmfContext3gppWithBody(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAmfContext3gpp(ctx context.Context, ueId externalRef2.VarUeId, body CreateAmfContext3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryAmfContextNon3gpp request
	QueryAmfContextNon3gpp(ctx context.Context, ueId externalRef2.VarUeId, params *QueryAmfContextNon3gppParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AmfContextNon3gppWithBody request with any body
	AmfContextNon3gppWithBody(ctx context.Context, ueId externalRef2.VarUeId, params *AmfContextNon3gppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AmfContextNon3gppWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef2.VarUeId, params *AmfContextNon3gppParams, body AmfContextNon3gppApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAmfContextNon3gppWithBody request with any body
	CreateAmfContextNon3gppWithBody(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAmfContextNon3gpp(ctx context.Context, ueId externalRef2.VarUeId, body CreateAmfContextNon3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Queryeesubscriptions request
	Queryeesubscriptions(ctx context.Context, ueId externalRef2.VarUeId, params *QueryeesubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEeSubscriptionsWithBody request with any body
	CreateEeSubscriptionsWithBody(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEeSubscriptions(ctx context.Context, ueId externalRef2.VarUeId, body CreateEeSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveeeSubscriptions request
	RemoveeeSubscriptions(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryeeSubscription request
	QueryeeSubscription(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyEesubscriptionWithBody request with any body
	ModifyEesubscriptionWithBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyEesubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyEesubscriptionWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyEesubscriptionParams, body ModifyEesubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEesubscriptionsWithBody request with any body
	UpdateEesubscriptionsWithBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEesubscriptions(ctx context.Context, ueId externalRef2.VarUeId, subsId string, body UpdateEesubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveAmfSubscriptionsInfo request
	RemoveAmfSubscriptionsInfo(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAmfSubscriptionInfo request
	GetAmfSubscriptionInfo(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyAmfSubscriptionInfoWithBody request with any body
	ModifyAmfSubscriptionInfoWithBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyAmfSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyAmfSubscriptionInfoWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyAmfSubscriptionInfoParams, body ModifyAmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAMFSubscriptionsWithBody request with any body
	CreateAMFSubscriptionsWithBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAMFSubscriptions(ctx context.Context, ueId externalRef2.VarUeId, subsId string, body CreateAMFSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveHssSubscriptionsInfo request
	RemoveHssSubscriptionsInfo(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHssSubscriptionInfo request
	GetHssSubscriptionInfo(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyHssSubscriptionInfoWithBody request with any body
	ModifyHssSubscriptionInfoWithBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyHssSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyHssSubscriptionInfoWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyHssSubscriptionInfoParams, body ModifyHssSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHSSSubscriptionsWithBody request with any body
	CreateHSSSubscriptionsWithBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHSSSubscriptions(ctx context.Context, ueId externalRef2.VarUeId, subsId string, body CreateHSSSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveSmfSubscriptionsInfo request
	RemoveSmfSubscriptionsInfo(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmfSubscriptionInfo request
	GetSmfSubscriptionInfo(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifySmfSubscriptionInfoWithBody request with any body
	ModifySmfSubscriptionInfoWithBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifySmfSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifySmfSubscriptionInfoWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifySmfSubscriptionInfoParams, body ModifySmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSMFSubscriptionsWithBody request with any body
	CreateSMFSubscriptionsWithBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSMFSubscriptions(ctx context.Context, ueId externalRef2.VarUeId, subsId string, body CreateSMFSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIpSmGwContext request
	DeleteIpSmGwContext(ctx context.Context, ueId externalRef2.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryIpSmGwContext request
	QueryIpSmGwContext(ctx context.Context, ueId externalRef2.VarUeId, params *QueryIpSmGwContextParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyIpSmGwContextWithBody request with any body
	ModifyIpSmGwContextWithBody(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyIpSmGwContextWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef2.VarUeId, body ModifyIpSmGwContextApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIpSmGwContextWithBody request with any body
	CreateIpSmGwContextWithBody(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIpSmGwContext(ctx context.Context, ueId externalRef2.VarUeId, body CreateIpSmGwContextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryUeLocation request
	QueryUeLocation(ctx context.Context, ueId externalRef2.VarUeId, params *QueryUeLocationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMessageWaitingData request
	DeleteMessageWaitingData(ctx context.Context, ueId externalRef2.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryMessageWaitingData request
	QueryMessageWaitingData(ctx context.Context, ueId externalRef2.VarUeId, params *QueryMessageWaitingDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyMessageWaitingDataWithBody request with any body
	ModifyMessageWaitingDataWithBody(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyMessageWaitingDataWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef2.VarUeId, body ModifyMessageWaitingDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMessageWaitingDataWithBody request with any body
	CreateMessageWaitingDataWithBody(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMessageWaitingData(ctx context.Context, ueId externalRef2.VarUeId, body CreateMessageWaitingDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Querysdmsubscriptions request
	Querysdmsubscriptions(ctx context.Context, ueId externalRef2.VarUeId, params *QuerysdmsubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSdmSubscriptionsWithBody request with any body
	CreateSdmSubscriptionsWithBody(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSdmSubscriptions(ctx context.Context, ueId externalRef2.VarUeId, body CreateSdmSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemovesdmSubscriptions request
	RemovesdmSubscriptions(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuerysdmSubscription request
	QuerysdmSubscription(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifysdmSubscriptionWithBody request with any body
	ModifysdmSubscriptionWithBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifysdmSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifysdmSubscriptionWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifysdmSubscriptionParams, body ModifysdmSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatesdmsubscriptionsWithBody request with any body
	UpdatesdmsubscriptionsWithBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Updatesdmsubscriptions(ctx context.Context, ueId externalRef2.VarUeId, subsId string, body UpdatesdmsubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveHssSDMSubscriptionsInfo request
	RemoveHssSDMSubscriptionsInfo(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHssSDMSubscriptionInfo request
	GetHssSDMSubscriptionInfo(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyHssSDMSubscriptionInfoWithBody request with any body
	ModifyHssSDMSubscriptionInfoWithBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyHssSDMSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyHssSDMSubscriptionInfoWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyHssSDMSubscriptionInfoParams, body ModifyHssSDMSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHSSSDMSubscriptionsWithBody request with any body
	CreateHSSSDMSubscriptionsWithBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHSSSDMSubscriptions(ctx context.Context, ueId externalRef2.VarUeId, subsId string, body CreateHSSSDMSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuerySmfRegList request
	QuerySmfRegList(ctx context.Context, ueId externalRef2.VarUeId, params *QuerySmfRegListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSmfRegistration request
	DeleteSmfRegistration(ctx context.Context, ueId externalRef2.VarUeId, pduSessionId externalRef2.PduSessionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuerySmfRegistration request
	QuerySmfRegistration(ctx context.Context, ueId externalRef2.VarUeId, pduSessionId externalRef2.PduSessionId, params *QuerySmfRegistrationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrUpdateSmfRegistrationWithBody request with any body
	CreateOrUpdateSmfRegistrationWithBody(ctx context.Context, ueId externalRef2.VarUeId, pduSessionId externalRef2.PduSessionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrUpdateSmfRegistration(ctx context.Context, ueId externalRef2.VarUeId, pduSessionId externalRef2.PduSessionId, body CreateOrUpdateSmfRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSmsfContext3gpp request
	DeleteSmsfContext3gpp(ctx context.Context, ueId externalRef2.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuerySmsfContext3gpp request
	QuerySmsfContext3gpp(ctx context.Context, ueId externalRef2.VarUeId, params *QuerySmsfContext3gppParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSmsfContext3gppWithBody request with any body
	CreateSmsfContext3gppWithBody(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSmsfContext3gpp(ctx context.Context, ueId externalRef2.VarUeId, body CreateSmsfContext3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSmsfContextNon3gpp request
	DeleteSmsfContextNon3gpp(ctx context.Context, ueId externalRef2.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuerySmsfContextNon3gpp request
	QuerySmsfContextNon3gpp(ctx context.Context, ueId externalRef2.VarUeId, params *QuerySmsfContextNon3gppParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSmsfContextNon3gppWithBody request with any body
	CreateSmsfContextNon3gppWithBody(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSmsfContextNon3gpp(ctx context.Context, ueId externalRef2.VarUeId, body CreateSmsfContextNon3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryCoverageRestrictionData request
	QueryCoverageRestrictionData(ctx context.Context, ueId externalRef2.VarUeId, params *QueryCoverageRestrictionDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryEEData request
	QueryEEData(ctx context.Context, ueId externalRef2.VarUeId, params *QueryEEDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdentityData request
	GetIdentityData(ctx context.Context, ueId externalRef2.VarUeId, params *GetIdentityDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryLcsMoData request
	QueryLcsMoData(ctx context.Context, ueId externalRef2.VarUeId, params *QueryLcsMoDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryLcsPrivacyData request
	QueryLcsPrivacyData(ctx context.Context, ueId externalRef2.VarUeId, params *QueryLcsPrivacyDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNiddAuData request
	GetNiddAuData(ctx context.Context, ueId string, params *GetNiddAuDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOdbData request
	GetOdbData(ctx context.Context, ueId externalRef2.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryOperSpecData request
	QueryOperSpecData(ctx context.Context, ueId externalRef2.VarUeId, params *QueryOperSpecDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyOperSpecDataWithBody request with any body
	ModifyOperSpecDataWithBody(ctx context.Context, ueId externalRef2.VarUeId, params *ModifyOperSpecDataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyOperSpecDataWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef2.VarUeId, params *ModifyOperSpecDataParams, body ModifyOperSpecDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetppData request
	GetppData(ctx context.Context, ueId externalRef2.VarUeId, params *GetppDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyPpDataWithBody request with any body
	ModifyPpDataWithBody(ctx context.Context, ueId externalRef2.VarUeId, params *ModifyPpDataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyPpDataWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef2.VarUeId, params *ModifyPpDataParams, body ModifyPpDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryPPData request
	QueryPPData(ctx context.Context, ueId externalRef2.VarUeId, params *QueryPPDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryAuthSoR request
	QueryAuthSoR(ctx context.Context, ueId externalRef2.Supi, params *QueryAuthSoRParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAuthenticationSoRWithBody request with any body
	CreateAuthenticationSoRWithBody(ctx context.Context, ueId externalRef2.Supi, params *CreateAuthenticationSoRParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAuthenticationSoR(ctx context.Context, ueId externalRef2.Supi, params *CreateAuthenticationSoRParams, body CreateAuthenticationSoRJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryCagAck request
	QueryCagAck(ctx context.Context, ueId externalRef2.Supi, params *QueryCagAckParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCagUpdateAckWithBody request with any body
	CreateCagUpdateAckWithBody(ctx context.Context, ueId externalRef2.Supi, params *CreateCagUpdateAckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCagUpdateAck(ctx context.Context, ueId externalRef2.Supi, params *CreateCagUpdateAckParams, body CreateCagUpdateAckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryNssaiAck request
	QueryNssaiAck(ctx context.Context, ueId externalRef2.Supi, params *QueryNssaiAckParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrUpdateNssaiAckWithBody request with any body
	CreateOrUpdateNssaiAckWithBody(ctx context.Context, ueId externalRef2.Supi, params *CreateOrUpdateNssaiAckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrUpdateNssaiAck(ctx context.Context, ueId externalRef2.Supi, params *CreateOrUpdateNssaiAckParams, body CreateOrUpdateNssaiAckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryAuthUPU request
	QueryAuthUPU(ctx context.Context, ueId externalRef2.Supi, params *QueryAuthUPUParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAuthenticationUPUWithBody request with any body
	CreateAuthenticationUPUWithBody(ctx context.Context, ueId externalRef2.Supi, params *CreateAuthenticationUPUParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAuthenticationUPU(ctx context.Context, ueId externalRef2.Supi, params *CreateAuthenticationUPUParams, body CreateAuthenticationUPUJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryV2xData request
	QueryV2xData(ctx context.Context, ueId externalRef2.VarUeId, params *QueryV2xDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryProvisionedData request
	QueryProvisionedData(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QueryProvisionedDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryAmData request
	QueryAmData(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QueryAmDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryLcsBcaData request
	QueryLcsBcaData(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QueryLcsBcaDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuerySmData request
	QuerySmData(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QuerySmDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuerySmfSelectData request
	QuerySmfSelectData(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QuerySmfSelectDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuerySmsData request
	QuerySmsData(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QuerySmsDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuerySmsMngData request
	QuerySmsMngData(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QuerySmsMngDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryTraceData request
	QueryTraceData(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QueryTraceDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Query5GVnGroup(ctx context.Context, params *Query5GVnGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuery5GVnGroupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Query5GVnGroupInternal(ctx context.Context, params *Query5GVnGroupInternalParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuery5GVnGroupInternalRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Query5GVNGroupPPData(ctx context.Context, params *Query5GVNGroupPPDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuery5GVNGroupPPDataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete5GVnGroup(ctx context.Context, externalGroupId externalRef7.ExtGroupId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelete5GVnGroupRequest(c.Server, externalGroupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get5GVnGroupConfiguration(ctx context.Context, externalGroupId externalRef7.ExtGroupId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet5GVnGroupConfigurationRequest(c.Server, externalGroupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Modify5GVnGroupWithBody(ctx context.Context, externalGroupId externalRef7.ExtGroupId, params *Modify5GVnGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModify5GVnGroupRequestWithBody(c.Server, externalGroupId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Modify5GVnGroupWithApplicationJSONPatchPlusJSONBody(ctx context.Context, externalGroupId externalRef7.ExtGroupId, params *Modify5GVnGroupParams, body Modify5GVnGroupApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModify5GVnGroupRequestWithApplicationJSONPatchPlusJSONBody(c.Server, externalGroupId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create5GVnGroupWithBody(ctx context.Context, externalGroupId externalRef7.ExtGroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate5GVnGroupRequestWithBody(c.Server, externalGroupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create5GVnGroup(ctx context.Context, externalGroupId externalRef7.ExtGroupId, body Create5GVnGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate5GVnGroupRequest(c.Server, externalGroupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupIdentifiers(ctx context.Context, params *GetGroupIdentifiersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupIdentifiersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryGroupEEData(ctx context.Context, ueGroupId VarUeGroupId, params *QueryGroupEEDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryGroupEEDataRequest(c.Server, ueGroupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryEeGroupSubscriptions(ctx context.Context, ueGroupId VarUeGroupId, params *QueryEeGroupSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryEeGroupSubscriptionsRequest(c.Server, ueGroupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEeGroupSubscriptionsWithBody(ctx context.Context, ueGroupId VarUeGroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEeGroupSubscriptionsRequestWithBody(c.Server, ueGroupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEeGroupSubscriptions(ctx context.Context, ueGroupId VarUeGroupId, body CreateEeGroupSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEeGroupSubscriptionsRequest(c.Server, ueGroupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveEeGroupSubscriptions(ctx context.Context, ueGroupId VarUeGroupId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveEeGroupSubscriptionsRequest(c.Server, ueGroupId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryEeGroupSubscription(ctx context.Context, ueGroupId VarUeGroupId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryEeGroupSubscriptionRequest(c.Server, ueGroupId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyEeGroupSubscriptionWithBody(ctx context.Context, ueGroupId VarUeGroupId, subsId string, params *ModifyEeGroupSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyEeGroupSubscriptionRequestWithBody(c.Server, ueGroupId, subsId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyEeGroupSubscriptionWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueGroupId VarUeGroupId, subsId string, params *ModifyEeGroupSubscriptionParams, body ModifyEeGroupSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyEeGroupSubscriptionRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueGroupId, subsId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEeGroupSubscriptionsWithBody(ctx context.Context, ueGroupId VarUeGroupId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEeGroupSubscriptionsRequestWithBody(c.Server, ueGroupId, subsId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEeGroupSubscriptions(ctx context.Context, ueGroupId VarUeGroupId, subsId string, body UpdateEeGroupSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEeGroupSubscriptionsRequest(c.Server, ueGroupId, subsId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSharedData(ctx context.Context, params *GetSharedDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSharedDataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndividualSharedData(ctx context.Context, sharedDataId externalRef7.SharedDataId, params *GetIndividualSharedDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndividualSharedDataRequest(c.Server, sharedDataId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveMultipleSubscriptionDataSubscriptions(ctx context.Context, params *RemoveMultipleSubscriptionDataSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveMultipleSubscriptionDataSubscriptionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuerySubsToNotify(ctx context.Context, params *QuerySubsToNotifyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerySubsToNotifyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscriptionDataSubscriptionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscriptionDataSubscriptionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscriptionDataSubscriptions(ctx context.Context, body SubscriptionDataSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscriptionDataSubscriptionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemovesubscriptionDataSubscriptions(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemovesubscriptionDataSubscriptionsRequest(c.Server, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuerySubscriptionDataSubscriptions(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerySubscriptionDataSubscriptionsRequest(c.Server, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifysubscriptionDataSubscriptionWithBody(ctx context.Context, subsId string, params *ModifysubscriptionDataSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifysubscriptionDataSubscriptionRequestWithBody(c.Server, subsId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifysubscriptionDataSubscriptionWithApplicationJSONPatchPlusJSONBody(ctx context.Context, subsId string, params *ModifysubscriptionDataSubscriptionParams, body ModifysubscriptionDataSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifysubscriptionDataSubscriptionRequestWithApplicationJSONPatchPlusJSONBody(c.Server, subsId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAuthenticationStatus(ctx context.Context, ueId externalRef2.Supi, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAuthenticationStatusRequest(c.Server, ueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryAuthenticationStatus(ctx context.Context, ueId externalRef2.Supi, params *QueryAuthenticationStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryAuthenticationStatusRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthenticationStatusWithBody(ctx context.Context, ueId externalRef2.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthenticationStatusRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthenticationStatus(ctx context.Context, ueId externalRef2.Supi, body CreateAuthenticationStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthenticationStatusRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndividualAuthenticationStatus(ctx context.Context, ueId externalRef2.Supi, servingNetworkName externalRef8.ServingNetworkName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndividualAuthenticationStatusRequest(c.Server, ueId, servingNetworkName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryIndividualAuthenticationStatus(ctx context.Context, ueId externalRef2.Supi, servingNetworkName externalRef8.ServingNetworkName, params *QueryIndividualAuthenticationStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryIndividualAuthenticationStatusRequest(c.Server, ueId, servingNetworkName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualAuthenticationStatusWithBody(ctx context.Context, ueId externalRef2.Supi, servingNetworkName externalRef8.ServingNetworkName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualAuthenticationStatusRequestWithBody(c.Server, ueId, servingNetworkName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualAuthenticationStatus(ctx context.Context, ueId externalRef2.Supi, servingNetworkName externalRef8.ServingNetworkName, body CreateIndividualAuthenticationStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualAuthenticationStatusRequest(c.Server, ueId, servingNetworkName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryAuthSubsData(ctx context.Context, ueId externalRef2.Supi, params *QueryAuthSubsDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryAuthSubsDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyAuthenticationSubscriptionWithBody(ctx context.Context, ueId externalRef2.Supi, params *ModifyAuthenticationSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyAuthenticationSubscriptionRequestWithBody(c.Server, ueId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyAuthenticationSubscriptionWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef2.Supi, params *ModifyAuthenticationSubscriptionParams, body ModifyAuthenticationSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyAuthenticationSubscriptionRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryContextData(ctx context.Context, ueId externalRef2.VarUeId, params *QueryContextDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryContextDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryAmfContext3gpp(ctx context.Context, ueId externalRef2.VarUeId, params *QueryAmfContext3gppParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryAmfContext3gppRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AmfContext3gppWithBody(ctx context.Context, ueId externalRef2.VarUeId, params *AmfContext3gppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAmfContext3gppRequestWithBody(c.Server, ueId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AmfContext3gppWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef2.VarUeId, params *AmfContext3gppParams, body AmfContext3gppApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAmfContext3gppRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAmfContext3gppWithBody(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAmfContext3gppRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAmfContext3gpp(ctx context.Context, ueId externalRef2.VarUeId, body CreateAmfContext3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAmfContext3gppRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryAmfContextNon3gpp(ctx context.Context, ueId externalRef2.VarUeId, params *QueryAmfContextNon3gppParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryAmfContextNon3gppRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AmfContextNon3gppWithBody(ctx context.Context, ueId externalRef2.VarUeId, params *AmfContextNon3gppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAmfContextNon3gppRequestWithBody(c.Server, ueId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AmfContextNon3gppWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef2.VarUeId, params *AmfContextNon3gppParams, body AmfContextNon3gppApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAmfContextNon3gppRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAmfContextNon3gppWithBody(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAmfContextNon3gppRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAmfContextNon3gpp(ctx context.Context, ueId externalRef2.VarUeId, body CreateAmfContextNon3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAmfContextNon3gppRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Queryeesubscriptions(ctx context.Context, ueId externalRef2.VarUeId, params *QueryeesubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryeesubscriptionsRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEeSubscriptionsWithBody(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEeSubscriptionsRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEeSubscriptions(ctx context.Context, ueId externalRef2.VarUeId, body CreateEeSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEeSubscriptionsRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveeeSubscriptions(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveeeSubscriptionsRequest(c.Server, ueId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryeeSubscription(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryeeSubscriptionRequest(c.Server, ueId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyEesubscriptionWithBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyEesubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyEesubscriptionRequestWithBody(c.Server, ueId, subsId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyEesubscriptionWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyEesubscriptionParams, body ModifyEesubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyEesubscriptionRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, subsId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEesubscriptionsWithBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEesubscriptionsRequestWithBody(c.Server, ueId, subsId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEesubscriptions(ctx context.Context, ueId externalRef2.VarUeId, subsId string, body UpdateEesubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEesubscriptionsRequest(c.Server, ueId, subsId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveAmfSubscriptionsInfo(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveAmfSubscriptionsInfoRequest(c.Server, ueId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAmfSubscriptionInfo(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAmfSubscriptionInfoRequest(c.Server, ueId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyAmfSubscriptionInfoWithBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyAmfSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyAmfSubscriptionInfoRequestWithBody(c.Server, ueId, subsId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyAmfSubscriptionInfoWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyAmfSubscriptionInfoParams, body ModifyAmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyAmfSubscriptionInfoRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, subsId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAMFSubscriptionsWithBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAMFSubscriptionsRequestWithBody(c.Server, ueId, subsId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAMFSubscriptions(ctx context.Context, ueId externalRef2.VarUeId, subsId string, body CreateAMFSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAMFSubscriptionsRequest(c.Server, ueId, subsId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveHssSubscriptionsInfo(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveHssSubscriptionsInfoRequest(c.Server, ueId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHssSubscriptionInfo(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHssSubscriptionInfoRequest(c.Server, ueId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyHssSubscriptionInfoWithBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyHssSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyHssSubscriptionInfoRequestWithBody(c.Server, ueId, subsId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyHssSubscriptionInfoWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyHssSubscriptionInfoParams, body ModifyHssSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyHssSubscriptionInfoRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, subsId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHSSSubscriptionsWithBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHSSSubscriptionsRequestWithBody(c.Server, ueId, subsId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHSSSubscriptions(ctx context.Context, ueId externalRef2.VarUeId, subsId string, body CreateHSSSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHSSSubscriptionsRequest(c.Server, ueId, subsId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveSmfSubscriptionsInfo(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveSmfSubscriptionsInfoRequest(c.Server, ueId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmfSubscriptionInfo(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmfSubscriptionInfoRequest(c.Server, ueId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifySmfSubscriptionInfoWithBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifySmfSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifySmfSubscriptionInfoRequestWithBody(c.Server, ueId, subsId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifySmfSubscriptionInfoWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifySmfSubscriptionInfoParams, body ModifySmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifySmfSubscriptionInfoRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, subsId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSMFSubscriptionsWithBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSMFSubscriptionsRequestWithBody(c.Server, ueId, subsId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSMFSubscriptions(ctx context.Context, ueId externalRef2.VarUeId, subsId string, body CreateSMFSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSMFSubscriptionsRequest(c.Server, ueId, subsId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIpSmGwContext(ctx context.Context, ueId externalRef2.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIpSmGwContextRequest(c.Server, ueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryIpSmGwContext(ctx context.Context, ueId externalRef2.VarUeId, params *QueryIpSmGwContextParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryIpSmGwContextRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyIpSmGwContextWithBody(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyIpSmGwContextRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyIpSmGwContextWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef2.VarUeId, body ModifyIpSmGwContextApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyIpSmGwContextRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIpSmGwContextWithBody(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIpSmGwContextRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIpSmGwContext(ctx context.Context, ueId externalRef2.VarUeId, body CreateIpSmGwContextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIpSmGwContextRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryUeLocation(ctx context.Context, ueId externalRef2.VarUeId, params *QueryUeLocationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryUeLocationRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMessageWaitingData(ctx context.Context, ueId externalRef2.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMessageWaitingDataRequest(c.Server, ueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryMessageWaitingData(ctx context.Context, ueId externalRef2.VarUeId, params *QueryMessageWaitingDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryMessageWaitingDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyMessageWaitingDataWithBody(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyMessageWaitingDataRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyMessageWaitingDataWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef2.VarUeId, body ModifyMessageWaitingDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyMessageWaitingDataRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMessageWaitingDataWithBody(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMessageWaitingDataRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMessageWaitingData(ctx context.Context, ueId externalRef2.VarUeId, body CreateMessageWaitingDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMessageWaitingDataRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Querysdmsubscriptions(ctx context.Context, ueId externalRef2.VarUeId, params *QuerysdmsubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerysdmsubscriptionsRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSdmSubscriptionsWithBody(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSdmSubscriptionsRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSdmSubscriptions(ctx context.Context, ueId externalRef2.VarUeId, body CreateSdmSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSdmSubscriptionsRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemovesdmSubscriptions(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemovesdmSubscriptionsRequest(c.Server, ueId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuerysdmSubscription(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerysdmSubscriptionRequest(c.Server, ueId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifysdmSubscriptionWithBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifysdmSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifysdmSubscriptionRequestWithBody(c.Server, ueId, subsId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifysdmSubscriptionWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifysdmSubscriptionParams, body ModifysdmSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifysdmSubscriptionRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, subsId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatesdmsubscriptionsWithBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatesdmsubscriptionsRequestWithBody(c.Server, ueId, subsId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Updatesdmsubscriptions(ctx context.Context, ueId externalRef2.VarUeId, subsId string, body UpdatesdmsubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatesdmsubscriptionsRequest(c.Server, ueId, subsId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveHssSDMSubscriptionsInfo(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveHssSDMSubscriptionsInfoRequest(c.Server, ueId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHssSDMSubscriptionInfo(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHssSDMSubscriptionInfoRequest(c.Server, ueId, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyHssSDMSubscriptionInfoWithBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyHssSDMSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyHssSDMSubscriptionInfoRequestWithBody(c.Server, ueId, subsId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyHssSDMSubscriptionInfoWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyHssSDMSubscriptionInfoParams, body ModifyHssSDMSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyHssSDMSubscriptionInfoRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, subsId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHSSSDMSubscriptionsWithBody(ctx context.Context, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHSSSDMSubscriptionsRequestWithBody(c.Server, ueId, subsId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHSSSDMSubscriptions(ctx context.Context, ueId externalRef2.VarUeId, subsId string, body CreateHSSSDMSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHSSSDMSubscriptionsRequest(c.Server, ueId, subsId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuerySmfRegList(ctx context.Context, ueId externalRef2.VarUeId, params *QuerySmfRegListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerySmfRegListRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSmfRegistration(ctx context.Context, ueId externalRef2.VarUeId, pduSessionId externalRef2.PduSessionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSmfRegistrationRequest(c.Server, ueId, pduSessionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuerySmfRegistration(ctx context.Context, ueId externalRef2.VarUeId, pduSessionId externalRef2.PduSessionId, params *QuerySmfRegistrationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerySmfRegistrationRequest(c.Server, ueId, pduSessionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateSmfRegistrationWithBody(ctx context.Context, ueId externalRef2.VarUeId, pduSessionId externalRef2.PduSessionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateSmfRegistrationRequestWithBody(c.Server, ueId, pduSessionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateSmfRegistration(ctx context.Context, ueId externalRef2.VarUeId, pduSessionId externalRef2.PduSessionId, body CreateOrUpdateSmfRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateSmfRegistrationRequest(c.Server, ueId, pduSessionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSmsfContext3gpp(ctx context.Context, ueId externalRef2.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSmsfContext3gppRequest(c.Server, ueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuerySmsfContext3gpp(ctx context.Context, ueId externalRef2.VarUeId, params *QuerySmsfContext3gppParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerySmsfContext3gppRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSmsfContext3gppWithBody(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSmsfContext3gppRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSmsfContext3gpp(ctx context.Context, ueId externalRef2.VarUeId, body CreateSmsfContext3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSmsfContext3gppRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSmsfContextNon3gpp(ctx context.Context, ueId externalRef2.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSmsfContextNon3gppRequest(c.Server, ueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuerySmsfContextNon3gpp(ctx context.Context, ueId externalRef2.VarUeId, params *QuerySmsfContextNon3gppParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerySmsfContextNon3gppRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSmsfContextNon3gppWithBody(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSmsfContextNon3gppRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSmsfContextNon3gpp(ctx context.Context, ueId externalRef2.VarUeId, body CreateSmsfContextNon3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSmsfContextNon3gppRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryCoverageRestrictionData(ctx context.Context, ueId externalRef2.VarUeId, params *QueryCoverageRestrictionDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryCoverageRestrictionDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryEEData(ctx context.Context, ueId externalRef2.VarUeId, params *QueryEEDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryEEDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdentityData(ctx context.Context, ueId externalRef2.VarUeId, params *GetIdentityDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdentityDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryLcsMoData(ctx context.Context, ueId externalRef2.VarUeId, params *QueryLcsMoDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryLcsMoDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryLcsPrivacyData(ctx context.Context, ueId externalRef2.VarUeId, params *QueryLcsPrivacyDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryLcsPrivacyDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNiddAuData(ctx context.Context, ueId string, params *GetNiddAuDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNiddAuDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOdbData(ctx context.Context, ueId externalRef2.VarUeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOdbDataRequest(c.Server, ueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryOperSpecData(ctx context.Context, ueId externalRef2.VarUeId, params *QueryOperSpecDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryOperSpecDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyOperSpecDataWithBody(ctx context.Context, ueId externalRef2.VarUeId, params *ModifyOperSpecDataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyOperSpecDataRequestWithBody(c.Server, ueId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyOperSpecDataWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef2.VarUeId, params *ModifyOperSpecDataParams, body ModifyOperSpecDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyOperSpecDataRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetppData(ctx context.Context, ueId externalRef2.VarUeId, params *GetppDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetppDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyPpDataWithBody(ctx context.Context, ueId externalRef2.VarUeId, params *ModifyPpDataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyPpDataRequestWithBody(c.Server, ueId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyPpDataWithApplicationJSONPatchPlusJSONBody(ctx context.Context, ueId externalRef2.VarUeId, params *ModifyPpDataParams, body ModifyPpDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyPpDataRequestWithApplicationJSONPatchPlusJSONBody(c.Server, ueId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryPPData(ctx context.Context, ueId externalRef2.VarUeId, params *QueryPPDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryPPDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryAuthSoR(ctx context.Context, ueId externalRef2.Supi, params *QueryAuthSoRParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryAuthSoRRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthenticationSoRWithBody(ctx context.Context, ueId externalRef2.Supi, params *CreateAuthenticationSoRParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthenticationSoRRequestWithBody(c.Server, ueId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthenticationSoR(ctx context.Context, ueId externalRef2.Supi, params *CreateAuthenticationSoRParams, body CreateAuthenticationSoRJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthenticationSoRRequest(c.Server, ueId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryCagAck(ctx context.Context, ueId externalRef2.Supi, params *QueryCagAckParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryCagAckRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCagUpdateAckWithBody(ctx context.Context, ueId externalRef2.Supi, params *CreateCagUpdateAckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCagUpdateAckRequestWithBody(c.Server, ueId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCagUpdateAck(ctx context.Context, ueId externalRef2.Supi, params *CreateCagUpdateAckParams, body CreateCagUpdateAckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCagUpdateAckRequest(c.Server, ueId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryNssaiAck(ctx context.Context, ueId externalRef2.Supi, params *QueryNssaiAckParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryNssaiAckRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateNssaiAckWithBody(ctx context.Context, ueId externalRef2.Supi, params *CreateOrUpdateNssaiAckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateNssaiAckRequestWithBody(c.Server, ueId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateNssaiAck(ctx context.Context, ueId externalRef2.Supi, params *CreateOrUpdateNssaiAckParams, body CreateOrUpdateNssaiAckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateNssaiAckRequest(c.Server, ueId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryAuthUPU(ctx context.Context, ueId externalRef2.Supi, params *QueryAuthUPUParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryAuthUPURequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthenticationUPUWithBody(ctx context.Context, ueId externalRef2.Supi, params *CreateAuthenticationUPUParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthenticationUPURequestWithBody(c.Server, ueId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthenticationUPU(ctx context.Context, ueId externalRef2.Supi, params *CreateAuthenticationUPUParams, body CreateAuthenticationUPUJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthenticationUPURequest(c.Server, ueId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryV2xData(ctx context.Context, ueId externalRef2.VarUeId, params *QueryV2xDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryV2xDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryProvisionedData(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QueryProvisionedDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryProvisionedDataRequest(c.Server, ueId, servingPlmnId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryAmData(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QueryAmDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryAmDataRequest(c.Server, ueId, servingPlmnId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryLcsBcaData(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QueryLcsBcaDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryLcsBcaDataRequest(c.Server, ueId, servingPlmnId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuerySmData(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QuerySmDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerySmDataRequest(c.Server, ueId, servingPlmnId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuerySmfSelectData(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QuerySmfSelectDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerySmfSelectDataRequest(c.Server, ueId, servingPlmnId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuerySmsData(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QuerySmsDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerySmsDataRequest(c.Server, ueId, servingPlmnId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuerySmsMngData(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QuerySmsMngDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerySmsMngDataRequest(c.Server, ueId, servingPlmnId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryTraceData(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QueryTraceDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryTraceDataRequest(c.Server, ueId, servingPlmnId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewQuery5GVnGroupRequest generates requests for Query5GVnGroup
func NewQuery5GVnGroupRequest(server string, params *Query5GVnGroupParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/5g-vn-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Gpsis != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "gpsis", runtime.ParamLocationQuery, *params.Gpsis); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuery5GVnGroupInternalRequest generates requests for Query5GVnGroupInternal
func NewQuery5GVnGroupInternalRequest(server string, params *Query5GVnGroupInternalParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/5g-vn-groups/internal")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "internal-group-ids", runtime.ParamLocationQuery, params.InternalGroupIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuery5GVNGroupPPDataRequest generates requests for Query5GVNGroupPPData
func NewQuery5GVNGroupPPDataRequest(server string, params *Query5GVNGroupPPDataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/5g-vn-groups/pp-profile-data")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExtGroupIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "ext-group-ids", runtime.ParamLocationQuery, *params.ExtGroupIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDelete5GVnGroupRequest generates requests for Delete5GVnGroup
func NewDelete5GVnGroupRequest(server string, externalGroupId externalRef7.ExtGroupId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "externalGroupId", runtime.ParamLocationPath, externalGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/5g-vn-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet5GVnGroupConfigurationRequest generates requests for Get5GVnGroupConfiguration
func NewGet5GVnGroupConfigurationRequest(server string, externalGroupId externalRef7.ExtGroupId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "externalGroupId", runtime.ParamLocationPath, externalGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/5g-vn-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModify5GVnGroupRequestWithApplicationJSONPatchPlusJSONBody calls the generic Modify5GVnGroup builder with application/json-patch+json body
func NewModify5GVnGroupRequestWithApplicationJSONPatchPlusJSONBody(server string, externalGroupId externalRef7.ExtGroupId, params *Modify5GVnGroupParams, body Modify5GVnGroupApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModify5GVnGroupRequestWithBody(server, externalGroupId, params, "application/json-patch+json", bodyReader)
}

// NewModify5GVnGroupRequestWithBody generates requests for Modify5GVnGroup with any type of body
func NewModify5GVnGroupRequestWithBody(server string, externalGroupId externalRef7.ExtGroupId, params *Modify5GVnGroupParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "externalGroupId", runtime.ParamLocationPath, externalGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/5g-vn-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreate5GVnGroupRequest calls the generic Create5GVnGroup builder with application/json body
func NewCreate5GVnGroupRequest(server string, externalGroupId externalRef7.ExtGroupId, body Create5GVnGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreate5GVnGroupRequestWithBody(server, externalGroupId, "application/json", bodyReader)
}

// NewCreate5GVnGroupRequestWithBody generates requests for Create5GVnGroup with any type of body
func NewCreate5GVnGroupRequestWithBody(server string, externalGroupId externalRef7.ExtGroupId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "externalGroupId", runtime.ParamLocationPath, externalGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/5g-vn-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGroupIdentifiersRequest generates requests for GetGroupIdentifiers
func NewGetGroupIdentifiersRequest(server string, params *GetGroupIdentifiersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/group-identifiers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExtGroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ext-group-id", runtime.ParamLocationQuery, *params.ExtGroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IntGroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "int-group-id", runtime.ParamLocationQuery, *params.IntGroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UeIdInd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ue-id-ind", runtime.ParamLocationQuery, *params.UeIdInd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryGroupEEDataRequest generates requests for QueryGroupEEData
func NewQueryGroupEEDataRequest(server string, ueGroupId VarUeGroupId, params *QueryGroupEEDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueGroupId", runtime.ParamLocationPath, ueGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/%s/ee-profile-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryEeGroupSubscriptionsRequest generates requests for QueryEeGroupSubscriptions
func NewQueryEeGroupSubscriptionsRequest(server string, ueGroupId VarUeGroupId, params *QueryEeGroupSubscriptionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueGroupId", runtime.ParamLocationPath, ueGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/%s/ee-subscriptions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEeGroupSubscriptionsRequest calls the generic CreateEeGroupSubscriptions builder with application/json body
func NewCreateEeGroupSubscriptionsRequest(server string, ueGroupId VarUeGroupId, body CreateEeGroupSubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEeGroupSubscriptionsRequestWithBody(server, ueGroupId, "application/json", bodyReader)
}

// NewCreateEeGroupSubscriptionsRequestWithBody generates requests for CreateEeGroupSubscriptions with any type of body
func NewCreateEeGroupSubscriptionsRequestWithBody(server string, ueGroupId VarUeGroupId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueGroupId", runtime.ParamLocationPath, ueGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/%s/ee-subscriptions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveEeGroupSubscriptionsRequest generates requests for RemoveEeGroupSubscriptions
func NewRemoveEeGroupSubscriptionsRequest(server string, ueGroupId VarUeGroupId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueGroupId", runtime.ParamLocationPath, ueGroupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/%s/ee-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryEeGroupSubscriptionRequest generates requests for QueryEeGroupSubscription
func NewQueryEeGroupSubscriptionRequest(server string, ueGroupId VarUeGroupId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueGroupId", runtime.ParamLocationPath, ueGroupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/%s/ee-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyEeGroupSubscriptionRequestWithApplicationJSONPatchPlusJSONBody calls the generic ModifyEeGroupSubscription builder with application/json-patch+json body
func NewModifyEeGroupSubscriptionRequestWithApplicationJSONPatchPlusJSONBody(server string, ueGroupId VarUeGroupId, subsId string, params *ModifyEeGroupSubscriptionParams, body ModifyEeGroupSubscriptionApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyEeGroupSubscriptionRequestWithBody(server, ueGroupId, subsId, params, "application/json-patch+json", bodyReader)
}

// NewModifyEeGroupSubscriptionRequestWithBody generates requests for ModifyEeGroupSubscription with any type of body
func NewModifyEeGroupSubscriptionRequestWithBody(server string, ueGroupId VarUeGroupId, subsId string, params *ModifyEeGroupSubscriptionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueGroupId", runtime.ParamLocationPath, ueGroupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/%s/ee-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateEeGroupSubscriptionsRequest calls the generic UpdateEeGroupSubscriptions builder with application/json body
func NewUpdateEeGroupSubscriptionsRequest(server string, ueGroupId VarUeGroupId, subsId string, body UpdateEeGroupSubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEeGroupSubscriptionsRequestWithBody(server, ueGroupId, subsId, "application/json", bodyReader)
}

// NewUpdateEeGroupSubscriptionsRequestWithBody generates requests for UpdateEeGroupSubscriptions with any type of body
func NewUpdateEeGroupSubscriptionsRequestWithBody(server string, ueGroupId VarUeGroupId, subsId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueGroupId", runtime.ParamLocationPath, ueGroupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/group-data/%s/ee-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSharedDataRequest generates requests for GetSharedData
func NewGetSharedDataRequest(server string, params *GetSharedDataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/shared-data")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "shared-data-ids", runtime.ParamLocationQuery, params.SharedDataIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIndividualSharedDataRequest generates requests for GetIndividualSharedData
func NewGetIndividualSharedDataRequest(server string, sharedDataId externalRef7.SharedDataId, params *GetIndividualSharedDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sharedDataId", runtime.ParamLocationPath, sharedDataId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/shared-data/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewRemoveMultipleSubscriptionDataSubscriptionsRequest generates requests for RemoveMultipleSubscriptionDataSubscriptions
func NewRemoveMultipleSubscriptionDataSubscriptionsRequest(server string, params *RemoveMultipleSubscriptionDataSubscriptionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/subs-to-notify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ue-id", runtime.ParamLocationQuery, params.UeId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.NfInstanceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nf-instance-id", runtime.ParamLocationQuery, *params.NfInstanceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeleteAllNfs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "delete-all-nfs", runtime.ParamLocationQuery, *params.DeleteAllNfs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ImplicitUnsubscribeIndication != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "implicit-unsubscribe-indication", runtime.ParamLocationQuery, *params.ImplicitUnsubscribeIndication); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuerySubsToNotifyRequest generates requests for QuerySubsToNotify
func NewQuerySubsToNotifyRequest(server string, params *QuerySubsToNotifyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/subs-to-notify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ue-id", runtime.ParamLocationQuery, params.UeId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSubscriptionDataSubscriptionsRequest calls the generic SubscriptionDataSubscriptions builder with application/json body
func NewSubscriptionDataSubscriptionsRequest(server string, body SubscriptionDataSubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubscriptionDataSubscriptionsRequestWithBody(server, "application/json", bodyReader)
}

// NewSubscriptionDataSubscriptionsRequestWithBody generates requests for SubscriptionDataSubscriptions with any type of body
func NewSubscriptionDataSubscriptionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/subs-to-notify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemovesubscriptionDataSubscriptionsRequest generates requests for RemovesubscriptionDataSubscriptions
func NewRemovesubscriptionDataSubscriptionsRequest(server string, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/subs-to-notify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuerySubscriptionDataSubscriptionsRequest generates requests for QuerySubscriptionDataSubscriptions
func NewQuerySubscriptionDataSubscriptionsRequest(server string, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/subs-to-notify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifysubscriptionDataSubscriptionRequestWithApplicationJSONPatchPlusJSONBody calls the generic ModifysubscriptionDataSubscription builder with application/json-patch+json body
func NewModifysubscriptionDataSubscriptionRequestWithApplicationJSONPatchPlusJSONBody(server string, subsId string, params *ModifysubscriptionDataSubscriptionParams, body ModifysubscriptionDataSubscriptionApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifysubscriptionDataSubscriptionRequestWithBody(server, subsId, params, "application/json-patch+json", bodyReader)
}

// NewModifysubscriptionDataSubscriptionRequestWithBody generates requests for ModifysubscriptionDataSubscription with any type of body
func NewModifysubscriptionDataSubscriptionRequestWithBody(server string, subsId string, params *ModifysubscriptionDataSubscriptionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/subs-to-notify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAuthenticationStatusRequest generates requests for DeleteAuthenticationStatus
func NewDeleteAuthenticationStatusRequest(server string, ueId externalRef2.Supi) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/authentication-data/authentication-status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryAuthenticationStatusRequest generates requests for QueryAuthenticationStatus
func NewQueryAuthenticationStatusRequest(server string, ueId externalRef2.Supi, params *QueryAuthenticationStatusParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/authentication-data/authentication-status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAuthenticationStatusRequest calls the generic CreateAuthenticationStatus builder with application/json body
func NewCreateAuthenticationStatusRequest(server string, ueId externalRef2.Supi, body CreateAuthenticationStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAuthenticationStatusRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewCreateAuthenticationStatusRequestWithBody generates requests for CreateAuthenticationStatus with any type of body
func NewCreateAuthenticationStatusRequestWithBody(server string, ueId externalRef2.Supi, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/authentication-data/authentication-status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIndividualAuthenticationStatusRequest generates requests for DeleteIndividualAuthenticationStatus
func NewDeleteIndividualAuthenticationStatusRequest(server string, ueId externalRef2.Supi, servingNetworkName externalRef8.ServingNetworkName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "servingNetworkName", runtime.ParamLocationPath, servingNetworkName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/authentication-data/authentication-status/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryIndividualAuthenticationStatusRequest generates requests for QueryIndividualAuthenticationStatus
func NewQueryIndividualAuthenticationStatusRequest(server string, ueId externalRef2.Supi, servingNetworkName externalRef8.ServingNetworkName, params *QueryIndividualAuthenticationStatusParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "servingNetworkName", runtime.ParamLocationPath, servingNetworkName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/authentication-data/authentication-status/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIndividualAuthenticationStatusRequest calls the generic CreateIndividualAuthenticationStatus builder with application/json body
func NewCreateIndividualAuthenticationStatusRequest(server string, ueId externalRef2.Supi, servingNetworkName externalRef8.ServingNetworkName, body CreateIndividualAuthenticationStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIndividualAuthenticationStatusRequestWithBody(server, ueId, servingNetworkName, "application/json", bodyReader)
}

// NewCreateIndividualAuthenticationStatusRequestWithBody generates requests for CreateIndividualAuthenticationStatus with any type of body
func NewCreateIndividualAuthenticationStatusRequestWithBody(server string, ueId externalRef2.Supi, servingNetworkName externalRef8.ServingNetworkName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "servingNetworkName", runtime.ParamLocationPath, servingNetworkName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/authentication-data/authentication-status/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryAuthSubsDataRequest generates requests for QueryAuthSubsData
func NewQueryAuthSubsDataRequest(server string, ueId externalRef2.Supi, params *QueryAuthSubsDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/authentication-data/authentication-subscription", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyAuthenticationSubscriptionRequestWithApplicationJSONPatchPlusJSONBody calls the generic ModifyAuthenticationSubscription builder with application/json-patch+json body
func NewModifyAuthenticationSubscriptionRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef2.Supi, params *ModifyAuthenticationSubscriptionParams, body ModifyAuthenticationSubscriptionApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyAuthenticationSubscriptionRequestWithBody(server, ueId, params, "application/json-patch+json", bodyReader)
}

// NewModifyAuthenticationSubscriptionRequestWithBody generates requests for ModifyAuthenticationSubscription with any type of body
func NewModifyAuthenticationSubscriptionRequestWithBody(server string, ueId externalRef2.Supi, params *ModifyAuthenticationSubscriptionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/authentication-data/authentication-subscription", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryContextDataRequest generates requests for QueryContextData
func NewQueryContextDataRequest(server string, ueId externalRef2.VarUeId, params *QueryContextDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "context-dataset-names", runtime.ParamLocationQuery, params.ContextDatasetNames); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryAmfContext3gppRequest generates requests for QueryAmfContext3gpp
func NewQueryAmfContext3gppRequest(server string, ueId externalRef2.VarUeId, params *QueryAmfContext3gppParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/amf-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAmfContext3gppRequestWithApplicationJSONPatchPlusJSONBody calls the generic AmfContext3gpp builder with application/json-patch+json body
func NewAmfContext3gppRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef2.VarUeId, params *AmfContext3gppParams, body AmfContext3gppApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAmfContext3gppRequestWithBody(server, ueId, params, "application/json-patch+json", bodyReader)
}

// NewAmfContext3gppRequestWithBody generates requests for AmfContext3gpp with any type of body
func NewAmfContext3gppRequestWithBody(server string, ueId externalRef2.VarUeId, params *AmfContext3gppParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/amf-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateAmfContext3gppRequest calls the generic CreateAmfContext3gpp builder with application/json body
func NewCreateAmfContext3gppRequest(server string, ueId externalRef2.VarUeId, body CreateAmfContext3gppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAmfContext3gppRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewCreateAmfContext3gppRequestWithBody generates requests for CreateAmfContext3gpp with any type of body
func NewCreateAmfContext3gppRequestWithBody(server string, ueId externalRef2.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/amf-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryAmfContextNon3gppRequest generates requests for QueryAmfContextNon3gpp
func NewQueryAmfContextNon3gppRequest(server string, ueId externalRef2.VarUeId, params *QueryAmfContextNon3gppParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/amf-non-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAmfContextNon3gppRequestWithApplicationJSONPatchPlusJSONBody calls the generic AmfContextNon3gpp builder with application/json-patch+json body
func NewAmfContextNon3gppRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef2.VarUeId, params *AmfContextNon3gppParams, body AmfContextNon3gppApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAmfContextNon3gppRequestWithBody(server, ueId, params, "application/json-patch+json", bodyReader)
}

// NewAmfContextNon3gppRequestWithBody generates requests for AmfContextNon3gpp with any type of body
func NewAmfContextNon3gppRequestWithBody(server string, ueId externalRef2.VarUeId, params *AmfContextNon3gppParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/amf-non-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateAmfContextNon3gppRequest calls the generic CreateAmfContextNon3gpp builder with application/json body
func NewCreateAmfContextNon3gppRequest(server string, ueId externalRef2.VarUeId, body CreateAmfContextNon3gppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAmfContextNon3gppRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewCreateAmfContextNon3gppRequestWithBody generates requests for CreateAmfContextNon3gpp with any type of body
func NewCreateAmfContextNon3gppRequestWithBody(server string, ueId externalRef2.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/amf-non-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryeesubscriptionsRequest generates requests for Queryeesubscriptions
func NewQueryeesubscriptionsRequest(server string, ueId externalRef2.VarUeId, params *QueryeesubscriptionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEeSubscriptionsRequest calls the generic CreateEeSubscriptions builder with application/json body
func NewCreateEeSubscriptionsRequest(server string, ueId externalRef2.VarUeId, body CreateEeSubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEeSubscriptionsRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewCreateEeSubscriptionsRequestWithBody generates requests for CreateEeSubscriptions with any type of body
func NewCreateEeSubscriptionsRequestWithBody(server string, ueId externalRef2.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveeeSubscriptionsRequest generates requests for RemoveeeSubscriptions
func NewRemoveeeSubscriptionsRequest(server string, ueId externalRef2.VarUeId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryeeSubscriptionRequest generates requests for QueryeeSubscription
func NewQueryeeSubscriptionRequest(server string, ueId externalRef2.VarUeId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyEesubscriptionRequestWithApplicationJSONPatchPlusJSONBody calls the generic ModifyEesubscription builder with application/json-patch+json body
func NewModifyEesubscriptionRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef2.VarUeId, subsId string, params *ModifyEesubscriptionParams, body ModifyEesubscriptionApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyEesubscriptionRequestWithBody(server, ueId, subsId, params, "application/json-patch+json", bodyReader)
}

// NewModifyEesubscriptionRequestWithBody generates requests for ModifyEesubscription with any type of body
func NewModifyEesubscriptionRequestWithBody(server string, ueId externalRef2.VarUeId, subsId string, params *ModifyEesubscriptionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateEesubscriptionsRequest calls the generic UpdateEesubscriptions builder with application/json body
func NewUpdateEesubscriptionsRequest(server string, ueId externalRef2.VarUeId, subsId string, body UpdateEesubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEesubscriptionsRequestWithBody(server, ueId, subsId, "application/json", bodyReader)
}

// NewUpdateEesubscriptionsRequestWithBody generates requests for UpdateEesubscriptions with any type of body
func NewUpdateEesubscriptionsRequestWithBody(server string, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveAmfSubscriptionsInfoRequest generates requests for RemoveAmfSubscriptionsInfo
func NewRemoveAmfSubscriptionsInfoRequest(server string, ueId externalRef2.VarUeId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s/amf-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAmfSubscriptionInfoRequest generates requests for GetAmfSubscriptionInfo
func NewGetAmfSubscriptionInfoRequest(server string, ueId externalRef2.VarUeId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s/amf-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyAmfSubscriptionInfoRequestWithApplicationJSONPatchPlusJSONBody calls the generic ModifyAmfSubscriptionInfo builder with application/json-patch+json body
func NewModifyAmfSubscriptionInfoRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef2.VarUeId, subsId string, params *ModifyAmfSubscriptionInfoParams, body ModifyAmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyAmfSubscriptionInfoRequestWithBody(server, ueId, subsId, params, "application/json-patch+json", bodyReader)
}

// NewModifyAmfSubscriptionInfoRequestWithBody generates requests for ModifyAmfSubscriptionInfo with any type of body
func NewModifyAmfSubscriptionInfoRequestWithBody(server string, ueId externalRef2.VarUeId, subsId string, params *ModifyAmfSubscriptionInfoParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s/amf-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateAMFSubscriptionsRequest calls the generic CreateAMFSubscriptions builder with application/json body
func NewCreateAMFSubscriptionsRequest(server string, ueId externalRef2.VarUeId, subsId string, body CreateAMFSubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAMFSubscriptionsRequestWithBody(server, ueId, subsId, "application/json", bodyReader)
}

// NewCreateAMFSubscriptionsRequestWithBody generates requests for CreateAMFSubscriptions with any type of body
func NewCreateAMFSubscriptionsRequestWithBody(server string, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s/amf-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveHssSubscriptionsInfoRequest generates requests for RemoveHssSubscriptionsInfo
func NewRemoveHssSubscriptionsInfoRequest(server string, ueId externalRef2.VarUeId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s/hss-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHssSubscriptionInfoRequest generates requests for GetHssSubscriptionInfo
func NewGetHssSubscriptionInfoRequest(server string, ueId externalRef2.VarUeId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s/hss-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyHssSubscriptionInfoRequestWithApplicationJSONPatchPlusJSONBody calls the generic ModifyHssSubscriptionInfo builder with application/json-patch+json body
func NewModifyHssSubscriptionInfoRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef2.VarUeId, subsId string, params *ModifyHssSubscriptionInfoParams, body ModifyHssSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyHssSubscriptionInfoRequestWithBody(server, ueId, subsId, params, "application/json-patch+json", bodyReader)
}

// NewModifyHssSubscriptionInfoRequestWithBody generates requests for ModifyHssSubscriptionInfo with any type of body
func NewModifyHssSubscriptionInfoRequestWithBody(server string, ueId externalRef2.VarUeId, subsId string, params *ModifyHssSubscriptionInfoParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s/hss-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateHSSSubscriptionsRequest calls the generic CreateHSSSubscriptions builder with application/json body
func NewCreateHSSSubscriptionsRequest(server string, ueId externalRef2.VarUeId, subsId string, body CreateHSSSubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHSSSubscriptionsRequestWithBody(server, ueId, subsId, "application/json", bodyReader)
}

// NewCreateHSSSubscriptionsRequestWithBody generates requests for CreateHSSSubscriptions with any type of body
func NewCreateHSSSubscriptionsRequestWithBody(server string, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s/hss-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveSmfSubscriptionsInfoRequest generates requests for RemoveSmfSubscriptionsInfo
func NewRemoveSmfSubscriptionsInfoRequest(server string, ueId externalRef2.VarUeId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s/smf-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSmfSubscriptionInfoRequest generates requests for GetSmfSubscriptionInfo
func NewGetSmfSubscriptionInfoRequest(server string, ueId externalRef2.VarUeId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s/smf-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifySmfSubscriptionInfoRequestWithApplicationJSONPatchPlusJSONBody calls the generic ModifySmfSubscriptionInfo builder with application/json-patch+json body
func NewModifySmfSubscriptionInfoRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef2.VarUeId, subsId string, params *ModifySmfSubscriptionInfoParams, body ModifySmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifySmfSubscriptionInfoRequestWithBody(server, ueId, subsId, params, "application/json-patch+json", bodyReader)
}

// NewModifySmfSubscriptionInfoRequestWithBody generates requests for ModifySmfSubscriptionInfo with any type of body
func NewModifySmfSubscriptionInfoRequestWithBody(server string, ueId externalRef2.VarUeId, subsId string, params *ModifySmfSubscriptionInfoParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s/smf-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateSMFSubscriptionsRequest calls the generic CreateSMFSubscriptions builder with application/json body
func NewCreateSMFSubscriptionsRequest(server string, ueId externalRef2.VarUeId, subsId string, body CreateSMFSubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSMFSubscriptionsRequestWithBody(server, ueId, subsId, "application/json", bodyReader)
}

// NewCreateSMFSubscriptionsRequestWithBody generates requests for CreateSMFSubscriptions with any type of body
func NewCreateSMFSubscriptionsRequestWithBody(server string, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ee-subscriptions/%s/smf-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIpSmGwContextRequest generates requests for DeleteIpSmGwContext
func NewDeleteIpSmGwContextRequest(server string, ueId externalRef2.VarUeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ip-sm-gw", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryIpSmGwContextRequest generates requests for QueryIpSmGwContext
func NewQueryIpSmGwContextRequest(server string, ueId externalRef2.VarUeId, params *QueryIpSmGwContextParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ip-sm-gw", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyIpSmGwContextRequestWithApplicationJSONPatchPlusJSONBody calls the generic ModifyIpSmGwContext builder with application/json-patch+json body
func NewModifyIpSmGwContextRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef2.VarUeId, body ModifyIpSmGwContextApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyIpSmGwContextRequestWithBody(server, ueId, "application/json-patch+json", bodyReader)
}

// NewModifyIpSmGwContextRequestWithBody generates requests for ModifyIpSmGwContext with any type of body
func NewModifyIpSmGwContextRequestWithBody(server string, ueId externalRef2.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ip-sm-gw", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateIpSmGwContextRequest calls the generic CreateIpSmGwContext builder with application/json body
func NewCreateIpSmGwContextRequest(server string, ueId externalRef2.VarUeId, body CreateIpSmGwContextJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIpSmGwContextRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewCreateIpSmGwContextRequestWithBody generates requests for CreateIpSmGwContext with any type of body
func NewCreateIpSmGwContextRequestWithBody(server string, ueId externalRef2.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/ip-sm-gw", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryUeLocationRequest generates requests for QueryUeLocation
func NewQueryUeLocationRequest(server string, ueId externalRef2.VarUeId, params *QueryUeLocationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/location", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteMessageWaitingDataRequest generates requests for DeleteMessageWaitingData
func NewDeleteMessageWaitingDataRequest(server string, ueId externalRef2.VarUeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/mwd", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryMessageWaitingDataRequest generates requests for QueryMessageWaitingData
func NewQueryMessageWaitingDataRequest(server string, ueId externalRef2.VarUeId, params *QueryMessageWaitingDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/mwd", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyMessageWaitingDataRequestWithApplicationJSONPatchPlusJSONBody calls the generic ModifyMessageWaitingData builder with application/json-patch+json body
func NewModifyMessageWaitingDataRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef2.VarUeId, body ModifyMessageWaitingDataApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyMessageWaitingDataRequestWithBody(server, ueId, "application/json-patch+json", bodyReader)
}

// NewModifyMessageWaitingDataRequestWithBody generates requests for ModifyMessageWaitingData with any type of body
func NewModifyMessageWaitingDataRequestWithBody(server string, ueId externalRef2.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/mwd", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateMessageWaitingDataRequest calls the generic CreateMessageWaitingData builder with application/json body
func NewCreateMessageWaitingDataRequest(server string, ueId externalRef2.VarUeId, body CreateMessageWaitingDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMessageWaitingDataRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewCreateMessageWaitingDataRequestWithBody generates requests for CreateMessageWaitingData with any type of body
func NewCreateMessageWaitingDataRequestWithBody(server string, ueId externalRef2.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/mwd", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQuerysdmsubscriptionsRequest generates requests for Querysdmsubscriptions
func NewQuerysdmsubscriptionsRequest(server string, ueId externalRef2.VarUeId, params *QuerysdmsubscriptionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/sdm-subscriptions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSdmSubscriptionsRequest calls the generic CreateSdmSubscriptions builder with application/json body
func NewCreateSdmSubscriptionsRequest(server string, ueId externalRef2.VarUeId, body CreateSdmSubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSdmSubscriptionsRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewCreateSdmSubscriptionsRequestWithBody generates requests for CreateSdmSubscriptions with any type of body
func NewCreateSdmSubscriptionsRequestWithBody(server string, ueId externalRef2.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/sdm-subscriptions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemovesdmSubscriptionsRequest generates requests for RemovesdmSubscriptions
func NewRemovesdmSubscriptionsRequest(server string, ueId externalRef2.VarUeId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/sdm-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuerysdmSubscriptionRequest generates requests for QuerysdmSubscription
func NewQuerysdmSubscriptionRequest(server string, ueId externalRef2.VarUeId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/sdm-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifysdmSubscriptionRequestWithApplicationJSONPatchPlusJSONBody calls the generic ModifysdmSubscription builder with application/json-patch+json body
func NewModifysdmSubscriptionRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef2.VarUeId, subsId string, params *ModifysdmSubscriptionParams, body ModifysdmSubscriptionApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifysdmSubscriptionRequestWithBody(server, ueId, subsId, params, "application/json-patch+json", bodyReader)
}

// NewModifysdmSubscriptionRequestWithBody generates requests for ModifysdmSubscription with any type of body
func NewModifysdmSubscriptionRequestWithBody(server string, ueId externalRef2.VarUeId, subsId string, params *ModifysdmSubscriptionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/sdm-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdatesdmsubscriptionsRequest calls the generic Updatesdmsubscriptions builder with application/json body
func NewUpdatesdmsubscriptionsRequest(server string, ueId externalRef2.VarUeId, subsId string, body UpdatesdmsubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatesdmsubscriptionsRequestWithBody(server, ueId, subsId, "application/json", bodyReader)
}

// NewUpdatesdmsubscriptionsRequestWithBody generates requests for Updatesdmsubscriptions with any type of body
func NewUpdatesdmsubscriptionsRequestWithBody(server string, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/sdm-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveHssSDMSubscriptionsInfoRequest generates requests for RemoveHssSDMSubscriptionsInfo
func NewRemoveHssSDMSubscriptionsInfoRequest(server string, ueId externalRef2.VarUeId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/sdm-subscriptions/%s/hss-sdm-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHssSDMSubscriptionInfoRequest generates requests for GetHssSDMSubscriptionInfo
func NewGetHssSDMSubscriptionInfoRequest(server string, ueId externalRef2.VarUeId, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/sdm-subscriptions/%s/hss-sdm-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyHssSDMSubscriptionInfoRequestWithApplicationJSONPatchPlusJSONBody calls the generic ModifyHssSDMSubscriptionInfo builder with application/json-patch+json body
func NewModifyHssSDMSubscriptionInfoRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef2.VarUeId, subsId string, params *ModifyHssSDMSubscriptionInfoParams, body ModifyHssSDMSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyHssSDMSubscriptionInfoRequestWithBody(server, ueId, subsId, params, "application/json-patch+json", bodyReader)
}

// NewModifyHssSDMSubscriptionInfoRequestWithBody generates requests for ModifyHssSDMSubscriptionInfo with any type of body
func NewModifyHssSDMSubscriptionInfoRequestWithBody(server string, ueId externalRef2.VarUeId, subsId string, params *ModifyHssSDMSubscriptionInfoParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/sdm-subscriptions/%s/hss-sdm-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateHSSSDMSubscriptionsRequest calls the generic CreateHSSSDMSubscriptions builder with application/json body
func NewCreateHSSSDMSubscriptionsRequest(server string, ueId externalRef2.VarUeId, subsId string, body CreateHSSSDMSubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHSSSDMSubscriptionsRequestWithBody(server, ueId, subsId, "application/json", bodyReader)
}

// NewCreateHSSSDMSubscriptionsRequestWithBody generates requests for CreateHSSSDMSubscriptions with any type of body
func NewCreateHSSSDMSubscriptionsRequestWithBody(server string, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/sdm-subscriptions/%s/hss-sdm-subscriptions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQuerySmfRegListRequest generates requests for QuerySmfRegList
func NewQuerySmfRegListRequest(server string, ueId externalRef2.VarUeId, params *QuerySmfRegListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/smf-registrations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSmfRegistrationRequest generates requests for DeleteSmfRegistration
func NewDeleteSmfRegistrationRequest(server string, ueId externalRef2.VarUeId, pduSessionId externalRef2.PduSessionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pduSessionId", runtime.ParamLocationPath, pduSessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/smf-registrations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuerySmfRegistrationRequest generates requests for QuerySmfRegistration
func NewQuerySmfRegistrationRequest(server string, ueId externalRef2.VarUeId, pduSessionId externalRef2.PduSessionId, params *QuerySmfRegistrationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pduSessionId", runtime.ParamLocationPath, pduSessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/smf-registrations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrUpdateSmfRegistrationRequest calls the generic CreateOrUpdateSmfRegistration builder with application/json body
func NewCreateOrUpdateSmfRegistrationRequest(server string, ueId externalRef2.VarUeId, pduSessionId externalRef2.PduSessionId, body CreateOrUpdateSmfRegistrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrUpdateSmfRegistrationRequestWithBody(server, ueId, pduSessionId, "application/json", bodyReader)
}

// NewCreateOrUpdateSmfRegistrationRequestWithBody generates requests for CreateOrUpdateSmfRegistration with any type of body
func NewCreateOrUpdateSmfRegistrationRequestWithBody(server string, ueId externalRef2.VarUeId, pduSessionId externalRef2.PduSessionId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pduSessionId", runtime.ParamLocationPath, pduSessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/smf-registrations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSmsfContext3gppRequest generates requests for DeleteSmsfContext3gpp
func NewDeleteSmsfContext3gppRequest(server string, ueId externalRef2.VarUeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/smsf-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuerySmsfContext3gppRequest generates requests for QuerySmsfContext3gpp
func NewQuerySmsfContext3gppRequest(server string, ueId externalRef2.VarUeId, params *QuerySmsfContext3gppParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/smsf-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSmsfContext3gppRequest calls the generic CreateSmsfContext3gpp builder with application/json body
func NewCreateSmsfContext3gppRequest(server string, ueId externalRef2.VarUeId, body CreateSmsfContext3gppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSmsfContext3gppRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewCreateSmsfContext3gppRequestWithBody generates requests for CreateSmsfContext3gpp with any type of body
func NewCreateSmsfContext3gppRequestWithBody(server string, ueId externalRef2.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/smsf-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSmsfContextNon3gppRequest generates requests for DeleteSmsfContextNon3gpp
func NewDeleteSmsfContextNon3gppRequest(server string, ueId externalRef2.VarUeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/smsf-non-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuerySmsfContextNon3gppRequest generates requests for QuerySmsfContextNon3gpp
func NewQuerySmsfContextNon3gppRequest(server string, ueId externalRef2.VarUeId, params *QuerySmsfContextNon3gppParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/smsf-non-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSmsfContextNon3gppRequest calls the generic CreateSmsfContextNon3gpp builder with application/json body
func NewCreateSmsfContextNon3gppRequest(server string, ueId externalRef2.VarUeId, body CreateSmsfContextNon3gppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSmsfContextNon3gppRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewCreateSmsfContextNon3gppRequestWithBody generates requests for CreateSmsfContextNon3gpp with any type of body
func NewCreateSmsfContextNon3gppRequestWithBody(server string, ueId externalRef2.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/context-data/smsf-non-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryCoverageRestrictionDataRequest generates requests for QueryCoverageRestrictionData
func NewQueryCoverageRestrictionDataRequest(server string, ueId externalRef2.VarUeId, params *QueryCoverageRestrictionDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/coverage-restriction-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewQueryEEDataRequest generates requests for QueryEEData
func NewQueryEEDataRequest(server string, ueId externalRef2.VarUeId, params *QueryEEDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/ee-profile-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdentityDataRequest generates requests for GetIdentityData
func NewGetIdentityDataRequest(server string, ueId externalRef2.VarUeId, params *GetIdentityDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/identity-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AppPortId != nil {

			if queryParamBuf, err := json.Marshal(*params.AppPortId); err != nil {
				return nil, err
			} else {
				queryValues.Add("app-port-id", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewQueryLcsMoDataRequest generates requests for QueryLcsMoData
func NewQueryLcsMoDataRequest(server string, ueId externalRef2.VarUeId, params *QueryLcsMoDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/lcs-mo-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewQueryLcsPrivacyDataRequest generates requests for QueryLcsPrivacyData
func NewQueryLcsPrivacyDataRequest(server string, ueId externalRef2.VarUeId, params *QueryLcsPrivacyDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/lcs-privacy-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetNiddAuDataRequest generates requests for GetNiddAuData
func NewGetNiddAuDataRequest(server string, ueId string, params *GetNiddAuDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/nidd-authorization-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryParamBuf, err := json.Marshal(params.SingleNssai); err != nil {
			return nil, err
		} else {
			queryValues.Add("single-nssai", string(queryParamBuf))
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnn", runtime.ParamLocationQuery, params.Dnn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mtc-provider-information", runtime.ParamLocationQuery, params.MtcProviderInformation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetOdbDataRequest generates requests for GetOdbData
func NewGetOdbDataRequest(server string, ueId externalRef2.VarUeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/operator-determined-barring-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryOperSpecDataRequest generates requests for QueryOperSpecData
func NewQueryOperSpecDataRequest(server string, ueId externalRef2.VarUeId, params *QueryOperSpecDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/operator-specific-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewModifyOperSpecDataRequestWithApplicationJSONPatchPlusJSONBody calls the generic ModifyOperSpecData builder with application/json-patch+json body
func NewModifyOperSpecDataRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef2.VarUeId, params *ModifyOperSpecDataParams, body ModifyOperSpecDataApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyOperSpecDataRequestWithBody(server, ueId, params, "application/json-patch+json", bodyReader)
}

// NewModifyOperSpecDataRequestWithBody generates requests for ModifyOperSpecData with any type of body
func NewModifyOperSpecDataRequestWithBody(server string, ueId externalRef2.VarUeId, params *ModifyOperSpecDataParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/operator-specific-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetppDataRequest generates requests for GetppData
func NewGetppDataRequest(server string, ueId externalRef2.VarUeId, params *GetppDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/pp-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewModifyPpDataRequestWithApplicationJSONPatchPlusJSONBody calls the generic ModifyPpData builder with application/json-patch+json body
func NewModifyPpDataRequestWithApplicationJSONPatchPlusJSONBody(server string, ueId externalRef2.VarUeId, params *ModifyPpDataParams, body ModifyPpDataApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyPpDataRequestWithBody(server, ueId, params, "application/json-patch+json", bodyReader)
}

// NewModifyPpDataRequestWithBody generates requests for ModifyPpData with any type of body
func NewModifyPpDataRequestWithBody(server string, ueId externalRef2.VarUeId, params *ModifyPpDataParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/pp-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryPPDataRequest generates requests for QueryPPData
func NewQueryPPDataRequest(server string, ueId externalRef2.VarUeId, params *QueryPPDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/pp-profile-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryAuthSoRRequest generates requests for QueryAuthSoR
func NewQueryAuthSoRRequest(server string, ueId externalRef2.Supi, params *QueryAuthSoRParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/ue-update-confirmation-data/sor-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAuthenticationSoRRequest calls the generic CreateAuthenticationSoR builder with application/json body
func NewCreateAuthenticationSoRRequest(server string, ueId externalRef2.Supi, params *CreateAuthenticationSoRParams, body CreateAuthenticationSoRJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAuthenticationSoRRequestWithBody(server, ueId, params, "application/json", bodyReader)
}

// NewCreateAuthenticationSoRRequestWithBody generates requests for CreateAuthenticationSoR with any type of body
func NewCreateAuthenticationSoRRequestWithBody(server string, ueId externalRef2.Supi, params *CreateAuthenticationSoRParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/ue-update-confirmation-data/sor-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryCagAckRequest generates requests for QueryCagAck
func NewQueryCagAckRequest(server string, ueId externalRef2.Supi, params *QueryCagAckParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/ue-update-confirmation-data/subscribed-cag", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCagUpdateAckRequest calls the generic CreateCagUpdateAck builder with application/json body
func NewCreateCagUpdateAckRequest(server string, ueId externalRef2.Supi, params *CreateCagUpdateAckParams, body CreateCagUpdateAckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCagUpdateAckRequestWithBody(server, ueId, params, "application/json", bodyReader)
}

// NewCreateCagUpdateAckRequestWithBody generates requests for CreateCagUpdateAck with any type of body
func NewCreateCagUpdateAckRequestWithBody(server string, ueId externalRef2.Supi, params *CreateCagUpdateAckParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/ue-update-confirmation-data/subscribed-cag", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryNssaiAckRequest generates requests for QueryNssaiAck
func NewQueryNssaiAckRequest(server string, ueId externalRef2.Supi, params *QueryNssaiAckParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/ue-update-confirmation-data/subscribed-snssais", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrUpdateNssaiAckRequest calls the generic CreateOrUpdateNssaiAck builder with application/json body
func NewCreateOrUpdateNssaiAckRequest(server string, ueId externalRef2.Supi, params *CreateOrUpdateNssaiAckParams, body CreateOrUpdateNssaiAckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrUpdateNssaiAckRequestWithBody(server, ueId, params, "application/json", bodyReader)
}

// NewCreateOrUpdateNssaiAckRequestWithBody generates requests for CreateOrUpdateNssaiAck with any type of body
func NewCreateOrUpdateNssaiAckRequestWithBody(server string, ueId externalRef2.Supi, params *CreateOrUpdateNssaiAckParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/ue-update-confirmation-data/subscribed-snssais", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryAuthUPURequest generates requests for QueryAuthUPU
func NewQueryAuthUPURequest(server string, ueId externalRef2.Supi, params *QueryAuthUPUParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/ue-update-confirmation-data/upu-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAuthenticationUPURequest calls the generic CreateAuthenticationUPU builder with application/json body
func NewCreateAuthenticationUPURequest(server string, ueId externalRef2.Supi, params *CreateAuthenticationUPUParams, body CreateAuthenticationUPUJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAuthenticationUPURequestWithBody(server, ueId, params, "application/json", bodyReader)
}

// NewCreateAuthenticationUPURequestWithBody generates requests for CreateAuthenticationUPU with any type of body
func NewCreateAuthenticationUPURequestWithBody(server string, ueId externalRef2.Supi, params *CreateAuthenticationUPUParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/ue-update-confirmation-data/upu-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryV2xDataRequest generates requests for QueryV2xData
func NewQueryV2xDataRequest(server string, ueId externalRef2.VarUeId, params *QueryV2xDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/v2x-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewQueryProvisionedDataRequest generates requests for QueryProvisionedData
func NewQueryProvisionedDataRequest(server string, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QueryProvisionedDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "servingPlmnId", runtime.ParamLocationPath, servingPlmnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/%s/provisioned-data", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DatasetNames != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "dataset-names", runtime.ParamLocationQuery, *params.DatasetNames); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryAmDataRequest generates requests for QueryAmData
func NewQueryAmDataRequest(server string, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QueryAmDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "servingPlmnId", runtime.ParamLocationPath, servingPlmnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/%s/provisioned-data/am-data", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewQueryLcsBcaDataRequest generates requests for QueryLcsBcaData
func NewQueryLcsBcaDataRequest(server string, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QueryLcsBcaDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "servingPlmnId", runtime.ParamLocationPath, servingPlmnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/%s/provisioned-data/lcs-bca-data", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewQuerySmDataRequest generates requests for QuerySmData
func NewQuerySmDataRequest(server string, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QuerySmDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "servingPlmnId", runtime.ParamLocationPath, servingPlmnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/%s/provisioned-data/sm-data", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SingleNssai != nil {

			if queryParamBuf, err := json.Marshal(*params.SingleNssai); err != nil {
				return nil, err
			} else {
				queryValues.Add("single-nssai", string(queryParamBuf))
			}

		}

		if params.Dnn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnn", runtime.ParamLocationQuery, *params.Dnn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewQuerySmfSelectDataRequest generates requests for QuerySmfSelectData
func NewQuerySmfSelectDataRequest(server string, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QuerySmfSelectDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "servingPlmnId", runtime.ParamLocationPath, servingPlmnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/%s/provisioned-data/smf-selection-subscription-data", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewQuerySmsDataRequest generates requests for QuerySmsData
func NewQuerySmsDataRequest(server string, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QuerySmsDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "servingPlmnId", runtime.ParamLocationPath, servingPlmnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/%s/provisioned-data/sms-data", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewQuerySmsMngDataRequest generates requests for QuerySmsMngData
func NewQuerySmsMngDataRequest(server string, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QuerySmsMngDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "servingPlmnId", runtime.ParamLocationPath, servingPlmnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/%s/provisioned-data/sms-mng-data", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewQueryTraceDataRequest generates requests for QueryTraceData
func NewQueryTraceDataRequest(server string, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QueryTraceDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "servingPlmnId", runtime.ParamLocationPath, servingPlmnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscription-data/%s/%s/provisioned-data/trace-data", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Query5GVnGroupWithResponse request
	Query5GVnGroupWithResponse(ctx context.Context, params *Query5GVnGroupParams, reqEditors ...RequestEditorFn) (*Query5GVnGroupResponse, error)

	// Query5GVnGroupInternalWithResponse request
	Query5GVnGroupInternalWithResponse(ctx context.Context, params *Query5GVnGroupInternalParams, reqEditors ...RequestEditorFn) (*Query5GVnGroupInternalResponse, error)

	// Query5GVNGroupPPDataWithResponse request
	Query5GVNGroupPPDataWithResponse(ctx context.Context, params *Query5GVNGroupPPDataParams, reqEditors ...RequestEditorFn) (*Query5GVNGroupPPDataResponse, error)

	// Delete5GVnGroupWithResponse request
	Delete5GVnGroupWithResponse(ctx context.Context, externalGroupId externalRef7.ExtGroupId, reqEditors ...RequestEditorFn) (*Delete5GVnGroupResponse, error)

	// Get5GVnGroupConfigurationWithResponse request
	Get5GVnGroupConfigurationWithResponse(ctx context.Context, externalGroupId externalRef7.ExtGroupId, reqEditors ...RequestEditorFn) (*Get5GVnGroupConfigurationResponse, error)

	// Modify5GVnGroupWithBodyWithResponse request with any body
	Modify5GVnGroupWithBodyWithResponse(ctx context.Context, externalGroupId externalRef7.ExtGroupId, params *Modify5GVnGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Modify5GVnGroupResponse, error)

	Modify5GVnGroupWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, externalGroupId externalRef7.ExtGroupId, params *Modify5GVnGroupParams, body Modify5GVnGroupApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*Modify5GVnGroupResponse, error)

	// Create5GVnGroupWithBodyWithResponse request with any body
	Create5GVnGroupWithBodyWithResponse(ctx context.Context, externalGroupId externalRef7.ExtGroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create5GVnGroupResponse, error)

	Create5GVnGroupWithResponse(ctx context.Context, externalGroupId externalRef7.ExtGroupId, body Create5GVnGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*Create5GVnGroupResponse, error)

	// GetGroupIdentifiersWithResponse request
	GetGroupIdentifiersWithResponse(ctx context.Context, params *GetGroupIdentifiersParams, reqEditors ...RequestEditorFn) (*GetGroupIdentifiersResponse, error)

	// QueryGroupEEDataWithResponse request
	QueryGroupEEDataWithResponse(ctx context.Context, ueGroupId VarUeGroupId, params *QueryGroupEEDataParams, reqEditors ...RequestEditorFn) (*QueryGroupEEDataResponse, error)

	// QueryEeGroupSubscriptionsWithResponse request
	QueryEeGroupSubscriptionsWithResponse(ctx context.Context, ueGroupId VarUeGroupId, params *QueryEeGroupSubscriptionsParams, reqEditors ...RequestEditorFn) (*QueryEeGroupSubscriptionsResponse, error)

	// CreateEeGroupSubscriptionsWithBodyWithResponse request with any body
	CreateEeGroupSubscriptionsWithBodyWithResponse(ctx context.Context, ueGroupId VarUeGroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEeGroupSubscriptionsResponse, error)

	CreateEeGroupSubscriptionsWithResponse(ctx context.Context, ueGroupId VarUeGroupId, body CreateEeGroupSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEeGroupSubscriptionsResponse, error)

	// RemoveEeGroupSubscriptionsWithResponse request
	RemoveEeGroupSubscriptionsWithResponse(ctx context.Context, ueGroupId VarUeGroupId, subsId string, reqEditors ...RequestEditorFn) (*RemoveEeGroupSubscriptionsResponse, error)

	// QueryEeGroupSubscriptionWithResponse request
	QueryEeGroupSubscriptionWithResponse(ctx context.Context, ueGroupId VarUeGroupId, subsId string, reqEditors ...RequestEditorFn) (*QueryEeGroupSubscriptionResponse, error)

	// ModifyEeGroupSubscriptionWithBodyWithResponse request with any body
	ModifyEeGroupSubscriptionWithBodyWithResponse(ctx context.Context, ueGroupId VarUeGroupId, subsId string, params *ModifyEeGroupSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyEeGroupSubscriptionResponse, error)

	ModifyEeGroupSubscriptionWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueGroupId VarUeGroupId, subsId string, params *ModifyEeGroupSubscriptionParams, body ModifyEeGroupSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyEeGroupSubscriptionResponse, error)

	// UpdateEeGroupSubscriptionsWithBodyWithResponse request with any body
	UpdateEeGroupSubscriptionsWithBodyWithResponse(ctx context.Context, ueGroupId VarUeGroupId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEeGroupSubscriptionsResponse, error)

	UpdateEeGroupSubscriptionsWithResponse(ctx context.Context, ueGroupId VarUeGroupId, subsId string, body UpdateEeGroupSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEeGroupSubscriptionsResponse, error)

	// GetSharedDataWithResponse request
	GetSharedDataWithResponse(ctx context.Context, params *GetSharedDataParams, reqEditors ...RequestEditorFn) (*GetSharedDataResponse, error)

	// GetIndividualSharedDataWithResponse request
	GetIndividualSharedDataWithResponse(ctx context.Context, sharedDataId externalRef7.SharedDataId, params *GetIndividualSharedDataParams, reqEditors ...RequestEditorFn) (*GetIndividualSharedDataResponse, error)

	// RemoveMultipleSubscriptionDataSubscriptionsWithResponse request
	RemoveMultipleSubscriptionDataSubscriptionsWithResponse(ctx context.Context, params *RemoveMultipleSubscriptionDataSubscriptionsParams, reqEditors ...RequestEditorFn) (*RemoveMultipleSubscriptionDataSubscriptionsResponse, error)

	// QuerySubsToNotifyWithResponse request
	QuerySubsToNotifyWithResponse(ctx context.Context, params *QuerySubsToNotifyParams, reqEditors ...RequestEditorFn) (*QuerySubsToNotifyResponse, error)

	// SubscriptionDataSubscriptionsWithBodyWithResponse request with any body
	SubscriptionDataSubscriptionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscriptionDataSubscriptionsResponse, error)

	SubscriptionDataSubscriptionsWithResponse(ctx context.Context, body SubscriptionDataSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscriptionDataSubscriptionsResponse, error)

	// RemovesubscriptionDataSubscriptionsWithResponse request
	RemovesubscriptionDataSubscriptionsWithResponse(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*RemovesubscriptionDataSubscriptionsResponse, error)

	// QuerySubscriptionDataSubscriptionsWithResponse request
	QuerySubscriptionDataSubscriptionsWithResponse(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*QuerySubscriptionDataSubscriptionsResponse, error)

	// ModifysubscriptionDataSubscriptionWithBodyWithResponse request with any body
	ModifysubscriptionDataSubscriptionWithBodyWithResponse(ctx context.Context, subsId string, params *ModifysubscriptionDataSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifysubscriptionDataSubscriptionResponse, error)

	ModifysubscriptionDataSubscriptionWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, subsId string, params *ModifysubscriptionDataSubscriptionParams, body ModifysubscriptionDataSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifysubscriptionDataSubscriptionResponse, error)

	// DeleteAuthenticationStatusWithResponse request
	DeleteAuthenticationStatusWithResponse(ctx context.Context, ueId externalRef2.Supi, reqEditors ...RequestEditorFn) (*DeleteAuthenticationStatusResponse, error)

	// QueryAuthenticationStatusWithResponse request
	QueryAuthenticationStatusWithResponse(ctx context.Context, ueId externalRef2.Supi, params *QueryAuthenticationStatusParams, reqEditors ...RequestEditorFn) (*QueryAuthenticationStatusResponse, error)

	// CreateAuthenticationStatusWithBodyWithResponse request with any body
	CreateAuthenticationStatusWithBodyWithResponse(ctx context.Context, ueId externalRef2.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthenticationStatusResponse, error)

	CreateAuthenticationStatusWithResponse(ctx context.Context, ueId externalRef2.Supi, body CreateAuthenticationStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthenticationStatusResponse, error)

	// DeleteIndividualAuthenticationStatusWithResponse request
	DeleteIndividualAuthenticationStatusWithResponse(ctx context.Context, ueId externalRef2.Supi, servingNetworkName externalRef8.ServingNetworkName, reqEditors ...RequestEditorFn) (*DeleteIndividualAuthenticationStatusResponse, error)

	// QueryIndividualAuthenticationStatusWithResponse request
	QueryIndividualAuthenticationStatusWithResponse(ctx context.Context, ueId externalRef2.Supi, servingNetworkName externalRef8.ServingNetworkName, params *QueryIndividualAuthenticationStatusParams, reqEditors ...RequestEditorFn) (*QueryIndividualAuthenticationStatusResponse, error)

	// CreateIndividualAuthenticationStatusWithBodyWithResponse request with any body
	CreateIndividualAuthenticationStatusWithBodyWithResponse(ctx context.Context, ueId externalRef2.Supi, servingNetworkName externalRef8.ServingNetworkName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualAuthenticationStatusResponse, error)

	CreateIndividualAuthenticationStatusWithResponse(ctx context.Context, ueId externalRef2.Supi, servingNetworkName externalRef8.ServingNetworkName, body CreateIndividualAuthenticationStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualAuthenticationStatusResponse, error)

	// QueryAuthSubsDataWithResponse request
	QueryAuthSubsDataWithResponse(ctx context.Context, ueId externalRef2.Supi, params *QueryAuthSubsDataParams, reqEditors ...RequestEditorFn) (*QueryAuthSubsDataResponse, error)

	// ModifyAuthenticationSubscriptionWithBodyWithResponse request with any body
	ModifyAuthenticationSubscriptionWithBodyWithResponse(ctx context.Context, ueId externalRef2.Supi, params *ModifyAuthenticationSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyAuthenticationSubscriptionResponse, error)

	ModifyAuthenticationSubscriptionWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.Supi, params *ModifyAuthenticationSubscriptionParams, body ModifyAuthenticationSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyAuthenticationSubscriptionResponse, error)

	// QueryContextDataWithResponse request
	QueryContextDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryContextDataParams, reqEditors ...RequestEditorFn) (*QueryContextDataResponse, error)

	// QueryAmfContext3gppWithResponse request
	QueryAmfContext3gppWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryAmfContext3gppParams, reqEditors ...RequestEditorFn) (*QueryAmfContext3gppResponse, error)

	// AmfContext3gppWithBodyWithResponse request with any body
	AmfContext3gppWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *AmfContext3gppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AmfContext3gppResponse, error)

	AmfContext3gppWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *AmfContext3gppParams, body AmfContext3gppApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*AmfContext3gppResponse, error)

	// CreateAmfContext3gppWithBodyWithResponse request with any body
	CreateAmfContext3gppWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAmfContext3gppResponse, error)

	CreateAmfContext3gppWithResponse(ctx context.Context, ueId externalRef2.VarUeId, body CreateAmfContext3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAmfContext3gppResponse, error)

	// QueryAmfContextNon3gppWithResponse request
	QueryAmfContextNon3gppWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryAmfContextNon3gppParams, reqEditors ...RequestEditorFn) (*QueryAmfContextNon3gppResponse, error)

	// AmfContextNon3gppWithBodyWithResponse request with any body
	AmfContextNon3gppWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *AmfContextNon3gppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AmfContextNon3gppResponse, error)

	AmfContextNon3gppWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *AmfContextNon3gppParams, body AmfContextNon3gppApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*AmfContextNon3gppResponse, error)

	// CreateAmfContextNon3gppWithBodyWithResponse request with any body
	CreateAmfContextNon3gppWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAmfContextNon3gppResponse, error)

	CreateAmfContextNon3gppWithResponse(ctx context.Context, ueId externalRef2.VarUeId, body CreateAmfContextNon3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAmfContextNon3gppResponse, error)

	// QueryeesubscriptionsWithResponse request
	QueryeesubscriptionsWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryeesubscriptionsParams, reqEditors ...RequestEditorFn) (*QueryeesubscriptionsResponse, error)

	// CreateEeSubscriptionsWithBodyWithResponse request with any body
	CreateEeSubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEeSubscriptionsResponse, error)

	CreateEeSubscriptionsWithResponse(ctx context.Context, ueId externalRef2.VarUeId, body CreateEeSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEeSubscriptionsResponse, error)

	// RemoveeeSubscriptionsWithResponse request
	RemoveeeSubscriptionsWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*RemoveeeSubscriptionsResponse, error)

	// QueryeeSubscriptionWithResponse request
	QueryeeSubscriptionWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*QueryeeSubscriptionResponse, error)

	// ModifyEesubscriptionWithBodyWithResponse request with any body
	ModifyEesubscriptionWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyEesubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyEesubscriptionResponse, error)

	ModifyEesubscriptionWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyEesubscriptionParams, body ModifyEesubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyEesubscriptionResponse, error)

	// UpdateEesubscriptionsWithBodyWithResponse request with any body
	UpdateEesubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEesubscriptionsResponse, error)

	UpdateEesubscriptionsWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, body UpdateEesubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEesubscriptionsResponse, error)

	// RemoveAmfSubscriptionsInfoWithResponse request
	RemoveAmfSubscriptionsInfoWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*RemoveAmfSubscriptionsInfoResponse, error)

	// GetAmfSubscriptionInfoWithResponse request
	GetAmfSubscriptionInfoWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*GetAmfSubscriptionInfoResponse, error)

	// ModifyAmfSubscriptionInfoWithBodyWithResponse request with any body
	ModifyAmfSubscriptionInfoWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyAmfSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyAmfSubscriptionInfoResponse, error)

	ModifyAmfSubscriptionInfoWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyAmfSubscriptionInfoParams, body ModifyAmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyAmfSubscriptionInfoResponse, error)

	// CreateAMFSubscriptionsWithBodyWithResponse request with any body
	CreateAMFSubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAMFSubscriptionsResponse, error)

	CreateAMFSubscriptionsWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, body CreateAMFSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAMFSubscriptionsResponse, error)

	// RemoveHssSubscriptionsInfoWithResponse request
	RemoveHssSubscriptionsInfoWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*RemoveHssSubscriptionsInfoResponse, error)

	// GetHssSubscriptionInfoWithResponse request
	GetHssSubscriptionInfoWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*GetHssSubscriptionInfoResponse, error)

	// ModifyHssSubscriptionInfoWithBodyWithResponse request with any body
	ModifyHssSubscriptionInfoWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyHssSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyHssSubscriptionInfoResponse, error)

	ModifyHssSubscriptionInfoWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyHssSubscriptionInfoParams, body ModifyHssSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyHssSubscriptionInfoResponse, error)

	// CreateHSSSubscriptionsWithBodyWithResponse request with any body
	CreateHSSSubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHSSSubscriptionsResponse, error)

	CreateHSSSubscriptionsWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, body CreateHSSSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHSSSubscriptionsResponse, error)

	// RemoveSmfSubscriptionsInfoWithResponse request
	RemoveSmfSubscriptionsInfoWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*RemoveSmfSubscriptionsInfoResponse, error)

	// GetSmfSubscriptionInfoWithResponse request
	GetSmfSubscriptionInfoWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*GetSmfSubscriptionInfoResponse, error)

	// ModifySmfSubscriptionInfoWithBodyWithResponse request with any body
	ModifySmfSubscriptionInfoWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifySmfSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifySmfSubscriptionInfoResponse, error)

	ModifySmfSubscriptionInfoWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifySmfSubscriptionInfoParams, body ModifySmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifySmfSubscriptionInfoResponse, error)

	// CreateSMFSubscriptionsWithBodyWithResponse request with any body
	CreateSMFSubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSMFSubscriptionsResponse, error)

	CreateSMFSubscriptionsWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, body CreateSMFSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSMFSubscriptionsResponse, error)

	// DeleteIpSmGwContextWithResponse request
	DeleteIpSmGwContextWithResponse(ctx context.Context, ueId externalRef2.VarUeId, reqEditors ...RequestEditorFn) (*DeleteIpSmGwContextResponse, error)

	// QueryIpSmGwContextWithResponse request
	QueryIpSmGwContextWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryIpSmGwContextParams, reqEditors ...RequestEditorFn) (*QueryIpSmGwContextResponse, error)

	// ModifyIpSmGwContextWithBodyWithResponse request with any body
	ModifyIpSmGwContextWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyIpSmGwContextResponse, error)

	ModifyIpSmGwContextWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, body ModifyIpSmGwContextApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyIpSmGwContextResponse, error)

	// CreateIpSmGwContextWithBodyWithResponse request with any body
	CreateIpSmGwContextWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIpSmGwContextResponse, error)

	CreateIpSmGwContextWithResponse(ctx context.Context, ueId externalRef2.VarUeId, body CreateIpSmGwContextJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIpSmGwContextResponse, error)

	// QueryUeLocationWithResponse request
	QueryUeLocationWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryUeLocationParams, reqEditors ...RequestEditorFn) (*QueryUeLocationResponse, error)

	// DeleteMessageWaitingDataWithResponse request
	DeleteMessageWaitingDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, reqEditors ...RequestEditorFn) (*DeleteMessageWaitingDataResponse, error)

	// QueryMessageWaitingDataWithResponse request
	QueryMessageWaitingDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryMessageWaitingDataParams, reqEditors ...RequestEditorFn) (*QueryMessageWaitingDataResponse, error)

	// ModifyMessageWaitingDataWithBodyWithResponse request with any body
	ModifyMessageWaitingDataWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyMessageWaitingDataResponse, error)

	ModifyMessageWaitingDataWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, body ModifyMessageWaitingDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyMessageWaitingDataResponse, error)

	// CreateMessageWaitingDataWithBodyWithResponse request with any body
	CreateMessageWaitingDataWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMessageWaitingDataResponse, error)

	CreateMessageWaitingDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, body CreateMessageWaitingDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMessageWaitingDataResponse, error)

	// QuerysdmsubscriptionsWithResponse request
	QuerysdmsubscriptionsWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QuerysdmsubscriptionsParams, reqEditors ...RequestEditorFn) (*QuerysdmsubscriptionsResponse, error)

	// CreateSdmSubscriptionsWithBodyWithResponse request with any body
	CreateSdmSubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSdmSubscriptionsResponse, error)

	CreateSdmSubscriptionsWithResponse(ctx context.Context, ueId externalRef2.VarUeId, body CreateSdmSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSdmSubscriptionsResponse, error)

	// RemovesdmSubscriptionsWithResponse request
	RemovesdmSubscriptionsWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*RemovesdmSubscriptionsResponse, error)

	// QuerysdmSubscriptionWithResponse request
	QuerysdmSubscriptionWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*QuerysdmSubscriptionResponse, error)

	// ModifysdmSubscriptionWithBodyWithResponse request with any body
	ModifysdmSubscriptionWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifysdmSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifysdmSubscriptionResponse, error)

	ModifysdmSubscriptionWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifysdmSubscriptionParams, body ModifysdmSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifysdmSubscriptionResponse, error)

	// UpdatesdmsubscriptionsWithBodyWithResponse request with any body
	UpdatesdmsubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatesdmsubscriptionsResponse, error)

	UpdatesdmsubscriptionsWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, body UpdatesdmsubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatesdmsubscriptionsResponse, error)

	// RemoveHssSDMSubscriptionsInfoWithResponse request
	RemoveHssSDMSubscriptionsInfoWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*RemoveHssSDMSubscriptionsInfoResponse, error)

	// GetHssSDMSubscriptionInfoWithResponse request
	GetHssSDMSubscriptionInfoWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*GetHssSDMSubscriptionInfoResponse, error)

	// ModifyHssSDMSubscriptionInfoWithBodyWithResponse request with any body
	ModifyHssSDMSubscriptionInfoWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyHssSDMSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyHssSDMSubscriptionInfoResponse, error)

	ModifyHssSDMSubscriptionInfoWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyHssSDMSubscriptionInfoParams, body ModifyHssSDMSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyHssSDMSubscriptionInfoResponse, error)

	// CreateHSSSDMSubscriptionsWithBodyWithResponse request with any body
	CreateHSSSDMSubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHSSSDMSubscriptionsResponse, error)

	CreateHSSSDMSubscriptionsWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, body CreateHSSSDMSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHSSSDMSubscriptionsResponse, error)

	// QuerySmfRegListWithResponse request
	QuerySmfRegListWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QuerySmfRegListParams, reqEditors ...RequestEditorFn) (*QuerySmfRegListResponse, error)

	// DeleteSmfRegistrationWithResponse request
	DeleteSmfRegistrationWithResponse(ctx context.Context, ueId externalRef2.VarUeId, pduSessionId externalRef2.PduSessionId, reqEditors ...RequestEditorFn) (*DeleteSmfRegistrationResponse, error)

	// QuerySmfRegistrationWithResponse request
	QuerySmfRegistrationWithResponse(ctx context.Context, ueId externalRef2.VarUeId, pduSessionId externalRef2.PduSessionId, params *QuerySmfRegistrationParams, reqEditors ...RequestEditorFn) (*QuerySmfRegistrationResponse, error)

	// CreateOrUpdateSmfRegistrationWithBodyWithResponse request with any body
	CreateOrUpdateSmfRegistrationWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, pduSessionId externalRef2.PduSessionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateSmfRegistrationResponse, error)

	CreateOrUpdateSmfRegistrationWithResponse(ctx context.Context, ueId externalRef2.VarUeId, pduSessionId externalRef2.PduSessionId, body CreateOrUpdateSmfRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateSmfRegistrationResponse, error)

	// DeleteSmsfContext3gppWithResponse request
	DeleteSmsfContext3gppWithResponse(ctx context.Context, ueId externalRef2.VarUeId, reqEditors ...RequestEditorFn) (*DeleteSmsfContext3gppResponse, error)

	// QuerySmsfContext3gppWithResponse request
	QuerySmsfContext3gppWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QuerySmsfContext3gppParams, reqEditors ...RequestEditorFn) (*QuerySmsfContext3gppResponse, error)

	// CreateSmsfContext3gppWithBodyWithResponse request with any body
	CreateSmsfContext3gppWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSmsfContext3gppResponse, error)

	CreateSmsfContext3gppWithResponse(ctx context.Context, ueId externalRef2.VarUeId, body CreateSmsfContext3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSmsfContext3gppResponse, error)

	// DeleteSmsfContextNon3gppWithResponse request
	DeleteSmsfContextNon3gppWithResponse(ctx context.Context, ueId externalRef2.VarUeId, reqEditors ...RequestEditorFn) (*DeleteSmsfContextNon3gppResponse, error)

	// QuerySmsfContextNon3gppWithResponse request
	QuerySmsfContextNon3gppWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QuerySmsfContextNon3gppParams, reqEditors ...RequestEditorFn) (*QuerySmsfContextNon3gppResponse, error)

	// CreateSmsfContextNon3gppWithBodyWithResponse request with any body
	CreateSmsfContextNon3gppWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSmsfContextNon3gppResponse, error)

	CreateSmsfContextNon3gppWithResponse(ctx context.Context, ueId externalRef2.VarUeId, body CreateSmsfContextNon3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSmsfContextNon3gppResponse, error)

	// QueryCoverageRestrictionDataWithResponse request
	QueryCoverageRestrictionDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryCoverageRestrictionDataParams, reqEditors ...RequestEditorFn) (*QueryCoverageRestrictionDataResponse, error)

	// QueryEEDataWithResponse request
	QueryEEDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryEEDataParams, reqEditors ...RequestEditorFn) (*QueryEEDataResponse, error)

	// GetIdentityDataWithResponse request
	GetIdentityDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *GetIdentityDataParams, reqEditors ...RequestEditorFn) (*GetIdentityDataResponse, error)

	// QueryLcsMoDataWithResponse request
	QueryLcsMoDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryLcsMoDataParams, reqEditors ...RequestEditorFn) (*QueryLcsMoDataResponse, error)

	// QueryLcsPrivacyDataWithResponse request
	QueryLcsPrivacyDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryLcsPrivacyDataParams, reqEditors ...RequestEditorFn) (*QueryLcsPrivacyDataResponse, error)

	// GetNiddAuDataWithResponse request
	GetNiddAuDataWithResponse(ctx context.Context, ueId string, params *GetNiddAuDataParams, reqEditors ...RequestEditorFn) (*GetNiddAuDataResponse, error)

	// GetOdbDataWithResponse request
	GetOdbDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, reqEditors ...RequestEditorFn) (*GetOdbDataResponse, error)

	// QueryOperSpecDataWithResponse request
	QueryOperSpecDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryOperSpecDataParams, reqEditors ...RequestEditorFn) (*QueryOperSpecDataResponse, error)

	// ModifyOperSpecDataWithBodyWithResponse request with any body
	ModifyOperSpecDataWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *ModifyOperSpecDataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyOperSpecDataResponse, error)

	ModifyOperSpecDataWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *ModifyOperSpecDataParams, body ModifyOperSpecDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyOperSpecDataResponse, error)

	// GetppDataWithResponse request
	GetppDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *GetppDataParams, reqEditors ...RequestEditorFn) (*GetppDataResponse, error)

	// ModifyPpDataWithBodyWithResponse request with any body
	ModifyPpDataWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *ModifyPpDataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyPpDataResponse, error)

	ModifyPpDataWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *ModifyPpDataParams, body ModifyPpDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyPpDataResponse, error)

	// QueryPPDataWithResponse request
	QueryPPDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryPPDataParams, reqEditors ...RequestEditorFn) (*QueryPPDataResponse, error)

	// QueryAuthSoRWithResponse request
	QueryAuthSoRWithResponse(ctx context.Context, ueId externalRef2.Supi, params *QueryAuthSoRParams, reqEditors ...RequestEditorFn) (*QueryAuthSoRResponse, error)

	// CreateAuthenticationSoRWithBodyWithResponse request with any body
	CreateAuthenticationSoRWithBodyWithResponse(ctx context.Context, ueId externalRef2.Supi, params *CreateAuthenticationSoRParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthenticationSoRResponse, error)

	CreateAuthenticationSoRWithResponse(ctx context.Context, ueId externalRef2.Supi, params *CreateAuthenticationSoRParams, body CreateAuthenticationSoRJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthenticationSoRResponse, error)

	// QueryCagAckWithResponse request
	QueryCagAckWithResponse(ctx context.Context, ueId externalRef2.Supi, params *QueryCagAckParams, reqEditors ...RequestEditorFn) (*QueryCagAckResponse, error)

	// CreateCagUpdateAckWithBodyWithResponse request with any body
	CreateCagUpdateAckWithBodyWithResponse(ctx context.Context, ueId externalRef2.Supi, params *CreateCagUpdateAckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCagUpdateAckResponse, error)

	CreateCagUpdateAckWithResponse(ctx context.Context, ueId externalRef2.Supi, params *CreateCagUpdateAckParams, body CreateCagUpdateAckJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCagUpdateAckResponse, error)

	// QueryNssaiAckWithResponse request
	QueryNssaiAckWithResponse(ctx context.Context, ueId externalRef2.Supi, params *QueryNssaiAckParams, reqEditors ...RequestEditorFn) (*QueryNssaiAckResponse, error)

	// CreateOrUpdateNssaiAckWithBodyWithResponse request with any body
	CreateOrUpdateNssaiAckWithBodyWithResponse(ctx context.Context, ueId externalRef2.Supi, params *CreateOrUpdateNssaiAckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateNssaiAckResponse, error)

	CreateOrUpdateNssaiAckWithResponse(ctx context.Context, ueId externalRef2.Supi, params *CreateOrUpdateNssaiAckParams, body CreateOrUpdateNssaiAckJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateNssaiAckResponse, error)

	// QueryAuthUPUWithResponse request
	QueryAuthUPUWithResponse(ctx context.Context, ueId externalRef2.Supi, params *QueryAuthUPUParams, reqEditors ...RequestEditorFn) (*QueryAuthUPUResponse, error)

	// CreateAuthenticationUPUWithBodyWithResponse request with any body
	CreateAuthenticationUPUWithBodyWithResponse(ctx context.Context, ueId externalRef2.Supi, params *CreateAuthenticationUPUParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthenticationUPUResponse, error)

	CreateAuthenticationUPUWithResponse(ctx context.Context, ueId externalRef2.Supi, params *CreateAuthenticationUPUParams, body CreateAuthenticationUPUJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthenticationUPUResponse, error)

	// QueryV2xDataWithResponse request
	QueryV2xDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryV2xDataParams, reqEditors ...RequestEditorFn) (*QueryV2xDataResponse, error)

	// QueryProvisionedDataWithResponse request
	QueryProvisionedDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QueryProvisionedDataParams, reqEditors ...RequestEditorFn) (*QueryProvisionedDataResponse, error)

	// QueryAmDataWithResponse request
	QueryAmDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QueryAmDataParams, reqEditors ...RequestEditorFn) (*QueryAmDataResponse, error)

	// QueryLcsBcaDataWithResponse request
	QueryLcsBcaDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QueryLcsBcaDataParams, reqEditors ...RequestEditorFn) (*QueryLcsBcaDataResponse, error)

	// QuerySmDataWithResponse request
	QuerySmDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QuerySmDataParams, reqEditors ...RequestEditorFn) (*QuerySmDataResponse, error)

	// QuerySmfSelectDataWithResponse request
	QuerySmfSelectDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QuerySmfSelectDataParams, reqEditors ...RequestEditorFn) (*QuerySmfSelectDataResponse, error)

	// QuerySmsDataWithResponse request
	QuerySmsDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QuerySmsDataParams, reqEditors ...RequestEditorFn) (*QuerySmsDataResponse, error)

	// QuerySmsMngDataWithResponse request
	QuerySmsMngDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QuerySmsMngDataParams, reqEditors ...RequestEditorFn) (*QuerySmsMngDataResponse, error)

	// QueryTraceDataWithResponse request
	QueryTraceDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QueryTraceDataParams, reqEditors ...RequestEditorFn) (*QueryTraceDataResponse, error)
}

type Query5GVnGroupResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *map[string]externalRef6.N5GVnGroupConfiguration
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r Query5GVnGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Query5GVnGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Query5GVnGroupInternalResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *map[string]externalRef6.N5GVnGroupConfiguration
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r Query5GVnGroupInternalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Query5GVnGroupInternalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Query5GVNGroupPPDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *Pp5gVnGroupProfileData
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r Query5GVNGroupPPDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Query5GVNGroupPPDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Delete5GVnGroupResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r Delete5GVnGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Delete5GVnGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get5GVnGroupConfigurationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef6.N5GVnGroupConfiguration
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r Get5GVnGroupConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get5GVnGroupConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Modify5GVnGroupResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef2.PatchResult
	ApplicationproblemJSON403     *externalRef2.ProblemDetails
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r Modify5GVnGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Modify5GVnGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Create5GVnGroupResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef6.N5GVnGroupConfiguration
	ApplicationproblemJSON403     *externalRef2.N403
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r Create5GVnGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Create5GVnGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupIdentifiersResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef7.GroupIdentifiers
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r GetGroupIdentifiersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupIdentifiersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryGroupEEDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *EeGroupProfileData
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryGroupEEDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryGroupEEDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryEeGroupSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]EeSubscription
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryEeGroupSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryEeGroupSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEeGroupSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *EeSubscription
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r CreateEeGroupSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEeGroupSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveEeGroupSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r RemoveEeGroupSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveEeGroupSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryEeGroupSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]EeSubscription
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryEeGroupSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryEeGroupSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyEeGroupSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef2.PatchResult
	ApplicationproblemJSON403     *externalRef2.N403
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r ModifyEeGroupSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyEeGroupSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEeGroupSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON404     *externalRef2.ProblemDetails
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r UpdateEeGroupSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEeGroupSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSharedDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]externalRef7.SharedData
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r GetSharedDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSharedDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndividualSharedDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef7.SharedData
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r GetIndividualSharedDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndividualSharedDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveMultipleSubscriptionDataSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r RemoveMultipleSubscriptionDataSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveMultipleSubscriptionDataSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerySubsToNotifyResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]SubscriptionDataSubscriptions
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QuerySubsToNotifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerySubsToNotifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubscriptionDataSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *SubscriptionDataSubscriptions
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r SubscriptionDataSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubscriptionDataSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemovesubscriptionDataSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r RemovesubscriptionDataSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemovesubscriptionDataSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerySubscriptionDataSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]SubscriptionDataSubscriptions
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QuerySubscriptionDataSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerySubscriptionDataSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifysubscriptionDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef2.PatchResult
	ApplicationproblemJSON403     *externalRef2.N403
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r ModifysubscriptionDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifysubscriptionDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAuthenticationStatusResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r DeleteAuthenticationStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAuthenticationStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryAuthenticationStatusResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.AuthEvent
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryAuthenticationStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryAuthenticationStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAuthenticationStatusResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r CreateAuthenticationStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAuthenticationStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndividualAuthenticationStatusResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r DeleteIndividualAuthenticationStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndividualAuthenticationStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryIndividualAuthenticationStatusResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef8.AuthEvent
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryIndividualAuthenticationStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryIndividualAuthenticationStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIndividualAuthenticationStatusResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r CreateIndividualAuthenticationStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIndividualAuthenticationStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryAuthSubsDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *AuthenticationSubscription
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryAuthSubsDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryAuthSubsDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyAuthenticationSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef2.PatchResult
	ApplicationproblemJSON403     *externalRef2.ProblemDetails
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r ModifyAuthenticationSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyAuthenticationSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryContextDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *ContextDataSets
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryContextDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryContextDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryAmfContext3gppResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *Amf3GppAccessRegistration
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryAmfContext3gppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryAmfContext3gppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AmfContext3gppResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef2.PatchResult
	ApplicationproblemJSON403     *externalRef2.ProblemDetails
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r AmfContext3gppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AmfContext3gppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAmfContext3gppResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *Amf3GppAccessRegistration
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r CreateAmfContext3gppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAmfContext3gppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryAmfContextNon3gppResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *AmfNon3GppAccessRegistration
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryAmfContextNon3gppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryAmfContextNon3gppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AmfContextNon3gppResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef2.PatchResult
	ApplicationproblemJSON403     *externalRef2.ProblemDetails
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r AmfContextNon3gppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AmfContextNon3gppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAmfContextNon3gppResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *Amf3GppAccessRegistration
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r CreateAmfContextNon3gppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAmfContextNon3gppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryeesubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]EeSubscription
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryeesubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryeesubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEeSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *EeSubscription
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r CreateEeSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEeSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveeeSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r RemoveeeSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveeeSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryeeSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]EeSubscription
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryeeSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryeeSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyEesubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef2.PatchResult
	ApplicationproblemJSON403     *externalRef2.N403
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r ModifyEesubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyEesubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEesubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON404     *externalRef2.ProblemDetails
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r UpdateEesubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEesubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveAmfSubscriptionsInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r RemoveAmfSubscriptionsInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveAmfSubscriptionsInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAmfSubscriptionInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]AmfSubscriptionInfo
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r GetAmfSubscriptionInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAmfSubscriptionInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyAmfSubscriptionInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef2.PatchResult
	ApplicationproblemJSON403     *externalRef2.ProblemDetails
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r ModifyAmfSubscriptionInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyAmfSubscriptionInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAMFSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r CreateAMFSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAMFSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveHssSubscriptionsInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r RemoveHssSubscriptionsInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveHssSubscriptionsInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHssSubscriptionInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *SmfSubscriptionInfo
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r GetHssSubscriptionInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHssSubscriptionInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyHssSubscriptionInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef2.PatchResult
	ApplicationproblemJSON403     *externalRef2.ProblemDetails
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r ModifyHssSubscriptionInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyHssSubscriptionInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHSSSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r CreateHSSSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHSSSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveSmfSubscriptionsInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r RemoveSmfSubscriptionsInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveSmfSubscriptionsInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmfSubscriptionInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *SmfSubscriptionInfo
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r GetSmfSubscriptionInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmfSubscriptionInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifySmfSubscriptionInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef2.PatchResult
	ApplicationproblemJSON403     *externalRef2.ProblemDetails
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r ModifySmfSubscriptionInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifySmfSubscriptionInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSMFSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r CreateSMFSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSMFSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIpSmGwContextResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r DeleteIpSmGwContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIpSmGwContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryIpSmGwContextResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *IpSmGwRegistration
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryIpSmGwContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryIpSmGwContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyIpSmGwContextResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON403     *externalRef2.N403
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r ModifyIpSmGwContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyIpSmGwContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIpSmGwContextResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r CreateIpSmGwContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIpSmGwContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryUeLocationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *LocationInfo
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryUeLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryUeLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMessageWaitingDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r DeleteMessageWaitingDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMessageWaitingDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryMessageWaitingDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *MessageWaitingData
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryMessageWaitingDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryMessageWaitingDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyMessageWaitingDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON403     *externalRef2.N403
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r ModifyMessageWaitingDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyMessageWaitingDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMessageWaitingDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r CreateMessageWaitingDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMessageWaitingDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerysdmsubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]SdmSubscription
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QuerysdmsubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerysdmsubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSdmSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *SdmSubscription
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r CreateSdmSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSdmSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemovesdmSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r RemovesdmSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemovesdmSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerysdmSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]SdmSubscription
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QuerysdmSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerysdmSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifysdmSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef2.PatchResult
	ApplicationproblemJSON403     *externalRef2.N403
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r ModifysdmSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifysdmSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatesdmsubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON404     *externalRef2.ProblemDetails
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r UpdatesdmsubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatesdmsubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveHssSDMSubscriptionsInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r RemoveHssSDMSubscriptionsInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveHssSDMSubscriptionsInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHssSDMSubscriptionInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *SmfSubscriptionInfo
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r GetHssSDMSubscriptionInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHssSDMSubscriptionInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyHssSDMSubscriptionInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef2.PatchResult
	ApplicationproblemJSON403     *externalRef2.ProblemDetails
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r ModifyHssSDMSubscriptionInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyHssSDMSubscriptionInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHSSSDMSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r CreateHSSSDMSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHSSSDMSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerySmfRegListResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *SmfRegList
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QuerySmfRegListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerySmfRegListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSmfRegistrationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r DeleteSmfRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSmfRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerySmfRegistrationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *SmfRegistration
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QuerySmfRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerySmfRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrUpdateSmfRegistrationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *SmfRegistration
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r CreateOrUpdateSmfRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrUpdateSmfRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSmsfContext3gppResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r DeleteSmsfContext3gppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSmsfContext3gppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerySmsfContext3gppResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *SmsfRegistration
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QuerySmsfContext3gppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerySmsfContext3gppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSmsfContext3gppResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *SmsfRegistration
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r CreateSmsfContext3gppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSmsfContext3gppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSmsfContextNon3gppResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r DeleteSmsfContextNon3gppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSmsfContextNon3gppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerySmsfContextNon3gppResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *SmsfRegistration
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QuerySmsfContextNon3gppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerySmsfContextNon3gppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSmsfContextNon3gppResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *SmsfRegistration
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r CreateSmsfContextNon3gppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSmsfContextNon3gppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryCoverageRestrictionDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *EnhancedCoverageRestrictionData
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryCoverageRestrictionDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryCoverageRestrictionDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryEEDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *EeProfileData
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryEEDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryEEDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdentityDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *IdentityData
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r GetIdentityDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdentityDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryLcsMoDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *LcsMoData
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryLcsMoDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryLcsMoDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryLcsPrivacyDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *LcsPrivacyData
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryLcsPrivacyDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryLcsPrivacyDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNiddAuDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *AuthorizationData
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r GetNiddAuDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNiddAuDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOdbDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef2.OdbData
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r GetOdbDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOdbDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryOperSpecDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *map[string]OperatorSpecificDataContainer
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryOperSpecDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryOperSpecDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyOperSpecDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef2.PatchResult
	ApplicationproblemJSON403     *externalRef2.ProblemDetails
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r ModifyOperSpecDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyOperSpecDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetppDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *PpData
	ApplicationproblemJSON403     *externalRef2.ProblemDetails
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r GetppDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetppDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyPpDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef2.PatchResult
	ApplicationproblemJSON403     *externalRef2.ProblemDetails
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r ModifyPpDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyPpDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryPPDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *PpProfileData
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryPPDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryPPDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryAuthSoRResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *SorData
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryAuthSoRResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryAuthSoRResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAuthenticationSoRResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r CreateAuthenticationSoRResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAuthenticationSoRResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryCagAckResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *CagAckData
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryCagAckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryCagAckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCagUpdateAckResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r CreateCagUpdateAckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCagUpdateAckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryNssaiAckResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *NssaiAckData
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryNssaiAckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryNssaiAckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrUpdateNssaiAckResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r CreateOrUpdateNssaiAckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrUpdateNssaiAckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryAuthUPUResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *UpuData
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryAuthUPUResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryAuthUPUResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAuthenticationUPUResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r CreateAuthenticationUPUResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAuthenticationUPUResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryV2xDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *V2xSubscriptionData
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryV2xDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryV2xDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryProvisionedDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *ProvisionedDataSets
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryProvisionedDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryProvisionedDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryAmDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *AccessAndMobilitySubscriptionData
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryAmDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryAmDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryLcsBcaDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *LcsBroadcastAssistanceTypesData
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r QueryLcsBcaDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryLcsBcaDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerySmDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]SessionManagementSubscriptionData
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QuerySmDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerySmDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerySmfSelectDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *SmfSelectionSubscriptionData
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QuerySmfSelectDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerySmfSelectDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerySmsDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *SmsSubscriptionData
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QuerySmsDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerySmsDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerySmsMngDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *SmsManagementSubscriptionData
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QuerySmsMngDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerySmsMngDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryTraceDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef2.TraceData
	ApplicationproblemJSONDefault *externalRef2.Default
}

// Status returns HTTPResponse.Status
func (r QueryTraceDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryTraceDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Query5GVnGroupWithResponse request returning *Query5GVnGroupResponse
func (c *ClientWithResponses) Query5GVnGroupWithResponse(ctx context.Context, params *Query5GVnGroupParams, reqEditors ...RequestEditorFn) (*Query5GVnGroupResponse, error) {
	rsp, err := c.Query5GVnGroup(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuery5GVnGroupResponse(rsp)
}

// Query5GVnGroupInternalWithResponse request returning *Query5GVnGroupInternalResponse
func (c *ClientWithResponses) Query5GVnGroupInternalWithResponse(ctx context.Context, params *Query5GVnGroupInternalParams, reqEditors ...RequestEditorFn) (*Query5GVnGroupInternalResponse, error) {
	rsp, err := c.Query5GVnGroupInternal(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuery5GVnGroupInternalResponse(rsp)
}

// Query5GVNGroupPPDataWithResponse request returning *Query5GVNGroupPPDataResponse
func (c *ClientWithResponses) Query5GVNGroupPPDataWithResponse(ctx context.Context, params *Query5GVNGroupPPDataParams, reqEditors ...RequestEditorFn) (*Query5GVNGroupPPDataResponse, error) {
	rsp, err := c.Query5GVNGroupPPData(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuery5GVNGroupPPDataResponse(rsp)
}

// Delete5GVnGroupWithResponse request returning *Delete5GVnGroupResponse
func (c *ClientWithResponses) Delete5GVnGroupWithResponse(ctx context.Context, externalGroupId externalRef7.ExtGroupId, reqEditors ...RequestEditorFn) (*Delete5GVnGroupResponse, error) {
	rsp, err := c.Delete5GVnGroup(ctx, externalGroupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelete5GVnGroupResponse(rsp)
}

// Get5GVnGroupConfigurationWithResponse request returning *Get5GVnGroupConfigurationResponse
func (c *ClientWithResponses) Get5GVnGroupConfigurationWithResponse(ctx context.Context, externalGroupId externalRef7.ExtGroupId, reqEditors ...RequestEditorFn) (*Get5GVnGroupConfigurationResponse, error) {
	rsp, err := c.Get5GVnGroupConfiguration(ctx, externalGroupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet5GVnGroupConfigurationResponse(rsp)
}

// Modify5GVnGroupWithBodyWithResponse request with arbitrary body returning *Modify5GVnGroupResponse
func (c *ClientWithResponses) Modify5GVnGroupWithBodyWithResponse(ctx context.Context, externalGroupId externalRef7.ExtGroupId, params *Modify5GVnGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Modify5GVnGroupResponse, error) {
	rsp, err := c.Modify5GVnGroupWithBody(ctx, externalGroupId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModify5GVnGroupResponse(rsp)
}

func (c *ClientWithResponses) Modify5GVnGroupWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, externalGroupId externalRef7.ExtGroupId, params *Modify5GVnGroupParams, body Modify5GVnGroupApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*Modify5GVnGroupResponse, error) {
	rsp, err := c.Modify5GVnGroupWithApplicationJSONPatchPlusJSONBody(ctx, externalGroupId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModify5GVnGroupResponse(rsp)
}

// Create5GVnGroupWithBodyWithResponse request with arbitrary body returning *Create5GVnGroupResponse
func (c *ClientWithResponses) Create5GVnGroupWithBodyWithResponse(ctx context.Context, externalGroupId externalRef7.ExtGroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create5GVnGroupResponse, error) {
	rsp, err := c.Create5GVnGroupWithBody(ctx, externalGroupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate5GVnGroupResponse(rsp)
}

func (c *ClientWithResponses) Create5GVnGroupWithResponse(ctx context.Context, externalGroupId externalRef7.ExtGroupId, body Create5GVnGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*Create5GVnGroupResponse, error) {
	rsp, err := c.Create5GVnGroup(ctx, externalGroupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate5GVnGroupResponse(rsp)
}

// GetGroupIdentifiersWithResponse request returning *GetGroupIdentifiersResponse
func (c *ClientWithResponses) GetGroupIdentifiersWithResponse(ctx context.Context, params *GetGroupIdentifiersParams, reqEditors ...RequestEditorFn) (*GetGroupIdentifiersResponse, error) {
	rsp, err := c.GetGroupIdentifiers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupIdentifiersResponse(rsp)
}

// QueryGroupEEDataWithResponse request returning *QueryGroupEEDataResponse
func (c *ClientWithResponses) QueryGroupEEDataWithResponse(ctx context.Context, ueGroupId VarUeGroupId, params *QueryGroupEEDataParams, reqEditors ...RequestEditorFn) (*QueryGroupEEDataResponse, error) {
	rsp, err := c.QueryGroupEEData(ctx, ueGroupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryGroupEEDataResponse(rsp)
}

// QueryEeGroupSubscriptionsWithResponse request returning *QueryEeGroupSubscriptionsResponse
func (c *ClientWithResponses) QueryEeGroupSubscriptionsWithResponse(ctx context.Context, ueGroupId VarUeGroupId, params *QueryEeGroupSubscriptionsParams, reqEditors ...RequestEditorFn) (*QueryEeGroupSubscriptionsResponse, error) {
	rsp, err := c.QueryEeGroupSubscriptions(ctx, ueGroupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryEeGroupSubscriptionsResponse(rsp)
}

// CreateEeGroupSubscriptionsWithBodyWithResponse request with arbitrary body returning *CreateEeGroupSubscriptionsResponse
func (c *ClientWithResponses) CreateEeGroupSubscriptionsWithBodyWithResponse(ctx context.Context, ueGroupId VarUeGroupId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEeGroupSubscriptionsResponse, error) {
	rsp, err := c.CreateEeGroupSubscriptionsWithBody(ctx, ueGroupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEeGroupSubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) CreateEeGroupSubscriptionsWithResponse(ctx context.Context, ueGroupId VarUeGroupId, body CreateEeGroupSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEeGroupSubscriptionsResponse, error) {
	rsp, err := c.CreateEeGroupSubscriptions(ctx, ueGroupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEeGroupSubscriptionsResponse(rsp)
}

// RemoveEeGroupSubscriptionsWithResponse request returning *RemoveEeGroupSubscriptionsResponse
func (c *ClientWithResponses) RemoveEeGroupSubscriptionsWithResponse(ctx context.Context, ueGroupId VarUeGroupId, subsId string, reqEditors ...RequestEditorFn) (*RemoveEeGroupSubscriptionsResponse, error) {
	rsp, err := c.RemoveEeGroupSubscriptions(ctx, ueGroupId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveEeGroupSubscriptionsResponse(rsp)
}

// QueryEeGroupSubscriptionWithResponse request returning *QueryEeGroupSubscriptionResponse
func (c *ClientWithResponses) QueryEeGroupSubscriptionWithResponse(ctx context.Context, ueGroupId VarUeGroupId, subsId string, reqEditors ...RequestEditorFn) (*QueryEeGroupSubscriptionResponse, error) {
	rsp, err := c.QueryEeGroupSubscription(ctx, ueGroupId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryEeGroupSubscriptionResponse(rsp)
}

// ModifyEeGroupSubscriptionWithBodyWithResponse request with arbitrary body returning *ModifyEeGroupSubscriptionResponse
func (c *ClientWithResponses) ModifyEeGroupSubscriptionWithBodyWithResponse(ctx context.Context, ueGroupId VarUeGroupId, subsId string, params *ModifyEeGroupSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyEeGroupSubscriptionResponse, error) {
	rsp, err := c.ModifyEeGroupSubscriptionWithBody(ctx, ueGroupId, subsId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyEeGroupSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) ModifyEeGroupSubscriptionWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueGroupId VarUeGroupId, subsId string, params *ModifyEeGroupSubscriptionParams, body ModifyEeGroupSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyEeGroupSubscriptionResponse, error) {
	rsp, err := c.ModifyEeGroupSubscriptionWithApplicationJSONPatchPlusJSONBody(ctx, ueGroupId, subsId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyEeGroupSubscriptionResponse(rsp)
}

// UpdateEeGroupSubscriptionsWithBodyWithResponse request with arbitrary body returning *UpdateEeGroupSubscriptionsResponse
func (c *ClientWithResponses) UpdateEeGroupSubscriptionsWithBodyWithResponse(ctx context.Context, ueGroupId VarUeGroupId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEeGroupSubscriptionsResponse, error) {
	rsp, err := c.UpdateEeGroupSubscriptionsWithBody(ctx, ueGroupId, subsId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEeGroupSubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) UpdateEeGroupSubscriptionsWithResponse(ctx context.Context, ueGroupId VarUeGroupId, subsId string, body UpdateEeGroupSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEeGroupSubscriptionsResponse, error) {
	rsp, err := c.UpdateEeGroupSubscriptions(ctx, ueGroupId, subsId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEeGroupSubscriptionsResponse(rsp)
}

// GetSharedDataWithResponse request returning *GetSharedDataResponse
func (c *ClientWithResponses) GetSharedDataWithResponse(ctx context.Context, params *GetSharedDataParams, reqEditors ...RequestEditorFn) (*GetSharedDataResponse, error) {
	rsp, err := c.GetSharedData(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSharedDataResponse(rsp)
}

// GetIndividualSharedDataWithResponse request returning *GetIndividualSharedDataResponse
func (c *ClientWithResponses) GetIndividualSharedDataWithResponse(ctx context.Context, sharedDataId externalRef7.SharedDataId, params *GetIndividualSharedDataParams, reqEditors ...RequestEditorFn) (*GetIndividualSharedDataResponse, error) {
	rsp, err := c.GetIndividualSharedData(ctx, sharedDataId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndividualSharedDataResponse(rsp)
}

// RemoveMultipleSubscriptionDataSubscriptionsWithResponse request returning *RemoveMultipleSubscriptionDataSubscriptionsResponse
func (c *ClientWithResponses) RemoveMultipleSubscriptionDataSubscriptionsWithResponse(ctx context.Context, params *RemoveMultipleSubscriptionDataSubscriptionsParams, reqEditors ...RequestEditorFn) (*RemoveMultipleSubscriptionDataSubscriptionsResponse, error) {
	rsp, err := c.RemoveMultipleSubscriptionDataSubscriptions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveMultipleSubscriptionDataSubscriptionsResponse(rsp)
}

// QuerySubsToNotifyWithResponse request returning *QuerySubsToNotifyResponse
func (c *ClientWithResponses) QuerySubsToNotifyWithResponse(ctx context.Context, params *QuerySubsToNotifyParams, reqEditors ...RequestEditorFn) (*QuerySubsToNotifyResponse, error) {
	rsp, err := c.QuerySubsToNotify(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerySubsToNotifyResponse(rsp)
}

// SubscriptionDataSubscriptionsWithBodyWithResponse request with arbitrary body returning *SubscriptionDataSubscriptionsResponse
func (c *ClientWithResponses) SubscriptionDataSubscriptionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscriptionDataSubscriptionsResponse, error) {
	rsp, err := c.SubscriptionDataSubscriptionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscriptionDataSubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) SubscriptionDataSubscriptionsWithResponse(ctx context.Context, body SubscriptionDataSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscriptionDataSubscriptionsResponse, error) {
	rsp, err := c.SubscriptionDataSubscriptions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscriptionDataSubscriptionsResponse(rsp)
}

// RemovesubscriptionDataSubscriptionsWithResponse request returning *RemovesubscriptionDataSubscriptionsResponse
func (c *ClientWithResponses) RemovesubscriptionDataSubscriptionsWithResponse(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*RemovesubscriptionDataSubscriptionsResponse, error) {
	rsp, err := c.RemovesubscriptionDataSubscriptions(ctx, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemovesubscriptionDataSubscriptionsResponse(rsp)
}

// QuerySubscriptionDataSubscriptionsWithResponse request returning *QuerySubscriptionDataSubscriptionsResponse
func (c *ClientWithResponses) QuerySubscriptionDataSubscriptionsWithResponse(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*QuerySubscriptionDataSubscriptionsResponse, error) {
	rsp, err := c.QuerySubscriptionDataSubscriptions(ctx, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerySubscriptionDataSubscriptionsResponse(rsp)
}

// ModifysubscriptionDataSubscriptionWithBodyWithResponse request with arbitrary body returning *ModifysubscriptionDataSubscriptionResponse
func (c *ClientWithResponses) ModifysubscriptionDataSubscriptionWithBodyWithResponse(ctx context.Context, subsId string, params *ModifysubscriptionDataSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifysubscriptionDataSubscriptionResponse, error) {
	rsp, err := c.ModifysubscriptionDataSubscriptionWithBody(ctx, subsId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifysubscriptionDataSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) ModifysubscriptionDataSubscriptionWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, subsId string, params *ModifysubscriptionDataSubscriptionParams, body ModifysubscriptionDataSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifysubscriptionDataSubscriptionResponse, error) {
	rsp, err := c.ModifysubscriptionDataSubscriptionWithApplicationJSONPatchPlusJSONBody(ctx, subsId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifysubscriptionDataSubscriptionResponse(rsp)
}

// DeleteAuthenticationStatusWithResponse request returning *DeleteAuthenticationStatusResponse
func (c *ClientWithResponses) DeleteAuthenticationStatusWithResponse(ctx context.Context, ueId externalRef2.Supi, reqEditors ...RequestEditorFn) (*DeleteAuthenticationStatusResponse, error) {
	rsp, err := c.DeleteAuthenticationStatus(ctx, ueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAuthenticationStatusResponse(rsp)
}

// QueryAuthenticationStatusWithResponse request returning *QueryAuthenticationStatusResponse
func (c *ClientWithResponses) QueryAuthenticationStatusWithResponse(ctx context.Context, ueId externalRef2.Supi, params *QueryAuthenticationStatusParams, reqEditors ...RequestEditorFn) (*QueryAuthenticationStatusResponse, error) {
	rsp, err := c.QueryAuthenticationStatus(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryAuthenticationStatusResponse(rsp)
}

// CreateAuthenticationStatusWithBodyWithResponse request with arbitrary body returning *CreateAuthenticationStatusResponse
func (c *ClientWithResponses) CreateAuthenticationStatusWithBodyWithResponse(ctx context.Context, ueId externalRef2.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthenticationStatusResponse, error) {
	rsp, err := c.CreateAuthenticationStatusWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthenticationStatusResponse(rsp)
}

func (c *ClientWithResponses) CreateAuthenticationStatusWithResponse(ctx context.Context, ueId externalRef2.Supi, body CreateAuthenticationStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthenticationStatusResponse, error) {
	rsp, err := c.CreateAuthenticationStatus(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthenticationStatusResponse(rsp)
}

// DeleteIndividualAuthenticationStatusWithResponse request returning *DeleteIndividualAuthenticationStatusResponse
func (c *ClientWithResponses) DeleteIndividualAuthenticationStatusWithResponse(ctx context.Context, ueId externalRef2.Supi, servingNetworkName externalRef8.ServingNetworkName, reqEditors ...RequestEditorFn) (*DeleteIndividualAuthenticationStatusResponse, error) {
	rsp, err := c.DeleteIndividualAuthenticationStatus(ctx, ueId, servingNetworkName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndividualAuthenticationStatusResponse(rsp)
}

// QueryIndividualAuthenticationStatusWithResponse request returning *QueryIndividualAuthenticationStatusResponse
func (c *ClientWithResponses) QueryIndividualAuthenticationStatusWithResponse(ctx context.Context, ueId externalRef2.Supi, servingNetworkName externalRef8.ServingNetworkName, params *QueryIndividualAuthenticationStatusParams, reqEditors ...RequestEditorFn) (*QueryIndividualAuthenticationStatusResponse, error) {
	rsp, err := c.QueryIndividualAuthenticationStatus(ctx, ueId, servingNetworkName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryIndividualAuthenticationStatusResponse(rsp)
}

// CreateIndividualAuthenticationStatusWithBodyWithResponse request with arbitrary body returning *CreateIndividualAuthenticationStatusResponse
func (c *ClientWithResponses) CreateIndividualAuthenticationStatusWithBodyWithResponse(ctx context.Context, ueId externalRef2.Supi, servingNetworkName externalRef8.ServingNetworkName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualAuthenticationStatusResponse, error) {
	rsp, err := c.CreateIndividualAuthenticationStatusWithBody(ctx, ueId, servingNetworkName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualAuthenticationStatusResponse(rsp)
}

func (c *ClientWithResponses) CreateIndividualAuthenticationStatusWithResponse(ctx context.Context, ueId externalRef2.Supi, servingNetworkName externalRef8.ServingNetworkName, body CreateIndividualAuthenticationStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualAuthenticationStatusResponse, error) {
	rsp, err := c.CreateIndividualAuthenticationStatus(ctx, ueId, servingNetworkName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualAuthenticationStatusResponse(rsp)
}

// QueryAuthSubsDataWithResponse request returning *QueryAuthSubsDataResponse
func (c *ClientWithResponses) QueryAuthSubsDataWithResponse(ctx context.Context, ueId externalRef2.Supi, params *QueryAuthSubsDataParams, reqEditors ...RequestEditorFn) (*QueryAuthSubsDataResponse, error) {
	rsp, err := c.QueryAuthSubsData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryAuthSubsDataResponse(rsp)
}

// ModifyAuthenticationSubscriptionWithBodyWithResponse request with arbitrary body returning *ModifyAuthenticationSubscriptionResponse
func (c *ClientWithResponses) ModifyAuthenticationSubscriptionWithBodyWithResponse(ctx context.Context, ueId externalRef2.Supi, params *ModifyAuthenticationSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyAuthenticationSubscriptionResponse, error) {
	rsp, err := c.ModifyAuthenticationSubscriptionWithBody(ctx, ueId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyAuthenticationSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) ModifyAuthenticationSubscriptionWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.Supi, params *ModifyAuthenticationSubscriptionParams, body ModifyAuthenticationSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyAuthenticationSubscriptionResponse, error) {
	rsp, err := c.ModifyAuthenticationSubscriptionWithApplicationJSONPatchPlusJSONBody(ctx, ueId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyAuthenticationSubscriptionResponse(rsp)
}

// QueryContextDataWithResponse request returning *QueryContextDataResponse
func (c *ClientWithResponses) QueryContextDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryContextDataParams, reqEditors ...RequestEditorFn) (*QueryContextDataResponse, error) {
	rsp, err := c.QueryContextData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryContextDataResponse(rsp)
}

// QueryAmfContext3gppWithResponse request returning *QueryAmfContext3gppResponse
func (c *ClientWithResponses) QueryAmfContext3gppWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryAmfContext3gppParams, reqEditors ...RequestEditorFn) (*QueryAmfContext3gppResponse, error) {
	rsp, err := c.QueryAmfContext3gpp(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryAmfContext3gppResponse(rsp)
}

// AmfContext3gppWithBodyWithResponse request with arbitrary body returning *AmfContext3gppResponse
func (c *ClientWithResponses) AmfContext3gppWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *AmfContext3gppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AmfContext3gppResponse, error) {
	rsp, err := c.AmfContext3gppWithBody(ctx, ueId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAmfContext3gppResponse(rsp)
}

func (c *ClientWithResponses) AmfContext3gppWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *AmfContext3gppParams, body AmfContext3gppApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*AmfContext3gppResponse, error) {
	rsp, err := c.AmfContext3gppWithApplicationJSONPatchPlusJSONBody(ctx, ueId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAmfContext3gppResponse(rsp)
}

// CreateAmfContext3gppWithBodyWithResponse request with arbitrary body returning *CreateAmfContext3gppResponse
func (c *ClientWithResponses) CreateAmfContext3gppWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAmfContext3gppResponse, error) {
	rsp, err := c.CreateAmfContext3gppWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAmfContext3gppResponse(rsp)
}

func (c *ClientWithResponses) CreateAmfContext3gppWithResponse(ctx context.Context, ueId externalRef2.VarUeId, body CreateAmfContext3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAmfContext3gppResponse, error) {
	rsp, err := c.CreateAmfContext3gpp(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAmfContext3gppResponse(rsp)
}

// QueryAmfContextNon3gppWithResponse request returning *QueryAmfContextNon3gppResponse
func (c *ClientWithResponses) QueryAmfContextNon3gppWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryAmfContextNon3gppParams, reqEditors ...RequestEditorFn) (*QueryAmfContextNon3gppResponse, error) {
	rsp, err := c.QueryAmfContextNon3gpp(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryAmfContextNon3gppResponse(rsp)
}

// AmfContextNon3gppWithBodyWithResponse request with arbitrary body returning *AmfContextNon3gppResponse
func (c *ClientWithResponses) AmfContextNon3gppWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *AmfContextNon3gppParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AmfContextNon3gppResponse, error) {
	rsp, err := c.AmfContextNon3gppWithBody(ctx, ueId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAmfContextNon3gppResponse(rsp)
}

func (c *ClientWithResponses) AmfContextNon3gppWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *AmfContextNon3gppParams, body AmfContextNon3gppApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*AmfContextNon3gppResponse, error) {
	rsp, err := c.AmfContextNon3gppWithApplicationJSONPatchPlusJSONBody(ctx, ueId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAmfContextNon3gppResponse(rsp)
}

// CreateAmfContextNon3gppWithBodyWithResponse request with arbitrary body returning *CreateAmfContextNon3gppResponse
func (c *ClientWithResponses) CreateAmfContextNon3gppWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAmfContextNon3gppResponse, error) {
	rsp, err := c.CreateAmfContextNon3gppWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAmfContextNon3gppResponse(rsp)
}

func (c *ClientWithResponses) CreateAmfContextNon3gppWithResponse(ctx context.Context, ueId externalRef2.VarUeId, body CreateAmfContextNon3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAmfContextNon3gppResponse, error) {
	rsp, err := c.CreateAmfContextNon3gpp(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAmfContextNon3gppResponse(rsp)
}

// QueryeesubscriptionsWithResponse request returning *QueryeesubscriptionsResponse
func (c *ClientWithResponses) QueryeesubscriptionsWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryeesubscriptionsParams, reqEditors ...RequestEditorFn) (*QueryeesubscriptionsResponse, error) {
	rsp, err := c.Queryeesubscriptions(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryeesubscriptionsResponse(rsp)
}

// CreateEeSubscriptionsWithBodyWithResponse request with arbitrary body returning *CreateEeSubscriptionsResponse
func (c *ClientWithResponses) CreateEeSubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEeSubscriptionsResponse, error) {
	rsp, err := c.CreateEeSubscriptionsWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEeSubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) CreateEeSubscriptionsWithResponse(ctx context.Context, ueId externalRef2.VarUeId, body CreateEeSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEeSubscriptionsResponse, error) {
	rsp, err := c.CreateEeSubscriptions(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEeSubscriptionsResponse(rsp)
}

// RemoveeeSubscriptionsWithResponse request returning *RemoveeeSubscriptionsResponse
func (c *ClientWithResponses) RemoveeeSubscriptionsWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*RemoveeeSubscriptionsResponse, error) {
	rsp, err := c.RemoveeeSubscriptions(ctx, ueId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveeeSubscriptionsResponse(rsp)
}

// QueryeeSubscriptionWithResponse request returning *QueryeeSubscriptionResponse
func (c *ClientWithResponses) QueryeeSubscriptionWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*QueryeeSubscriptionResponse, error) {
	rsp, err := c.QueryeeSubscription(ctx, ueId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryeeSubscriptionResponse(rsp)
}

// ModifyEesubscriptionWithBodyWithResponse request with arbitrary body returning *ModifyEesubscriptionResponse
func (c *ClientWithResponses) ModifyEesubscriptionWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyEesubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyEesubscriptionResponse, error) {
	rsp, err := c.ModifyEesubscriptionWithBody(ctx, ueId, subsId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyEesubscriptionResponse(rsp)
}

func (c *ClientWithResponses) ModifyEesubscriptionWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyEesubscriptionParams, body ModifyEesubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyEesubscriptionResponse, error) {
	rsp, err := c.ModifyEesubscriptionWithApplicationJSONPatchPlusJSONBody(ctx, ueId, subsId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyEesubscriptionResponse(rsp)
}

// UpdateEesubscriptionsWithBodyWithResponse request with arbitrary body returning *UpdateEesubscriptionsResponse
func (c *ClientWithResponses) UpdateEesubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEesubscriptionsResponse, error) {
	rsp, err := c.UpdateEesubscriptionsWithBody(ctx, ueId, subsId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEesubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) UpdateEesubscriptionsWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, body UpdateEesubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEesubscriptionsResponse, error) {
	rsp, err := c.UpdateEesubscriptions(ctx, ueId, subsId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEesubscriptionsResponse(rsp)
}

// RemoveAmfSubscriptionsInfoWithResponse request returning *RemoveAmfSubscriptionsInfoResponse
func (c *ClientWithResponses) RemoveAmfSubscriptionsInfoWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*RemoveAmfSubscriptionsInfoResponse, error) {
	rsp, err := c.RemoveAmfSubscriptionsInfo(ctx, ueId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveAmfSubscriptionsInfoResponse(rsp)
}

// GetAmfSubscriptionInfoWithResponse request returning *GetAmfSubscriptionInfoResponse
func (c *ClientWithResponses) GetAmfSubscriptionInfoWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*GetAmfSubscriptionInfoResponse, error) {
	rsp, err := c.GetAmfSubscriptionInfo(ctx, ueId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAmfSubscriptionInfoResponse(rsp)
}

// ModifyAmfSubscriptionInfoWithBodyWithResponse request with arbitrary body returning *ModifyAmfSubscriptionInfoResponse
func (c *ClientWithResponses) ModifyAmfSubscriptionInfoWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyAmfSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyAmfSubscriptionInfoResponse, error) {
	rsp, err := c.ModifyAmfSubscriptionInfoWithBody(ctx, ueId, subsId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyAmfSubscriptionInfoResponse(rsp)
}

func (c *ClientWithResponses) ModifyAmfSubscriptionInfoWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyAmfSubscriptionInfoParams, body ModifyAmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyAmfSubscriptionInfoResponse, error) {
	rsp, err := c.ModifyAmfSubscriptionInfoWithApplicationJSONPatchPlusJSONBody(ctx, ueId, subsId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyAmfSubscriptionInfoResponse(rsp)
}

// CreateAMFSubscriptionsWithBodyWithResponse request with arbitrary body returning *CreateAMFSubscriptionsResponse
func (c *ClientWithResponses) CreateAMFSubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAMFSubscriptionsResponse, error) {
	rsp, err := c.CreateAMFSubscriptionsWithBody(ctx, ueId, subsId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAMFSubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) CreateAMFSubscriptionsWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, body CreateAMFSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAMFSubscriptionsResponse, error) {
	rsp, err := c.CreateAMFSubscriptions(ctx, ueId, subsId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAMFSubscriptionsResponse(rsp)
}

// RemoveHssSubscriptionsInfoWithResponse request returning *RemoveHssSubscriptionsInfoResponse
func (c *ClientWithResponses) RemoveHssSubscriptionsInfoWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*RemoveHssSubscriptionsInfoResponse, error) {
	rsp, err := c.RemoveHssSubscriptionsInfo(ctx, ueId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveHssSubscriptionsInfoResponse(rsp)
}

// GetHssSubscriptionInfoWithResponse request returning *GetHssSubscriptionInfoResponse
func (c *ClientWithResponses) GetHssSubscriptionInfoWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*GetHssSubscriptionInfoResponse, error) {
	rsp, err := c.GetHssSubscriptionInfo(ctx, ueId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHssSubscriptionInfoResponse(rsp)
}

// ModifyHssSubscriptionInfoWithBodyWithResponse request with arbitrary body returning *ModifyHssSubscriptionInfoResponse
func (c *ClientWithResponses) ModifyHssSubscriptionInfoWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyHssSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyHssSubscriptionInfoResponse, error) {
	rsp, err := c.ModifyHssSubscriptionInfoWithBody(ctx, ueId, subsId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyHssSubscriptionInfoResponse(rsp)
}

func (c *ClientWithResponses) ModifyHssSubscriptionInfoWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyHssSubscriptionInfoParams, body ModifyHssSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyHssSubscriptionInfoResponse, error) {
	rsp, err := c.ModifyHssSubscriptionInfoWithApplicationJSONPatchPlusJSONBody(ctx, ueId, subsId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyHssSubscriptionInfoResponse(rsp)
}

// CreateHSSSubscriptionsWithBodyWithResponse request with arbitrary body returning *CreateHSSSubscriptionsResponse
func (c *ClientWithResponses) CreateHSSSubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHSSSubscriptionsResponse, error) {
	rsp, err := c.CreateHSSSubscriptionsWithBody(ctx, ueId, subsId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHSSSubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) CreateHSSSubscriptionsWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, body CreateHSSSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHSSSubscriptionsResponse, error) {
	rsp, err := c.CreateHSSSubscriptions(ctx, ueId, subsId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHSSSubscriptionsResponse(rsp)
}

// RemoveSmfSubscriptionsInfoWithResponse request returning *RemoveSmfSubscriptionsInfoResponse
func (c *ClientWithResponses) RemoveSmfSubscriptionsInfoWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*RemoveSmfSubscriptionsInfoResponse, error) {
	rsp, err := c.RemoveSmfSubscriptionsInfo(ctx, ueId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveSmfSubscriptionsInfoResponse(rsp)
}

// GetSmfSubscriptionInfoWithResponse request returning *GetSmfSubscriptionInfoResponse
func (c *ClientWithResponses) GetSmfSubscriptionInfoWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*GetSmfSubscriptionInfoResponse, error) {
	rsp, err := c.GetSmfSubscriptionInfo(ctx, ueId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSmfSubscriptionInfoResponse(rsp)
}

// ModifySmfSubscriptionInfoWithBodyWithResponse request with arbitrary body returning *ModifySmfSubscriptionInfoResponse
func (c *ClientWithResponses) ModifySmfSubscriptionInfoWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifySmfSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifySmfSubscriptionInfoResponse, error) {
	rsp, err := c.ModifySmfSubscriptionInfoWithBody(ctx, ueId, subsId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifySmfSubscriptionInfoResponse(rsp)
}

func (c *ClientWithResponses) ModifySmfSubscriptionInfoWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifySmfSubscriptionInfoParams, body ModifySmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifySmfSubscriptionInfoResponse, error) {
	rsp, err := c.ModifySmfSubscriptionInfoWithApplicationJSONPatchPlusJSONBody(ctx, ueId, subsId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifySmfSubscriptionInfoResponse(rsp)
}

// CreateSMFSubscriptionsWithBodyWithResponse request with arbitrary body returning *CreateSMFSubscriptionsResponse
func (c *ClientWithResponses) CreateSMFSubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSMFSubscriptionsResponse, error) {
	rsp, err := c.CreateSMFSubscriptionsWithBody(ctx, ueId, subsId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSMFSubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) CreateSMFSubscriptionsWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, body CreateSMFSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSMFSubscriptionsResponse, error) {
	rsp, err := c.CreateSMFSubscriptions(ctx, ueId, subsId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSMFSubscriptionsResponse(rsp)
}

// DeleteIpSmGwContextWithResponse request returning *DeleteIpSmGwContextResponse
func (c *ClientWithResponses) DeleteIpSmGwContextWithResponse(ctx context.Context, ueId externalRef2.VarUeId, reqEditors ...RequestEditorFn) (*DeleteIpSmGwContextResponse, error) {
	rsp, err := c.DeleteIpSmGwContext(ctx, ueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIpSmGwContextResponse(rsp)
}

// QueryIpSmGwContextWithResponse request returning *QueryIpSmGwContextResponse
func (c *ClientWithResponses) QueryIpSmGwContextWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryIpSmGwContextParams, reqEditors ...RequestEditorFn) (*QueryIpSmGwContextResponse, error) {
	rsp, err := c.QueryIpSmGwContext(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryIpSmGwContextResponse(rsp)
}

// ModifyIpSmGwContextWithBodyWithResponse request with arbitrary body returning *ModifyIpSmGwContextResponse
func (c *ClientWithResponses) ModifyIpSmGwContextWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyIpSmGwContextResponse, error) {
	rsp, err := c.ModifyIpSmGwContextWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyIpSmGwContextResponse(rsp)
}

func (c *ClientWithResponses) ModifyIpSmGwContextWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, body ModifyIpSmGwContextApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyIpSmGwContextResponse, error) {
	rsp, err := c.ModifyIpSmGwContextWithApplicationJSONPatchPlusJSONBody(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyIpSmGwContextResponse(rsp)
}

// CreateIpSmGwContextWithBodyWithResponse request with arbitrary body returning *CreateIpSmGwContextResponse
func (c *ClientWithResponses) CreateIpSmGwContextWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIpSmGwContextResponse, error) {
	rsp, err := c.CreateIpSmGwContextWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIpSmGwContextResponse(rsp)
}

func (c *ClientWithResponses) CreateIpSmGwContextWithResponse(ctx context.Context, ueId externalRef2.VarUeId, body CreateIpSmGwContextJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIpSmGwContextResponse, error) {
	rsp, err := c.CreateIpSmGwContext(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIpSmGwContextResponse(rsp)
}

// QueryUeLocationWithResponse request returning *QueryUeLocationResponse
func (c *ClientWithResponses) QueryUeLocationWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryUeLocationParams, reqEditors ...RequestEditorFn) (*QueryUeLocationResponse, error) {
	rsp, err := c.QueryUeLocation(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryUeLocationResponse(rsp)
}

// DeleteMessageWaitingDataWithResponse request returning *DeleteMessageWaitingDataResponse
func (c *ClientWithResponses) DeleteMessageWaitingDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, reqEditors ...RequestEditorFn) (*DeleteMessageWaitingDataResponse, error) {
	rsp, err := c.DeleteMessageWaitingData(ctx, ueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMessageWaitingDataResponse(rsp)
}

// QueryMessageWaitingDataWithResponse request returning *QueryMessageWaitingDataResponse
func (c *ClientWithResponses) QueryMessageWaitingDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryMessageWaitingDataParams, reqEditors ...RequestEditorFn) (*QueryMessageWaitingDataResponse, error) {
	rsp, err := c.QueryMessageWaitingData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryMessageWaitingDataResponse(rsp)
}

// ModifyMessageWaitingDataWithBodyWithResponse request with arbitrary body returning *ModifyMessageWaitingDataResponse
func (c *ClientWithResponses) ModifyMessageWaitingDataWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyMessageWaitingDataResponse, error) {
	rsp, err := c.ModifyMessageWaitingDataWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyMessageWaitingDataResponse(rsp)
}

func (c *ClientWithResponses) ModifyMessageWaitingDataWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, body ModifyMessageWaitingDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyMessageWaitingDataResponse, error) {
	rsp, err := c.ModifyMessageWaitingDataWithApplicationJSONPatchPlusJSONBody(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyMessageWaitingDataResponse(rsp)
}

// CreateMessageWaitingDataWithBodyWithResponse request with arbitrary body returning *CreateMessageWaitingDataResponse
func (c *ClientWithResponses) CreateMessageWaitingDataWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMessageWaitingDataResponse, error) {
	rsp, err := c.CreateMessageWaitingDataWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMessageWaitingDataResponse(rsp)
}

func (c *ClientWithResponses) CreateMessageWaitingDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, body CreateMessageWaitingDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMessageWaitingDataResponse, error) {
	rsp, err := c.CreateMessageWaitingData(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMessageWaitingDataResponse(rsp)
}

// QuerysdmsubscriptionsWithResponse request returning *QuerysdmsubscriptionsResponse
func (c *ClientWithResponses) QuerysdmsubscriptionsWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QuerysdmsubscriptionsParams, reqEditors ...RequestEditorFn) (*QuerysdmsubscriptionsResponse, error) {
	rsp, err := c.Querysdmsubscriptions(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerysdmsubscriptionsResponse(rsp)
}

// CreateSdmSubscriptionsWithBodyWithResponse request with arbitrary body returning *CreateSdmSubscriptionsResponse
func (c *ClientWithResponses) CreateSdmSubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSdmSubscriptionsResponse, error) {
	rsp, err := c.CreateSdmSubscriptionsWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSdmSubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) CreateSdmSubscriptionsWithResponse(ctx context.Context, ueId externalRef2.VarUeId, body CreateSdmSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSdmSubscriptionsResponse, error) {
	rsp, err := c.CreateSdmSubscriptions(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSdmSubscriptionsResponse(rsp)
}

// RemovesdmSubscriptionsWithResponse request returning *RemovesdmSubscriptionsResponse
func (c *ClientWithResponses) RemovesdmSubscriptionsWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*RemovesdmSubscriptionsResponse, error) {
	rsp, err := c.RemovesdmSubscriptions(ctx, ueId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemovesdmSubscriptionsResponse(rsp)
}

// QuerysdmSubscriptionWithResponse request returning *QuerysdmSubscriptionResponse
func (c *ClientWithResponses) QuerysdmSubscriptionWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*QuerysdmSubscriptionResponse, error) {
	rsp, err := c.QuerysdmSubscription(ctx, ueId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerysdmSubscriptionResponse(rsp)
}

// ModifysdmSubscriptionWithBodyWithResponse request with arbitrary body returning *ModifysdmSubscriptionResponse
func (c *ClientWithResponses) ModifysdmSubscriptionWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifysdmSubscriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifysdmSubscriptionResponse, error) {
	rsp, err := c.ModifysdmSubscriptionWithBody(ctx, ueId, subsId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifysdmSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) ModifysdmSubscriptionWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifysdmSubscriptionParams, body ModifysdmSubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifysdmSubscriptionResponse, error) {
	rsp, err := c.ModifysdmSubscriptionWithApplicationJSONPatchPlusJSONBody(ctx, ueId, subsId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifysdmSubscriptionResponse(rsp)
}

// UpdatesdmsubscriptionsWithBodyWithResponse request with arbitrary body returning *UpdatesdmsubscriptionsResponse
func (c *ClientWithResponses) UpdatesdmsubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatesdmsubscriptionsResponse, error) {
	rsp, err := c.UpdatesdmsubscriptionsWithBody(ctx, ueId, subsId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatesdmsubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) UpdatesdmsubscriptionsWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, body UpdatesdmsubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatesdmsubscriptionsResponse, error) {
	rsp, err := c.Updatesdmsubscriptions(ctx, ueId, subsId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatesdmsubscriptionsResponse(rsp)
}

// RemoveHssSDMSubscriptionsInfoWithResponse request returning *RemoveHssSDMSubscriptionsInfoResponse
func (c *ClientWithResponses) RemoveHssSDMSubscriptionsInfoWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*RemoveHssSDMSubscriptionsInfoResponse, error) {
	rsp, err := c.RemoveHssSDMSubscriptionsInfo(ctx, ueId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveHssSDMSubscriptionsInfoResponse(rsp)
}

// GetHssSDMSubscriptionInfoWithResponse request returning *GetHssSDMSubscriptionInfoResponse
func (c *ClientWithResponses) GetHssSDMSubscriptionInfoWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, reqEditors ...RequestEditorFn) (*GetHssSDMSubscriptionInfoResponse, error) {
	rsp, err := c.GetHssSDMSubscriptionInfo(ctx, ueId, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHssSDMSubscriptionInfoResponse(rsp)
}

// ModifyHssSDMSubscriptionInfoWithBodyWithResponse request with arbitrary body returning *ModifyHssSDMSubscriptionInfoResponse
func (c *ClientWithResponses) ModifyHssSDMSubscriptionInfoWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyHssSDMSubscriptionInfoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyHssSDMSubscriptionInfoResponse, error) {
	rsp, err := c.ModifyHssSDMSubscriptionInfoWithBody(ctx, ueId, subsId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyHssSDMSubscriptionInfoResponse(rsp)
}

func (c *ClientWithResponses) ModifyHssSDMSubscriptionInfoWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, params *ModifyHssSDMSubscriptionInfoParams, body ModifyHssSDMSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyHssSDMSubscriptionInfoResponse, error) {
	rsp, err := c.ModifyHssSDMSubscriptionInfoWithApplicationJSONPatchPlusJSONBody(ctx, ueId, subsId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyHssSDMSubscriptionInfoResponse(rsp)
}

// CreateHSSSDMSubscriptionsWithBodyWithResponse request with arbitrary body returning *CreateHSSSDMSubscriptionsResponse
func (c *ClientWithResponses) CreateHSSSDMSubscriptionsWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHSSSDMSubscriptionsResponse, error) {
	rsp, err := c.CreateHSSSDMSubscriptionsWithBody(ctx, ueId, subsId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHSSSDMSubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) CreateHSSSDMSubscriptionsWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subsId string, body CreateHSSSDMSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHSSSDMSubscriptionsResponse, error) {
	rsp, err := c.CreateHSSSDMSubscriptions(ctx, ueId, subsId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHSSSDMSubscriptionsResponse(rsp)
}

// QuerySmfRegListWithResponse request returning *QuerySmfRegListResponse
func (c *ClientWithResponses) QuerySmfRegListWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QuerySmfRegListParams, reqEditors ...RequestEditorFn) (*QuerySmfRegListResponse, error) {
	rsp, err := c.QuerySmfRegList(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerySmfRegListResponse(rsp)
}

// DeleteSmfRegistrationWithResponse request returning *DeleteSmfRegistrationResponse
func (c *ClientWithResponses) DeleteSmfRegistrationWithResponse(ctx context.Context, ueId externalRef2.VarUeId, pduSessionId externalRef2.PduSessionId, reqEditors ...RequestEditorFn) (*DeleteSmfRegistrationResponse, error) {
	rsp, err := c.DeleteSmfRegistration(ctx, ueId, pduSessionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSmfRegistrationResponse(rsp)
}

// QuerySmfRegistrationWithResponse request returning *QuerySmfRegistrationResponse
func (c *ClientWithResponses) QuerySmfRegistrationWithResponse(ctx context.Context, ueId externalRef2.VarUeId, pduSessionId externalRef2.PduSessionId, params *QuerySmfRegistrationParams, reqEditors ...RequestEditorFn) (*QuerySmfRegistrationResponse, error) {
	rsp, err := c.QuerySmfRegistration(ctx, ueId, pduSessionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerySmfRegistrationResponse(rsp)
}

// CreateOrUpdateSmfRegistrationWithBodyWithResponse request with arbitrary body returning *CreateOrUpdateSmfRegistrationResponse
func (c *ClientWithResponses) CreateOrUpdateSmfRegistrationWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, pduSessionId externalRef2.PduSessionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateSmfRegistrationResponse, error) {
	rsp, err := c.CreateOrUpdateSmfRegistrationWithBody(ctx, ueId, pduSessionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateSmfRegistrationResponse(rsp)
}

func (c *ClientWithResponses) CreateOrUpdateSmfRegistrationWithResponse(ctx context.Context, ueId externalRef2.VarUeId, pduSessionId externalRef2.PduSessionId, body CreateOrUpdateSmfRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateSmfRegistrationResponse, error) {
	rsp, err := c.CreateOrUpdateSmfRegistration(ctx, ueId, pduSessionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateSmfRegistrationResponse(rsp)
}

// DeleteSmsfContext3gppWithResponse request returning *DeleteSmsfContext3gppResponse
func (c *ClientWithResponses) DeleteSmsfContext3gppWithResponse(ctx context.Context, ueId externalRef2.VarUeId, reqEditors ...RequestEditorFn) (*DeleteSmsfContext3gppResponse, error) {
	rsp, err := c.DeleteSmsfContext3gpp(ctx, ueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSmsfContext3gppResponse(rsp)
}

// QuerySmsfContext3gppWithResponse request returning *QuerySmsfContext3gppResponse
func (c *ClientWithResponses) QuerySmsfContext3gppWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QuerySmsfContext3gppParams, reqEditors ...RequestEditorFn) (*QuerySmsfContext3gppResponse, error) {
	rsp, err := c.QuerySmsfContext3gpp(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerySmsfContext3gppResponse(rsp)
}

// CreateSmsfContext3gppWithBodyWithResponse request with arbitrary body returning *CreateSmsfContext3gppResponse
func (c *ClientWithResponses) CreateSmsfContext3gppWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSmsfContext3gppResponse, error) {
	rsp, err := c.CreateSmsfContext3gppWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSmsfContext3gppResponse(rsp)
}

func (c *ClientWithResponses) CreateSmsfContext3gppWithResponse(ctx context.Context, ueId externalRef2.VarUeId, body CreateSmsfContext3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSmsfContext3gppResponse, error) {
	rsp, err := c.CreateSmsfContext3gpp(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSmsfContext3gppResponse(rsp)
}

// DeleteSmsfContextNon3gppWithResponse request returning *DeleteSmsfContextNon3gppResponse
func (c *ClientWithResponses) DeleteSmsfContextNon3gppWithResponse(ctx context.Context, ueId externalRef2.VarUeId, reqEditors ...RequestEditorFn) (*DeleteSmsfContextNon3gppResponse, error) {
	rsp, err := c.DeleteSmsfContextNon3gpp(ctx, ueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSmsfContextNon3gppResponse(rsp)
}

// QuerySmsfContextNon3gppWithResponse request returning *QuerySmsfContextNon3gppResponse
func (c *ClientWithResponses) QuerySmsfContextNon3gppWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QuerySmsfContextNon3gppParams, reqEditors ...RequestEditorFn) (*QuerySmsfContextNon3gppResponse, error) {
	rsp, err := c.QuerySmsfContextNon3gpp(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerySmsfContextNon3gppResponse(rsp)
}

// CreateSmsfContextNon3gppWithBodyWithResponse request with arbitrary body returning *CreateSmsfContextNon3gppResponse
func (c *ClientWithResponses) CreateSmsfContextNon3gppWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSmsfContextNon3gppResponse, error) {
	rsp, err := c.CreateSmsfContextNon3gppWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSmsfContextNon3gppResponse(rsp)
}

func (c *ClientWithResponses) CreateSmsfContextNon3gppWithResponse(ctx context.Context, ueId externalRef2.VarUeId, body CreateSmsfContextNon3gppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSmsfContextNon3gppResponse, error) {
	rsp, err := c.CreateSmsfContextNon3gpp(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSmsfContextNon3gppResponse(rsp)
}

// QueryCoverageRestrictionDataWithResponse request returning *QueryCoverageRestrictionDataResponse
func (c *ClientWithResponses) QueryCoverageRestrictionDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryCoverageRestrictionDataParams, reqEditors ...RequestEditorFn) (*QueryCoverageRestrictionDataResponse, error) {
	rsp, err := c.QueryCoverageRestrictionData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryCoverageRestrictionDataResponse(rsp)
}

// QueryEEDataWithResponse request returning *QueryEEDataResponse
func (c *ClientWithResponses) QueryEEDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryEEDataParams, reqEditors ...RequestEditorFn) (*QueryEEDataResponse, error) {
	rsp, err := c.QueryEEData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryEEDataResponse(rsp)
}

// GetIdentityDataWithResponse request returning *GetIdentityDataResponse
func (c *ClientWithResponses) GetIdentityDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *GetIdentityDataParams, reqEditors ...RequestEditorFn) (*GetIdentityDataResponse, error) {
	rsp, err := c.GetIdentityData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdentityDataResponse(rsp)
}

// QueryLcsMoDataWithResponse request returning *QueryLcsMoDataResponse
func (c *ClientWithResponses) QueryLcsMoDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryLcsMoDataParams, reqEditors ...RequestEditorFn) (*QueryLcsMoDataResponse, error) {
	rsp, err := c.QueryLcsMoData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryLcsMoDataResponse(rsp)
}

// QueryLcsPrivacyDataWithResponse request returning *QueryLcsPrivacyDataResponse
func (c *ClientWithResponses) QueryLcsPrivacyDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryLcsPrivacyDataParams, reqEditors ...RequestEditorFn) (*QueryLcsPrivacyDataResponse, error) {
	rsp, err := c.QueryLcsPrivacyData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryLcsPrivacyDataResponse(rsp)
}

// GetNiddAuDataWithResponse request returning *GetNiddAuDataResponse
func (c *ClientWithResponses) GetNiddAuDataWithResponse(ctx context.Context, ueId string, params *GetNiddAuDataParams, reqEditors ...RequestEditorFn) (*GetNiddAuDataResponse, error) {
	rsp, err := c.GetNiddAuData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNiddAuDataResponse(rsp)
}

// GetOdbDataWithResponse request returning *GetOdbDataResponse
func (c *ClientWithResponses) GetOdbDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, reqEditors ...RequestEditorFn) (*GetOdbDataResponse, error) {
	rsp, err := c.GetOdbData(ctx, ueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOdbDataResponse(rsp)
}

// QueryOperSpecDataWithResponse request returning *QueryOperSpecDataResponse
func (c *ClientWithResponses) QueryOperSpecDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryOperSpecDataParams, reqEditors ...RequestEditorFn) (*QueryOperSpecDataResponse, error) {
	rsp, err := c.QueryOperSpecData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryOperSpecDataResponse(rsp)
}

// ModifyOperSpecDataWithBodyWithResponse request with arbitrary body returning *ModifyOperSpecDataResponse
func (c *ClientWithResponses) ModifyOperSpecDataWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *ModifyOperSpecDataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyOperSpecDataResponse, error) {
	rsp, err := c.ModifyOperSpecDataWithBody(ctx, ueId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyOperSpecDataResponse(rsp)
}

func (c *ClientWithResponses) ModifyOperSpecDataWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *ModifyOperSpecDataParams, body ModifyOperSpecDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyOperSpecDataResponse, error) {
	rsp, err := c.ModifyOperSpecDataWithApplicationJSONPatchPlusJSONBody(ctx, ueId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyOperSpecDataResponse(rsp)
}

// GetppDataWithResponse request returning *GetppDataResponse
func (c *ClientWithResponses) GetppDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *GetppDataParams, reqEditors ...RequestEditorFn) (*GetppDataResponse, error) {
	rsp, err := c.GetppData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetppDataResponse(rsp)
}

// ModifyPpDataWithBodyWithResponse request with arbitrary body returning *ModifyPpDataResponse
func (c *ClientWithResponses) ModifyPpDataWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *ModifyPpDataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyPpDataResponse, error) {
	rsp, err := c.ModifyPpDataWithBody(ctx, ueId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyPpDataResponse(rsp)
}

func (c *ClientWithResponses) ModifyPpDataWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *ModifyPpDataParams, body ModifyPpDataApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyPpDataResponse, error) {
	rsp, err := c.ModifyPpDataWithApplicationJSONPatchPlusJSONBody(ctx, ueId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyPpDataResponse(rsp)
}

// QueryPPDataWithResponse request returning *QueryPPDataResponse
func (c *ClientWithResponses) QueryPPDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryPPDataParams, reqEditors ...RequestEditorFn) (*QueryPPDataResponse, error) {
	rsp, err := c.QueryPPData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryPPDataResponse(rsp)
}

// QueryAuthSoRWithResponse request returning *QueryAuthSoRResponse
func (c *ClientWithResponses) QueryAuthSoRWithResponse(ctx context.Context, ueId externalRef2.Supi, params *QueryAuthSoRParams, reqEditors ...RequestEditorFn) (*QueryAuthSoRResponse, error) {
	rsp, err := c.QueryAuthSoR(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryAuthSoRResponse(rsp)
}

// CreateAuthenticationSoRWithBodyWithResponse request with arbitrary body returning *CreateAuthenticationSoRResponse
func (c *ClientWithResponses) CreateAuthenticationSoRWithBodyWithResponse(ctx context.Context, ueId externalRef2.Supi, params *CreateAuthenticationSoRParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthenticationSoRResponse, error) {
	rsp, err := c.CreateAuthenticationSoRWithBody(ctx, ueId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthenticationSoRResponse(rsp)
}

func (c *ClientWithResponses) CreateAuthenticationSoRWithResponse(ctx context.Context, ueId externalRef2.Supi, params *CreateAuthenticationSoRParams, body CreateAuthenticationSoRJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthenticationSoRResponse, error) {
	rsp, err := c.CreateAuthenticationSoR(ctx, ueId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthenticationSoRResponse(rsp)
}

// QueryCagAckWithResponse request returning *QueryCagAckResponse
func (c *ClientWithResponses) QueryCagAckWithResponse(ctx context.Context, ueId externalRef2.Supi, params *QueryCagAckParams, reqEditors ...RequestEditorFn) (*QueryCagAckResponse, error) {
	rsp, err := c.QueryCagAck(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryCagAckResponse(rsp)
}

// CreateCagUpdateAckWithBodyWithResponse request with arbitrary body returning *CreateCagUpdateAckResponse
func (c *ClientWithResponses) CreateCagUpdateAckWithBodyWithResponse(ctx context.Context, ueId externalRef2.Supi, params *CreateCagUpdateAckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCagUpdateAckResponse, error) {
	rsp, err := c.CreateCagUpdateAckWithBody(ctx, ueId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCagUpdateAckResponse(rsp)
}

func (c *ClientWithResponses) CreateCagUpdateAckWithResponse(ctx context.Context, ueId externalRef2.Supi, params *CreateCagUpdateAckParams, body CreateCagUpdateAckJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCagUpdateAckResponse, error) {
	rsp, err := c.CreateCagUpdateAck(ctx, ueId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCagUpdateAckResponse(rsp)
}

// QueryNssaiAckWithResponse request returning *QueryNssaiAckResponse
func (c *ClientWithResponses) QueryNssaiAckWithResponse(ctx context.Context, ueId externalRef2.Supi, params *QueryNssaiAckParams, reqEditors ...RequestEditorFn) (*QueryNssaiAckResponse, error) {
	rsp, err := c.QueryNssaiAck(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryNssaiAckResponse(rsp)
}

// CreateOrUpdateNssaiAckWithBodyWithResponse request with arbitrary body returning *CreateOrUpdateNssaiAckResponse
func (c *ClientWithResponses) CreateOrUpdateNssaiAckWithBodyWithResponse(ctx context.Context, ueId externalRef2.Supi, params *CreateOrUpdateNssaiAckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateNssaiAckResponse, error) {
	rsp, err := c.CreateOrUpdateNssaiAckWithBody(ctx, ueId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateNssaiAckResponse(rsp)
}

func (c *ClientWithResponses) CreateOrUpdateNssaiAckWithResponse(ctx context.Context, ueId externalRef2.Supi, params *CreateOrUpdateNssaiAckParams, body CreateOrUpdateNssaiAckJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateNssaiAckResponse, error) {
	rsp, err := c.CreateOrUpdateNssaiAck(ctx, ueId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateNssaiAckResponse(rsp)
}

// QueryAuthUPUWithResponse request returning *QueryAuthUPUResponse
func (c *ClientWithResponses) QueryAuthUPUWithResponse(ctx context.Context, ueId externalRef2.Supi, params *QueryAuthUPUParams, reqEditors ...RequestEditorFn) (*QueryAuthUPUResponse, error) {
	rsp, err := c.QueryAuthUPU(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryAuthUPUResponse(rsp)
}

// CreateAuthenticationUPUWithBodyWithResponse request with arbitrary body returning *CreateAuthenticationUPUResponse
func (c *ClientWithResponses) CreateAuthenticationUPUWithBodyWithResponse(ctx context.Context, ueId externalRef2.Supi, params *CreateAuthenticationUPUParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthenticationUPUResponse, error) {
	rsp, err := c.CreateAuthenticationUPUWithBody(ctx, ueId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthenticationUPUResponse(rsp)
}

func (c *ClientWithResponses) CreateAuthenticationUPUWithResponse(ctx context.Context, ueId externalRef2.Supi, params *CreateAuthenticationUPUParams, body CreateAuthenticationUPUJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthenticationUPUResponse, error) {
	rsp, err := c.CreateAuthenticationUPU(ctx, ueId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthenticationUPUResponse(rsp)
}

// QueryV2xDataWithResponse request returning *QueryV2xDataResponse
func (c *ClientWithResponses) QueryV2xDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *QueryV2xDataParams, reqEditors ...RequestEditorFn) (*QueryV2xDataResponse, error) {
	rsp, err := c.QueryV2xData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryV2xDataResponse(rsp)
}

// QueryProvisionedDataWithResponse request returning *QueryProvisionedDataResponse
func (c *ClientWithResponses) QueryProvisionedDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QueryProvisionedDataParams, reqEditors ...RequestEditorFn) (*QueryProvisionedDataResponse, error) {
	rsp, err := c.QueryProvisionedData(ctx, ueId, servingPlmnId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryProvisionedDataResponse(rsp)
}

// QueryAmDataWithResponse request returning *QueryAmDataResponse
func (c *ClientWithResponses) QueryAmDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QueryAmDataParams, reqEditors ...RequestEditorFn) (*QueryAmDataResponse, error) {
	rsp, err := c.QueryAmData(ctx, ueId, servingPlmnId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryAmDataResponse(rsp)
}

// QueryLcsBcaDataWithResponse request returning *QueryLcsBcaDataResponse
func (c *ClientWithResponses) QueryLcsBcaDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QueryLcsBcaDataParams, reqEditors ...RequestEditorFn) (*QueryLcsBcaDataResponse, error) {
	rsp, err := c.QueryLcsBcaData(ctx, ueId, servingPlmnId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryLcsBcaDataResponse(rsp)
}

// QuerySmDataWithResponse request returning *QuerySmDataResponse
func (c *ClientWithResponses) QuerySmDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QuerySmDataParams, reqEditors ...RequestEditorFn) (*QuerySmDataResponse, error) {
	rsp, err := c.QuerySmData(ctx, ueId, servingPlmnId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerySmDataResponse(rsp)
}

// QuerySmfSelectDataWithResponse request returning *QuerySmfSelectDataResponse
func (c *ClientWithResponses) QuerySmfSelectDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QuerySmfSelectDataParams, reqEditors ...RequestEditorFn) (*QuerySmfSelectDataResponse, error) {
	rsp, err := c.QuerySmfSelectData(ctx, ueId, servingPlmnId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerySmfSelectDataResponse(rsp)
}

// QuerySmsDataWithResponse request returning *QuerySmsDataResponse
func (c *ClientWithResponses) QuerySmsDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QuerySmsDataParams, reqEditors ...RequestEditorFn) (*QuerySmsDataResponse, error) {
	rsp, err := c.QuerySmsData(ctx, ueId, servingPlmnId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerySmsDataResponse(rsp)
}

// QuerySmsMngDataWithResponse request returning *QuerySmsMngDataResponse
func (c *ClientWithResponses) QuerySmsMngDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QuerySmsMngDataParams, reqEditors ...RequestEditorFn) (*QuerySmsMngDataResponse, error) {
	rsp, err := c.QuerySmsMngData(ctx, ueId, servingPlmnId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerySmsMngDataResponse(rsp)
}

// QueryTraceDataWithResponse request returning *QueryTraceDataResponse
func (c *ClientWithResponses) QueryTraceDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params *QueryTraceDataParams, reqEditors ...RequestEditorFn) (*QueryTraceDataResponse, error) {
	rsp, err := c.QueryTraceData(ctx, ueId, servingPlmnId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryTraceDataResponse(rsp)
}

// ParseQuery5GVnGroupResponse parses an HTTP response from a Query5GVnGroupWithResponse call
func ParseQuery5GVnGroupResponse(rsp *http.Response) (*Query5GVnGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Query5GVnGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]externalRef6.N5GVnGroupConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuery5GVnGroupInternalResponse parses an HTTP response from a Query5GVnGroupInternalWithResponse call
func ParseQuery5GVnGroupInternalResponse(rsp *http.Response) (*Query5GVnGroupInternalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Query5GVnGroupInternalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]externalRef6.N5GVnGroupConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuery5GVNGroupPPDataResponse parses an HTTP response from a Query5GVNGroupPPDataWithResponse call
func ParseQuery5GVNGroupPPDataResponse(rsp *http.Response) (*Query5GVNGroupPPDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Query5GVNGroupPPDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pp5gVnGroupProfileData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDelete5GVnGroupResponse parses an HTTP response from a Delete5GVnGroupWithResponse call
func ParseDelete5GVnGroupResponse(rsp *http.Response) (*Delete5GVnGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Delete5GVnGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGet5GVnGroupConfigurationResponse parses an HTTP response from a Get5GVnGroupConfigurationWithResponse call
func ParseGet5GVnGroupConfigurationResponse(rsp *http.Response) (*Get5GVnGroupConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get5GVnGroupConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef6.N5GVnGroupConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModify5GVnGroupResponse parses an HTTP response from a Modify5GVnGroupWithResponse call
func ParseModify5GVnGroupResponse(rsp *http.Response) (*Modify5GVnGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Modify5GVnGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef2.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreate5GVnGroupResponse parses an HTTP response from a Create5GVnGroupWithResponse call
func ParseCreate5GVnGroupResponse(rsp *http.Response) (*Create5GVnGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Create5GVnGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef6.N5GVnGroupConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef2.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetGroupIdentifiersResponse parses an HTTP response from a GetGroupIdentifiersWithResponse call
func ParseGetGroupIdentifiersResponse(rsp *http.Response) (*GetGroupIdentifiersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupIdentifiersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef7.GroupIdentifiers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryGroupEEDataResponse parses an HTTP response from a QueryGroupEEDataWithResponse call
func ParseQueryGroupEEDataResponse(rsp *http.Response) (*QueryGroupEEDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryGroupEEDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EeGroupProfileData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryEeGroupSubscriptionsResponse parses an HTTP response from a QueryEeGroupSubscriptionsWithResponse call
func ParseQueryEeGroupSubscriptionsResponse(rsp *http.Response) (*QueryEeGroupSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryEeGroupSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EeSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateEeGroupSubscriptionsResponse parses an HTTP response from a CreateEeGroupSubscriptionsWithResponse call
func ParseCreateEeGroupSubscriptionsResponse(rsp *http.Response) (*CreateEeGroupSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEeGroupSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EeSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseRemoveEeGroupSubscriptionsResponse parses an HTTP response from a RemoveEeGroupSubscriptionsWithResponse call
func ParseRemoveEeGroupSubscriptionsResponse(rsp *http.Response) (*RemoveEeGroupSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveEeGroupSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryEeGroupSubscriptionResponse parses an HTTP response from a QueryEeGroupSubscriptionWithResponse call
func ParseQueryEeGroupSubscriptionResponse(rsp *http.Response) (*QueryEeGroupSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryEeGroupSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EeSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifyEeGroupSubscriptionResponse parses an HTTP response from a ModifyEeGroupSubscriptionWithResponse call
func ParseModifyEeGroupSubscriptionResponse(rsp *http.Response) (*ModifyEeGroupSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyEeGroupSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef2.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef2.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateEeGroupSubscriptionsResponse parses an HTTP response from a UpdateEeGroupSubscriptionsWithResponse call
func ParseUpdateEeGroupSubscriptionsResponse(rsp *http.Response) (*UpdateEeGroupSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEeGroupSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetSharedDataResponse parses an HTTP response from a GetSharedDataWithResponse call
func ParseGetSharedDataResponse(rsp *http.Response) (*GetSharedDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSharedDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef7.SharedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetIndividualSharedDataResponse parses an HTTP response from a GetIndividualSharedDataWithResponse call
func ParseGetIndividualSharedDataResponse(rsp *http.Response) (*GetIndividualSharedDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndividualSharedDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef7.SharedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseRemoveMultipleSubscriptionDataSubscriptionsResponse parses an HTTP response from a RemoveMultipleSubscriptionDataSubscriptionsWithResponse call
func ParseRemoveMultipleSubscriptionDataSubscriptionsResponse(rsp *http.Response) (*RemoveMultipleSubscriptionDataSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveMultipleSubscriptionDataSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuerySubsToNotifyResponse parses an HTTP response from a QuerySubsToNotifyWithResponse call
func ParseQuerySubsToNotifyResponse(rsp *http.Response) (*QuerySubsToNotifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerySubsToNotifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SubscriptionDataSubscriptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseSubscriptionDataSubscriptionsResponse parses an HTTP response from a SubscriptionDataSubscriptionsWithResponse call
func ParseSubscriptionDataSubscriptionsResponse(rsp *http.Response) (*SubscriptionDataSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubscriptionDataSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SubscriptionDataSubscriptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseRemovesubscriptionDataSubscriptionsResponse parses an HTTP response from a RemovesubscriptionDataSubscriptionsWithResponse call
func ParseRemovesubscriptionDataSubscriptionsResponse(rsp *http.Response) (*RemovesubscriptionDataSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemovesubscriptionDataSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuerySubscriptionDataSubscriptionsResponse parses an HTTP response from a QuerySubscriptionDataSubscriptionsWithResponse call
func ParseQuerySubscriptionDataSubscriptionsResponse(rsp *http.Response) (*QuerySubscriptionDataSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerySubscriptionDataSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SubscriptionDataSubscriptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifysubscriptionDataSubscriptionResponse parses an HTTP response from a ModifysubscriptionDataSubscriptionWithResponse call
func ParseModifysubscriptionDataSubscriptionResponse(rsp *http.Response) (*ModifysubscriptionDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifysubscriptionDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef2.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef2.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteAuthenticationStatusResponse parses an HTTP response from a DeleteAuthenticationStatusWithResponse call
func ParseDeleteAuthenticationStatusResponse(rsp *http.Response) (*DeleteAuthenticationStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAuthenticationStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryAuthenticationStatusResponse parses an HTTP response from a QueryAuthenticationStatusWithResponse call
func ParseQueryAuthenticationStatusResponse(rsp *http.Response) (*QueryAuthenticationStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryAuthenticationStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.AuthEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateAuthenticationStatusResponse parses an HTTP response from a CreateAuthenticationStatusWithResponse call
func ParseCreateAuthenticationStatusResponse(rsp *http.Response) (*CreateAuthenticationStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAuthenticationStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIndividualAuthenticationStatusResponse parses an HTTP response from a DeleteIndividualAuthenticationStatusWithResponse call
func ParseDeleteIndividualAuthenticationStatusResponse(rsp *http.Response) (*DeleteIndividualAuthenticationStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndividualAuthenticationStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryIndividualAuthenticationStatusResponse parses an HTTP response from a QueryIndividualAuthenticationStatusWithResponse call
func ParseQueryIndividualAuthenticationStatusResponse(rsp *http.Response) (*QueryIndividualAuthenticationStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryIndividualAuthenticationStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef8.AuthEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateIndividualAuthenticationStatusResponse parses an HTTP response from a CreateIndividualAuthenticationStatusWithResponse call
func ParseCreateIndividualAuthenticationStatusResponse(rsp *http.Response) (*CreateIndividualAuthenticationStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIndividualAuthenticationStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryAuthSubsDataResponse parses an HTTP response from a QueryAuthSubsDataWithResponse call
func ParseQueryAuthSubsDataResponse(rsp *http.Response) (*QueryAuthSubsDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryAuthSubsDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthenticationSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifyAuthenticationSubscriptionResponse parses an HTTP response from a ModifyAuthenticationSubscriptionWithResponse call
func ParseModifyAuthenticationSubscriptionResponse(rsp *http.Response) (*ModifyAuthenticationSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyAuthenticationSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef2.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryContextDataResponse parses an HTTP response from a QueryContextDataWithResponse call
func ParseQueryContextDataResponse(rsp *http.Response) (*QueryContextDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryContextDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContextDataSets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryAmfContext3gppResponse parses an HTTP response from a QueryAmfContext3gppWithResponse call
func ParseQueryAmfContext3gppResponse(rsp *http.Response) (*QueryAmfContext3gppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryAmfContext3gppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Amf3GppAccessRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseAmfContext3gppResponse parses an HTTP response from a AmfContext3gppWithResponse call
func ParseAmfContext3gppResponse(rsp *http.Response) (*AmfContext3gppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AmfContext3gppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef2.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateAmfContext3gppResponse parses an HTTP response from a CreateAmfContext3gppWithResponse call
func ParseCreateAmfContext3gppResponse(rsp *http.Response) (*CreateAmfContext3gppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAmfContext3gppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Amf3GppAccessRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryAmfContextNon3gppResponse parses an HTTP response from a QueryAmfContextNon3gppWithResponse call
func ParseQueryAmfContextNon3gppResponse(rsp *http.Response) (*QueryAmfContextNon3gppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryAmfContextNon3gppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AmfNon3GppAccessRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseAmfContextNon3gppResponse parses an HTTP response from a AmfContextNon3gppWithResponse call
func ParseAmfContextNon3gppResponse(rsp *http.Response) (*AmfContextNon3gppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AmfContextNon3gppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef2.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateAmfContextNon3gppResponse parses an HTTP response from a CreateAmfContextNon3gppWithResponse call
func ParseCreateAmfContextNon3gppResponse(rsp *http.Response) (*CreateAmfContextNon3gppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAmfContextNon3gppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Amf3GppAccessRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryeesubscriptionsResponse parses an HTTP response from a QueryeesubscriptionsWithResponse call
func ParseQueryeesubscriptionsResponse(rsp *http.Response) (*QueryeesubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryeesubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EeSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateEeSubscriptionsResponse parses an HTTP response from a CreateEeSubscriptionsWithResponse call
func ParseCreateEeSubscriptionsResponse(rsp *http.Response) (*CreateEeSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEeSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EeSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseRemoveeeSubscriptionsResponse parses an HTTP response from a RemoveeeSubscriptionsWithResponse call
func ParseRemoveeeSubscriptionsResponse(rsp *http.Response) (*RemoveeeSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveeeSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryeeSubscriptionResponse parses an HTTP response from a QueryeeSubscriptionWithResponse call
func ParseQueryeeSubscriptionResponse(rsp *http.Response) (*QueryeeSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryeeSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EeSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifyEesubscriptionResponse parses an HTTP response from a ModifyEesubscriptionWithResponse call
func ParseModifyEesubscriptionResponse(rsp *http.Response) (*ModifyEesubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyEesubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef2.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef2.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateEesubscriptionsResponse parses an HTTP response from a UpdateEesubscriptionsWithResponse call
func ParseUpdateEesubscriptionsResponse(rsp *http.Response) (*UpdateEesubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEesubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseRemoveAmfSubscriptionsInfoResponse parses an HTTP response from a RemoveAmfSubscriptionsInfoWithResponse call
func ParseRemoveAmfSubscriptionsInfoResponse(rsp *http.Response) (*RemoveAmfSubscriptionsInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveAmfSubscriptionsInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetAmfSubscriptionInfoResponse parses an HTTP response from a GetAmfSubscriptionInfoWithResponse call
func ParseGetAmfSubscriptionInfoResponse(rsp *http.Response) (*GetAmfSubscriptionInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAmfSubscriptionInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AmfSubscriptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifyAmfSubscriptionInfoResponse parses an HTTP response from a ModifyAmfSubscriptionInfoWithResponse call
func ParseModifyAmfSubscriptionInfoResponse(rsp *http.Response) (*ModifyAmfSubscriptionInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyAmfSubscriptionInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef2.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateAMFSubscriptionsResponse parses an HTTP response from a CreateAMFSubscriptionsWithResponse call
func ParseCreateAMFSubscriptionsResponse(rsp *http.Response) (*CreateAMFSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAMFSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseRemoveHssSubscriptionsInfoResponse parses an HTTP response from a RemoveHssSubscriptionsInfoWithResponse call
func ParseRemoveHssSubscriptionsInfoResponse(rsp *http.Response) (*RemoveHssSubscriptionsInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveHssSubscriptionsInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetHssSubscriptionInfoResponse parses an HTTP response from a GetHssSubscriptionInfoWithResponse call
func ParseGetHssSubscriptionInfoResponse(rsp *http.Response) (*GetHssSubscriptionInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHssSubscriptionInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmfSubscriptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifyHssSubscriptionInfoResponse parses an HTTP response from a ModifyHssSubscriptionInfoWithResponse call
func ParseModifyHssSubscriptionInfoResponse(rsp *http.Response) (*ModifyHssSubscriptionInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyHssSubscriptionInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef2.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateHSSSubscriptionsResponse parses an HTTP response from a CreateHSSSubscriptionsWithResponse call
func ParseCreateHSSSubscriptionsResponse(rsp *http.Response) (*CreateHSSSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHSSSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseRemoveSmfSubscriptionsInfoResponse parses an HTTP response from a RemoveSmfSubscriptionsInfoWithResponse call
func ParseRemoveSmfSubscriptionsInfoResponse(rsp *http.Response) (*RemoveSmfSubscriptionsInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveSmfSubscriptionsInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetSmfSubscriptionInfoResponse parses an HTTP response from a GetSmfSubscriptionInfoWithResponse call
func ParseGetSmfSubscriptionInfoResponse(rsp *http.Response) (*GetSmfSubscriptionInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSmfSubscriptionInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmfSubscriptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifySmfSubscriptionInfoResponse parses an HTTP response from a ModifySmfSubscriptionInfoWithResponse call
func ParseModifySmfSubscriptionInfoResponse(rsp *http.Response) (*ModifySmfSubscriptionInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifySmfSubscriptionInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef2.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateSMFSubscriptionsResponse parses an HTTP response from a CreateSMFSubscriptionsWithResponse call
func ParseCreateSMFSubscriptionsResponse(rsp *http.Response) (*CreateSMFSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSMFSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIpSmGwContextResponse parses an HTTP response from a DeleteIpSmGwContextWithResponse call
func ParseDeleteIpSmGwContextResponse(rsp *http.Response) (*DeleteIpSmGwContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIpSmGwContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryIpSmGwContextResponse parses an HTTP response from a QueryIpSmGwContextWithResponse call
func ParseQueryIpSmGwContextResponse(rsp *http.Response) (*QueryIpSmGwContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryIpSmGwContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IpSmGwRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifyIpSmGwContextResponse parses an HTTP response from a ModifyIpSmGwContextWithResponse call
func ParseModifyIpSmGwContextResponse(rsp *http.Response) (*ModifyIpSmGwContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyIpSmGwContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef2.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateIpSmGwContextResponse parses an HTTP response from a CreateIpSmGwContextWithResponse call
func ParseCreateIpSmGwContextResponse(rsp *http.Response) (*CreateIpSmGwContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIpSmGwContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryUeLocationResponse parses an HTTP response from a QueryUeLocationWithResponse call
func ParseQueryUeLocationResponse(rsp *http.Response) (*QueryUeLocationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryUeLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LocationInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteMessageWaitingDataResponse parses an HTTP response from a DeleteMessageWaitingDataWithResponse call
func ParseDeleteMessageWaitingDataResponse(rsp *http.Response) (*DeleteMessageWaitingDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMessageWaitingDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryMessageWaitingDataResponse parses an HTTP response from a QueryMessageWaitingDataWithResponse call
func ParseQueryMessageWaitingDataResponse(rsp *http.Response) (*QueryMessageWaitingDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryMessageWaitingDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MessageWaitingData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifyMessageWaitingDataResponse parses an HTTP response from a ModifyMessageWaitingDataWithResponse call
func ParseModifyMessageWaitingDataResponse(rsp *http.Response) (*ModifyMessageWaitingDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyMessageWaitingDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef2.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateMessageWaitingDataResponse parses an HTTP response from a CreateMessageWaitingDataWithResponse call
func ParseCreateMessageWaitingDataResponse(rsp *http.Response) (*CreateMessageWaitingDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMessageWaitingDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuerysdmsubscriptionsResponse parses an HTTP response from a QuerysdmsubscriptionsWithResponse call
func ParseQuerysdmsubscriptionsResponse(rsp *http.Response) (*QuerysdmsubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerysdmsubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SdmSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateSdmSubscriptionsResponse parses an HTTP response from a CreateSdmSubscriptionsWithResponse call
func ParseCreateSdmSubscriptionsResponse(rsp *http.Response) (*CreateSdmSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSdmSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SdmSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseRemovesdmSubscriptionsResponse parses an HTTP response from a RemovesdmSubscriptionsWithResponse call
func ParseRemovesdmSubscriptionsResponse(rsp *http.Response) (*RemovesdmSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemovesdmSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuerysdmSubscriptionResponse parses an HTTP response from a QuerysdmSubscriptionWithResponse call
func ParseQuerysdmSubscriptionResponse(rsp *http.Response) (*QuerysdmSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerysdmSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SdmSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifysdmSubscriptionResponse parses an HTTP response from a ModifysdmSubscriptionWithResponse call
func ParseModifysdmSubscriptionResponse(rsp *http.Response) (*ModifysdmSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifysdmSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef2.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef2.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdatesdmsubscriptionsResponse parses an HTTP response from a UpdatesdmsubscriptionsWithResponse call
func ParseUpdatesdmsubscriptionsResponse(rsp *http.Response) (*UpdatesdmsubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatesdmsubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseRemoveHssSDMSubscriptionsInfoResponse parses an HTTP response from a RemoveHssSDMSubscriptionsInfoWithResponse call
func ParseRemoveHssSDMSubscriptionsInfoResponse(rsp *http.Response) (*RemoveHssSDMSubscriptionsInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveHssSDMSubscriptionsInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetHssSDMSubscriptionInfoResponse parses an HTTP response from a GetHssSDMSubscriptionInfoWithResponse call
func ParseGetHssSDMSubscriptionInfoResponse(rsp *http.Response) (*GetHssSDMSubscriptionInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHssSDMSubscriptionInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmfSubscriptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifyHssSDMSubscriptionInfoResponse parses an HTTP response from a ModifyHssSDMSubscriptionInfoWithResponse call
func ParseModifyHssSDMSubscriptionInfoResponse(rsp *http.Response) (*ModifyHssSDMSubscriptionInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyHssSDMSubscriptionInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef2.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateHSSSDMSubscriptionsResponse parses an HTTP response from a CreateHSSSDMSubscriptionsWithResponse call
func ParseCreateHSSSDMSubscriptionsResponse(rsp *http.Response) (*CreateHSSSDMSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHSSSDMSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuerySmfRegListResponse parses an HTTP response from a QuerySmfRegListWithResponse call
func ParseQuerySmfRegListResponse(rsp *http.Response) (*QuerySmfRegListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerySmfRegListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmfRegList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteSmfRegistrationResponse parses an HTTP response from a DeleteSmfRegistrationWithResponse call
func ParseDeleteSmfRegistrationResponse(rsp *http.Response) (*DeleteSmfRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSmfRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuerySmfRegistrationResponse parses an HTTP response from a QuerySmfRegistrationWithResponse call
func ParseQuerySmfRegistrationResponse(rsp *http.Response) (*QuerySmfRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerySmfRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmfRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateOrUpdateSmfRegistrationResponse parses an HTTP response from a CreateOrUpdateSmfRegistrationWithResponse call
func ParseCreateOrUpdateSmfRegistrationResponse(rsp *http.Response) (*CreateOrUpdateSmfRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrUpdateSmfRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SmfRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteSmsfContext3gppResponse parses an HTTP response from a DeleteSmsfContext3gppWithResponse call
func ParseDeleteSmsfContext3gppResponse(rsp *http.Response) (*DeleteSmsfContext3gppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSmsfContext3gppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuerySmsfContext3gppResponse parses an HTTP response from a QuerySmsfContext3gppWithResponse call
func ParseQuerySmsfContext3gppResponse(rsp *http.Response) (*QuerySmsfContext3gppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerySmsfContext3gppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmsfRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateSmsfContext3gppResponse parses an HTTP response from a CreateSmsfContext3gppWithResponse call
func ParseCreateSmsfContext3gppResponse(rsp *http.Response) (*CreateSmsfContext3gppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSmsfContext3gppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SmsfRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteSmsfContextNon3gppResponse parses an HTTP response from a DeleteSmsfContextNon3gppWithResponse call
func ParseDeleteSmsfContextNon3gppResponse(rsp *http.Response) (*DeleteSmsfContextNon3gppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSmsfContextNon3gppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuerySmsfContextNon3gppResponse parses an HTTP response from a QuerySmsfContextNon3gppWithResponse call
func ParseQuerySmsfContextNon3gppResponse(rsp *http.Response) (*QuerySmsfContextNon3gppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerySmsfContextNon3gppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmsfRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateSmsfContextNon3gppResponse parses an HTTP response from a CreateSmsfContextNon3gppWithResponse call
func ParseCreateSmsfContextNon3gppResponse(rsp *http.Response) (*CreateSmsfContextNon3gppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSmsfContextNon3gppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SmsfRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryCoverageRestrictionDataResponse parses an HTTP response from a QueryCoverageRestrictionDataWithResponse call
func ParseQueryCoverageRestrictionDataResponse(rsp *http.Response) (*QueryCoverageRestrictionDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryCoverageRestrictionDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnhancedCoverageRestrictionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryEEDataResponse parses an HTTP response from a QueryEEDataWithResponse call
func ParseQueryEEDataResponse(rsp *http.Response) (*QueryEEDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryEEDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EeProfileData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetIdentityDataResponse parses an HTTP response from a GetIdentityDataWithResponse call
func ParseGetIdentityDataResponse(rsp *http.Response) (*GetIdentityDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIdentityDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdentityData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryLcsMoDataResponse parses an HTTP response from a QueryLcsMoDataWithResponse call
func ParseQueryLcsMoDataResponse(rsp *http.Response) (*QueryLcsMoDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryLcsMoDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LcsMoData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryLcsPrivacyDataResponse parses an HTTP response from a QueryLcsPrivacyDataWithResponse call
func ParseQueryLcsPrivacyDataResponse(rsp *http.Response) (*QueryLcsPrivacyDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryLcsPrivacyDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LcsPrivacyData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetNiddAuDataResponse parses an HTTP response from a GetNiddAuDataWithResponse call
func ParseGetNiddAuDataResponse(rsp *http.Response) (*GetNiddAuDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNiddAuDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthorizationData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetOdbDataResponse parses an HTTP response from a GetOdbDataWithResponse call
func ParseGetOdbDataResponse(rsp *http.Response) (*GetOdbDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOdbDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef2.OdbData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryOperSpecDataResponse parses an HTTP response from a QueryOperSpecDataWithResponse call
func ParseQueryOperSpecDataResponse(rsp *http.Response) (*QueryOperSpecDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryOperSpecDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]OperatorSpecificDataContainer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifyOperSpecDataResponse parses an HTTP response from a ModifyOperSpecDataWithResponse call
func ParseModifyOperSpecDataResponse(rsp *http.Response) (*ModifyOperSpecDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyOperSpecDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef2.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetppDataResponse parses an HTTP response from a GetppDataWithResponse call
func ParseGetppDataResponse(rsp *http.Response) (*GetppDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetppDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PpData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifyPpDataResponse parses an HTTP response from a ModifyPpDataWithResponse call
func ParseModifyPpDataResponse(rsp *http.Response) (*ModifyPpDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyPpDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef2.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryPPDataResponse parses an HTTP response from a QueryPPDataWithResponse call
func ParseQueryPPDataResponse(rsp *http.Response) (*QueryPPDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryPPDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PpProfileData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryAuthSoRResponse parses an HTTP response from a QueryAuthSoRWithResponse call
func ParseQueryAuthSoRResponse(rsp *http.Response) (*QueryAuthSoRResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryAuthSoRResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SorData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateAuthenticationSoRResponse parses an HTTP response from a CreateAuthenticationSoRWithResponse call
func ParseCreateAuthenticationSoRResponse(rsp *http.Response) (*CreateAuthenticationSoRResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAuthenticationSoRResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryCagAckResponse parses an HTTP response from a QueryCagAckWithResponse call
func ParseQueryCagAckResponse(rsp *http.Response) (*QueryCagAckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryCagAckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CagAckData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateCagUpdateAckResponse parses an HTTP response from a CreateCagUpdateAckWithResponse call
func ParseCreateCagUpdateAckResponse(rsp *http.Response) (*CreateCagUpdateAckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCagUpdateAckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryNssaiAckResponse parses an HTTP response from a QueryNssaiAckWithResponse call
func ParseQueryNssaiAckResponse(rsp *http.Response) (*QueryNssaiAckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryNssaiAckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NssaiAckData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateOrUpdateNssaiAckResponse parses an HTTP response from a CreateOrUpdateNssaiAckWithResponse call
func ParseCreateOrUpdateNssaiAckResponse(rsp *http.Response) (*CreateOrUpdateNssaiAckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrUpdateNssaiAckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryAuthUPUResponse parses an HTTP response from a QueryAuthUPUWithResponse call
func ParseQueryAuthUPUResponse(rsp *http.Response) (*QueryAuthUPUResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryAuthUPUResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpuData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateAuthenticationUPUResponse parses an HTTP response from a CreateAuthenticationUPUWithResponse call
func ParseCreateAuthenticationUPUResponse(rsp *http.Response) (*CreateAuthenticationUPUResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAuthenticationUPUResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryV2xDataResponse parses an HTTP response from a QueryV2xDataWithResponse call
func ParseQueryV2xDataResponse(rsp *http.Response) (*QueryV2xDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryV2xDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2xSubscriptionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryProvisionedDataResponse parses an HTTP response from a QueryProvisionedDataWithResponse call
func ParseQueryProvisionedDataResponse(rsp *http.Response) (*QueryProvisionedDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryProvisionedDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProvisionedDataSets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryAmDataResponse parses an HTTP response from a QueryAmDataWithResponse call
func ParseQueryAmDataResponse(rsp *http.Response) (*QueryAmDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryAmDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessAndMobilitySubscriptionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryLcsBcaDataResponse parses an HTTP response from a QueryLcsBcaDataWithResponse call
func ParseQueryLcsBcaDataResponse(rsp *http.Response) (*QueryLcsBcaDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryLcsBcaDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LcsBroadcastAssistanceTypesData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuerySmDataResponse parses an HTTP response from a QuerySmDataWithResponse call
func ParseQuerySmDataResponse(rsp *http.Response) (*QuerySmDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerySmDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SessionManagementSubscriptionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuerySmfSelectDataResponse parses an HTTP response from a QuerySmfSelectDataWithResponse call
func ParseQuerySmfSelectDataResponse(rsp *http.Response) (*QuerySmfSelectDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerySmfSelectDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmfSelectionSubscriptionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuerySmsDataResponse parses an HTTP response from a QuerySmsDataWithResponse call
func ParseQuerySmsDataResponse(rsp *http.Response) (*QuerySmsDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerySmsDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmsSubscriptionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQuerySmsMngDataResponse parses an HTTP response from a QuerySmsMngDataWithResponse call
func ParseQuerySmsMngDataResponse(rsp *http.Response) (*QuerySmsMngDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerySmsMngDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmsManagementSubscriptionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryTraceDataResponse parses an HTTP response from a QueryTraceDataWithResponse call
func ParseQueryTraceDataResponse(rsp *http.Response) (*QueryTraceDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryTraceDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef2.TraceData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieves the data of a 5G VN Group
	// (GET /subscription-data/group-data/5g-vn-groups)
	Query5GVnGroup(c *gin.Context, params Query5GVnGroupParams)
	// Retrieves the data of 5G VN Group
	// (GET /subscription-data/group-data/5g-vn-groups/internal)
	Query5GVnGroupInternal(c *gin.Context, params Query5GVnGroupInternalParams)
	// Retrieves the parameter provision profile data for 5G VN Group
	// (GET /subscription-data/group-data/5g-vn-groups/pp-profile-data)
	Query5GVNGroupPPData(c *gin.Context, params Query5GVNGroupPPDataParams)
	// Deletes the 5GVnGroup
	// (DELETE /subscription-data/group-data/5g-vn-groups/{externalGroupId})
	Delete5GVnGroup(c *gin.Context, externalGroupId externalRef7.ExtGroupId)
	// Retrieve a 5GVnGroup configuration
	// (GET /subscription-data/group-data/5g-vn-groups/{externalGroupId})
	Get5GVnGroupConfiguration(c *gin.Context, externalGroupId externalRef7.ExtGroupId)
	// modify the 5GVnGroup
	// (PATCH /subscription-data/group-data/5g-vn-groups/{externalGroupId})
	Modify5GVnGroup(c *gin.Context, externalGroupId externalRef7.ExtGroupId, params Modify5GVnGroupParams)
	// Create an individual 5G VN Grouop
	// (PUT /subscription-data/group-data/5g-vn-groups/{externalGroupId})
	Create5GVnGroup(c *gin.Context, externalGroupId externalRef7.ExtGroupId)
	// Mapping of Group Identifiers
	// (GET /subscription-data/group-data/group-identifiers)
	GetGroupIdentifiers(c *gin.Context, params GetGroupIdentifiersParams)
	// Retrieves the ee profile data profile data of a group or anyUE
	// (GET /subscription-data/group-data/{ueGroupId}/ee-profile-data)
	QueryGroupEEData(c *gin.Context, ueGroupId VarUeGroupId, params QueryGroupEEDataParams)
	// Retrieves the ee subscriptions of a group of UEs or any UE
	// (GET /subscription-data/group-data/{ueGroupId}/ee-subscriptions)
	QueryEeGroupSubscriptions(c *gin.Context, ueGroupId VarUeGroupId, params QueryEeGroupSubscriptionsParams)
	// Create individual EE subscription for a group of UEs or any UE
	// (POST /subscription-data/group-data/{ueGroupId}/ee-subscriptions)
	CreateEeGroupSubscriptions(c *gin.Context, ueGroupId VarUeGroupId)
	// Deletes a eeSubscription for a group of UEs or any UE
	// (DELETE /subscription-data/group-data/{ueGroupId}/ee-subscriptions/{subsId})
	RemoveEeGroupSubscriptions(c *gin.Context, ueGroupId VarUeGroupId, subsId string)
	// Retrieve a individual eeSubscription for a group of UEs or any UE
	// (GET /subscription-data/group-data/{ueGroupId}/ee-subscriptions/{subsId})
	QueryEeGroupSubscription(c *gin.Context, ueGroupId VarUeGroupId, subsId string)
	// Modify an individual ee subscription for a group of a UEs
	// (PATCH /subscription-data/group-data/{ueGroupId}/ee-subscriptions/{subsId})
	ModifyEeGroupSubscription(c *gin.Context, ueGroupId VarUeGroupId, subsId string, params ModifyEeGroupSubscriptionParams)
	// Update an individual ee subscription of a group of UEs or any UE
	// (PUT /subscription-data/group-data/{ueGroupId}/ee-subscriptions/{subsId})
	UpdateEeGroupSubscriptions(c *gin.Context, ueGroupId VarUeGroupId, subsId string)
	// retrieve shared data
	// (GET /subscription-data/shared-data)
	GetSharedData(c *gin.Context, params GetSharedDataParams)
	// retrieve individual shared data
	// (GET /subscription-data/shared-data/{sharedDataId})
	GetIndividualSharedData(c *gin.Context, sharedDataId externalRef7.SharedDataId, params GetIndividualSharedDataParams)
	// Deletes subscriptions identified by a given ue-id parameter
	// (DELETE /subscription-data/subs-to-notify)
	RemoveMultipleSubscriptionDataSubscriptions(c *gin.Context, params RemoveMultipleSubscriptionDataSubscriptionsParams)
	// Retrieves the list of subscriptions
	// (GET /subscription-data/subs-to-notify)
	QuerySubsToNotify(c *gin.Context, params QuerySubsToNotifyParams)
	// Subscription data subscriptions
	// (POST /subscription-data/subs-to-notify)
	SubscriptionDataSubscriptions(c *gin.Context)
	// Deletes a subscriptionDataSubscriptions
	// (DELETE /subscription-data/subs-to-notify/{subsId})
	RemovesubscriptionDataSubscriptions(c *gin.Context, subsId string)
	// Retrieves a individual subscriptionDataSubscription identified by subsId
	// (GET /subscription-data/subs-to-notify/{subsId})
	QuerySubscriptionDataSubscriptions(c *gin.Context, subsId string)
	// Modify an individual subscriptionDataSubscription
	// (PATCH /subscription-data/subs-to-notify/{subsId})
	ModifysubscriptionDataSubscription(c *gin.Context, subsId string, params ModifysubscriptionDataSubscriptionParams)
	// To remove the Authentication Status of a UE
	// (DELETE /subscription-data/{ueId}/authentication-data/authentication-status)
	DeleteAuthenticationStatus(c *gin.Context, ueId externalRef2.Supi)
	// Retrieves the Authentication Status of a UE
	// (GET /subscription-data/{ueId}/authentication-data/authentication-status)
	QueryAuthenticationStatus(c *gin.Context, ueId externalRef2.Supi, params QueryAuthenticationStatusParams)
	// To store the Authentication Status data of a UE
	// (PUT /subscription-data/{ueId}/authentication-data/authentication-status)
	CreateAuthenticationStatus(c *gin.Context, ueId externalRef2.Supi)
	// To remove the Individual Authentication Status of a UE
	// (DELETE /subscription-data/{ueId}/authentication-data/authentication-status/{servingNetworkName})
	DeleteIndividualAuthenticationStatus(c *gin.Context, ueId externalRef2.Supi, servingNetworkName externalRef8.ServingNetworkName)
	// Retrieves the Individual Authentication Status of a UE
	// (GET /subscription-data/{ueId}/authentication-data/authentication-status/{servingNetworkName})
	QueryIndividualAuthenticationStatus(c *gin.Context, ueId externalRef2.Supi, servingNetworkName externalRef8.ServingNetworkName, params QueryIndividualAuthenticationStatusParams)
	// To store the individual Authentication Status data of a UE
	// (PUT /subscription-data/{ueId}/authentication-data/authentication-status/{servingNetworkName})
	CreateIndividualAuthenticationStatus(c *gin.Context, ueId externalRef2.Supi, servingNetworkName externalRef8.ServingNetworkName)
	// Retrieves the authentication subscription data of a UE
	// (GET /subscription-data/{ueId}/authentication-data/authentication-subscription)
	QueryAuthSubsData(c *gin.Context, ueId externalRef2.Supi, params QueryAuthSubsDataParams)
	// modify the authentication subscription data of a UE
	// (PATCH /subscription-data/{ueId}/authentication-data/authentication-subscription)
	ModifyAuthenticationSubscription(c *gin.Context, ueId externalRef2.Supi, params ModifyAuthenticationSubscriptionParams)
	// Retrieve multiple context data sets of a UE
	// (GET /subscription-data/{ueId}/context-data)
	QueryContextData(c *gin.Context, ueId externalRef2.VarUeId, params QueryContextDataParams)
	// Retrieves the AMF context data of a UE using 3gpp access
	// (GET /subscription-data/{ueId}/context-data/amf-3gpp-access)
	QueryAmfContext3gpp(c *gin.Context, ueId externalRef2.VarUeId, params QueryAmfContext3gppParams)
	// To modify the AMF context data of a UE using 3gpp access in the UDR
	// (PATCH /subscription-data/{ueId}/context-data/amf-3gpp-access)
	AmfContext3gpp(c *gin.Context, ueId externalRef2.VarUeId, params AmfContext3gppParams)
	// To store the AMF context data of a UE using 3gpp access in the UDR
	// (PUT /subscription-data/{ueId}/context-data/amf-3gpp-access)
	CreateAmfContext3gpp(c *gin.Context, ueId externalRef2.VarUeId)
	// Retrieves the AMF context data of a UE using non-3gpp access
	// (GET /subscription-data/{ueId}/context-data/amf-non-3gpp-access)
	QueryAmfContextNon3gpp(c *gin.Context, ueId externalRef2.VarUeId, params QueryAmfContextNon3gppParams)
	// To modify the AMF context data of a UE using non 3gpp access in the UDR
	// (PATCH /subscription-data/{ueId}/context-data/amf-non-3gpp-access)
	AmfContextNon3gpp(c *gin.Context, ueId externalRef2.VarUeId, params AmfContextNon3gppParams)
	// To store the AMF context data of a UE using non-3gpp access in the UDR
	// (PUT /subscription-data/{ueId}/context-data/amf-non-3gpp-access)
	CreateAmfContextNon3gpp(c *gin.Context, ueId externalRef2.VarUeId)
	// Retrieves the ee subscriptions of a UE
	// (GET /subscription-data/{ueId}/context-data/ee-subscriptions)
	Queryeesubscriptions(c *gin.Context, ueId externalRef2.VarUeId, params QueryeesubscriptionsParams)
	// Create individual EE subscription
	// (POST /subscription-data/{ueId}/context-data/ee-subscriptions)
	CreateEeSubscriptions(c *gin.Context, ueId externalRef2.VarUeId)
	// Deletes a eeSubscription
	// (DELETE /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId})
	RemoveeeSubscriptions(c *gin.Context, ueId externalRef2.VarUeId, subsId string)
	// Retrieve a eeSubscription
	// (GET /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId})
	QueryeeSubscription(c *gin.Context, ueId externalRef2.VarUeId, subsId string)
	// Modify an individual ee subscription of a UE
	// (PATCH /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId})
	ModifyEesubscription(c *gin.Context, ueId externalRef2.VarUeId, subsId string, params ModifyEesubscriptionParams)
	// Update an individual ee subscriptions of a UE
	// (PUT /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId})
	UpdateEesubscriptions(c *gin.Context, ueId externalRef2.VarUeId, subsId string)
	// Deletes AMF Subscription Info for an eeSubscription
	// (DELETE /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/amf-subscriptions)
	RemoveAmfSubscriptionsInfo(c *gin.Context, ueId externalRef2.VarUeId, subsId string)
	// Retrieve AMF subscription Info
	// (GET /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/amf-subscriptions)
	GetAmfSubscriptionInfo(c *gin.Context, ueId externalRef2.VarUeId, subsId string)
	// modify the AMF Subscription Info
	// (PATCH /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/amf-subscriptions)
	ModifyAmfSubscriptionInfo(c *gin.Context, ueId externalRef2.VarUeId, subsId string, params ModifyAmfSubscriptionInfoParams)
	// Create AmfSubscriptions for an individual ee subscriptions of a UE
	// (PUT /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/amf-subscriptions)
	CreateAMFSubscriptions(c *gin.Context, ueId externalRef2.VarUeId, subsId string)
	// Delete HSS Subscription Info
	// (DELETE /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/hss-subscriptions)
	RemoveHssSubscriptionsInfo(c *gin.Context, ueId externalRef2.VarUeId, subsId string)
	// Retrieve HSS Subscription Info
	// (GET /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/hss-subscriptions)
	GetHssSubscriptionInfo(c *gin.Context, ueId externalRef2.VarUeId, subsId string)
	// Modify HSS Subscription Info
	// (PATCH /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/hss-subscriptions)
	ModifyHssSubscriptionInfo(c *gin.Context, ueId externalRef2.VarUeId, subsId string, params ModifyHssSubscriptionInfoParams)
	// Create HSS Subscription Info
	// (PUT /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/hss-subscriptions)
	CreateHSSSubscriptions(c *gin.Context, ueId externalRef2.VarUeId, subsId string)
	// Delete SMF Subscription Info
	// (DELETE /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/smf-subscriptions)
	RemoveSmfSubscriptionsInfo(c *gin.Context, ueId externalRef2.VarUeId, subsId string)
	// Retrieve SMF Subscription Info
	// (GET /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/smf-subscriptions)
	GetSmfSubscriptionInfo(c *gin.Context, ueId externalRef2.VarUeId, subsId string)
	// Modify SMF Subscription Info
	// (PATCH /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/smf-subscriptions)
	ModifySmfSubscriptionInfo(c *gin.Context, ueId externalRef2.VarUeId, subsId string, params ModifySmfSubscriptionInfoParams)
	// Create SMF Subscription Info
	// (PUT /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/smf-subscriptions)
	CreateSMFSubscriptions(c *gin.Context, ueId externalRef2.VarUeId, subsId string)
	// To remove the IP-SM-GW context data of a UE
	// (DELETE /subscription-data/{ueId}/context-data/ip-sm-gw)
	DeleteIpSmGwContext(c *gin.Context, ueId externalRef2.VarUeId)
	// Retrieves the IP-SM-GW context data of a UE
	// (GET /subscription-data/{ueId}/context-data/ip-sm-gw)
	QueryIpSmGwContext(c *gin.Context, ueId externalRef2.VarUeId, params QueryIpSmGwContextParams)
	// Modify the IP-SM-GW context data of a UE
	// (PATCH /subscription-data/{ueId}/context-data/ip-sm-gw)
	ModifyIpSmGwContext(c *gin.Context, ueId externalRef2.VarUeId)
	// Create the IP-SM-GW context data of a UE
	// (PUT /subscription-data/{ueId}/context-data/ip-sm-gw)
	CreateIpSmGwContext(c *gin.Context, ueId externalRef2.VarUeId)
	// Retrieves the UE's Location Information
	// (GET /subscription-data/{ueId}/context-data/location)
	QueryUeLocation(c *gin.Context, ueId externalRef2.VarUeId, params QueryUeLocationParams)
	// To remove the Message Waiting Data of the UE
	// (DELETE /subscription-data/{ueId}/context-data/mwd)
	DeleteMessageWaitingData(c *gin.Context, ueId externalRef2.VarUeId)
	// Retrieves the Message Waiting Data of the UE
	// (GET /subscription-data/{ueId}/context-data/mwd)
	QueryMessageWaitingData(c *gin.Context, ueId externalRef2.VarUeId, params QueryMessageWaitingDataParams)
	// Modify the Message Waiting Data of the UE
	// (PATCH /subscription-data/{ueId}/context-data/mwd)
	ModifyMessageWaitingData(c *gin.Context, ueId externalRef2.VarUeId)
	// Create the Message Waiting Data of the UE
	// (PUT /subscription-data/{ueId}/context-data/mwd)
	CreateMessageWaitingData(c *gin.Context, ueId externalRef2.VarUeId)
	// Retrieves the sdm subscriptions of a UE
	// (GET /subscription-data/{ueId}/context-data/sdm-subscriptions)
	Querysdmsubscriptions(c *gin.Context, ueId externalRef2.VarUeId, params QuerysdmsubscriptionsParams)
	// Create individual sdm subscription
	// (POST /subscription-data/{ueId}/context-data/sdm-subscriptions)
	CreateSdmSubscriptions(c *gin.Context, ueId externalRef2.VarUeId)
	// Deletes a sdmsubscriptions
	// (DELETE /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId})
	RemovesdmSubscriptions(c *gin.Context, ueId externalRef2.VarUeId, subsId string)
	// Retrieves a individual sdmSubscription identified by subsId
	// (GET /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId})
	QuerysdmSubscription(c *gin.Context, ueId externalRef2.VarUeId, subsId string)
	// Modify an individual sdm subscription
	// (PATCH /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId})
	ModifysdmSubscription(c *gin.Context, ueId externalRef2.VarUeId, subsId string, params ModifysdmSubscriptionParams)
	// Update an individual sdm subscriptions of a UE
	// (PUT /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId})
	Updatesdmsubscriptions(c *gin.Context, ueId externalRef2.VarUeId, subsId string)
	// Delete HSS SDM Subscription Info
	// (DELETE /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId}/hss-sdm-subscriptions)
	RemoveHssSDMSubscriptionsInfo(c *gin.Context, ueId externalRef2.VarUeId, subsId string)
	// Retrieve HSS SDM Subscription Info
	// (GET /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId}/hss-sdm-subscriptions)
	GetHssSDMSubscriptionInfo(c *gin.Context, ueId externalRef2.VarUeId, subsId string)
	// Modify HSS SDM Subscription Info
	// (PATCH /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId}/hss-sdm-subscriptions)
	ModifyHssSDMSubscriptionInfo(c *gin.Context, ueId externalRef2.VarUeId, subsId string, params ModifyHssSDMSubscriptionInfoParams)
	// Create HSS SDM Subscription Info
	// (PUT /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId}/hss-sdm-subscriptions)
	CreateHSSSDMSubscriptions(c *gin.Context, ueId externalRef2.VarUeId, subsId string)
	// Retrieves the SMF registration list of a UE
	// (GET /subscription-data/{ueId}/context-data/smf-registrations)
	QuerySmfRegList(c *gin.Context, ueId externalRef2.VarUeId, params QuerySmfRegListParams)
	// To remove an individual SMF context data of a UE the UDR
	// (DELETE /subscription-data/{ueId}/context-data/smf-registrations/{pduSessionId})
	DeleteSmfRegistration(c *gin.Context, ueId externalRef2.VarUeId, pduSessionId externalRef2.PduSessionId)
	// Retrieves the individual SMF registration of a UE
	// (GET /subscription-data/{ueId}/context-data/smf-registrations/{pduSessionId})
	QuerySmfRegistration(c *gin.Context, ueId externalRef2.VarUeId, pduSessionId externalRef2.PduSessionId, params QuerySmfRegistrationParams)
	// To create an individual SMF context data of a UE in the UDR
	// (PUT /subscription-data/{ueId}/context-data/smf-registrations/{pduSessionId})
	CreateOrUpdateSmfRegistration(c *gin.Context, ueId externalRef2.VarUeId, pduSessionId externalRef2.PduSessionId)
	// To remove the SMSF context data of a UE via 3GPP access
	// (DELETE /subscription-data/{ueId}/context-data/smsf-3gpp-access)
	DeleteSmsfContext3gpp(c *gin.Context, ueId externalRef2.VarUeId)
	// Retrieves the SMSF context data of a UE using 3gpp access
	// (GET /subscription-data/{ueId}/context-data/smsf-3gpp-access)
	QuerySmsfContext3gpp(c *gin.Context, ueId externalRef2.VarUeId, params QuerySmsfContext3gppParams)
	// Create the SMSF context data of a UE via 3GPP access
	// (PUT /subscription-data/{ueId}/context-data/smsf-3gpp-access)
	CreateSmsfContext3gpp(c *gin.Context, ueId externalRef2.VarUeId)
	// To remove the SMSF context data of a UE via non-3GPP access
	// (DELETE /subscription-data/{ueId}/context-data/smsf-non-3gpp-access)
	DeleteSmsfContextNon3gpp(c *gin.Context, ueId externalRef2.VarUeId)
	// Retrieves the SMSF context data of a UE using non-3gpp access
	// (GET /subscription-data/{ueId}/context-data/smsf-non-3gpp-access)
	QuerySmsfContextNon3gpp(c *gin.Context, ueId externalRef2.VarUeId, params QuerySmsfContextNon3gppParams)
	// Create the SMSF context data of a UE via non-3GPP access
	// (PUT /subscription-data/{ueId}/context-data/smsf-non-3gpp-access)
	CreateSmsfContextNon3gpp(c *gin.Context, ueId externalRef2.VarUeId)
	// Retrieves the subscribed enhanced Coverage Restriction Data of a UE
	// (GET /subscription-data/{ueId}/coverage-restriction-data)
	QueryCoverageRestrictionData(c *gin.Context, ueId externalRef2.VarUeId, params QueryCoverageRestrictionDataParams)
	// Retrieves the ee profile data of a UE
	// (GET /subscription-data/{ueId}/ee-profile-data)
	QueryEEData(c *gin.Context, ueId externalRef2.VarUeId, params QueryEEDataParams)
	// Retrieve identity data by SUPI or GPSI
	// (GET /subscription-data/{ueId}/identity-data)
	GetIdentityData(c *gin.Context, ueId externalRef2.VarUeId, params GetIdentityDataParams)
	// Retrieves the LCS Mobile Originated subscription data of a UE
	// (GET /subscription-data/{ueId}/lcs-mo-data)
	QueryLcsMoData(c *gin.Context, ueId externalRef2.VarUeId, params QueryLcsMoDataParams)
	// Retrieves the LCS Privacy subscription data of a UE
	// (GET /subscription-data/{ueId}/lcs-privacy-data)
	QueryLcsPrivacyData(c *gin.Context, ueId externalRef2.VarUeId, params QueryLcsPrivacyDataParams)
	// Retrieve NIDD Authorization Data GPSI or External Group identifier
	// (GET /subscription-data/{ueId}/nidd-authorization-data)
	GetNiddAuData(c *gin.Context, ueId string, params GetNiddAuDataParams)
	// Retrieve ODB Data data by SUPI or GPSI
	// (GET /subscription-data/{ueId}/operator-determined-barring-data)
	GetOdbData(c *gin.Context, ueId externalRef2.VarUeId)
	// Retrieves the operator specific data of a UE
	// (GET /subscription-data/{ueId}/operator-specific-data)
	QueryOperSpecData(c *gin.Context, ueId externalRef2.VarUeId, params QueryOperSpecDataParams)
	// To modify operator specific data of a UE
	// (PATCH /subscription-data/{ueId}/operator-specific-data)
	ModifyOperSpecData(c *gin.Context, ueId externalRef2.VarUeId, params ModifyOperSpecDataParams)
	// Read the profile of a given UE
	// (GET /subscription-data/{ueId}/pp-data)
	GetppData(c *gin.Context, ueId externalRef2.VarUeId, params GetppDataParams)
	// modify the provisioned parameter data
	// (PATCH /subscription-data/{ueId}/pp-data)
	ModifyPpData(c *gin.Context, ueId externalRef2.VarUeId, params ModifyPpDataParams)
	// Retrieves the parameter provision profile data of a UE
	// (GET /subscription-data/{ueId}/pp-profile-data)
	QueryPPData(c *gin.Context, ueId externalRef2.VarUeId, params QueryPPDataParams)
	// Retrieves the SoR acknowledgement information of a UE
	// (GET /subscription-data/{ueId}/ue-update-confirmation-data/sor-data)
	QueryAuthSoR(c *gin.Context, ueId externalRef2.Supi, params QueryAuthSoRParams)
	// To store the SoR acknowledgement information of a UE
	// (PUT /subscription-data/{ueId}/ue-update-confirmation-data/sor-data)
	CreateAuthenticationSoR(c *gin.Context, ueId externalRef2.Supi, params CreateAuthenticationSoRParams)
	// Retrieves the CAG acknowledgement information of a UE
	// (GET /subscription-data/{ueId}/ue-update-confirmation-data/subscribed-cag)
	QueryCagAck(c *gin.Context, ueId externalRef2.Supi, params QueryCagAckParams)
	// To store the CAG update acknowledgement information of a UE
	// (PUT /subscription-data/{ueId}/ue-update-confirmation-data/subscribed-cag)
	CreateCagUpdateAck(c *gin.Context, ueId externalRef2.Supi, params CreateCagUpdateAckParams)
	// Retrieves the UPU acknowledgement information of a UE
	// (GET /subscription-data/{ueId}/ue-update-confirmation-data/subscribed-snssais)
	QueryNssaiAck(c *gin.Context, ueId externalRef2.Supi, params QueryNssaiAckParams)
	// To store the NSSAI update acknowledgement information of a UE
	// (PUT /subscription-data/{ueId}/ue-update-confirmation-data/subscribed-snssais)
	CreateOrUpdateNssaiAck(c *gin.Context, ueId externalRef2.Supi, params CreateOrUpdateNssaiAckParams)
	// Retrieves the UPU acknowledgement information of a UE
	// (GET /subscription-data/{ueId}/ue-update-confirmation-data/upu-data)
	QueryAuthUPU(c *gin.Context, ueId externalRef2.Supi, params QueryAuthUPUParams)
	// To store the UPU acknowledgement information of a UE
	// (PUT /subscription-data/{ueId}/ue-update-confirmation-data/upu-data)
	CreateAuthenticationUPU(c *gin.Context, ueId externalRef2.Supi, params CreateAuthenticationUPUParams)
	// Retrieves the subscribed V2X Data of a UE
	// (GET /subscription-data/{ueId}/v2x-data)
	QueryV2xData(c *gin.Context, ueId externalRef2.VarUeId, params QueryV2xDataParams)
	// Retrieve multiple provisioned data sets of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data)
	QueryProvisionedData(c *gin.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params QueryProvisionedDataParams)
	// Retrieves the access and mobility subscription data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/am-data)
	QueryAmData(c *gin.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params QueryAmDataParams)
	// Retrieves the LCS Broadcast Assistance subscription data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/lcs-bca-data)
	QueryLcsBcaData(c *gin.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params QueryLcsBcaDataParams)
	// Retrieves the Session Management subscription data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/sm-data)
	QuerySmData(c *gin.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params QuerySmDataParams)
	// Retrieves the SMF selection subscription data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/smf-selection-subscription-data)
	QuerySmfSelectData(c *gin.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params QuerySmfSelectDataParams)
	// Retrieves the SMS subscription data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/sms-data)
	QuerySmsData(c *gin.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params QuerySmsDataParams)
	// Retrieves the SMS management subscription data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/sms-mng-data)
	QuerySmsMngData(c *gin.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params QuerySmsMngDataParams)
	// Retrieves the trace configuration data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/trace-data)
	QueryTraceData(c *gin.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params QueryTraceDataParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// Query5GVnGroup operation middleware
func (siw *ServerInterfaceWrapper) Query5GVnGroup(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params Query5GVnGroupParams

	// ------------- Optional query parameter "gpsis" -------------

	err = runtime.BindQueryParameter("form", false, false, "gpsis", c.Request.URL.Query(), &params.Gpsis)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gpsis: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Query5GVnGroup(c, params)
}

// Query5GVnGroupInternal operation middleware
func (siw *ServerInterfaceWrapper) Query5GVnGroupInternal(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params Query5GVnGroupInternalParams

	// ------------- Required query parameter "internal-group-ids" -------------

	if paramValue := c.Query("internal-group-ids"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument internal-group-ids is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", false, true, "internal-group-ids", c.Request.URL.Query(), &params.InternalGroupIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter internal-group-ids: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Query5GVnGroupInternal(c, params)
}

// Query5GVNGroupPPData operation middleware
func (siw *ServerInterfaceWrapper) Query5GVNGroupPPData(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params Query5GVNGroupPPDataParams

	// ------------- Optional query parameter "ext-group-ids" -------------

	err = runtime.BindQueryParameter("form", false, false, "ext-group-ids", c.Request.URL.Query(), &params.ExtGroupIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ext-group-ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Query5GVNGroupPPData(c, params)
}

// Delete5GVnGroup operation middleware
func (siw *ServerInterfaceWrapper) Delete5GVnGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "externalGroupId" -------------
	var externalGroupId externalRef7.ExtGroupId

	err = runtime.BindStyledParameter("simple", false, "externalGroupId", c.Param("externalGroupId"), &externalGroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter externalGroupId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Delete5GVnGroup(c, externalGroupId)
}

// Get5GVnGroupConfiguration operation middleware
func (siw *ServerInterfaceWrapper) Get5GVnGroupConfiguration(c *gin.Context) {

	var err error

	// ------------- Path parameter "externalGroupId" -------------
	var externalGroupId externalRef7.ExtGroupId

	err = runtime.BindStyledParameter("simple", false, "externalGroupId", c.Param("externalGroupId"), &externalGroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter externalGroupId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Get5GVnGroupConfiguration(c, externalGroupId)
}

// Modify5GVnGroup operation middleware
func (siw *ServerInterfaceWrapper) Modify5GVnGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "externalGroupId" -------------
	var externalGroupId externalRef7.ExtGroupId

	err = runtime.BindStyledParameter("simple", false, "externalGroupId", c.Param("externalGroupId"), &externalGroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter externalGroupId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params Modify5GVnGroupParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Modify5GVnGroup(c, externalGroupId, params)
}

// Create5GVnGroup operation middleware
func (siw *ServerInterfaceWrapper) Create5GVnGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "externalGroupId" -------------
	var externalGroupId externalRef7.ExtGroupId

	err = runtime.BindStyledParameter("simple", false, "externalGroupId", c.Param("externalGroupId"), &externalGroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter externalGroupId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Create5GVnGroup(c, externalGroupId)
}

// GetGroupIdentifiers operation middleware
func (siw *ServerInterfaceWrapper) GetGroupIdentifiers(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupIdentifiersParams

	// ------------- Optional query parameter "ext-group-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ext-group-id", c.Request.URL.Query(), &params.ExtGroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ext-group-id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "int-group-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "int-group-id", c.Request.URL.Query(), &params.IntGroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter int-group-id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ue-id-ind" -------------

	err = runtime.BindQueryParameter("form", true, false, "ue-id-ind", c.Request.URL.Query(), &params.UeIdInd)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ue-id-ind: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroupIdentifiers(c, params)
}

// QueryGroupEEData operation middleware
func (siw *ServerInterfaceWrapper) QueryGroupEEData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueGroupId" -------------
	var ueGroupId VarUeGroupId

	err = runtime.BindStyledParameter("simple", false, "ueGroupId", c.Param("ueGroupId"), &ueGroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueGroupId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryGroupEEDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryGroupEEData(c, ueGroupId, params)
}

// QueryEeGroupSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) QueryEeGroupSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueGroupId" -------------
	var ueGroupId VarUeGroupId

	err = runtime.BindStyledParameter("simple", false, "ueGroupId", c.Param("ueGroupId"), &ueGroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueGroupId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryEeGroupSubscriptionsParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryEeGroupSubscriptions(c, ueGroupId, params)
}

// CreateEeGroupSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) CreateEeGroupSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueGroupId" -------------
	var ueGroupId VarUeGroupId

	err = runtime.BindStyledParameter("simple", false, "ueGroupId", c.Param("ueGroupId"), &ueGroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueGroupId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateEeGroupSubscriptions(c, ueGroupId)
}

// RemoveEeGroupSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) RemoveEeGroupSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueGroupId" -------------
	var ueGroupId VarUeGroupId

	err = runtime.BindStyledParameter("simple", false, "ueGroupId", c.Param("ueGroupId"), &ueGroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueGroupId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemoveEeGroupSubscriptions(c, ueGroupId, subsId)
}

// QueryEeGroupSubscription operation middleware
func (siw *ServerInterfaceWrapper) QueryEeGroupSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueGroupId" -------------
	var ueGroupId VarUeGroupId

	err = runtime.BindStyledParameter("simple", false, "ueGroupId", c.Param("ueGroupId"), &ueGroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueGroupId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryEeGroupSubscription(c, ueGroupId, subsId)
}

// ModifyEeGroupSubscription operation middleware
func (siw *ServerInterfaceWrapper) ModifyEeGroupSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueGroupId" -------------
	var ueGroupId VarUeGroupId

	err = runtime.BindStyledParameter("simple", false, "ueGroupId", c.Param("ueGroupId"), &ueGroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueGroupId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifyEeGroupSubscriptionParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifyEeGroupSubscription(c, ueGroupId, subsId, params)
}

// UpdateEeGroupSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) UpdateEeGroupSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueGroupId" -------------
	var ueGroupId VarUeGroupId

	err = runtime.BindStyledParameter("simple", false, "ueGroupId", c.Param("ueGroupId"), &ueGroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueGroupId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateEeGroupSubscriptions(c, ueGroupId, subsId)
}

// GetSharedData operation middleware
func (siw *ServerInterfaceWrapper) GetSharedData(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSharedDataParams

	// ------------- Required query parameter "shared-data-ids" -------------

	if paramValue := c.Query("shared-data-ids"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument shared-data-ids is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", false, true, "shared-data-ids", c.Request.URL.Query(), &params.SharedDataIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter shared-data-ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSharedData(c, params)
}

// GetIndividualSharedData operation middleware
func (siw *ServerInterfaceWrapper) GetIndividualSharedData(c *gin.Context) {

	var err error

	// ------------- Path parameter "sharedDataId" -------------
	var sharedDataId externalRef7.SharedDataId

	err = runtime.BindStyledParameter("simple", false, "sharedDataId", c.Param("sharedDataId"), &sharedDataId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sharedDataId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIndividualSharedDataParams

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetIndividualSharedData(c, sharedDataId, params)
}

// RemoveMultipleSubscriptionDataSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) RemoveMultipleSubscriptionDataSubscriptions(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RemoveMultipleSubscriptionDataSubscriptionsParams

	// ------------- Required query parameter "ue-id" -------------

	if paramValue := c.Query("ue-id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument ue-id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "ue-id", c.Request.URL.Query(), &params.UeId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ue-id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "nf-instance-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "nf-instance-id", c.Request.URL.Query(), &params.NfInstanceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter nf-instance-id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "delete-all-nfs" -------------

	err = runtime.BindQueryParameter("form", true, false, "delete-all-nfs", c.Request.URL.Query(), &params.DeleteAllNfs)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter delete-all-nfs: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "implicit-unsubscribe-indication" -------------

	err = runtime.BindQueryParameter("form", true, false, "implicit-unsubscribe-indication", c.Request.URL.Query(), &params.ImplicitUnsubscribeIndication)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter implicit-unsubscribe-indication: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemoveMultipleSubscriptionDataSubscriptions(c, params)
}

// QuerySubsToNotify operation middleware
func (siw *ServerInterfaceWrapper) QuerySubsToNotify(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params QuerySubsToNotifyParams

	// ------------- Required query parameter "ue-id" -------------

	if paramValue := c.Query("ue-id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument ue-id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "ue-id", c.Request.URL.Query(), &params.UeId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ue-id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QuerySubsToNotify(c, params)
}

// SubscriptionDataSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) SubscriptionDataSubscriptions(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SubscriptionDataSubscriptions(c)
}

// RemovesubscriptionDataSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) RemovesubscriptionDataSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemovesubscriptionDataSubscriptions(c, subsId)
}

// QuerySubscriptionDataSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) QuerySubscriptionDataSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QuerySubscriptionDataSubscriptions(c, subsId)
}

// ModifysubscriptionDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) ModifysubscriptionDataSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifysubscriptionDataSubscriptionParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifysubscriptionDataSubscription(c, subsId, params)
}

// DeleteAuthenticationStatus operation middleware
func (siw *ServerInterfaceWrapper) DeleteAuthenticationStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAuthenticationStatus(c, ueId)
}

// QueryAuthenticationStatus operation middleware
func (siw *ServerInterfaceWrapper) QueryAuthenticationStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryAuthenticationStatusParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryAuthenticationStatus(c, ueId, params)
}

// CreateAuthenticationStatus operation middleware
func (siw *ServerInterfaceWrapper) CreateAuthenticationStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAuthenticationStatus(c, ueId)
}

// DeleteIndividualAuthenticationStatus operation middleware
func (siw *ServerInterfaceWrapper) DeleteIndividualAuthenticationStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "servingNetworkName" -------------
	var servingNetworkName externalRef8.ServingNetworkName

	err = runtime.BindStyledParameter("simple", false, "servingNetworkName", c.Param("servingNetworkName"), &servingNetworkName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter servingNetworkName: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIndividualAuthenticationStatus(c, ueId, servingNetworkName)
}

// QueryIndividualAuthenticationStatus operation middleware
func (siw *ServerInterfaceWrapper) QueryIndividualAuthenticationStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "servingNetworkName" -------------
	var servingNetworkName externalRef8.ServingNetworkName

	err = runtime.BindStyledParameter("simple", false, "servingNetworkName", c.Param("servingNetworkName"), &servingNetworkName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter servingNetworkName: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryIndividualAuthenticationStatusParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryIndividualAuthenticationStatus(c, ueId, servingNetworkName, params)
}

// CreateIndividualAuthenticationStatus operation middleware
func (siw *ServerInterfaceWrapper) CreateIndividualAuthenticationStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "servingNetworkName" -------------
	var servingNetworkName externalRef8.ServingNetworkName

	err = runtime.BindStyledParameter("simple", false, "servingNetworkName", c.Param("servingNetworkName"), &servingNetworkName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter servingNetworkName: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateIndividualAuthenticationStatus(c, ueId, servingNetworkName)
}

// QueryAuthSubsData operation middleware
func (siw *ServerInterfaceWrapper) QueryAuthSubsData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr", "nudr-dr:subscription-data:authentication-subscription:read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryAuthSubsDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryAuthSubsData(c, ueId, params)
}

// ModifyAuthenticationSubscription operation middleware
func (siw *ServerInterfaceWrapper) ModifyAuthenticationSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr"})

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudr-dr", "nudr-dr:subscription-data:authentication-subscription:modify"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifyAuthenticationSubscriptionParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifyAuthenticationSubscription(c, ueId, params)
}

// QueryContextData operation middleware
func (siw *ServerInterfaceWrapper) QueryContextData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryContextDataParams

	// ------------- Required query parameter "context-dataset-names" -------------

	if paramValue := c.Query("context-dataset-names"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument context-dataset-names is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", false, true, "context-dataset-names", c.Request.URL.Query(), &params.ContextDatasetNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter context-dataset-names: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryContextData(c, ueId, params)
}

// QueryAmfContext3gpp operation middleware
func (siw *ServerInterfaceWrapper) QueryAmfContext3gpp(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryAmfContext3gppParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryAmfContext3gpp(c, ueId, params)
}

// AmfContext3gpp operation middleware
func (siw *ServerInterfaceWrapper) AmfContext3gpp(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AmfContext3gppParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AmfContext3gpp(c, ueId, params)
}

// CreateAmfContext3gpp operation middleware
func (siw *ServerInterfaceWrapper) CreateAmfContext3gpp(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAmfContext3gpp(c, ueId)
}

// QueryAmfContextNon3gpp operation middleware
func (siw *ServerInterfaceWrapper) QueryAmfContextNon3gpp(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryAmfContextNon3gppParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryAmfContextNon3gpp(c, ueId, params)
}

// AmfContextNon3gpp operation middleware
func (siw *ServerInterfaceWrapper) AmfContextNon3gpp(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AmfContextNon3gppParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AmfContextNon3gpp(c, ueId, params)
}

// CreateAmfContextNon3gpp operation middleware
func (siw *ServerInterfaceWrapper) CreateAmfContextNon3gpp(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAmfContextNon3gpp(c, ueId)
}

// Queryeesubscriptions operation middleware
func (siw *ServerInterfaceWrapper) Queryeesubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryeesubscriptionsParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Queryeesubscriptions(c, ueId, params)
}

// CreateEeSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) CreateEeSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateEeSubscriptions(c, ueId)
}

// RemoveeeSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) RemoveeeSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemoveeeSubscriptions(c, ueId, subsId)
}

// QueryeeSubscription operation middleware
func (siw *ServerInterfaceWrapper) QueryeeSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryeeSubscription(c, ueId, subsId)
}

// ModifyEesubscription operation middleware
func (siw *ServerInterfaceWrapper) ModifyEesubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifyEesubscriptionParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifyEesubscription(c, ueId, subsId, params)
}

// UpdateEesubscriptions operation middleware
func (siw *ServerInterfaceWrapper) UpdateEesubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateEesubscriptions(c, ueId, subsId)
}

// RemoveAmfSubscriptionsInfo operation middleware
func (siw *ServerInterfaceWrapper) RemoveAmfSubscriptionsInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemoveAmfSubscriptionsInfo(c, ueId, subsId)
}

// GetAmfSubscriptionInfo operation middleware
func (siw *ServerInterfaceWrapper) GetAmfSubscriptionInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAmfSubscriptionInfo(c, ueId, subsId)
}

// ModifyAmfSubscriptionInfo operation middleware
func (siw *ServerInterfaceWrapper) ModifyAmfSubscriptionInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifyAmfSubscriptionInfoParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifyAmfSubscriptionInfo(c, ueId, subsId, params)
}

// CreateAMFSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) CreateAMFSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAMFSubscriptions(c, ueId, subsId)
}

// RemoveHssSubscriptionsInfo operation middleware
func (siw *ServerInterfaceWrapper) RemoveHssSubscriptionsInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemoveHssSubscriptionsInfo(c, ueId, subsId)
}

// GetHssSubscriptionInfo operation middleware
func (siw *ServerInterfaceWrapper) GetHssSubscriptionInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHssSubscriptionInfo(c, ueId, subsId)
}

// ModifyHssSubscriptionInfo operation middleware
func (siw *ServerInterfaceWrapper) ModifyHssSubscriptionInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifyHssSubscriptionInfoParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifyHssSubscriptionInfo(c, ueId, subsId, params)
}

// CreateHSSSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) CreateHSSSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateHSSSubscriptions(c, ueId, subsId)
}

// RemoveSmfSubscriptionsInfo operation middleware
func (siw *ServerInterfaceWrapper) RemoveSmfSubscriptionsInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemoveSmfSubscriptionsInfo(c, ueId, subsId)
}

// GetSmfSubscriptionInfo operation middleware
func (siw *ServerInterfaceWrapper) GetSmfSubscriptionInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSmfSubscriptionInfo(c, ueId, subsId)
}

// ModifySmfSubscriptionInfo operation middleware
func (siw *ServerInterfaceWrapper) ModifySmfSubscriptionInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifySmfSubscriptionInfoParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifySmfSubscriptionInfo(c, ueId, subsId, params)
}

// CreateSMFSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) CreateSMFSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateSMFSubscriptions(c, ueId, subsId)
}

// DeleteIpSmGwContext operation middleware
func (siw *ServerInterfaceWrapper) DeleteIpSmGwContext(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIpSmGwContext(c, ueId)
}

// QueryIpSmGwContext operation middleware
func (siw *ServerInterfaceWrapper) QueryIpSmGwContext(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryIpSmGwContextParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryIpSmGwContext(c, ueId, params)
}

// ModifyIpSmGwContext operation middleware
func (siw *ServerInterfaceWrapper) ModifyIpSmGwContext(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifyIpSmGwContext(c, ueId)
}

// CreateIpSmGwContext operation middleware
func (siw *ServerInterfaceWrapper) CreateIpSmGwContext(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateIpSmGwContext(c, ueId)
}

// QueryUeLocation operation middleware
func (siw *ServerInterfaceWrapper) QueryUeLocation(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryUeLocationParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryUeLocation(c, ueId, params)
}

// DeleteMessageWaitingData operation middleware
func (siw *ServerInterfaceWrapper) DeleteMessageWaitingData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteMessageWaitingData(c, ueId)
}

// QueryMessageWaitingData operation middleware
func (siw *ServerInterfaceWrapper) QueryMessageWaitingData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryMessageWaitingDataParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryMessageWaitingData(c, ueId, params)
}

// ModifyMessageWaitingData operation middleware
func (siw *ServerInterfaceWrapper) ModifyMessageWaitingData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifyMessageWaitingData(c, ueId)
}

// CreateMessageWaitingData operation middleware
func (siw *ServerInterfaceWrapper) CreateMessageWaitingData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateMessageWaitingData(c, ueId)
}

// Querysdmsubscriptions operation middleware
func (siw *ServerInterfaceWrapper) Querysdmsubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QuerysdmsubscriptionsParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Querysdmsubscriptions(c, ueId, params)
}

// CreateSdmSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) CreateSdmSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateSdmSubscriptions(c, ueId)
}

// RemovesdmSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) RemovesdmSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemovesdmSubscriptions(c, ueId, subsId)
}

// QuerysdmSubscription operation middleware
func (siw *ServerInterfaceWrapper) QuerysdmSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QuerysdmSubscription(c, ueId, subsId)
}

// ModifysdmSubscription operation middleware
func (siw *ServerInterfaceWrapper) ModifysdmSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifysdmSubscriptionParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifysdmSubscription(c, ueId, subsId, params)
}

// Updatesdmsubscriptions operation middleware
func (siw *ServerInterfaceWrapper) Updatesdmsubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Updatesdmsubscriptions(c, ueId, subsId)
}

// RemoveHssSDMSubscriptionsInfo operation middleware
func (siw *ServerInterfaceWrapper) RemoveHssSDMSubscriptionsInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemoveHssSDMSubscriptionsInfo(c, ueId, subsId)
}

// GetHssSDMSubscriptionInfo operation middleware
func (siw *ServerInterfaceWrapper) GetHssSDMSubscriptionInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHssSDMSubscriptionInfo(c, ueId, subsId)
}

// ModifyHssSDMSubscriptionInfo operation middleware
func (siw *ServerInterfaceWrapper) ModifyHssSDMSubscriptionInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifyHssSDMSubscriptionInfoParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifyHssSDMSubscriptionInfo(c, ueId, subsId, params)
}

// CreateHSSSDMSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) CreateHSSSDMSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateHSSSDMSubscriptions(c, ueId, subsId)
}

// QuerySmfRegList operation middleware
func (siw *ServerInterfaceWrapper) QuerySmfRegList(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QuerySmfRegListParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QuerySmfRegList(c, ueId, params)
}

// DeleteSmfRegistration operation middleware
func (siw *ServerInterfaceWrapper) DeleteSmfRegistration(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "pduSessionId" -------------
	var pduSessionId externalRef2.PduSessionId

	err = runtime.BindStyledParameter("simple", false, "pduSessionId", c.Param("pduSessionId"), &pduSessionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pduSessionId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteSmfRegistration(c, ueId, pduSessionId)
}

// QuerySmfRegistration operation middleware
func (siw *ServerInterfaceWrapper) QuerySmfRegistration(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "pduSessionId" -------------
	var pduSessionId externalRef2.PduSessionId

	err = runtime.BindStyledParameter("simple", false, "pduSessionId", c.Param("pduSessionId"), &pduSessionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pduSessionId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QuerySmfRegistrationParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QuerySmfRegistration(c, ueId, pduSessionId, params)
}

// CreateOrUpdateSmfRegistration operation middleware
func (siw *ServerInterfaceWrapper) CreateOrUpdateSmfRegistration(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "pduSessionId" -------------
	var pduSessionId externalRef2.PduSessionId

	err = runtime.BindStyledParameter("simple", false, "pduSessionId", c.Param("pduSessionId"), &pduSessionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pduSessionId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrUpdateSmfRegistration(c, ueId, pduSessionId)
}

// DeleteSmsfContext3gpp operation middleware
func (siw *ServerInterfaceWrapper) DeleteSmsfContext3gpp(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteSmsfContext3gpp(c, ueId)
}

// QuerySmsfContext3gpp operation middleware
func (siw *ServerInterfaceWrapper) QuerySmsfContext3gpp(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QuerySmsfContext3gppParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QuerySmsfContext3gpp(c, ueId, params)
}

// CreateSmsfContext3gpp operation middleware
func (siw *ServerInterfaceWrapper) CreateSmsfContext3gpp(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateSmsfContext3gpp(c, ueId)
}

// DeleteSmsfContextNon3gpp operation middleware
func (siw *ServerInterfaceWrapper) DeleteSmsfContextNon3gpp(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteSmsfContextNon3gpp(c, ueId)
}

// QuerySmsfContextNon3gpp operation middleware
func (siw *ServerInterfaceWrapper) QuerySmsfContextNon3gpp(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QuerySmsfContextNon3gppParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QuerySmsfContextNon3gpp(c, ueId, params)
}

// CreateSmsfContextNon3gpp operation middleware
func (siw *ServerInterfaceWrapper) CreateSmsfContextNon3gpp(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateSmsfContextNon3gpp(c, ueId)
}

// QueryCoverageRestrictionData operation middleware
func (siw *ServerInterfaceWrapper) QueryCoverageRestrictionData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryCoverageRestrictionDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryCoverageRestrictionData(c, ueId, params)
}

// QueryEEData operation middleware
func (siw *ServerInterfaceWrapper) QueryEEData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryEEDataParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryEEData(c, ueId, params)
}

// GetIdentityData operation middleware
func (siw *ServerInterfaceWrapper) GetIdentityData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdentityDataParams

	// ------------- Optional query parameter "app-port-id" -------------

	if paramValue := c.Query("app-port-id"); paramValue != "" {

		var value externalRef7.AppPortId
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'app-port-id' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.AppPortId = &value

	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetIdentityData(c, ueId, params)
}

// QueryLcsMoData operation middleware
func (siw *ServerInterfaceWrapper) QueryLcsMoData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryLcsMoDataParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryLcsMoData(c, ueId, params)
}

// QueryLcsPrivacyData operation middleware
func (siw *ServerInterfaceWrapper) QueryLcsPrivacyData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryLcsPrivacyDataParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryLcsPrivacyData(c, ueId, params)
}

// GetNiddAuData operation middleware
func (siw *ServerInterfaceWrapper) GetNiddAuData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId string

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNiddAuDataParams

	// ------------- Required query parameter "single-nssai" -------------

	if paramValue := c.Query("single-nssai"); paramValue != "" {

		var value VarSnssai
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'single-nssai' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.SingleNssai = value

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument single-nssai is required, but not found"), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "dnn" -------------

	if paramValue := c.Query("dnn"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument dnn is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "dnn", c.Request.URL.Query(), &params.Dnn)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dnn: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "mtc-provider-information" -------------

	if paramValue := c.Query("mtc-provider-information"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument mtc-provider-information is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "mtc-provider-information", c.Request.URL.Query(), &params.MtcProviderInformation)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter mtc-provider-information: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNiddAuData(c, ueId, params)
}

// GetOdbData operation middleware
func (siw *ServerInterfaceWrapper) GetOdbData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOdbData(c, ueId)
}

// QueryOperSpecData operation middleware
func (siw *ServerInterfaceWrapper) QueryOperSpecData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryOperSpecDataParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryOperSpecData(c, ueId, params)
}

// ModifyOperSpecData operation middleware
func (siw *ServerInterfaceWrapper) ModifyOperSpecData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifyOperSpecDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifyOperSpecData(c, ueId, params)
}

// GetppData operation middleware
func (siw *ServerInterfaceWrapper) GetppData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetppDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetppData(c, ueId, params)
}

// ModifyPpData operation middleware
func (siw *ServerInterfaceWrapper) ModifyPpData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifyPpDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifyPpData(c, ueId, params)
}

// QueryPPData operation middleware
func (siw *ServerInterfaceWrapper) QueryPPData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryPPDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryPPData(c, ueId, params)
}

// QueryAuthSoR operation middleware
func (siw *ServerInterfaceWrapper) QueryAuthSoR(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryAuthSoRParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryAuthSoR(c, ueId, params)
}

// CreateAuthenticationSoR operation middleware
func (siw *ServerInterfaceWrapper) CreateAuthenticationSoR(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateAuthenticationSoRParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAuthenticationSoR(c, ueId, params)
}

// QueryCagAck operation middleware
func (siw *ServerInterfaceWrapper) QueryCagAck(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryCagAckParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryCagAck(c, ueId, params)
}

// CreateCagUpdateAck operation middleware
func (siw *ServerInterfaceWrapper) CreateCagUpdateAck(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateCagUpdateAckParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateCagUpdateAck(c, ueId, params)
}

// QueryNssaiAck operation middleware
func (siw *ServerInterfaceWrapper) QueryNssaiAck(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryNssaiAckParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryNssaiAck(c, ueId, params)
}

// CreateOrUpdateNssaiAck operation middleware
func (siw *ServerInterfaceWrapper) CreateOrUpdateNssaiAck(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateOrUpdateNssaiAckParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrUpdateNssaiAck(c, ueId, params)
}

// QueryAuthUPU operation middleware
func (siw *ServerInterfaceWrapper) QueryAuthUPU(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryAuthUPUParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryAuthUPU(c, ueId, params)
}

// CreateAuthenticationUPU operation middleware
func (siw *ServerInterfaceWrapper) CreateAuthenticationUPU(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateAuthenticationUPUParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAuthenticationUPU(c, ueId, params)
}

// QueryV2xData operation middleware
func (siw *ServerInterfaceWrapper) QueryV2xData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryV2xDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryV2xData(c, ueId, params)
}

// QueryProvisionedData operation middleware
func (siw *ServerInterfaceWrapper) QueryProvisionedData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "servingPlmnId" -------------
	var servingPlmnId VarPlmnId

	err = runtime.BindStyledParameter("simple", false, "servingPlmnId", c.Param("servingPlmnId"), &servingPlmnId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter servingPlmnId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryProvisionedDataParams

	// ------------- Optional query parameter "dataset-names" -------------

	err = runtime.BindQueryParameter("form", false, false, "dataset-names", c.Request.URL.Query(), &params.DatasetNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dataset-names: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryProvisionedData(c, ueId, servingPlmnId, params)
}

// QueryAmData operation middleware
func (siw *ServerInterfaceWrapper) QueryAmData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "servingPlmnId" -------------
	var servingPlmnId VarPlmnId

	err = runtime.BindStyledParameter("simple", false, "servingPlmnId", c.Param("servingPlmnId"), &servingPlmnId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter servingPlmnId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryAmDataParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryAmData(c, ueId, servingPlmnId, params)
}

// QueryLcsBcaData operation middleware
func (siw *ServerInterfaceWrapper) QueryLcsBcaData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "servingPlmnId" -------------
	var servingPlmnId VarPlmnId

	err = runtime.BindStyledParameter("simple", false, "servingPlmnId", c.Param("servingPlmnId"), &servingPlmnId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter servingPlmnId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryLcsBcaDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryLcsBcaData(c, ueId, servingPlmnId, params)
}

// QuerySmData operation middleware
func (siw *ServerInterfaceWrapper) QuerySmData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "servingPlmnId" -------------
	var servingPlmnId VarPlmnId

	err = runtime.BindStyledParameter("simple", false, "servingPlmnId", c.Param("servingPlmnId"), &servingPlmnId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter servingPlmnId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QuerySmDataParams

	// ------------- Optional query parameter "single-nssai" -------------

	if paramValue := c.Query("single-nssai"); paramValue != "" {

		var value VarSnssai
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'single-nssai' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.SingleNssai = &value

	}

	// ------------- Optional query parameter "dnn" -------------

	err = runtime.BindQueryParameter("form", true, false, "dnn", c.Request.URL.Query(), &params.Dnn)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dnn: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QuerySmData(c, ueId, servingPlmnId, params)
}

// QuerySmfSelectData operation middleware
func (siw *ServerInterfaceWrapper) QuerySmfSelectData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "servingPlmnId" -------------
	var servingPlmnId VarPlmnId

	err = runtime.BindStyledParameter("simple", false, "servingPlmnId", c.Param("servingPlmnId"), &servingPlmnId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter servingPlmnId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QuerySmfSelectDataParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", false, false, "fields", c.Request.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fields: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QuerySmfSelectData(c, ueId, servingPlmnId, params)
}

// QuerySmsData operation middleware
func (siw *ServerInterfaceWrapper) QuerySmsData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "servingPlmnId" -------------
	var servingPlmnId VarPlmnId

	err = runtime.BindStyledParameter("simple", false, "servingPlmnId", c.Param("servingPlmnId"), &servingPlmnId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter servingPlmnId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QuerySmsDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QuerySmsData(c, ueId, servingPlmnId, params)
}

// QuerySmsMngData operation middleware
func (siw *ServerInterfaceWrapper) QuerySmsMngData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "servingPlmnId" -------------
	var servingPlmnId VarPlmnId

	err = runtime.BindStyledParameter("simple", false, "servingPlmnId", c.Param("servingPlmnId"), &servingPlmnId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter servingPlmnId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QuerySmsMngDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QuerySmsMngData(c, ueId, servingPlmnId, params)
}

// QueryTraceData operation middleware
func (siw *ServerInterfaceWrapper) QueryTraceData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "servingPlmnId" -------------
	var servingPlmnId VarPlmnId

	err = runtime.BindStyledParameter("simple", false, "servingPlmnId", c.Param("servingPlmnId"), &servingPlmnId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter servingPlmnId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryTraceDataParams

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryTraceData(c, ueId, servingPlmnId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/subscription-data/group-data/5g-vn-groups", wrapper.Query5GVnGroup)
	router.GET(options.BaseURL+"/subscription-data/group-data/5g-vn-groups/internal", wrapper.Query5GVnGroupInternal)
	router.GET(options.BaseURL+"/subscription-data/group-data/5g-vn-groups/pp-profile-data", wrapper.Query5GVNGroupPPData)
	router.DELETE(options.BaseURL+"/subscription-data/group-data/5g-vn-groups/:externalGroupId", wrapper.Delete5GVnGroup)
	router.GET(options.BaseURL+"/subscription-data/group-data/5g-vn-groups/:externalGroupId", wrapper.Get5GVnGroupConfiguration)
	router.PATCH(options.BaseURL+"/subscription-data/group-data/5g-vn-groups/:externalGroupId", wrapper.Modify5GVnGroup)
	router.PUT(options.BaseURL+"/subscription-data/group-data/5g-vn-groups/:externalGroupId", wrapper.Create5GVnGroup)
	router.GET(options.BaseURL+"/subscription-data/group-data/group-identifiers", wrapper.GetGroupIdentifiers)
	router.GET(options.BaseURL+"/subscription-data/group-data/:ueGroupId/ee-profile-data", wrapper.QueryGroupEEData)
	router.GET(options.BaseURL+"/subscription-data/group-data/:ueGroupId/ee-subscriptions", wrapper.QueryEeGroupSubscriptions)
	router.POST(options.BaseURL+"/subscription-data/group-data/:ueGroupId/ee-subscriptions", wrapper.CreateEeGroupSubscriptions)
	router.DELETE(options.BaseURL+"/subscription-data/group-data/:ueGroupId/ee-subscriptions/:subsId", wrapper.RemoveEeGroupSubscriptions)
	router.GET(options.BaseURL+"/subscription-data/group-data/:ueGroupId/ee-subscriptions/:subsId", wrapper.QueryEeGroupSubscription)
	router.PATCH(options.BaseURL+"/subscription-data/group-data/:ueGroupId/ee-subscriptions/:subsId", wrapper.ModifyEeGroupSubscription)
	router.PUT(options.BaseURL+"/subscription-data/group-data/:ueGroupId/ee-subscriptions/:subsId", wrapper.UpdateEeGroupSubscriptions)
	router.GET(options.BaseURL+"/subscription-data/shared-data", wrapper.GetSharedData)
	router.GET(options.BaseURL+"/subscription-data/shared-data/:sharedDataId", wrapper.GetIndividualSharedData)
	router.DELETE(options.BaseURL+"/subscription-data/subs-to-notify", wrapper.RemoveMultipleSubscriptionDataSubscriptions)
	router.GET(options.BaseURL+"/subscription-data/subs-to-notify", wrapper.QuerySubsToNotify)
	router.POST(options.BaseURL+"/subscription-data/subs-to-notify", wrapper.SubscriptionDataSubscriptions)
	router.DELETE(options.BaseURL+"/subscription-data/subs-to-notify/:subsId", wrapper.RemovesubscriptionDataSubscriptions)
	router.GET(options.BaseURL+"/subscription-data/subs-to-notify/:subsId", wrapper.QuerySubscriptionDataSubscriptions)
	router.PATCH(options.BaseURL+"/subscription-data/subs-to-notify/:subsId", wrapper.ModifysubscriptionDataSubscription)
	router.DELETE(options.BaseURL+"/subscription-data/:ueId/authentication-data/authentication-status", wrapper.DeleteAuthenticationStatus)
	router.GET(options.BaseURL+"/subscription-data/:ueId/authentication-data/authentication-status", wrapper.QueryAuthenticationStatus)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/authentication-data/authentication-status", wrapper.CreateAuthenticationStatus)
	router.DELETE(options.BaseURL+"/subscription-data/:ueId/authentication-data/authentication-status/:servingNetworkName", wrapper.DeleteIndividualAuthenticationStatus)
	router.GET(options.BaseURL+"/subscription-data/:ueId/authentication-data/authentication-status/:servingNetworkName", wrapper.QueryIndividualAuthenticationStatus)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/authentication-data/authentication-status/:servingNetworkName", wrapper.CreateIndividualAuthenticationStatus)
	router.GET(options.BaseURL+"/subscription-data/:ueId/authentication-data/authentication-subscription", wrapper.QueryAuthSubsData)
	router.PATCH(options.BaseURL+"/subscription-data/:ueId/authentication-data/authentication-subscription", wrapper.ModifyAuthenticationSubscription)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data", wrapper.QueryContextData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/amf-3gpp-access", wrapper.QueryAmfContext3gpp)
	router.PATCH(options.BaseURL+"/subscription-data/:ueId/context-data/amf-3gpp-access", wrapper.AmfContext3gpp)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/context-data/amf-3gpp-access", wrapper.CreateAmfContext3gpp)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/amf-non-3gpp-access", wrapper.QueryAmfContextNon3gpp)
	router.PATCH(options.BaseURL+"/subscription-data/:ueId/context-data/amf-non-3gpp-access", wrapper.AmfContextNon3gpp)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/context-data/amf-non-3gpp-access", wrapper.CreateAmfContextNon3gpp)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions", wrapper.Queryeesubscriptions)
	router.POST(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions", wrapper.CreateEeSubscriptions)
	router.DELETE(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId", wrapper.RemoveeeSubscriptions)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId", wrapper.QueryeeSubscription)
	router.PATCH(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId", wrapper.ModifyEesubscription)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId", wrapper.UpdateEesubscriptions)
	router.DELETE(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId/amf-subscriptions", wrapper.RemoveAmfSubscriptionsInfo)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId/amf-subscriptions", wrapper.GetAmfSubscriptionInfo)
	router.PATCH(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId/amf-subscriptions", wrapper.ModifyAmfSubscriptionInfo)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId/amf-subscriptions", wrapper.CreateAMFSubscriptions)
	router.DELETE(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId/hss-subscriptions", wrapper.RemoveHssSubscriptionsInfo)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId/hss-subscriptions", wrapper.GetHssSubscriptionInfo)
	router.PATCH(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId/hss-subscriptions", wrapper.ModifyHssSubscriptionInfo)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId/hss-subscriptions", wrapper.CreateHSSSubscriptions)
	router.DELETE(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId/smf-subscriptions", wrapper.RemoveSmfSubscriptionsInfo)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId/smf-subscriptions", wrapper.GetSmfSubscriptionInfo)
	router.PATCH(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId/smf-subscriptions", wrapper.ModifySmfSubscriptionInfo)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/context-data/ee-subscriptions/:subsId/smf-subscriptions", wrapper.CreateSMFSubscriptions)
	router.DELETE(options.BaseURL+"/subscription-data/:ueId/context-data/ip-sm-gw", wrapper.DeleteIpSmGwContext)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/ip-sm-gw", wrapper.QueryIpSmGwContext)
	router.PATCH(options.BaseURL+"/subscription-data/:ueId/context-data/ip-sm-gw", wrapper.ModifyIpSmGwContext)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/context-data/ip-sm-gw", wrapper.CreateIpSmGwContext)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/location", wrapper.QueryUeLocation)
	router.DELETE(options.BaseURL+"/subscription-data/:ueId/context-data/mwd", wrapper.DeleteMessageWaitingData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/mwd", wrapper.QueryMessageWaitingData)
	router.PATCH(options.BaseURL+"/subscription-data/:ueId/context-data/mwd", wrapper.ModifyMessageWaitingData)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/context-data/mwd", wrapper.CreateMessageWaitingData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/sdm-subscriptions", wrapper.Querysdmsubscriptions)
	router.POST(options.BaseURL+"/subscription-data/:ueId/context-data/sdm-subscriptions", wrapper.CreateSdmSubscriptions)
	router.DELETE(options.BaseURL+"/subscription-data/:ueId/context-data/sdm-subscriptions/:subsId", wrapper.RemovesdmSubscriptions)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/sdm-subscriptions/:subsId", wrapper.QuerysdmSubscription)
	router.PATCH(options.BaseURL+"/subscription-data/:ueId/context-data/sdm-subscriptions/:subsId", wrapper.ModifysdmSubscription)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/context-data/sdm-subscriptions/:subsId", wrapper.Updatesdmsubscriptions)
	router.DELETE(options.BaseURL+"/subscription-data/:ueId/context-data/sdm-subscriptions/:subsId/hss-sdm-subscriptions", wrapper.RemoveHssSDMSubscriptionsInfo)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/sdm-subscriptions/:subsId/hss-sdm-subscriptions", wrapper.GetHssSDMSubscriptionInfo)
	router.PATCH(options.BaseURL+"/subscription-data/:ueId/context-data/sdm-subscriptions/:subsId/hss-sdm-subscriptions", wrapper.ModifyHssSDMSubscriptionInfo)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/context-data/sdm-subscriptions/:subsId/hss-sdm-subscriptions", wrapper.CreateHSSSDMSubscriptions)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/smf-registrations", wrapper.QuerySmfRegList)
	router.DELETE(options.BaseURL+"/subscription-data/:ueId/context-data/smf-registrations/:pduSessionId", wrapper.DeleteSmfRegistration)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/smf-registrations/:pduSessionId", wrapper.QuerySmfRegistration)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/context-data/smf-registrations/:pduSessionId", wrapper.CreateOrUpdateSmfRegistration)
	router.DELETE(options.BaseURL+"/subscription-data/:ueId/context-data/smsf-3gpp-access", wrapper.DeleteSmsfContext3gpp)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/smsf-3gpp-access", wrapper.QuerySmsfContext3gpp)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/context-data/smsf-3gpp-access", wrapper.CreateSmsfContext3gpp)
	router.DELETE(options.BaseURL+"/subscription-data/:ueId/context-data/smsf-non-3gpp-access", wrapper.DeleteSmsfContextNon3gpp)
	router.GET(options.BaseURL+"/subscription-data/:ueId/context-data/smsf-non-3gpp-access", wrapper.QuerySmsfContextNon3gpp)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/context-data/smsf-non-3gpp-access", wrapper.CreateSmsfContextNon3gpp)
	router.GET(options.BaseURL+"/subscription-data/:ueId/coverage-restriction-data", wrapper.QueryCoverageRestrictionData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/ee-profile-data", wrapper.QueryEEData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/identity-data", wrapper.GetIdentityData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/lcs-mo-data", wrapper.QueryLcsMoData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/lcs-privacy-data", wrapper.QueryLcsPrivacyData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/nidd-authorization-data", wrapper.GetNiddAuData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/operator-determined-barring-data", wrapper.GetOdbData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/operator-specific-data", wrapper.QueryOperSpecData)
	router.PATCH(options.BaseURL+"/subscription-data/:ueId/operator-specific-data", wrapper.ModifyOperSpecData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/pp-data", wrapper.GetppData)
	router.PATCH(options.BaseURL+"/subscription-data/:ueId/pp-data", wrapper.ModifyPpData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/pp-profile-data", wrapper.QueryPPData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/ue-update-confirmation-data/sor-data", wrapper.QueryAuthSoR)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/ue-update-confirmation-data/sor-data", wrapper.CreateAuthenticationSoR)
	router.GET(options.BaseURL+"/subscription-data/:ueId/ue-update-confirmation-data/subscribed-cag", wrapper.QueryCagAck)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/ue-update-confirmation-data/subscribed-cag", wrapper.CreateCagUpdateAck)
	router.GET(options.BaseURL+"/subscription-data/:ueId/ue-update-confirmation-data/subscribed-snssais", wrapper.QueryNssaiAck)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/ue-update-confirmation-data/subscribed-snssais", wrapper.CreateOrUpdateNssaiAck)
	router.GET(options.BaseURL+"/subscription-data/:ueId/ue-update-confirmation-data/upu-data", wrapper.QueryAuthUPU)
	router.PUT(options.BaseURL+"/subscription-data/:ueId/ue-update-confirmation-data/upu-data", wrapper.CreateAuthenticationUPU)
	router.GET(options.BaseURL+"/subscription-data/:ueId/v2x-data", wrapper.QueryV2xData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/:servingPlmnId/provisioned-data", wrapper.QueryProvisionedData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/:servingPlmnId/provisioned-data/am-data", wrapper.QueryAmData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/:servingPlmnId/provisioned-data/lcs-bca-data", wrapper.QueryLcsBcaData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/:servingPlmnId/provisioned-data/sm-data", wrapper.QuerySmData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/:servingPlmnId/provisioned-data/smf-selection-subscription-data", wrapper.QuerySmfSelectData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/:servingPlmnId/provisioned-data/sms-data", wrapper.QuerySmsData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/:servingPlmnId/provisioned-data/sms-mng-data", wrapper.QuerySmsMngData)
	router.GET(options.BaseURL+"/subscription-data/:ueId/:servingPlmnId/provisioned-data/trace-data", wrapper.QueryTraceData)
}

type Query5GVnGroupRequestObject struct {
	Params Query5GVnGroupParams
}

type Query5GVnGroupResponseObject interface {
	VisitQuery5GVnGroupResponse(w http.ResponseWriter) error
}

type Query5GVnGroup200JSONResponse map[string]externalRef6.N5GVnGroupConfiguration

func (response Query5GVnGroup200JSONResponse) VisitQuery5GVnGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Query5GVnGroupdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response Query5GVnGroupdefaultApplicationProblemPlusJSONResponse) VisitQuery5GVnGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type Query5GVnGroupInternalRequestObject struct {
	Params Query5GVnGroupInternalParams
}

type Query5GVnGroupInternalResponseObject interface {
	VisitQuery5GVnGroupInternalResponse(w http.ResponseWriter) error
}

type Query5GVnGroupInternal200JSONResponse map[string]externalRef6.N5GVnGroupConfiguration

func (response Query5GVnGroupInternal200JSONResponse) VisitQuery5GVnGroupInternalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Query5GVnGroupInternaldefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response Query5GVnGroupInternaldefaultApplicationProblemPlusJSONResponse) VisitQuery5GVnGroupInternalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type Query5GVNGroupPPDataRequestObject struct {
	Params Query5GVNGroupPPDataParams
}

type Query5GVNGroupPPDataResponseObject interface {
	VisitQuery5GVNGroupPPDataResponse(w http.ResponseWriter) error
}

type Query5GVNGroupPPData200JSONResponse Pp5gVnGroupProfileData

func (response Query5GVNGroupPPData200JSONResponse) VisitQuery5GVNGroupPPDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Query5GVNGroupPPDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response Query5GVNGroupPPDatadefaultApplicationProblemPlusJSONResponse) VisitQuery5GVNGroupPPDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type Delete5GVnGroupRequestObject struct {
	ExternalGroupId externalRef7.ExtGroupId `json:"externalGroupId"`
}

type Delete5GVnGroupResponseObject interface {
	VisitDelete5GVnGroupResponse(w http.ResponseWriter) error
}

type Delete5GVnGroup204Response struct {
}

func (response Delete5GVnGroup204Response) VisitDelete5GVnGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Delete5GVnGroupdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response Delete5GVnGroupdefaultApplicationProblemPlusJSONResponse) VisitDelete5GVnGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type Get5GVnGroupConfigurationRequestObject struct {
	ExternalGroupId externalRef7.ExtGroupId `json:"externalGroupId"`
}

type Get5GVnGroupConfigurationResponseObject interface {
	VisitGet5GVnGroupConfigurationResponse(w http.ResponseWriter) error
}

type Get5GVnGroupConfiguration200JSONResponse externalRef6.N5GVnGroupConfiguration

func (response Get5GVnGroupConfiguration200JSONResponse) VisitGet5GVnGroupConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Get5GVnGroupConfigurationdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response Get5GVnGroupConfigurationdefaultApplicationProblemPlusJSONResponse) VisitGet5GVnGroupConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type Modify5GVnGroupRequestObject struct {
	ExternalGroupId externalRef7.ExtGroupId `json:"externalGroupId"`
	Params          Modify5GVnGroupParams
	Body            *Modify5GVnGroupApplicationJSONPatchPlusJSONRequestBody
}

type Modify5GVnGroupResponseObject interface {
	VisitModify5GVnGroupResponse(w http.ResponseWriter) error
}

type Modify5GVnGroup200JSONResponse externalRef2.PatchResult

func (response Modify5GVnGroup200JSONResponse) VisitModify5GVnGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Modify5GVnGroup204Response struct {
}

func (response Modify5GVnGroup204Response) VisitModify5GVnGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Modify5GVnGroup403ApplicationProblemPlusJSONResponse externalRef2.ProblemDetails

func (response Modify5GVnGroup403ApplicationProblemPlusJSONResponse) VisitModify5GVnGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type Modify5GVnGroupdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response Modify5GVnGroupdefaultApplicationProblemPlusJSONResponse) VisitModify5GVnGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type Create5GVnGroupRequestObject struct {
	ExternalGroupId externalRef7.ExtGroupId `json:"externalGroupId"`
	Body            *Create5GVnGroupJSONRequestBody
}

type Create5GVnGroupResponseObject interface {
	VisitCreate5GVnGroupResponse(w http.ResponseWriter) error
}

type Create5GVnGroup201JSONResponse externalRef6.N5GVnGroupConfiguration

func (response Create5GVnGroup201JSONResponse) VisitCreate5GVnGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type Create5GVnGroup403ApplicationProblemPlusJSONResponse struct {
	externalRef2.N403ApplicationProblemPlusJSONResponse
}

func (response Create5GVnGroup403ApplicationProblemPlusJSONResponse) VisitCreate5GVnGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type Create5GVnGroupdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response Create5GVnGroupdefaultApplicationProblemPlusJSONResponse) VisitCreate5GVnGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetGroupIdentifiersRequestObject struct {
	Params GetGroupIdentifiersParams
}

type GetGroupIdentifiersResponseObject interface {
	VisitGetGroupIdentifiersResponse(w http.ResponseWriter) error
}

type GetGroupIdentifiers200JSONResponse externalRef7.GroupIdentifiers

func (response GetGroupIdentifiers200JSONResponse) VisitGetGroupIdentifiersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupIdentifiersdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetGroupIdentifiersdefaultApplicationProblemPlusJSONResponse) VisitGetGroupIdentifiersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryGroupEEDataRequestObject struct {
	UeGroupId VarUeGroupId `json:"ueGroupId"`
	Params    QueryGroupEEDataParams
}

type QueryGroupEEDataResponseObject interface {
	VisitQueryGroupEEDataResponse(w http.ResponseWriter) error
}

type QueryGroupEEData200JSONResponse EeGroupProfileData

func (response QueryGroupEEData200JSONResponse) VisitQueryGroupEEDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QueryGroupEEDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryGroupEEDatadefaultApplicationProblemPlusJSONResponse) VisitQueryGroupEEDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryEeGroupSubscriptionsRequestObject struct {
	UeGroupId VarUeGroupId `json:"ueGroupId"`
	Params    QueryEeGroupSubscriptionsParams
}

type QueryEeGroupSubscriptionsResponseObject interface {
	VisitQueryEeGroupSubscriptionsResponse(w http.ResponseWriter) error
}

type QueryEeGroupSubscriptions200JSONResponse []EeSubscription

func (response QueryEeGroupSubscriptions200JSONResponse) VisitQueryEeGroupSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QueryEeGroupSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryEeGroupSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitQueryEeGroupSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateEeGroupSubscriptionsRequestObject struct {
	UeGroupId VarUeGroupId `json:"ueGroupId"`
	Body      *CreateEeGroupSubscriptionsJSONRequestBody
}

type CreateEeGroupSubscriptionsResponseObject interface {
	VisitCreateEeGroupSubscriptionsResponse(w http.ResponseWriter) error
}

type CreateEeGroupSubscriptions201ResponseHeaders struct {
	Location string
}

type CreateEeGroupSubscriptions201JSONResponse struct {
	Body    EeSubscription
	Headers CreateEeGroupSubscriptions201ResponseHeaders
}

func (response CreateEeGroupSubscriptions201JSONResponse) VisitCreateEeGroupSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateEeGroupSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response CreateEeGroupSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitCreateEeGroupSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RemoveEeGroupSubscriptionsRequestObject struct {
	UeGroupId VarUeGroupId `json:"ueGroupId"`
	SubsId    string       `json:"subsId"`
}

type RemoveEeGroupSubscriptionsResponseObject interface {
	VisitRemoveEeGroupSubscriptionsResponse(w http.ResponseWriter) error
}

type RemoveEeGroupSubscriptions204Response struct {
}

func (response RemoveEeGroupSubscriptions204Response) VisitRemoveEeGroupSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RemoveEeGroupSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response RemoveEeGroupSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitRemoveEeGroupSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryEeGroupSubscriptionRequestObject struct {
	UeGroupId VarUeGroupId `json:"ueGroupId"`
	SubsId    string       `json:"subsId"`
}

type QueryEeGroupSubscriptionResponseObject interface {
	VisitQueryEeGroupSubscriptionResponse(w http.ResponseWriter) error
}

type QueryEeGroupSubscription200JSONResponse []EeSubscription

func (response QueryEeGroupSubscription200JSONResponse) VisitQueryEeGroupSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QueryEeGroupSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryEeGroupSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitQueryEeGroupSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifyEeGroupSubscriptionRequestObject struct {
	UeGroupId VarUeGroupId `json:"ueGroupId"`
	SubsId    string       `json:"subsId"`
	Params    ModifyEeGroupSubscriptionParams
	Body      *ModifyEeGroupSubscriptionApplicationJSONPatchPlusJSONRequestBody
}

type ModifyEeGroupSubscriptionResponseObject interface {
	VisitModifyEeGroupSubscriptionResponse(w http.ResponseWriter) error
}

type ModifyEeGroupSubscription200JSONResponse externalRef2.PatchResult

func (response ModifyEeGroupSubscription200JSONResponse) VisitModifyEeGroupSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModifyEeGroupSubscription204Response struct {
}

func (response ModifyEeGroupSubscription204Response) VisitModifyEeGroupSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ModifyEeGroupSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef2.N403ApplicationProblemPlusJSONResponse
}

func (response ModifyEeGroupSubscription403ApplicationProblemPlusJSONResponse) VisitModifyEeGroupSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ModifyEeGroupSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response ModifyEeGroupSubscription404ApplicationProblemPlusJSONResponse) VisitModifyEeGroupSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ModifyEeGroupSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response ModifyEeGroupSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitModifyEeGroupSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateEeGroupSubscriptionsRequestObject struct {
	UeGroupId VarUeGroupId `json:"ueGroupId"`
	SubsId    string       `json:"subsId"`
	Body      *UpdateEeGroupSubscriptionsJSONRequestBody
}

type UpdateEeGroupSubscriptionsResponseObject interface {
	VisitUpdateEeGroupSubscriptionsResponse(w http.ResponseWriter) error
}

type UpdateEeGroupSubscriptions204Response struct {
}

func (response UpdateEeGroupSubscriptions204Response) VisitUpdateEeGroupSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateEeGroupSubscriptions404ApplicationProblemPlusJSONResponse externalRef2.ProblemDetails

func (response UpdateEeGroupSubscriptions404ApplicationProblemPlusJSONResponse) VisitUpdateEeGroupSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateEeGroupSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response UpdateEeGroupSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitUpdateEeGroupSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSharedDataRequestObject struct {
	Params GetSharedDataParams
}

type GetSharedDataResponseObject interface {
	VisitGetSharedDataResponse(w http.ResponseWriter) error
}

type GetSharedData200JSONResponse []externalRef7.SharedData

func (response GetSharedData200JSONResponse) VisitGetSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSharedData400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response GetSharedData400ApplicationProblemPlusJSONResponse) VisitGetSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSharedData404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response GetSharedData404ApplicationProblemPlusJSONResponse) VisitGetSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSharedData500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response GetSharedData500ApplicationProblemPlusJSONResponse) VisitGetSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSharedData503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response GetSharedData503ApplicationProblemPlusJSONResponse) VisitGetSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetSharedDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetSharedDatadefaultApplicationProblemPlusJSONResponse) VisitGetSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetIndividualSharedDataRequestObject struct {
	SharedDataId externalRef7.SharedDataId `json:"sharedDataId"`
	Params       GetIndividualSharedDataParams
}

type GetIndividualSharedDataResponseObject interface {
	VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error
}

type GetIndividualSharedData200ResponseHeaders struct {
	CacheControl string
	ETag         string
	LastModified string
}

type GetIndividualSharedData200JSONResponse struct {
	Body    externalRef7.SharedData
	Headers GetIndividualSharedData200ResponseHeaders
}

func (response GetIndividualSharedData200JSONResponse) VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetIndividualSharedData400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response GetIndividualSharedData400ApplicationProblemPlusJSONResponse) VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetIndividualSharedData404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response GetIndividualSharedData404ApplicationProblemPlusJSONResponse) VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetIndividualSharedData500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response GetIndividualSharedData500ApplicationProblemPlusJSONResponse) VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetIndividualSharedData503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response GetIndividualSharedData503ApplicationProblemPlusJSONResponse) VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetIndividualSharedDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetIndividualSharedDatadefaultApplicationProblemPlusJSONResponse) VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RemoveMultipleSubscriptionDataSubscriptionsRequestObject struct {
	Params RemoveMultipleSubscriptionDataSubscriptionsParams
}

type RemoveMultipleSubscriptionDataSubscriptionsResponseObject interface {
	VisitRemoveMultipleSubscriptionDataSubscriptionsResponse(w http.ResponseWriter) error
}

type RemoveMultipleSubscriptionDataSubscriptions204Response struct {
}

func (response RemoveMultipleSubscriptionDataSubscriptions204Response) VisitRemoveMultipleSubscriptionDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RemoveMultipleSubscriptionDataSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response RemoveMultipleSubscriptionDataSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitRemoveMultipleSubscriptionDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySubsToNotifyRequestObject struct {
	Params QuerySubsToNotifyParams
}

type QuerySubsToNotifyResponseObject interface {
	VisitQuerySubsToNotifyResponse(w http.ResponseWriter) error
}

type QuerySubsToNotify200JSONResponse []SubscriptionDataSubscriptions

func (response QuerySubsToNotify200JSONResponse) VisitQuerySubsToNotifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QuerySubsToNotifydefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QuerySubsToNotifydefaultApplicationProblemPlusJSONResponse) VisitQuerySubsToNotifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SubscriptionDataSubscriptionsRequestObject struct {
	Body *SubscriptionDataSubscriptionsJSONRequestBody
}

type SubscriptionDataSubscriptionsResponseObject interface {
	VisitSubscriptionDataSubscriptionsResponse(w http.ResponseWriter) error
}

type SubscriptionDataSubscriptions201ResponseHeaders struct {
	Location string
}

type SubscriptionDataSubscriptions201JSONResponse struct {
	Body    SubscriptionDataSubscriptions
	Headers SubscriptionDataSubscriptions201ResponseHeaders
}

func (response SubscriptionDataSubscriptions201JSONResponse) VisitSubscriptionDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type SubscriptionDataSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response SubscriptionDataSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitSubscriptionDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RemovesubscriptionDataSubscriptionsRequestObject struct {
	SubsId string `json:"subsId"`
}

type RemovesubscriptionDataSubscriptionsResponseObject interface {
	VisitRemovesubscriptionDataSubscriptionsResponse(w http.ResponseWriter) error
}

type RemovesubscriptionDataSubscriptions204Response struct {
}

func (response RemovesubscriptionDataSubscriptions204Response) VisitRemovesubscriptionDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RemovesubscriptionDataSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response RemovesubscriptionDataSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitRemovesubscriptionDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySubscriptionDataSubscriptionsRequestObject struct {
	SubsId string `json:"subsId"`
}

type QuerySubscriptionDataSubscriptionsResponseObject interface {
	VisitQuerySubscriptionDataSubscriptionsResponse(w http.ResponseWriter) error
}

type QuerySubscriptionDataSubscriptions200JSONResponse []SubscriptionDataSubscriptions

func (response QuerySubscriptionDataSubscriptions200JSONResponse) VisitQuerySubscriptionDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QuerySubscriptionDataSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QuerySubscriptionDataSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitQuerySubscriptionDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifysubscriptionDataSubscriptionRequestObject struct {
	SubsId string `json:"subsId"`
	Params ModifysubscriptionDataSubscriptionParams
	Body   *ModifysubscriptionDataSubscriptionApplicationJSONPatchPlusJSONRequestBody
}

type ModifysubscriptionDataSubscriptionResponseObject interface {
	VisitModifysubscriptionDataSubscriptionResponse(w http.ResponseWriter) error
}

type ModifysubscriptionDataSubscription200JSONResponse externalRef2.PatchResult

func (response ModifysubscriptionDataSubscription200JSONResponse) VisitModifysubscriptionDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModifysubscriptionDataSubscription204Response struct {
}

func (response ModifysubscriptionDataSubscription204Response) VisitModifysubscriptionDataSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ModifysubscriptionDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef2.N403ApplicationProblemPlusJSONResponse
}

func (response ModifysubscriptionDataSubscription403ApplicationProblemPlusJSONResponse) VisitModifysubscriptionDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ModifysubscriptionDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response ModifysubscriptionDataSubscription404ApplicationProblemPlusJSONResponse) VisitModifysubscriptionDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ModifysubscriptionDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response ModifysubscriptionDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitModifysubscriptionDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteAuthenticationStatusRequestObject struct {
	UeId externalRef2.Supi `json:"ueId"`
}

type DeleteAuthenticationStatusResponseObject interface {
	VisitDeleteAuthenticationStatusResponse(w http.ResponseWriter) error
}

type DeleteAuthenticationStatus204Response struct {
}

func (response DeleteAuthenticationStatus204Response) VisitDeleteAuthenticationStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAuthenticationStatusdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response DeleteAuthenticationStatusdefaultApplicationProblemPlusJSONResponse) VisitDeleteAuthenticationStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryAuthenticationStatusRequestObject struct {
	UeId   externalRef2.Supi `json:"ueId"`
	Params QueryAuthenticationStatusParams
}

type QueryAuthenticationStatusResponseObject interface {
	VisitQueryAuthenticationStatusResponse(w http.ResponseWriter) error
}

type QueryAuthenticationStatus200JSONResponse externalRef8.AuthEvent

func (response QueryAuthenticationStatus200JSONResponse) VisitQueryAuthenticationStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QueryAuthenticationStatusdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryAuthenticationStatusdefaultApplicationProblemPlusJSONResponse) VisitQueryAuthenticationStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateAuthenticationStatusRequestObject struct {
	UeId externalRef2.Supi `json:"ueId"`
	Body *CreateAuthenticationStatusJSONRequestBody
}

type CreateAuthenticationStatusResponseObject interface {
	VisitCreateAuthenticationStatusResponse(w http.ResponseWriter) error
}

type CreateAuthenticationStatus204Response struct {
}

func (response CreateAuthenticationStatus204Response) VisitCreateAuthenticationStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateAuthenticationStatusdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response CreateAuthenticationStatusdefaultApplicationProblemPlusJSONResponse) VisitCreateAuthenticationStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualAuthenticationStatusRequestObject struct {
	UeId               externalRef2.Supi               `json:"ueId"`
	ServingNetworkName externalRef8.ServingNetworkName `json:"servingNetworkName"`
}

type DeleteIndividualAuthenticationStatusResponseObject interface {
	VisitDeleteIndividualAuthenticationStatusResponse(w http.ResponseWriter) error
}

type DeleteIndividualAuthenticationStatus204Response struct {
}

func (response DeleteIndividualAuthenticationStatus204Response) VisitDeleteIndividualAuthenticationStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIndividualAuthenticationStatusdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response DeleteIndividualAuthenticationStatusdefaultApplicationProblemPlusJSONResponse) VisitDeleteIndividualAuthenticationStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryIndividualAuthenticationStatusRequestObject struct {
	UeId               externalRef2.Supi               `json:"ueId"`
	ServingNetworkName externalRef8.ServingNetworkName `json:"servingNetworkName"`
	Params             QueryIndividualAuthenticationStatusParams
}

type QueryIndividualAuthenticationStatusResponseObject interface {
	VisitQueryIndividualAuthenticationStatusResponse(w http.ResponseWriter) error
}

type QueryIndividualAuthenticationStatus200JSONResponse externalRef8.AuthEvent

func (response QueryIndividualAuthenticationStatus200JSONResponse) VisitQueryIndividualAuthenticationStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QueryIndividualAuthenticationStatusdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryIndividualAuthenticationStatusdefaultApplicationProblemPlusJSONResponse) VisitQueryIndividualAuthenticationStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIndividualAuthenticationStatusRequestObject struct {
	UeId               externalRef2.Supi               `json:"ueId"`
	ServingNetworkName externalRef8.ServingNetworkName `json:"servingNetworkName"`
	Body               *CreateIndividualAuthenticationStatusJSONRequestBody
}

type CreateIndividualAuthenticationStatusResponseObject interface {
	VisitCreateIndividualAuthenticationStatusResponse(w http.ResponseWriter) error
}

type CreateIndividualAuthenticationStatus204Response struct {
}

func (response CreateIndividualAuthenticationStatus204Response) VisitCreateIndividualAuthenticationStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateIndividualAuthenticationStatusdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response CreateIndividualAuthenticationStatusdefaultApplicationProblemPlusJSONResponse) VisitCreateIndividualAuthenticationStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryAuthSubsDataRequestObject struct {
	UeId   externalRef2.Supi `json:"ueId"`
	Params QueryAuthSubsDataParams
}

type QueryAuthSubsDataResponseObject interface {
	VisitQueryAuthSubsDataResponse(w http.ResponseWriter) error
}

type QueryAuthSubsData200JSONResponse AuthenticationSubscription

func (response QueryAuthSubsData200JSONResponse) VisitQueryAuthSubsDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QueryAuthSubsDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryAuthSubsDatadefaultApplicationProblemPlusJSONResponse) VisitQueryAuthSubsDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifyAuthenticationSubscriptionRequestObject struct {
	UeId   externalRef2.Supi `json:"ueId"`
	Params ModifyAuthenticationSubscriptionParams
	Body   *ModifyAuthenticationSubscriptionApplicationJSONPatchPlusJSONRequestBody
}

type ModifyAuthenticationSubscriptionResponseObject interface {
	VisitModifyAuthenticationSubscriptionResponse(w http.ResponseWriter) error
}

type ModifyAuthenticationSubscription200JSONResponse externalRef2.PatchResult

func (response ModifyAuthenticationSubscription200JSONResponse) VisitModifyAuthenticationSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModifyAuthenticationSubscription204Response struct {
}

func (response ModifyAuthenticationSubscription204Response) VisitModifyAuthenticationSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ModifyAuthenticationSubscription403ApplicationProblemPlusJSONResponse externalRef2.ProblemDetails

func (response ModifyAuthenticationSubscription403ApplicationProblemPlusJSONResponse) VisitModifyAuthenticationSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ModifyAuthenticationSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response ModifyAuthenticationSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitModifyAuthenticationSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryContextDataRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	Params QueryContextDataParams
}

type QueryContextDataResponseObject interface {
	VisitQueryContextDataResponse(w http.ResponseWriter) error
}

type QueryContextData200JSONResponse ContextDataSets

func (response QueryContextData200JSONResponse) VisitQueryContextDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QueryContextDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryContextDatadefaultApplicationProblemPlusJSONResponse) VisitQueryContextDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryAmfContext3gppRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	Params QueryAmfContext3gppParams
}

type QueryAmfContext3gppResponseObject interface {
	VisitQueryAmfContext3gppResponse(w http.ResponseWriter) error
}

type QueryAmfContext3gpp200JSONResponse Amf3GppAccessRegistration

func (response QueryAmfContext3gpp200JSONResponse) VisitQueryAmfContext3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QueryAmfContext3gppdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryAmfContext3gppdefaultApplicationProblemPlusJSONResponse) VisitQueryAmfContext3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AmfContext3gppRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	Params AmfContext3gppParams
	Body   *AmfContext3gppApplicationJSONPatchPlusJSONRequestBody
}

type AmfContext3gppResponseObject interface {
	VisitAmfContext3gppResponse(w http.ResponseWriter) error
}

type AmfContext3gpp200JSONResponse externalRef2.PatchResult

func (response AmfContext3gpp200JSONResponse) VisitAmfContext3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AmfContext3gpp204Response struct {
}

func (response AmfContext3gpp204Response) VisitAmfContext3gppResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type AmfContext3gpp403ApplicationProblemPlusJSONResponse externalRef2.ProblemDetails

func (response AmfContext3gpp403ApplicationProblemPlusJSONResponse) VisitAmfContext3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AmfContext3gppdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response AmfContext3gppdefaultApplicationProblemPlusJSONResponse) VisitAmfContext3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateAmfContext3gppRequestObject struct {
	UeId externalRef2.VarUeId `json:"ueId"`
	Body *CreateAmfContext3gppJSONRequestBody
}

type CreateAmfContext3gppResponseObject interface {
	VisitCreateAmfContext3gppResponse(w http.ResponseWriter) error
}

type CreateAmfContext3gpp201ResponseHeaders struct {
	Location string
}

type CreateAmfContext3gpp201JSONResponse struct {
	Body    Amf3GppAccessRegistration
	Headers CreateAmfContext3gpp201ResponseHeaders
}

func (response CreateAmfContext3gpp201JSONResponse) VisitCreateAmfContext3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateAmfContext3gpp204Response struct {
}

func (response CreateAmfContext3gpp204Response) VisitCreateAmfContext3gppResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateAmfContext3gppdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response CreateAmfContext3gppdefaultApplicationProblemPlusJSONResponse) VisitCreateAmfContext3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryAmfContextNon3gppRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	Params QueryAmfContextNon3gppParams
}

type QueryAmfContextNon3gppResponseObject interface {
	VisitQueryAmfContextNon3gppResponse(w http.ResponseWriter) error
}

type QueryAmfContextNon3gpp200JSONResponse AmfNon3GppAccessRegistration

func (response QueryAmfContextNon3gpp200JSONResponse) VisitQueryAmfContextNon3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QueryAmfContextNon3gppdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryAmfContextNon3gppdefaultApplicationProblemPlusJSONResponse) VisitQueryAmfContextNon3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AmfContextNon3gppRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	Params AmfContextNon3gppParams
	Body   *AmfContextNon3gppApplicationJSONPatchPlusJSONRequestBody
}

type AmfContextNon3gppResponseObject interface {
	VisitAmfContextNon3gppResponse(w http.ResponseWriter) error
}

type AmfContextNon3gpp200JSONResponse externalRef2.PatchResult

func (response AmfContextNon3gpp200JSONResponse) VisitAmfContextNon3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AmfContextNon3gpp204Response struct {
}

func (response AmfContextNon3gpp204Response) VisitAmfContextNon3gppResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type AmfContextNon3gpp403ApplicationProblemPlusJSONResponse externalRef2.ProblemDetails

func (response AmfContextNon3gpp403ApplicationProblemPlusJSONResponse) VisitAmfContextNon3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AmfContextNon3gppdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response AmfContextNon3gppdefaultApplicationProblemPlusJSONResponse) VisitAmfContextNon3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateAmfContextNon3gppRequestObject struct {
	UeId externalRef2.VarUeId `json:"ueId"`
	Body *CreateAmfContextNon3gppJSONRequestBody
}

type CreateAmfContextNon3gppResponseObject interface {
	VisitCreateAmfContextNon3gppResponse(w http.ResponseWriter) error
}

type CreateAmfContextNon3gpp201ResponseHeaders struct {
	Location string
}

type CreateAmfContextNon3gpp201JSONResponse struct {
	Body    Amf3GppAccessRegistration
	Headers CreateAmfContextNon3gpp201ResponseHeaders
}

func (response CreateAmfContextNon3gpp201JSONResponse) VisitCreateAmfContextNon3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateAmfContextNon3gpp204Response struct {
}

func (response CreateAmfContextNon3gpp204Response) VisitCreateAmfContextNon3gppResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateAmfContextNon3gppdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response CreateAmfContextNon3gppdefaultApplicationProblemPlusJSONResponse) VisitCreateAmfContextNon3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryeesubscriptionsRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	Params QueryeesubscriptionsParams
}

type QueryeesubscriptionsResponseObject interface {
	VisitQueryeesubscriptionsResponse(w http.ResponseWriter) error
}

type Queryeesubscriptions200JSONResponse []EeSubscription

func (response Queryeesubscriptions200JSONResponse) VisitQueryeesubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QueryeesubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryeesubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitQueryeesubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateEeSubscriptionsRequestObject struct {
	UeId externalRef2.VarUeId `json:"ueId"`
	Body *CreateEeSubscriptionsJSONRequestBody
}

type CreateEeSubscriptionsResponseObject interface {
	VisitCreateEeSubscriptionsResponse(w http.ResponseWriter) error
}

type CreateEeSubscriptions201ResponseHeaders struct {
	Location string
}

type CreateEeSubscriptions201JSONResponse struct {
	Body    EeSubscription
	Headers CreateEeSubscriptions201ResponseHeaders
}

func (response CreateEeSubscriptions201JSONResponse) VisitCreateEeSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateEeSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response CreateEeSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitCreateEeSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RemoveeeSubscriptionsRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
}

type RemoveeeSubscriptionsResponseObject interface {
	VisitRemoveeeSubscriptionsResponse(w http.ResponseWriter) error
}

type RemoveeeSubscriptions204Response struct {
}

func (response RemoveeeSubscriptions204Response) VisitRemoveeeSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RemoveeeSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response RemoveeeSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitRemoveeeSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryeeSubscriptionRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
}

type QueryeeSubscriptionResponseObject interface {
	VisitQueryeeSubscriptionResponse(w http.ResponseWriter) error
}

type QueryeeSubscription200JSONResponse []EeSubscription

func (response QueryeeSubscription200JSONResponse) VisitQueryeeSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QueryeeSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryeeSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitQueryeeSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifyEesubscriptionRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
	Params ModifyEesubscriptionParams
	Body   *ModifyEesubscriptionApplicationJSONPatchPlusJSONRequestBody
}

type ModifyEesubscriptionResponseObject interface {
	VisitModifyEesubscriptionResponse(w http.ResponseWriter) error
}

type ModifyEesubscription200JSONResponse externalRef2.PatchResult

func (response ModifyEesubscription200JSONResponse) VisitModifyEesubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModifyEesubscription204Response struct {
}

func (response ModifyEesubscription204Response) VisitModifyEesubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ModifyEesubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef2.N403ApplicationProblemPlusJSONResponse
}

func (response ModifyEesubscription403ApplicationProblemPlusJSONResponse) VisitModifyEesubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ModifyEesubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response ModifyEesubscription404ApplicationProblemPlusJSONResponse) VisitModifyEesubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ModifyEesubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response ModifyEesubscriptiondefaultApplicationProblemPlusJSONResponse) VisitModifyEesubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateEesubscriptionsRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
	Body   *UpdateEesubscriptionsJSONRequestBody
}

type UpdateEesubscriptionsResponseObject interface {
	VisitUpdateEesubscriptionsResponse(w http.ResponseWriter) error
}

type UpdateEesubscriptions204Response struct {
}

func (response UpdateEesubscriptions204Response) VisitUpdateEesubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateEesubscriptions404ApplicationProblemPlusJSONResponse externalRef2.ProblemDetails

func (response UpdateEesubscriptions404ApplicationProblemPlusJSONResponse) VisitUpdateEesubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateEesubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response UpdateEesubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitUpdateEesubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RemoveAmfSubscriptionsInfoRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
}

type RemoveAmfSubscriptionsInfoResponseObject interface {
	VisitRemoveAmfSubscriptionsInfoResponse(w http.ResponseWriter) error
}

type RemoveAmfSubscriptionsInfo204Response struct {
}

func (response RemoveAmfSubscriptionsInfo204Response) VisitRemoveAmfSubscriptionsInfoResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RemoveAmfSubscriptionsInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response RemoveAmfSubscriptionsInfodefaultApplicationProblemPlusJSONResponse) VisitRemoveAmfSubscriptionsInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetAmfSubscriptionInfoRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
}

type GetAmfSubscriptionInfoResponseObject interface {
	VisitGetAmfSubscriptionInfoResponse(w http.ResponseWriter) error
}

type GetAmfSubscriptionInfo200JSONResponse []AmfSubscriptionInfo

func (response GetAmfSubscriptionInfo200JSONResponse) VisitGetAmfSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAmfSubscriptionInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetAmfSubscriptionInfodefaultApplicationProblemPlusJSONResponse) VisitGetAmfSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifyAmfSubscriptionInfoRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
	Params ModifyAmfSubscriptionInfoParams
	Body   *ModifyAmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody
}

type ModifyAmfSubscriptionInfoResponseObject interface {
	VisitModifyAmfSubscriptionInfoResponse(w http.ResponseWriter) error
}

type ModifyAmfSubscriptionInfo200JSONResponse externalRef2.PatchResult

func (response ModifyAmfSubscriptionInfo200JSONResponse) VisitModifyAmfSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModifyAmfSubscriptionInfo204Response struct {
}

func (response ModifyAmfSubscriptionInfo204Response) VisitModifyAmfSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ModifyAmfSubscriptionInfo403ApplicationProblemPlusJSONResponse externalRef2.ProblemDetails

func (response ModifyAmfSubscriptionInfo403ApplicationProblemPlusJSONResponse) VisitModifyAmfSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ModifyAmfSubscriptionInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response ModifyAmfSubscriptionInfodefaultApplicationProblemPlusJSONResponse) VisitModifyAmfSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateAMFSubscriptionsRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
	Body   *CreateAMFSubscriptionsJSONRequestBody
}

type CreateAMFSubscriptionsResponseObject interface {
	VisitCreateAMFSubscriptionsResponse(w http.ResponseWriter) error
}

type CreateAMFSubscriptions204Response struct {
}

func (response CreateAMFSubscriptions204Response) VisitCreateAMFSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateAMFSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response CreateAMFSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitCreateAMFSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RemoveHssSubscriptionsInfoRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
}

type RemoveHssSubscriptionsInfoResponseObject interface {
	VisitRemoveHssSubscriptionsInfoResponse(w http.ResponseWriter) error
}

type RemoveHssSubscriptionsInfo204Response struct {
}

func (response RemoveHssSubscriptionsInfo204Response) VisitRemoveHssSubscriptionsInfoResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RemoveHssSubscriptionsInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response RemoveHssSubscriptionsInfodefaultApplicationProblemPlusJSONResponse) VisitRemoveHssSubscriptionsInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetHssSubscriptionInfoRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
}

type GetHssSubscriptionInfoResponseObject interface {
	VisitGetHssSubscriptionInfoResponse(w http.ResponseWriter) error
}

type GetHssSubscriptionInfo200JSONResponse SmfSubscriptionInfo

func (response GetHssSubscriptionInfo200JSONResponse) VisitGetHssSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHssSubscriptionInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetHssSubscriptionInfodefaultApplicationProblemPlusJSONResponse) VisitGetHssSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifyHssSubscriptionInfoRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
	Params ModifyHssSubscriptionInfoParams
	Body   *ModifyHssSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody
}

type ModifyHssSubscriptionInfoResponseObject interface {
	VisitModifyHssSubscriptionInfoResponse(w http.ResponseWriter) error
}

type ModifyHssSubscriptionInfo200JSONResponse externalRef2.PatchResult

func (response ModifyHssSubscriptionInfo200JSONResponse) VisitModifyHssSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModifyHssSubscriptionInfo204Response struct {
}

func (response ModifyHssSubscriptionInfo204Response) VisitModifyHssSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ModifyHssSubscriptionInfo403ApplicationProblemPlusJSONResponse externalRef2.ProblemDetails

func (response ModifyHssSubscriptionInfo403ApplicationProblemPlusJSONResponse) VisitModifyHssSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ModifyHssSubscriptionInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response ModifyHssSubscriptionInfodefaultApplicationProblemPlusJSONResponse) VisitModifyHssSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateHSSSubscriptionsRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
	Body   *CreateHSSSubscriptionsJSONRequestBody
}

type CreateHSSSubscriptionsResponseObject interface {
	VisitCreateHSSSubscriptionsResponse(w http.ResponseWriter) error
}

type CreateHSSSubscriptions204Response struct {
}

func (response CreateHSSSubscriptions204Response) VisitCreateHSSSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateHSSSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response CreateHSSSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitCreateHSSSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RemoveSmfSubscriptionsInfoRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
}

type RemoveSmfSubscriptionsInfoResponseObject interface {
	VisitRemoveSmfSubscriptionsInfoResponse(w http.ResponseWriter) error
}

type RemoveSmfSubscriptionsInfo204Response struct {
}

func (response RemoveSmfSubscriptionsInfo204Response) VisitRemoveSmfSubscriptionsInfoResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RemoveSmfSubscriptionsInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response RemoveSmfSubscriptionsInfodefaultApplicationProblemPlusJSONResponse) VisitRemoveSmfSubscriptionsInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSmfSubscriptionInfoRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
}

type GetSmfSubscriptionInfoResponseObject interface {
	VisitGetSmfSubscriptionInfoResponse(w http.ResponseWriter) error
}

type GetSmfSubscriptionInfo200JSONResponse SmfSubscriptionInfo

func (response GetSmfSubscriptionInfo200JSONResponse) VisitGetSmfSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSmfSubscriptionInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetSmfSubscriptionInfodefaultApplicationProblemPlusJSONResponse) VisitGetSmfSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifySmfSubscriptionInfoRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
	Params ModifySmfSubscriptionInfoParams
	Body   *ModifySmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody
}

type ModifySmfSubscriptionInfoResponseObject interface {
	VisitModifySmfSubscriptionInfoResponse(w http.ResponseWriter) error
}

type ModifySmfSubscriptionInfo200JSONResponse externalRef2.PatchResult

func (response ModifySmfSubscriptionInfo200JSONResponse) VisitModifySmfSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModifySmfSubscriptionInfo204Response struct {
}

func (response ModifySmfSubscriptionInfo204Response) VisitModifySmfSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ModifySmfSubscriptionInfo403ApplicationProblemPlusJSONResponse externalRef2.ProblemDetails

func (response ModifySmfSubscriptionInfo403ApplicationProblemPlusJSONResponse) VisitModifySmfSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ModifySmfSubscriptionInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response ModifySmfSubscriptionInfodefaultApplicationProblemPlusJSONResponse) VisitModifySmfSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateSMFSubscriptionsRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
	Body   *CreateSMFSubscriptionsJSONRequestBody
}

type CreateSMFSubscriptionsResponseObject interface {
	VisitCreateSMFSubscriptionsResponse(w http.ResponseWriter) error
}

type CreateSMFSubscriptions204Response struct {
}

func (response CreateSMFSubscriptions204Response) VisitCreateSMFSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateSMFSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response CreateSMFSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitCreateSMFSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIpSmGwContextRequestObject struct {
	UeId externalRef2.VarUeId `json:"ueId"`
}

type DeleteIpSmGwContextResponseObject interface {
	VisitDeleteIpSmGwContextResponse(w http.ResponseWriter) error
}

type DeleteIpSmGwContext204Response struct {
}

func (response DeleteIpSmGwContext204Response) VisitDeleteIpSmGwContextResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIpSmGwContextdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response DeleteIpSmGwContextdefaultApplicationProblemPlusJSONResponse) VisitDeleteIpSmGwContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryIpSmGwContextRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	Params QueryIpSmGwContextParams
}

type QueryIpSmGwContextResponseObject interface {
	VisitQueryIpSmGwContextResponse(w http.ResponseWriter) error
}

type QueryIpSmGwContext200JSONResponse IpSmGwRegistration

func (response QueryIpSmGwContext200JSONResponse) VisitQueryIpSmGwContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QueryIpSmGwContextdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryIpSmGwContextdefaultApplicationProblemPlusJSONResponse) VisitQueryIpSmGwContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifyIpSmGwContextRequestObject struct {
	UeId externalRef2.VarUeId `json:"ueId"`
	Body *ModifyIpSmGwContextApplicationJSONPatchPlusJSONRequestBody
}

type ModifyIpSmGwContextResponseObject interface {
	VisitModifyIpSmGwContextResponse(w http.ResponseWriter) error
}

type ModifyIpSmGwContext204Response struct {
}

func (response ModifyIpSmGwContext204Response) VisitModifyIpSmGwContextResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ModifyIpSmGwContext403ApplicationProblemPlusJSONResponse struct {
	externalRef2.N403ApplicationProblemPlusJSONResponse
}

func (response ModifyIpSmGwContext403ApplicationProblemPlusJSONResponse) VisitModifyIpSmGwContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ModifyIpSmGwContext404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response ModifyIpSmGwContext404ApplicationProblemPlusJSONResponse) VisitModifyIpSmGwContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ModifyIpSmGwContextdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response ModifyIpSmGwContextdefaultApplicationProblemPlusJSONResponse) VisitModifyIpSmGwContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIpSmGwContextRequestObject struct {
	UeId externalRef2.VarUeId `json:"ueId"`
	Body *CreateIpSmGwContextJSONRequestBody
}

type CreateIpSmGwContextResponseObject interface {
	VisitCreateIpSmGwContextResponse(w http.ResponseWriter) error
}

type CreateIpSmGwContext204Response struct {
}

func (response CreateIpSmGwContext204Response) VisitCreateIpSmGwContextResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateIpSmGwContextdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response CreateIpSmGwContextdefaultApplicationProblemPlusJSONResponse) VisitCreateIpSmGwContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryUeLocationRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	Params QueryUeLocationParams
}

type QueryUeLocationResponseObject interface {
	VisitQueryUeLocationResponse(w http.ResponseWriter) error
}

type QueryUeLocation200JSONResponse LocationInfo

func (response QueryUeLocation200JSONResponse) VisitQueryUeLocationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QueryUeLocationdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryUeLocationdefaultApplicationProblemPlusJSONResponse) VisitQueryUeLocationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteMessageWaitingDataRequestObject struct {
	UeId externalRef2.VarUeId `json:"ueId"`
}

type DeleteMessageWaitingDataResponseObject interface {
	VisitDeleteMessageWaitingDataResponse(w http.ResponseWriter) error
}

type DeleteMessageWaitingData204Response struct {
}

func (response DeleteMessageWaitingData204Response) VisitDeleteMessageWaitingDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteMessageWaitingDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response DeleteMessageWaitingDatadefaultApplicationProblemPlusJSONResponse) VisitDeleteMessageWaitingDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryMessageWaitingDataRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	Params QueryMessageWaitingDataParams
}

type QueryMessageWaitingDataResponseObject interface {
	VisitQueryMessageWaitingDataResponse(w http.ResponseWriter) error
}

type QueryMessageWaitingData200JSONResponse MessageWaitingData

func (response QueryMessageWaitingData200JSONResponse) VisitQueryMessageWaitingDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QueryMessageWaitingDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryMessageWaitingDatadefaultApplicationProblemPlusJSONResponse) VisitQueryMessageWaitingDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifyMessageWaitingDataRequestObject struct {
	UeId externalRef2.VarUeId `json:"ueId"`
	Body *ModifyMessageWaitingDataApplicationJSONPatchPlusJSONRequestBody
}

type ModifyMessageWaitingDataResponseObject interface {
	VisitModifyMessageWaitingDataResponse(w http.ResponseWriter) error
}

type ModifyMessageWaitingData204Response struct {
}

func (response ModifyMessageWaitingData204Response) VisitModifyMessageWaitingDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ModifyMessageWaitingData403ApplicationProblemPlusJSONResponse struct {
	externalRef2.N403ApplicationProblemPlusJSONResponse
}

func (response ModifyMessageWaitingData403ApplicationProblemPlusJSONResponse) VisitModifyMessageWaitingDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ModifyMessageWaitingData404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response ModifyMessageWaitingData404ApplicationProblemPlusJSONResponse) VisitModifyMessageWaitingDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ModifyMessageWaitingDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response ModifyMessageWaitingDatadefaultApplicationProblemPlusJSONResponse) VisitModifyMessageWaitingDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateMessageWaitingDataRequestObject struct {
	UeId externalRef2.VarUeId `json:"ueId"`
	Body *CreateMessageWaitingDataJSONRequestBody
}

type CreateMessageWaitingDataResponseObject interface {
	VisitCreateMessageWaitingDataResponse(w http.ResponseWriter) error
}

type CreateMessageWaitingData204Response struct {
}

func (response CreateMessageWaitingData204Response) VisitCreateMessageWaitingDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateMessageWaitingDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response CreateMessageWaitingDatadefaultApplicationProblemPlusJSONResponse) VisitCreateMessageWaitingDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerysdmsubscriptionsRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	Params QuerysdmsubscriptionsParams
}

type QuerysdmsubscriptionsResponseObject interface {
	VisitQuerysdmsubscriptionsResponse(w http.ResponseWriter) error
}

type Querysdmsubscriptions200JSONResponse []SdmSubscription

func (response Querysdmsubscriptions200JSONResponse) VisitQuerysdmsubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QuerysdmsubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QuerysdmsubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitQuerysdmsubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateSdmSubscriptionsRequestObject struct {
	UeId externalRef2.VarUeId `json:"ueId"`
	Body *CreateSdmSubscriptionsJSONRequestBody
}

type CreateSdmSubscriptionsResponseObject interface {
	VisitCreateSdmSubscriptionsResponse(w http.ResponseWriter) error
}

type CreateSdmSubscriptions201ResponseHeaders struct {
	Location string
}

type CreateSdmSubscriptions201JSONResponse struct {
	Body    SdmSubscription
	Headers CreateSdmSubscriptions201ResponseHeaders
}

func (response CreateSdmSubscriptions201JSONResponse) VisitCreateSdmSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateSdmSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response CreateSdmSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitCreateSdmSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RemovesdmSubscriptionsRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
}

type RemovesdmSubscriptionsResponseObject interface {
	VisitRemovesdmSubscriptionsResponse(w http.ResponseWriter) error
}

type RemovesdmSubscriptions204Response struct {
}

func (response RemovesdmSubscriptions204Response) VisitRemovesdmSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RemovesdmSubscriptions404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response RemovesdmSubscriptions404ApplicationProblemPlusJSONResponse) VisitRemovesdmSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RemovesdmSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response RemovesdmSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitRemovesdmSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerysdmSubscriptionRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
}

type QuerysdmSubscriptionResponseObject interface {
	VisitQuerysdmSubscriptionResponse(w http.ResponseWriter) error
}

type QuerysdmSubscription200JSONResponse []SdmSubscription

func (response QuerysdmSubscription200JSONResponse) VisitQuerysdmSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QuerysdmSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QuerysdmSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitQuerysdmSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifysdmSubscriptionRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
	Params ModifysdmSubscriptionParams
	Body   *ModifysdmSubscriptionApplicationJSONPatchPlusJSONRequestBody
}

type ModifysdmSubscriptionResponseObject interface {
	VisitModifysdmSubscriptionResponse(w http.ResponseWriter) error
}

type ModifysdmSubscription200JSONResponse externalRef2.PatchResult

func (response ModifysdmSubscription200JSONResponse) VisitModifysdmSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModifysdmSubscription204Response struct {
}

func (response ModifysdmSubscription204Response) VisitModifysdmSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ModifysdmSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef2.N403ApplicationProblemPlusJSONResponse
}

func (response ModifysdmSubscription403ApplicationProblemPlusJSONResponse) VisitModifysdmSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ModifysdmSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response ModifysdmSubscription404ApplicationProblemPlusJSONResponse) VisitModifysdmSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ModifysdmSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response ModifysdmSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitModifysdmSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdatesdmsubscriptionsRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
	Body   *UpdatesdmsubscriptionsJSONRequestBody
}

type UpdatesdmsubscriptionsResponseObject interface {
	VisitUpdatesdmsubscriptionsResponse(w http.ResponseWriter) error
}

type Updatesdmsubscriptions204Response struct {
}

func (response Updatesdmsubscriptions204Response) VisitUpdatesdmsubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Updatesdmsubscriptions404ApplicationProblemPlusJSONResponse externalRef2.ProblemDetails

func (response Updatesdmsubscriptions404ApplicationProblemPlusJSONResponse) VisitUpdatesdmsubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdatesdmsubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response UpdatesdmsubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitUpdatesdmsubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RemoveHssSDMSubscriptionsInfoRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
}

type RemoveHssSDMSubscriptionsInfoResponseObject interface {
	VisitRemoveHssSDMSubscriptionsInfoResponse(w http.ResponseWriter) error
}

type RemoveHssSDMSubscriptionsInfo204Response struct {
}

func (response RemoveHssSDMSubscriptionsInfo204Response) VisitRemoveHssSDMSubscriptionsInfoResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RemoveHssSDMSubscriptionsInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response RemoveHssSDMSubscriptionsInfodefaultApplicationProblemPlusJSONResponse) VisitRemoveHssSDMSubscriptionsInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetHssSDMSubscriptionInfoRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
}

type GetHssSDMSubscriptionInfoResponseObject interface {
	VisitGetHssSDMSubscriptionInfoResponse(w http.ResponseWriter) error
}

type GetHssSDMSubscriptionInfo200JSONResponse SmfSubscriptionInfo

func (response GetHssSDMSubscriptionInfo200JSONResponse) VisitGetHssSDMSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHssSDMSubscriptionInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetHssSDMSubscriptionInfodefaultApplicationProblemPlusJSONResponse) VisitGetHssSDMSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifyHssSDMSubscriptionInfoRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
	Params ModifyHssSDMSubscriptionInfoParams
	Body   *ModifyHssSDMSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody
}

type ModifyHssSDMSubscriptionInfoResponseObject interface {
	VisitModifyHssSDMSubscriptionInfoResponse(w http.ResponseWriter) error
}

type ModifyHssSDMSubscriptionInfo200JSONResponse externalRef2.PatchResult

func (response ModifyHssSDMSubscriptionInfo200JSONResponse) VisitModifyHssSDMSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModifyHssSDMSubscriptionInfo204Response struct {
}

func (response ModifyHssSDMSubscriptionInfo204Response) VisitModifyHssSDMSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ModifyHssSDMSubscriptionInfo403ApplicationProblemPlusJSONResponse externalRef2.ProblemDetails

func (response ModifyHssSDMSubscriptionInfo403ApplicationProblemPlusJSONResponse) VisitModifyHssSDMSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ModifyHssSDMSubscriptionInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response ModifyHssSDMSubscriptionInfodefaultApplicationProblemPlusJSONResponse) VisitModifyHssSDMSubscriptionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateHSSSDMSubscriptionsRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	SubsId string               `json:"subsId"`
	Body   *CreateHSSSDMSubscriptionsJSONRequestBody
}

type CreateHSSSDMSubscriptionsResponseObject interface {
	VisitCreateHSSSDMSubscriptionsResponse(w http.ResponseWriter) error
}

type CreateHSSSDMSubscriptions204Response struct {
}

func (response CreateHSSSDMSubscriptions204Response) VisitCreateHSSSDMSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateHSSSDMSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response CreateHSSSDMSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitCreateHSSSDMSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySmfRegListRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	Params QuerySmfRegListParams
}

type QuerySmfRegListResponseObject interface {
	VisitQuerySmfRegListResponse(w http.ResponseWriter) error
}

type QuerySmfRegList200JSONResponse SmfRegList

func (response QuerySmfRegList200JSONResponse) VisitQuerySmfRegListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QuerySmfRegListdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QuerySmfRegListdefaultApplicationProblemPlusJSONResponse) VisitQuerySmfRegListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteSmfRegistrationRequestObject struct {
	UeId         externalRef2.VarUeId      `json:"ueId"`
	PduSessionId externalRef2.PduSessionId `json:"pduSessionId"`
}

type DeleteSmfRegistrationResponseObject interface {
	VisitDeleteSmfRegistrationResponse(w http.ResponseWriter) error
}

type DeleteSmfRegistration204Response struct {
}

func (response DeleteSmfRegistration204Response) VisitDeleteSmfRegistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteSmfRegistrationdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response DeleteSmfRegistrationdefaultApplicationProblemPlusJSONResponse) VisitDeleteSmfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySmfRegistrationRequestObject struct {
	UeId         externalRef2.VarUeId      `json:"ueId"`
	PduSessionId externalRef2.PduSessionId `json:"pduSessionId"`
	Params       QuerySmfRegistrationParams
}

type QuerySmfRegistrationResponseObject interface {
	VisitQuerySmfRegistrationResponse(w http.ResponseWriter) error
}

type QuerySmfRegistration200JSONResponse SmfRegistration

func (response QuerySmfRegistration200JSONResponse) VisitQuerySmfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QuerySmfRegistrationdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QuerySmfRegistrationdefaultApplicationProblemPlusJSONResponse) VisitQuerySmfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrUpdateSmfRegistrationRequestObject struct {
	UeId         externalRef2.VarUeId      `json:"ueId"`
	PduSessionId externalRef2.PduSessionId `json:"pduSessionId"`
	Body         *CreateOrUpdateSmfRegistrationJSONRequestBody
}

type CreateOrUpdateSmfRegistrationResponseObject interface {
	VisitCreateOrUpdateSmfRegistrationResponse(w http.ResponseWriter) error
}

type CreateOrUpdateSmfRegistration201ResponseHeaders struct {
	Location string
}

type CreateOrUpdateSmfRegistration201JSONResponse struct {
	Body    SmfRegistration
	Headers CreateOrUpdateSmfRegistration201ResponseHeaders
}

func (response CreateOrUpdateSmfRegistration201JSONResponse) VisitCreateOrUpdateSmfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrUpdateSmfRegistration204Response struct {
}

func (response CreateOrUpdateSmfRegistration204Response) VisitCreateOrUpdateSmfRegistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateOrUpdateSmfRegistrationdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response CreateOrUpdateSmfRegistrationdefaultApplicationProblemPlusJSONResponse) VisitCreateOrUpdateSmfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteSmsfContext3gppRequestObject struct {
	UeId externalRef2.VarUeId `json:"ueId"`
}

type DeleteSmsfContext3gppResponseObject interface {
	VisitDeleteSmsfContext3gppResponse(w http.ResponseWriter) error
}

type DeleteSmsfContext3gpp204Response struct {
}

func (response DeleteSmsfContext3gpp204Response) VisitDeleteSmsfContext3gppResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteSmsfContext3gppdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response DeleteSmsfContext3gppdefaultApplicationProblemPlusJSONResponse) VisitDeleteSmsfContext3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySmsfContext3gppRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	Params QuerySmsfContext3gppParams
}

type QuerySmsfContext3gppResponseObject interface {
	VisitQuerySmsfContext3gppResponse(w http.ResponseWriter) error
}

type QuerySmsfContext3gpp200JSONResponse SmsfRegistration

func (response QuerySmsfContext3gpp200JSONResponse) VisitQuerySmsfContext3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QuerySmsfContext3gppdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QuerySmsfContext3gppdefaultApplicationProblemPlusJSONResponse) VisitQuerySmsfContext3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateSmsfContext3gppRequestObject struct {
	UeId externalRef2.VarUeId `json:"ueId"`
	Body *CreateSmsfContext3gppJSONRequestBody
}

type CreateSmsfContext3gppResponseObject interface {
	VisitCreateSmsfContext3gppResponse(w http.ResponseWriter) error
}

type CreateSmsfContext3gpp201ResponseHeaders struct {
	Location string
}

type CreateSmsfContext3gpp201JSONResponse struct {
	Body    SmsfRegistration
	Headers CreateSmsfContext3gpp201ResponseHeaders
}

func (response CreateSmsfContext3gpp201JSONResponse) VisitCreateSmsfContext3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateSmsfContext3gpp204Response struct {
}

func (response CreateSmsfContext3gpp204Response) VisitCreateSmsfContext3gppResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateSmsfContext3gppdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response CreateSmsfContext3gppdefaultApplicationProblemPlusJSONResponse) VisitCreateSmsfContext3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteSmsfContextNon3gppRequestObject struct {
	UeId externalRef2.VarUeId `json:"ueId"`
}

type DeleteSmsfContextNon3gppResponseObject interface {
	VisitDeleteSmsfContextNon3gppResponse(w http.ResponseWriter) error
}

type DeleteSmsfContextNon3gpp204Response struct {
}

func (response DeleteSmsfContextNon3gpp204Response) VisitDeleteSmsfContextNon3gppResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteSmsfContextNon3gppdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response DeleteSmsfContextNon3gppdefaultApplicationProblemPlusJSONResponse) VisitDeleteSmsfContextNon3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySmsfContextNon3gppRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	Params QuerySmsfContextNon3gppParams
}

type QuerySmsfContextNon3gppResponseObject interface {
	VisitQuerySmsfContextNon3gppResponse(w http.ResponseWriter) error
}

type QuerySmsfContextNon3gpp200JSONResponse SmsfRegistration

func (response QuerySmsfContextNon3gpp200JSONResponse) VisitQuerySmsfContextNon3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QuerySmsfContextNon3gppdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QuerySmsfContextNon3gppdefaultApplicationProblemPlusJSONResponse) VisitQuerySmsfContextNon3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateSmsfContextNon3gppRequestObject struct {
	UeId externalRef2.VarUeId `json:"ueId"`
	Body *CreateSmsfContextNon3gppJSONRequestBody
}

type CreateSmsfContextNon3gppResponseObject interface {
	VisitCreateSmsfContextNon3gppResponse(w http.ResponseWriter) error
}

type CreateSmsfContextNon3gpp201ResponseHeaders struct {
	Location string
}

type CreateSmsfContextNon3gpp201JSONResponse struct {
	Body    SmsfRegistration
	Headers CreateSmsfContextNon3gpp201ResponseHeaders
}

func (response CreateSmsfContextNon3gpp201JSONResponse) VisitCreateSmsfContextNon3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateSmsfContextNon3gpp204Response struct {
}

func (response CreateSmsfContextNon3gpp204Response) VisitCreateSmsfContextNon3gppResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateSmsfContextNon3gppdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response CreateSmsfContextNon3gppdefaultApplicationProblemPlusJSONResponse) VisitCreateSmsfContextNon3gppResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryCoverageRestrictionDataRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	Params QueryCoverageRestrictionDataParams
}

type QueryCoverageRestrictionDataResponseObject interface {
	VisitQueryCoverageRestrictionDataResponse(w http.ResponseWriter) error
}

type QueryCoverageRestrictionData200ResponseHeaders struct {
	CacheControl string
	ETag         string
	LastModified string
}

type QueryCoverageRestrictionData200JSONResponse struct {
	Body    EnhancedCoverageRestrictionData
	Headers QueryCoverageRestrictionData200ResponseHeaders
}

func (response QueryCoverageRestrictionData200JSONResponse) VisitQueryCoverageRestrictionDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryCoverageRestrictionDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryCoverageRestrictionDatadefaultApplicationProblemPlusJSONResponse) VisitQueryCoverageRestrictionDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryEEDataRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	Params QueryEEDataParams
}

type QueryEEDataResponseObject interface {
	VisitQueryEEDataResponse(w http.ResponseWriter) error
}

type QueryEEData200JSONResponse EeProfileData

func (response QueryEEData200JSONResponse) VisitQueryEEDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QueryEEDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryEEDatadefaultApplicationProblemPlusJSONResponse) VisitQueryEEDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetIdentityDataRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	Params GetIdentityDataParams
}

type GetIdentityDataResponseObject interface {
	VisitGetIdentityDataResponse(w http.ResponseWriter) error
}

type GetIdentityData200ResponseHeaders struct {
	CacheControl string
	ETag         string
	LastModified string
}

type GetIdentityData200JSONResponse struct {
	Body    IdentityData
	Headers GetIdentityData200ResponseHeaders
}

func (response GetIdentityData200JSONResponse) VisitGetIdentityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetIdentityDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetIdentityDatadefaultApplicationProblemPlusJSONResponse) VisitGetIdentityDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryLcsMoDataRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	Params QueryLcsMoDataParams
}

type QueryLcsMoDataResponseObject interface {
	VisitQueryLcsMoDataResponse(w http.ResponseWriter) error
}

type QueryLcsMoData200ResponseHeaders struct {
	CacheControl string
	ETag         string
	LastModified string
}

type QueryLcsMoData200JSONResponse struct {
	Body    LcsMoData
	Headers QueryLcsMoData200ResponseHeaders
}

func (response QueryLcsMoData200JSONResponse) VisitQueryLcsMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryLcsMoDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryLcsMoDatadefaultApplicationProblemPlusJSONResponse) VisitQueryLcsMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryLcsPrivacyDataRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	Params QueryLcsPrivacyDataParams
}

type QueryLcsPrivacyDataResponseObject interface {
	VisitQueryLcsPrivacyDataResponse(w http.ResponseWriter) error
}

type QueryLcsPrivacyData200ResponseHeaders struct {
	CacheControl string
	ETag         string
	LastModified string
}

type QueryLcsPrivacyData200JSONResponse struct {
	Body    LcsPrivacyData
	Headers QueryLcsPrivacyData200ResponseHeaders
}

func (response QueryLcsPrivacyData200JSONResponse) VisitQueryLcsPrivacyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryLcsPrivacyDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryLcsPrivacyDatadefaultApplicationProblemPlusJSONResponse) VisitQueryLcsPrivacyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetNiddAuDataRequestObject struct {
	UeId   string `json:"ueId"`
	Params GetNiddAuDataParams
}

type GetNiddAuDataResponseObject interface {
	VisitGetNiddAuDataResponse(w http.ResponseWriter) error
}

type GetNiddAuData200ResponseHeaders struct {
	CacheControl string
	ETag         string
	LastModified string
}

type GetNiddAuData200JSONResponse struct {
	Body    AuthorizationData
	Headers GetNiddAuData200ResponseHeaders
}

func (response GetNiddAuData200JSONResponse) VisitGetNiddAuDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetNiddAuDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetNiddAuDatadefaultApplicationProblemPlusJSONResponse) VisitGetNiddAuDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetOdbDataRequestObject struct {
	UeId externalRef2.VarUeId `json:"ueId"`
}

type GetOdbDataResponseObject interface {
	VisitGetOdbDataResponse(w http.ResponseWriter) error
}

type GetOdbData200JSONResponse externalRef2.OdbData

func (response GetOdbData200JSONResponse) VisitGetOdbDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOdbDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetOdbDatadefaultApplicationProblemPlusJSONResponse) VisitGetOdbDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryOperSpecDataRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	Params QueryOperSpecDataParams
}

type QueryOperSpecDataResponseObject interface {
	VisitQueryOperSpecDataResponse(w http.ResponseWriter) error
}

type QueryOperSpecData200ResponseHeaders struct {
	CacheControl string
	ETag         string
	LastModified string
}

type QueryOperSpecData200JSONResponse struct {
	Body    map[string]OperatorSpecificDataContainer
	Headers QueryOperSpecData200ResponseHeaders
}

func (response QueryOperSpecData200JSONResponse) VisitQueryOperSpecDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryOperSpecDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryOperSpecDatadefaultApplicationProblemPlusJSONResponse) VisitQueryOperSpecDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifyOperSpecDataRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	Params ModifyOperSpecDataParams
	Body   *ModifyOperSpecDataApplicationJSONPatchPlusJSONRequestBody
}

type ModifyOperSpecDataResponseObject interface {
	VisitModifyOperSpecDataResponse(w http.ResponseWriter) error
}

type ModifyOperSpecData200JSONResponse externalRef2.PatchResult

func (response ModifyOperSpecData200JSONResponse) VisitModifyOperSpecDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModifyOperSpecData204Response struct {
}

func (response ModifyOperSpecData204Response) VisitModifyOperSpecDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ModifyOperSpecData403ApplicationProblemPlusJSONResponse externalRef2.ProblemDetails

func (response ModifyOperSpecData403ApplicationProblemPlusJSONResponse) VisitModifyOperSpecDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ModifyOperSpecDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response ModifyOperSpecDatadefaultApplicationProblemPlusJSONResponse) VisitModifyOperSpecDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetppDataRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	Params GetppDataParams
}

type GetppDataResponseObject interface {
	VisitGetppDataResponse(w http.ResponseWriter) error
}

type GetppData200ResponseHeaders struct {
	CacheControl string
	ETag         string
	LastModified string
}

type GetppData200JSONResponse struct {
	Body    PpData
	Headers GetppData200ResponseHeaders
}

func (response GetppData200JSONResponse) VisitGetppDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetppData403ApplicationProblemPlusJSONResponse externalRef2.ProblemDetails

func (response GetppData403ApplicationProblemPlusJSONResponse) VisitGetppDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetppDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetppDatadefaultApplicationProblemPlusJSONResponse) VisitGetppDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifyPpDataRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	Params ModifyPpDataParams
	Body   *ModifyPpDataApplicationJSONPatchPlusJSONRequestBody
}

type ModifyPpDataResponseObject interface {
	VisitModifyPpDataResponse(w http.ResponseWriter) error
}

type ModifyPpData200JSONResponse externalRef2.PatchResult

func (response ModifyPpData200JSONResponse) VisitModifyPpDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModifyPpData204Response struct {
}

func (response ModifyPpData204Response) VisitModifyPpDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ModifyPpData403ApplicationProblemPlusJSONResponse externalRef2.ProblemDetails

func (response ModifyPpData403ApplicationProblemPlusJSONResponse) VisitModifyPpDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ModifyPpDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response ModifyPpDatadefaultApplicationProblemPlusJSONResponse) VisitModifyPpDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryPPDataRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	Params QueryPPDataParams
}

type QueryPPDataResponseObject interface {
	VisitQueryPPDataResponse(w http.ResponseWriter) error
}

type QueryPPData200JSONResponse PpProfileData

func (response QueryPPData200JSONResponse) VisitQueryPPDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QueryPPDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryPPDatadefaultApplicationProblemPlusJSONResponse) VisitQueryPPDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryAuthSoRRequestObject struct {
	UeId   externalRef2.Supi `json:"ueId"`
	Params QueryAuthSoRParams
}

type QueryAuthSoRResponseObject interface {
	VisitQueryAuthSoRResponse(w http.ResponseWriter) error
}

type QueryAuthSoR200JSONResponse SorData

func (response QueryAuthSoR200JSONResponse) VisitQueryAuthSoRResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QueryAuthSoRdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryAuthSoRdefaultApplicationProblemPlusJSONResponse) VisitQueryAuthSoRResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateAuthenticationSoRRequestObject struct {
	UeId   externalRef2.Supi `json:"ueId"`
	Params CreateAuthenticationSoRParams
	Body   *CreateAuthenticationSoRJSONRequestBody
}

type CreateAuthenticationSoRResponseObject interface {
	VisitCreateAuthenticationSoRResponse(w http.ResponseWriter) error
}

type CreateAuthenticationSoR204Response struct {
}

func (response CreateAuthenticationSoR204Response) VisitCreateAuthenticationSoRResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateAuthenticationSoRdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response CreateAuthenticationSoRdefaultApplicationProblemPlusJSONResponse) VisitCreateAuthenticationSoRResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryCagAckRequestObject struct {
	UeId   externalRef2.Supi `json:"ueId"`
	Params QueryCagAckParams
}

type QueryCagAckResponseObject interface {
	VisitQueryCagAckResponse(w http.ResponseWriter) error
}

type QueryCagAck200JSONResponse CagAckData

func (response QueryCagAck200JSONResponse) VisitQueryCagAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QueryCagAckdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryCagAckdefaultApplicationProblemPlusJSONResponse) VisitQueryCagAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateCagUpdateAckRequestObject struct {
	UeId   externalRef2.Supi `json:"ueId"`
	Params CreateCagUpdateAckParams
	Body   *CreateCagUpdateAckJSONRequestBody
}

type CreateCagUpdateAckResponseObject interface {
	VisitCreateCagUpdateAckResponse(w http.ResponseWriter) error
}

type CreateCagUpdateAck204Response struct {
}

func (response CreateCagUpdateAck204Response) VisitCreateCagUpdateAckResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateCagUpdateAckdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response CreateCagUpdateAckdefaultApplicationProblemPlusJSONResponse) VisitCreateCagUpdateAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryNssaiAckRequestObject struct {
	UeId   externalRef2.Supi `json:"ueId"`
	Params QueryNssaiAckParams
}

type QueryNssaiAckResponseObject interface {
	VisitQueryNssaiAckResponse(w http.ResponseWriter) error
}

type QueryNssaiAck200JSONResponse NssaiAckData

func (response QueryNssaiAck200JSONResponse) VisitQueryNssaiAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QueryNssaiAckdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryNssaiAckdefaultApplicationProblemPlusJSONResponse) VisitQueryNssaiAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrUpdateNssaiAckRequestObject struct {
	UeId   externalRef2.Supi `json:"ueId"`
	Params CreateOrUpdateNssaiAckParams
	Body   *CreateOrUpdateNssaiAckJSONRequestBody
}

type CreateOrUpdateNssaiAckResponseObject interface {
	VisitCreateOrUpdateNssaiAckResponse(w http.ResponseWriter) error
}

type CreateOrUpdateNssaiAck204Response struct {
}

func (response CreateOrUpdateNssaiAck204Response) VisitCreateOrUpdateNssaiAckResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateOrUpdateNssaiAckdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response CreateOrUpdateNssaiAckdefaultApplicationProblemPlusJSONResponse) VisitCreateOrUpdateNssaiAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryAuthUPURequestObject struct {
	UeId   externalRef2.Supi `json:"ueId"`
	Params QueryAuthUPUParams
}

type QueryAuthUPUResponseObject interface {
	VisitQueryAuthUPUResponse(w http.ResponseWriter) error
}

type QueryAuthUPU200JSONResponse UpuData

func (response QueryAuthUPU200JSONResponse) VisitQueryAuthUPUResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QueryAuthUPUdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryAuthUPUdefaultApplicationProblemPlusJSONResponse) VisitQueryAuthUPUResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateAuthenticationUPURequestObject struct {
	UeId   externalRef2.Supi `json:"ueId"`
	Params CreateAuthenticationUPUParams
	Body   *CreateAuthenticationUPUJSONRequestBody
}

type CreateAuthenticationUPUResponseObject interface {
	VisitCreateAuthenticationUPUResponse(w http.ResponseWriter) error
}

type CreateAuthenticationUPU204Response struct {
}

func (response CreateAuthenticationUPU204Response) VisitCreateAuthenticationUPUResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateAuthenticationUPUdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response CreateAuthenticationUPUdefaultApplicationProblemPlusJSONResponse) VisitCreateAuthenticationUPUResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryV2xDataRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	Params QueryV2xDataParams
}

type QueryV2xDataResponseObject interface {
	VisitQueryV2xDataResponse(w http.ResponseWriter) error
}

type QueryV2xData200ResponseHeaders struct {
	CacheControl string
	ETag         string
	LastModified string
}

type QueryV2xData200JSONResponse struct {
	Body    V2xSubscriptionData
	Headers QueryV2xData200ResponseHeaders
}

func (response QueryV2xData200JSONResponse) VisitQueryV2xDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryV2xDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryV2xDatadefaultApplicationProblemPlusJSONResponse) VisitQueryV2xDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryProvisionedDataRequestObject struct {
	UeId          externalRef2.VarUeId `json:"ueId"`
	ServingPlmnId VarPlmnId            `json:"servingPlmnId"`
	Params        QueryProvisionedDataParams
}

type QueryProvisionedDataResponseObject interface {
	VisitQueryProvisionedDataResponse(w http.ResponseWriter) error
}

type QueryProvisionedData200JSONResponse ProvisionedDataSets

func (response QueryProvisionedData200JSONResponse) VisitQueryProvisionedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QueryProvisionedDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryProvisionedDatadefaultApplicationProblemPlusJSONResponse) VisitQueryProvisionedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryAmDataRequestObject struct {
	UeId          externalRef2.VarUeId `json:"ueId"`
	ServingPlmnId VarPlmnId            `json:"servingPlmnId"`
	Params        QueryAmDataParams
}

type QueryAmDataResponseObject interface {
	VisitQueryAmDataResponse(w http.ResponseWriter) error
}

type QueryAmData200ResponseHeaders struct {
	CacheControl string
	ETag         string
	LastModified string
}

type QueryAmData200JSONResponse struct {
	Body    AccessAndMobilitySubscriptionData
	Headers QueryAmData200ResponseHeaders
}

func (response QueryAmData200JSONResponse) VisitQueryAmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryAmDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryAmDatadefaultApplicationProblemPlusJSONResponse) VisitQueryAmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryLcsBcaDataRequestObject struct {
	UeId          externalRef2.VarUeId `json:"ueId"`
	ServingPlmnId VarPlmnId            `json:"servingPlmnId"`
	Params        QueryLcsBcaDataParams
}

type QueryLcsBcaDataResponseObject interface {
	VisitQueryLcsBcaDataResponse(w http.ResponseWriter) error
}

type QueryLcsBcaData200ResponseHeaders struct {
	CacheControl string
	ETag         string
	LastModified string
}

type QueryLcsBcaData200JSONResponse struct {
	Body    LcsBroadcastAssistanceTypesData
	Headers QueryLcsBcaData200ResponseHeaders
}

func (response QueryLcsBcaData200JSONResponse) VisitQueryLcsBcaDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryLcsBcaDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryLcsBcaDatadefaultApplicationProblemPlusJSONResponse) VisitQueryLcsBcaDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySmDataRequestObject struct {
	UeId          externalRef2.VarUeId `json:"ueId"`
	ServingPlmnId VarPlmnId            `json:"servingPlmnId"`
	Params        QuerySmDataParams
}

type QuerySmDataResponseObject interface {
	VisitQuerySmDataResponse(w http.ResponseWriter) error
}

type QuerySmData200ResponseHeaders struct {
	CacheControl string
	ETag         string
	LastModified string
}

type QuerySmData200JSONResponse struct {
	Body    []SessionManagementSubscriptionData
	Headers QuerySmData200ResponseHeaders
}

func (response QuerySmData200JSONResponse) VisitQuerySmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySmDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QuerySmDatadefaultApplicationProblemPlusJSONResponse) VisitQuerySmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySmfSelectDataRequestObject struct {
	UeId          externalRef2.VarUeId `json:"ueId"`
	ServingPlmnId VarPlmnId            `json:"servingPlmnId"`
	Params        QuerySmfSelectDataParams
}

type QuerySmfSelectDataResponseObject interface {
	VisitQuerySmfSelectDataResponse(w http.ResponseWriter) error
}

type QuerySmfSelectData200ResponseHeaders struct {
	CacheControl string
	ETag         string
	LastModified string
}

type QuerySmfSelectData200JSONResponse struct {
	Body    SmfSelectionSubscriptionData
	Headers QuerySmfSelectData200ResponseHeaders
}

func (response QuerySmfSelectData200JSONResponse) VisitQuerySmfSelectDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySmfSelectDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QuerySmfSelectDatadefaultApplicationProblemPlusJSONResponse) VisitQuerySmfSelectDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySmsDataRequestObject struct {
	UeId          externalRef2.VarUeId `json:"ueId"`
	ServingPlmnId VarPlmnId            `json:"servingPlmnId"`
	Params        QuerySmsDataParams
}

type QuerySmsDataResponseObject interface {
	VisitQuerySmsDataResponse(w http.ResponseWriter) error
}

type QuerySmsData200ResponseHeaders struct {
	CacheControl string
	ETag         string
	LastModified string
}

type QuerySmsData200JSONResponse struct {
	Body    SmsSubscriptionData
	Headers QuerySmsData200ResponseHeaders
}

func (response QuerySmsData200JSONResponse) VisitQuerySmsDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySmsDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QuerySmsDatadefaultApplicationProblemPlusJSONResponse) VisitQuerySmsDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySmsMngDataRequestObject struct {
	UeId          externalRef2.VarUeId `json:"ueId"`
	ServingPlmnId VarPlmnId            `json:"servingPlmnId"`
	Params        QuerySmsMngDataParams
}

type QuerySmsMngDataResponseObject interface {
	VisitQuerySmsMngDataResponse(w http.ResponseWriter) error
}

type QuerySmsMngData200ResponseHeaders struct {
	CacheControl string
	ETag         string
	LastModified string
}

type QuerySmsMngData200JSONResponse struct {
	Body    SmsManagementSubscriptionData
	Headers QuerySmsMngData200ResponseHeaders
}

func (response QuerySmsMngData200JSONResponse) VisitQuerySmsMngDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type QuerySmsMngDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QuerySmsMngDatadefaultApplicationProblemPlusJSONResponse) VisitQuerySmsMngDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryTraceDataRequestObject struct {
	UeId          externalRef2.VarUeId `json:"ueId"`
	ServingPlmnId VarPlmnId            `json:"servingPlmnId"`
	Params        QueryTraceDataParams
}

type QueryTraceDataResponseObject interface {
	VisitQueryTraceDataResponse(w http.ResponseWriter) error
}

type QueryTraceData200ResponseHeaders struct {
	CacheControl string
	ETag         string
	LastModified string
}

type QueryTraceData200JSONResponse struct {
	Body    externalRef2.TraceData
	Headers QueryTraceData200ResponseHeaders
}

func (response QueryTraceData200JSONResponse) VisitQueryTraceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("ETag", fmt.Sprint(response.Headers.ETag))
	w.Header().Set("Last-Modified", fmt.Sprint(response.Headers.LastModified))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type QueryTraceDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response QueryTraceDatadefaultApplicationProblemPlusJSONResponse) VisitQueryTraceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Retrieves the data of a 5G VN Group
	// (GET /subscription-data/group-data/5g-vn-groups)
	Query5GVnGroup(ctx context.Context, request Query5GVnGroupRequestObject) (Query5GVnGroupResponseObject, error)
	// Retrieves the data of 5G VN Group
	// (GET /subscription-data/group-data/5g-vn-groups/internal)
	Query5GVnGroupInternal(ctx context.Context, request Query5GVnGroupInternalRequestObject) (Query5GVnGroupInternalResponseObject, error)
	// Retrieves the parameter provision profile data for 5G VN Group
	// (GET /subscription-data/group-data/5g-vn-groups/pp-profile-data)
	Query5GVNGroupPPData(ctx context.Context, request Query5GVNGroupPPDataRequestObject) (Query5GVNGroupPPDataResponseObject, error)
	// Deletes the 5GVnGroup
	// (DELETE /subscription-data/group-data/5g-vn-groups/{externalGroupId})
	Delete5GVnGroup(ctx context.Context, request Delete5GVnGroupRequestObject) (Delete5GVnGroupResponseObject, error)
	// Retrieve a 5GVnGroup configuration
	// (GET /subscription-data/group-data/5g-vn-groups/{externalGroupId})
	Get5GVnGroupConfiguration(ctx context.Context, request Get5GVnGroupConfigurationRequestObject) (Get5GVnGroupConfigurationResponseObject, error)
	// modify the 5GVnGroup
	// (PATCH /subscription-data/group-data/5g-vn-groups/{externalGroupId})
	Modify5GVnGroup(ctx context.Context, request Modify5GVnGroupRequestObject) (Modify5GVnGroupResponseObject, error)
	// Create an individual 5G VN Grouop
	// (PUT /subscription-data/group-data/5g-vn-groups/{externalGroupId})
	Create5GVnGroup(ctx context.Context, request Create5GVnGroupRequestObject) (Create5GVnGroupResponseObject, error)
	// Mapping of Group Identifiers
	// (GET /subscription-data/group-data/group-identifiers)
	GetGroupIdentifiers(ctx context.Context, request GetGroupIdentifiersRequestObject) (GetGroupIdentifiersResponseObject, error)
	// Retrieves the ee profile data profile data of a group or anyUE
	// (GET /subscription-data/group-data/{ueGroupId}/ee-profile-data)
	QueryGroupEEData(ctx context.Context, request QueryGroupEEDataRequestObject) (QueryGroupEEDataResponseObject, error)
	// Retrieves the ee subscriptions of a group of UEs or any UE
	// (GET /subscription-data/group-data/{ueGroupId}/ee-subscriptions)
	QueryEeGroupSubscriptions(ctx context.Context, request QueryEeGroupSubscriptionsRequestObject) (QueryEeGroupSubscriptionsResponseObject, error)
	// Create individual EE subscription for a group of UEs or any UE
	// (POST /subscription-data/group-data/{ueGroupId}/ee-subscriptions)
	CreateEeGroupSubscriptions(ctx context.Context, request CreateEeGroupSubscriptionsRequestObject) (CreateEeGroupSubscriptionsResponseObject, error)
	// Deletes a eeSubscription for a group of UEs or any UE
	// (DELETE /subscription-data/group-data/{ueGroupId}/ee-subscriptions/{subsId})
	RemoveEeGroupSubscriptions(ctx context.Context, request RemoveEeGroupSubscriptionsRequestObject) (RemoveEeGroupSubscriptionsResponseObject, error)
	// Retrieve a individual eeSubscription for a group of UEs or any UE
	// (GET /subscription-data/group-data/{ueGroupId}/ee-subscriptions/{subsId})
	QueryEeGroupSubscription(ctx context.Context, request QueryEeGroupSubscriptionRequestObject) (QueryEeGroupSubscriptionResponseObject, error)
	// Modify an individual ee subscription for a group of a UEs
	// (PATCH /subscription-data/group-data/{ueGroupId}/ee-subscriptions/{subsId})
	ModifyEeGroupSubscription(ctx context.Context, request ModifyEeGroupSubscriptionRequestObject) (ModifyEeGroupSubscriptionResponseObject, error)
	// Update an individual ee subscription of a group of UEs or any UE
	// (PUT /subscription-data/group-data/{ueGroupId}/ee-subscriptions/{subsId})
	UpdateEeGroupSubscriptions(ctx context.Context, request UpdateEeGroupSubscriptionsRequestObject) (UpdateEeGroupSubscriptionsResponseObject, error)
	// retrieve shared data
	// (GET /subscription-data/shared-data)
	GetSharedData(ctx context.Context, request GetSharedDataRequestObject) (GetSharedDataResponseObject, error)
	// retrieve individual shared data
	// (GET /subscription-data/shared-data/{sharedDataId})
	GetIndividualSharedData(ctx context.Context, request GetIndividualSharedDataRequestObject) (GetIndividualSharedDataResponseObject, error)
	// Deletes subscriptions identified by a given ue-id parameter
	// (DELETE /subscription-data/subs-to-notify)
	RemoveMultipleSubscriptionDataSubscriptions(ctx context.Context, request RemoveMultipleSubscriptionDataSubscriptionsRequestObject) (RemoveMultipleSubscriptionDataSubscriptionsResponseObject, error)
	// Retrieves the list of subscriptions
	// (GET /subscription-data/subs-to-notify)
	QuerySubsToNotify(ctx context.Context, request QuerySubsToNotifyRequestObject) (QuerySubsToNotifyResponseObject, error)
	// Subscription data subscriptions
	// (POST /subscription-data/subs-to-notify)
	SubscriptionDataSubscriptions(ctx context.Context, request SubscriptionDataSubscriptionsRequestObject) (SubscriptionDataSubscriptionsResponseObject, error)
	// Deletes a subscriptionDataSubscriptions
	// (DELETE /subscription-data/subs-to-notify/{subsId})
	RemovesubscriptionDataSubscriptions(ctx context.Context, request RemovesubscriptionDataSubscriptionsRequestObject) (RemovesubscriptionDataSubscriptionsResponseObject, error)
	// Retrieves a individual subscriptionDataSubscription identified by subsId
	// (GET /subscription-data/subs-to-notify/{subsId})
	QuerySubscriptionDataSubscriptions(ctx context.Context, request QuerySubscriptionDataSubscriptionsRequestObject) (QuerySubscriptionDataSubscriptionsResponseObject, error)
	// Modify an individual subscriptionDataSubscription
	// (PATCH /subscription-data/subs-to-notify/{subsId})
	ModifysubscriptionDataSubscription(ctx context.Context, request ModifysubscriptionDataSubscriptionRequestObject) (ModifysubscriptionDataSubscriptionResponseObject, error)
	// To remove the Authentication Status of a UE
	// (DELETE /subscription-data/{ueId}/authentication-data/authentication-status)
	DeleteAuthenticationStatus(ctx context.Context, request DeleteAuthenticationStatusRequestObject) (DeleteAuthenticationStatusResponseObject, error)
	// Retrieves the Authentication Status of a UE
	// (GET /subscription-data/{ueId}/authentication-data/authentication-status)
	QueryAuthenticationStatus(ctx context.Context, request QueryAuthenticationStatusRequestObject) (QueryAuthenticationStatusResponseObject, error)
	// To store the Authentication Status data of a UE
	// (PUT /subscription-data/{ueId}/authentication-data/authentication-status)
	CreateAuthenticationStatus(ctx context.Context, request CreateAuthenticationStatusRequestObject) (CreateAuthenticationStatusResponseObject, error)
	// To remove the Individual Authentication Status of a UE
	// (DELETE /subscription-data/{ueId}/authentication-data/authentication-status/{servingNetworkName})
	DeleteIndividualAuthenticationStatus(ctx context.Context, request DeleteIndividualAuthenticationStatusRequestObject) (DeleteIndividualAuthenticationStatusResponseObject, error)
	// Retrieves the Individual Authentication Status of a UE
	// (GET /subscription-data/{ueId}/authentication-data/authentication-status/{servingNetworkName})
	QueryIndividualAuthenticationStatus(ctx context.Context, request QueryIndividualAuthenticationStatusRequestObject) (QueryIndividualAuthenticationStatusResponseObject, error)
	// To store the individual Authentication Status data of a UE
	// (PUT /subscription-data/{ueId}/authentication-data/authentication-status/{servingNetworkName})
	CreateIndividualAuthenticationStatus(ctx context.Context, request CreateIndividualAuthenticationStatusRequestObject) (CreateIndividualAuthenticationStatusResponseObject, error)
	// Retrieves the authentication subscription data of a UE
	// (GET /subscription-data/{ueId}/authentication-data/authentication-subscription)
	QueryAuthSubsData(ctx context.Context, request QueryAuthSubsDataRequestObject) (QueryAuthSubsDataResponseObject, error)
	// modify the authentication subscription data of a UE
	// (PATCH /subscription-data/{ueId}/authentication-data/authentication-subscription)
	ModifyAuthenticationSubscription(ctx context.Context, request ModifyAuthenticationSubscriptionRequestObject) (ModifyAuthenticationSubscriptionResponseObject, error)
	// Retrieve multiple context data sets of a UE
	// (GET /subscription-data/{ueId}/context-data)
	QueryContextData(ctx context.Context, request QueryContextDataRequestObject) (QueryContextDataResponseObject, error)
	// Retrieves the AMF context data of a UE using 3gpp access
	// (GET /subscription-data/{ueId}/context-data/amf-3gpp-access)
	QueryAmfContext3gpp(ctx context.Context, request QueryAmfContext3gppRequestObject) (QueryAmfContext3gppResponseObject, error)
	// To modify the AMF context data of a UE using 3gpp access in the UDR
	// (PATCH /subscription-data/{ueId}/context-data/amf-3gpp-access)
	AmfContext3gpp(ctx context.Context, request AmfContext3gppRequestObject) (AmfContext3gppResponseObject, error)
	// To store the AMF context data of a UE using 3gpp access in the UDR
	// (PUT /subscription-data/{ueId}/context-data/amf-3gpp-access)
	CreateAmfContext3gpp(ctx context.Context, request CreateAmfContext3gppRequestObject) (CreateAmfContext3gppResponseObject, error)
	// Retrieves the AMF context data of a UE using non-3gpp access
	// (GET /subscription-data/{ueId}/context-data/amf-non-3gpp-access)
	QueryAmfContextNon3gpp(ctx context.Context, request QueryAmfContextNon3gppRequestObject) (QueryAmfContextNon3gppResponseObject, error)
	// To modify the AMF context data of a UE using non 3gpp access in the UDR
	// (PATCH /subscription-data/{ueId}/context-data/amf-non-3gpp-access)
	AmfContextNon3gpp(ctx context.Context, request AmfContextNon3gppRequestObject) (AmfContextNon3gppResponseObject, error)
	// To store the AMF context data of a UE using non-3gpp access in the UDR
	// (PUT /subscription-data/{ueId}/context-data/amf-non-3gpp-access)
	CreateAmfContextNon3gpp(ctx context.Context, request CreateAmfContextNon3gppRequestObject) (CreateAmfContextNon3gppResponseObject, error)
	// Retrieves the ee subscriptions of a UE
	// (GET /subscription-data/{ueId}/context-data/ee-subscriptions)
	Queryeesubscriptions(ctx context.Context, request QueryeesubscriptionsRequestObject) (QueryeesubscriptionsResponseObject, error)
	// Create individual EE subscription
	// (POST /subscription-data/{ueId}/context-data/ee-subscriptions)
	CreateEeSubscriptions(ctx context.Context, request CreateEeSubscriptionsRequestObject) (CreateEeSubscriptionsResponseObject, error)
	// Deletes a eeSubscription
	// (DELETE /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId})
	RemoveeeSubscriptions(ctx context.Context, request RemoveeeSubscriptionsRequestObject) (RemoveeeSubscriptionsResponseObject, error)
	// Retrieve a eeSubscription
	// (GET /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId})
	QueryeeSubscription(ctx context.Context, request QueryeeSubscriptionRequestObject) (QueryeeSubscriptionResponseObject, error)
	// Modify an individual ee subscription of a UE
	// (PATCH /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId})
	ModifyEesubscription(ctx context.Context, request ModifyEesubscriptionRequestObject) (ModifyEesubscriptionResponseObject, error)
	// Update an individual ee subscriptions of a UE
	// (PUT /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId})
	UpdateEesubscriptions(ctx context.Context, request UpdateEesubscriptionsRequestObject) (UpdateEesubscriptionsResponseObject, error)
	// Deletes AMF Subscription Info for an eeSubscription
	// (DELETE /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/amf-subscriptions)
	RemoveAmfSubscriptionsInfo(ctx context.Context, request RemoveAmfSubscriptionsInfoRequestObject) (RemoveAmfSubscriptionsInfoResponseObject, error)
	// Retrieve AMF subscription Info
	// (GET /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/amf-subscriptions)
	GetAmfSubscriptionInfo(ctx context.Context, request GetAmfSubscriptionInfoRequestObject) (GetAmfSubscriptionInfoResponseObject, error)
	// modify the AMF Subscription Info
	// (PATCH /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/amf-subscriptions)
	ModifyAmfSubscriptionInfo(ctx context.Context, request ModifyAmfSubscriptionInfoRequestObject) (ModifyAmfSubscriptionInfoResponseObject, error)
	// Create AmfSubscriptions for an individual ee subscriptions of a UE
	// (PUT /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/amf-subscriptions)
	CreateAMFSubscriptions(ctx context.Context, request CreateAMFSubscriptionsRequestObject) (CreateAMFSubscriptionsResponseObject, error)
	// Delete HSS Subscription Info
	// (DELETE /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/hss-subscriptions)
	RemoveHssSubscriptionsInfo(ctx context.Context, request RemoveHssSubscriptionsInfoRequestObject) (RemoveHssSubscriptionsInfoResponseObject, error)
	// Retrieve HSS Subscription Info
	// (GET /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/hss-subscriptions)
	GetHssSubscriptionInfo(ctx context.Context, request GetHssSubscriptionInfoRequestObject) (GetHssSubscriptionInfoResponseObject, error)
	// Modify HSS Subscription Info
	// (PATCH /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/hss-subscriptions)
	ModifyHssSubscriptionInfo(ctx context.Context, request ModifyHssSubscriptionInfoRequestObject) (ModifyHssSubscriptionInfoResponseObject, error)
	// Create HSS Subscription Info
	// (PUT /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/hss-subscriptions)
	CreateHSSSubscriptions(ctx context.Context, request CreateHSSSubscriptionsRequestObject) (CreateHSSSubscriptionsResponseObject, error)
	// Delete SMF Subscription Info
	// (DELETE /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/smf-subscriptions)
	RemoveSmfSubscriptionsInfo(ctx context.Context, request RemoveSmfSubscriptionsInfoRequestObject) (RemoveSmfSubscriptionsInfoResponseObject, error)
	// Retrieve SMF Subscription Info
	// (GET /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/smf-subscriptions)
	GetSmfSubscriptionInfo(ctx context.Context, request GetSmfSubscriptionInfoRequestObject) (GetSmfSubscriptionInfoResponseObject, error)
	// Modify SMF Subscription Info
	// (PATCH /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/smf-subscriptions)
	ModifySmfSubscriptionInfo(ctx context.Context, request ModifySmfSubscriptionInfoRequestObject) (ModifySmfSubscriptionInfoResponseObject, error)
	// Create SMF Subscription Info
	// (PUT /subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/smf-subscriptions)
	CreateSMFSubscriptions(ctx context.Context, request CreateSMFSubscriptionsRequestObject) (CreateSMFSubscriptionsResponseObject, error)
	// To remove the IP-SM-GW context data of a UE
	// (DELETE /subscription-data/{ueId}/context-data/ip-sm-gw)
	DeleteIpSmGwContext(ctx context.Context, request DeleteIpSmGwContextRequestObject) (DeleteIpSmGwContextResponseObject, error)
	// Retrieves the IP-SM-GW context data of a UE
	// (GET /subscription-data/{ueId}/context-data/ip-sm-gw)
	QueryIpSmGwContext(ctx context.Context, request QueryIpSmGwContextRequestObject) (QueryIpSmGwContextResponseObject, error)
	// Modify the IP-SM-GW context data of a UE
	// (PATCH /subscription-data/{ueId}/context-data/ip-sm-gw)
	ModifyIpSmGwContext(ctx context.Context, request ModifyIpSmGwContextRequestObject) (ModifyIpSmGwContextResponseObject, error)
	// Create the IP-SM-GW context data of a UE
	// (PUT /subscription-data/{ueId}/context-data/ip-sm-gw)
	CreateIpSmGwContext(ctx context.Context, request CreateIpSmGwContextRequestObject) (CreateIpSmGwContextResponseObject, error)
	// Retrieves the UE's Location Information
	// (GET /subscription-data/{ueId}/context-data/location)
	QueryUeLocation(ctx context.Context, request QueryUeLocationRequestObject) (QueryUeLocationResponseObject, error)
	// To remove the Message Waiting Data of the UE
	// (DELETE /subscription-data/{ueId}/context-data/mwd)
	DeleteMessageWaitingData(ctx context.Context, request DeleteMessageWaitingDataRequestObject) (DeleteMessageWaitingDataResponseObject, error)
	// Retrieves the Message Waiting Data of the UE
	// (GET /subscription-data/{ueId}/context-data/mwd)
	QueryMessageWaitingData(ctx context.Context, request QueryMessageWaitingDataRequestObject) (QueryMessageWaitingDataResponseObject, error)
	// Modify the Message Waiting Data of the UE
	// (PATCH /subscription-data/{ueId}/context-data/mwd)
	ModifyMessageWaitingData(ctx context.Context, request ModifyMessageWaitingDataRequestObject) (ModifyMessageWaitingDataResponseObject, error)
	// Create the Message Waiting Data of the UE
	// (PUT /subscription-data/{ueId}/context-data/mwd)
	CreateMessageWaitingData(ctx context.Context, request CreateMessageWaitingDataRequestObject) (CreateMessageWaitingDataResponseObject, error)
	// Retrieves the sdm subscriptions of a UE
	// (GET /subscription-data/{ueId}/context-data/sdm-subscriptions)
	Querysdmsubscriptions(ctx context.Context, request QuerysdmsubscriptionsRequestObject) (QuerysdmsubscriptionsResponseObject, error)
	// Create individual sdm subscription
	// (POST /subscription-data/{ueId}/context-data/sdm-subscriptions)
	CreateSdmSubscriptions(ctx context.Context, request CreateSdmSubscriptionsRequestObject) (CreateSdmSubscriptionsResponseObject, error)
	// Deletes a sdmsubscriptions
	// (DELETE /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId})
	RemovesdmSubscriptions(ctx context.Context, request RemovesdmSubscriptionsRequestObject) (RemovesdmSubscriptionsResponseObject, error)
	// Retrieves a individual sdmSubscription identified by subsId
	// (GET /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId})
	QuerysdmSubscription(ctx context.Context, request QuerysdmSubscriptionRequestObject) (QuerysdmSubscriptionResponseObject, error)
	// Modify an individual sdm subscription
	// (PATCH /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId})
	ModifysdmSubscription(ctx context.Context, request ModifysdmSubscriptionRequestObject) (ModifysdmSubscriptionResponseObject, error)
	// Update an individual sdm subscriptions of a UE
	// (PUT /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId})
	Updatesdmsubscriptions(ctx context.Context, request UpdatesdmsubscriptionsRequestObject) (UpdatesdmsubscriptionsResponseObject, error)
	// Delete HSS SDM Subscription Info
	// (DELETE /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId}/hss-sdm-subscriptions)
	RemoveHssSDMSubscriptionsInfo(ctx context.Context, request RemoveHssSDMSubscriptionsInfoRequestObject) (RemoveHssSDMSubscriptionsInfoResponseObject, error)
	// Retrieve HSS SDM Subscription Info
	// (GET /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId}/hss-sdm-subscriptions)
	GetHssSDMSubscriptionInfo(ctx context.Context, request GetHssSDMSubscriptionInfoRequestObject) (GetHssSDMSubscriptionInfoResponseObject, error)
	// Modify HSS SDM Subscription Info
	// (PATCH /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId}/hss-sdm-subscriptions)
	ModifyHssSDMSubscriptionInfo(ctx context.Context, request ModifyHssSDMSubscriptionInfoRequestObject) (ModifyHssSDMSubscriptionInfoResponseObject, error)
	// Create HSS SDM Subscription Info
	// (PUT /subscription-data/{ueId}/context-data/sdm-subscriptions/{subsId}/hss-sdm-subscriptions)
	CreateHSSSDMSubscriptions(ctx context.Context, request CreateHSSSDMSubscriptionsRequestObject) (CreateHSSSDMSubscriptionsResponseObject, error)
	// Retrieves the SMF registration list of a UE
	// (GET /subscription-data/{ueId}/context-data/smf-registrations)
	QuerySmfRegList(ctx context.Context, request QuerySmfRegListRequestObject) (QuerySmfRegListResponseObject, error)
	// To remove an individual SMF context data of a UE the UDR
	// (DELETE /subscription-data/{ueId}/context-data/smf-registrations/{pduSessionId})
	DeleteSmfRegistration(ctx context.Context, request DeleteSmfRegistrationRequestObject) (DeleteSmfRegistrationResponseObject, error)
	// Retrieves the individual SMF registration of a UE
	// (GET /subscription-data/{ueId}/context-data/smf-registrations/{pduSessionId})
	QuerySmfRegistration(ctx context.Context, request QuerySmfRegistrationRequestObject) (QuerySmfRegistrationResponseObject, error)
	// To create an individual SMF context data of a UE in the UDR
	// (PUT /subscription-data/{ueId}/context-data/smf-registrations/{pduSessionId})
	CreateOrUpdateSmfRegistration(ctx context.Context, request CreateOrUpdateSmfRegistrationRequestObject) (CreateOrUpdateSmfRegistrationResponseObject, error)
	// To remove the SMSF context data of a UE via 3GPP access
	// (DELETE /subscription-data/{ueId}/context-data/smsf-3gpp-access)
	DeleteSmsfContext3gpp(ctx context.Context, request DeleteSmsfContext3gppRequestObject) (DeleteSmsfContext3gppResponseObject, error)
	// Retrieves the SMSF context data of a UE using 3gpp access
	// (GET /subscription-data/{ueId}/context-data/smsf-3gpp-access)
	QuerySmsfContext3gpp(ctx context.Context, request QuerySmsfContext3gppRequestObject) (QuerySmsfContext3gppResponseObject, error)
	// Create the SMSF context data of a UE via 3GPP access
	// (PUT /subscription-data/{ueId}/context-data/smsf-3gpp-access)
	CreateSmsfContext3gpp(ctx context.Context, request CreateSmsfContext3gppRequestObject) (CreateSmsfContext3gppResponseObject, error)
	// To remove the SMSF context data of a UE via non-3GPP access
	// (DELETE /subscription-data/{ueId}/context-data/smsf-non-3gpp-access)
	DeleteSmsfContextNon3gpp(ctx context.Context, request DeleteSmsfContextNon3gppRequestObject) (DeleteSmsfContextNon3gppResponseObject, error)
	// Retrieves the SMSF context data of a UE using non-3gpp access
	// (GET /subscription-data/{ueId}/context-data/smsf-non-3gpp-access)
	QuerySmsfContextNon3gpp(ctx context.Context, request QuerySmsfContextNon3gppRequestObject) (QuerySmsfContextNon3gppResponseObject, error)
	// Create the SMSF context data of a UE via non-3GPP access
	// (PUT /subscription-data/{ueId}/context-data/smsf-non-3gpp-access)
	CreateSmsfContextNon3gpp(ctx context.Context, request CreateSmsfContextNon3gppRequestObject) (CreateSmsfContextNon3gppResponseObject, error)
	// Retrieves the subscribed enhanced Coverage Restriction Data of a UE
	// (GET /subscription-data/{ueId}/coverage-restriction-data)
	QueryCoverageRestrictionData(ctx context.Context, request QueryCoverageRestrictionDataRequestObject) (QueryCoverageRestrictionDataResponseObject, error)
	// Retrieves the ee profile data of a UE
	// (GET /subscription-data/{ueId}/ee-profile-data)
	QueryEEData(ctx context.Context, request QueryEEDataRequestObject) (QueryEEDataResponseObject, error)
	// Retrieve identity data by SUPI or GPSI
	// (GET /subscription-data/{ueId}/identity-data)
	GetIdentityData(ctx context.Context, request GetIdentityDataRequestObject) (GetIdentityDataResponseObject, error)
	// Retrieves the LCS Mobile Originated subscription data of a UE
	// (GET /subscription-data/{ueId}/lcs-mo-data)
	QueryLcsMoData(ctx context.Context, request QueryLcsMoDataRequestObject) (QueryLcsMoDataResponseObject, error)
	// Retrieves the LCS Privacy subscription data of a UE
	// (GET /subscription-data/{ueId}/lcs-privacy-data)
	QueryLcsPrivacyData(ctx context.Context, request QueryLcsPrivacyDataRequestObject) (QueryLcsPrivacyDataResponseObject, error)
	// Retrieve NIDD Authorization Data GPSI or External Group identifier
	// (GET /subscription-data/{ueId}/nidd-authorization-data)
	GetNiddAuData(ctx context.Context, request GetNiddAuDataRequestObject) (GetNiddAuDataResponseObject, error)
	// Retrieve ODB Data data by SUPI or GPSI
	// (GET /subscription-data/{ueId}/operator-determined-barring-data)
	GetOdbData(ctx context.Context, request GetOdbDataRequestObject) (GetOdbDataResponseObject, error)
	// Retrieves the operator specific data of a UE
	// (GET /subscription-data/{ueId}/operator-specific-data)
	QueryOperSpecData(ctx context.Context, request QueryOperSpecDataRequestObject) (QueryOperSpecDataResponseObject, error)
	// To modify operator specific data of a UE
	// (PATCH /subscription-data/{ueId}/operator-specific-data)
	ModifyOperSpecData(ctx context.Context, request ModifyOperSpecDataRequestObject) (ModifyOperSpecDataResponseObject, error)
	// Read the profile of a given UE
	// (GET /subscription-data/{ueId}/pp-data)
	GetppData(ctx context.Context, request GetppDataRequestObject) (GetppDataResponseObject, error)
	// modify the provisioned parameter data
	// (PATCH /subscription-data/{ueId}/pp-data)
	ModifyPpData(ctx context.Context, request ModifyPpDataRequestObject) (ModifyPpDataResponseObject, error)
	// Retrieves the parameter provision profile data of a UE
	// (GET /subscription-data/{ueId}/pp-profile-data)
	QueryPPData(ctx context.Context, request QueryPPDataRequestObject) (QueryPPDataResponseObject, error)
	// Retrieves the SoR acknowledgement information of a UE
	// (GET /subscription-data/{ueId}/ue-update-confirmation-data/sor-data)
	QueryAuthSoR(ctx context.Context, request QueryAuthSoRRequestObject) (QueryAuthSoRResponseObject, error)
	// To store the SoR acknowledgement information of a UE
	// (PUT /subscription-data/{ueId}/ue-update-confirmation-data/sor-data)
	CreateAuthenticationSoR(ctx context.Context, request CreateAuthenticationSoRRequestObject) (CreateAuthenticationSoRResponseObject, error)
	// Retrieves the CAG acknowledgement information of a UE
	// (GET /subscription-data/{ueId}/ue-update-confirmation-data/subscribed-cag)
	QueryCagAck(ctx context.Context, request QueryCagAckRequestObject) (QueryCagAckResponseObject, error)
	// To store the CAG update acknowledgement information of a UE
	// (PUT /subscription-data/{ueId}/ue-update-confirmation-data/subscribed-cag)
	CreateCagUpdateAck(ctx context.Context, request CreateCagUpdateAckRequestObject) (CreateCagUpdateAckResponseObject, error)
	// Retrieves the UPU acknowledgement information of a UE
	// (GET /subscription-data/{ueId}/ue-update-confirmation-data/subscribed-snssais)
	QueryNssaiAck(ctx context.Context, request QueryNssaiAckRequestObject) (QueryNssaiAckResponseObject, error)
	// To store the NSSAI update acknowledgement information of a UE
	// (PUT /subscription-data/{ueId}/ue-update-confirmation-data/subscribed-snssais)
	CreateOrUpdateNssaiAck(ctx context.Context, request CreateOrUpdateNssaiAckRequestObject) (CreateOrUpdateNssaiAckResponseObject, error)
	// Retrieves the UPU acknowledgement information of a UE
	// (GET /subscription-data/{ueId}/ue-update-confirmation-data/upu-data)
	QueryAuthUPU(ctx context.Context, request QueryAuthUPURequestObject) (QueryAuthUPUResponseObject, error)
	// To store the UPU acknowledgement information of a UE
	// (PUT /subscription-data/{ueId}/ue-update-confirmation-data/upu-data)
	CreateAuthenticationUPU(ctx context.Context, request CreateAuthenticationUPURequestObject) (CreateAuthenticationUPUResponseObject, error)
	// Retrieves the subscribed V2X Data of a UE
	// (GET /subscription-data/{ueId}/v2x-data)
	QueryV2xData(ctx context.Context, request QueryV2xDataRequestObject) (QueryV2xDataResponseObject, error)
	// Retrieve multiple provisioned data sets of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data)
	QueryProvisionedData(ctx context.Context, request QueryProvisionedDataRequestObject) (QueryProvisionedDataResponseObject, error)
	// Retrieves the access and mobility subscription data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/am-data)
	QueryAmData(ctx context.Context, request QueryAmDataRequestObject) (QueryAmDataResponseObject, error)
	// Retrieves the LCS Broadcast Assistance subscription data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/lcs-bca-data)
	QueryLcsBcaData(ctx context.Context, request QueryLcsBcaDataRequestObject) (QueryLcsBcaDataResponseObject, error)
	// Retrieves the Session Management subscription data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/sm-data)
	QuerySmData(ctx context.Context, request QuerySmDataRequestObject) (QuerySmDataResponseObject, error)
	// Retrieves the SMF selection subscription data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/smf-selection-subscription-data)
	QuerySmfSelectData(ctx context.Context, request QuerySmfSelectDataRequestObject) (QuerySmfSelectDataResponseObject, error)
	// Retrieves the SMS subscription data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/sms-data)
	QuerySmsData(ctx context.Context, request QuerySmsDataRequestObject) (QuerySmsDataResponseObject, error)
	// Retrieves the SMS management subscription data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/sms-mng-data)
	QuerySmsMngData(ctx context.Context, request QuerySmsMngDataRequestObject) (QuerySmsMngDataResponseObject, error)
	// Retrieves the trace configuration data of a UE
	// (GET /subscription-data/{ueId}/{servingPlmnId}/provisioned-data/trace-data)
	QueryTraceData(ctx context.Context, request QueryTraceDataRequestObject) (QueryTraceDataResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// Query5GVnGroup operation middleware
func (sh *strictHandler) Query5GVnGroup(ctx *gin.Context, params Query5GVnGroupParams) {
	var request Query5GVnGroupRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Query5GVnGroup(ctx, request.(Query5GVnGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Query5GVnGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(Query5GVnGroupResponseObject); ok {
		if err := validResponse.VisitQuery5GVnGroupResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Query5GVnGroupInternal operation middleware
func (sh *strictHandler) Query5GVnGroupInternal(ctx *gin.Context, params Query5GVnGroupInternalParams) {
	var request Query5GVnGroupInternalRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Query5GVnGroupInternal(ctx, request.(Query5GVnGroupInternalRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Query5GVnGroupInternal")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(Query5GVnGroupInternalResponseObject); ok {
		if err := validResponse.VisitQuery5GVnGroupInternalResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Query5GVNGroupPPData operation middleware
func (sh *strictHandler) Query5GVNGroupPPData(ctx *gin.Context, params Query5GVNGroupPPDataParams) {
	var request Query5GVNGroupPPDataRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Query5GVNGroupPPData(ctx, request.(Query5GVNGroupPPDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Query5GVNGroupPPData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(Query5GVNGroupPPDataResponseObject); ok {
		if err := validResponse.VisitQuery5GVNGroupPPDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Delete5GVnGroup operation middleware
func (sh *strictHandler) Delete5GVnGroup(ctx *gin.Context, externalGroupId externalRef7.ExtGroupId) {
	var request Delete5GVnGroupRequestObject

	request.ExternalGroupId = externalGroupId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Delete5GVnGroup(ctx, request.(Delete5GVnGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Delete5GVnGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(Delete5GVnGroupResponseObject); ok {
		if err := validResponse.VisitDelete5GVnGroupResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Get5GVnGroupConfiguration operation middleware
func (sh *strictHandler) Get5GVnGroupConfiguration(ctx *gin.Context, externalGroupId externalRef7.ExtGroupId) {
	var request Get5GVnGroupConfigurationRequestObject

	request.ExternalGroupId = externalGroupId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Get5GVnGroupConfiguration(ctx, request.(Get5GVnGroupConfigurationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Get5GVnGroupConfiguration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(Get5GVnGroupConfigurationResponseObject); ok {
		if err := validResponse.VisitGet5GVnGroupConfigurationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Modify5GVnGroup operation middleware
func (sh *strictHandler) Modify5GVnGroup(ctx *gin.Context, externalGroupId externalRef7.ExtGroupId, params Modify5GVnGroupParams) {
	var request Modify5GVnGroupRequestObject

	request.ExternalGroupId = externalGroupId
	request.Params = params

	var body Modify5GVnGroupApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Modify5GVnGroup(ctx, request.(Modify5GVnGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Modify5GVnGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(Modify5GVnGroupResponseObject); ok {
		if err := validResponse.VisitModify5GVnGroupResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Create5GVnGroup operation middleware
func (sh *strictHandler) Create5GVnGroup(ctx *gin.Context, externalGroupId externalRef7.ExtGroupId) {
	var request Create5GVnGroupRequestObject

	request.ExternalGroupId = externalGroupId

	var body Create5GVnGroupJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Create5GVnGroup(ctx, request.(Create5GVnGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Create5GVnGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(Create5GVnGroupResponseObject); ok {
		if err := validResponse.VisitCreate5GVnGroupResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGroupIdentifiers operation middleware
func (sh *strictHandler) GetGroupIdentifiers(ctx *gin.Context, params GetGroupIdentifiersParams) {
	var request GetGroupIdentifiersRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetGroupIdentifiers(ctx, request.(GetGroupIdentifiersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGroupIdentifiers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetGroupIdentifiersResponseObject); ok {
		if err := validResponse.VisitGetGroupIdentifiersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryGroupEEData operation middleware
func (sh *strictHandler) QueryGroupEEData(ctx *gin.Context, ueGroupId VarUeGroupId, params QueryGroupEEDataParams) {
	var request QueryGroupEEDataRequestObject

	request.UeGroupId = ueGroupId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryGroupEEData(ctx, request.(QueryGroupEEDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryGroupEEData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryGroupEEDataResponseObject); ok {
		if err := validResponse.VisitQueryGroupEEDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryEeGroupSubscriptions operation middleware
func (sh *strictHandler) QueryEeGroupSubscriptions(ctx *gin.Context, ueGroupId VarUeGroupId, params QueryEeGroupSubscriptionsParams) {
	var request QueryEeGroupSubscriptionsRequestObject

	request.UeGroupId = ueGroupId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryEeGroupSubscriptions(ctx, request.(QueryEeGroupSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryEeGroupSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryEeGroupSubscriptionsResponseObject); ok {
		if err := validResponse.VisitQueryEeGroupSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateEeGroupSubscriptions operation middleware
func (sh *strictHandler) CreateEeGroupSubscriptions(ctx *gin.Context, ueGroupId VarUeGroupId) {
	var request CreateEeGroupSubscriptionsRequestObject

	request.UeGroupId = ueGroupId

	var body CreateEeGroupSubscriptionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateEeGroupSubscriptions(ctx, request.(CreateEeGroupSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateEeGroupSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateEeGroupSubscriptionsResponseObject); ok {
		if err := validResponse.VisitCreateEeGroupSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemoveEeGroupSubscriptions operation middleware
func (sh *strictHandler) RemoveEeGroupSubscriptions(ctx *gin.Context, ueGroupId VarUeGroupId, subsId string) {
	var request RemoveEeGroupSubscriptionsRequestObject

	request.UeGroupId = ueGroupId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveEeGroupSubscriptions(ctx, request.(RemoveEeGroupSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveEeGroupSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RemoveEeGroupSubscriptionsResponseObject); ok {
		if err := validResponse.VisitRemoveEeGroupSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryEeGroupSubscription operation middleware
func (sh *strictHandler) QueryEeGroupSubscription(ctx *gin.Context, ueGroupId VarUeGroupId, subsId string) {
	var request QueryEeGroupSubscriptionRequestObject

	request.UeGroupId = ueGroupId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryEeGroupSubscription(ctx, request.(QueryEeGroupSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryEeGroupSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryEeGroupSubscriptionResponseObject); ok {
		if err := validResponse.VisitQueryEeGroupSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifyEeGroupSubscription operation middleware
func (sh *strictHandler) ModifyEeGroupSubscription(ctx *gin.Context, ueGroupId VarUeGroupId, subsId string, params ModifyEeGroupSubscriptionParams) {
	var request ModifyEeGroupSubscriptionRequestObject

	request.UeGroupId = ueGroupId
	request.SubsId = subsId
	request.Params = params

	var body ModifyEeGroupSubscriptionApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifyEeGroupSubscription(ctx, request.(ModifyEeGroupSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifyEeGroupSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifyEeGroupSubscriptionResponseObject); ok {
		if err := validResponse.VisitModifyEeGroupSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateEeGroupSubscriptions operation middleware
func (sh *strictHandler) UpdateEeGroupSubscriptions(ctx *gin.Context, ueGroupId VarUeGroupId, subsId string) {
	var request UpdateEeGroupSubscriptionsRequestObject

	request.UeGroupId = ueGroupId
	request.SubsId = subsId

	var body UpdateEeGroupSubscriptionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateEeGroupSubscriptions(ctx, request.(UpdateEeGroupSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateEeGroupSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateEeGroupSubscriptionsResponseObject); ok {
		if err := validResponse.VisitUpdateEeGroupSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSharedData operation middleware
func (sh *strictHandler) GetSharedData(ctx *gin.Context, params GetSharedDataParams) {
	var request GetSharedDataRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSharedData(ctx, request.(GetSharedDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSharedData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSharedDataResponseObject); ok {
		if err := validResponse.VisitGetSharedDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetIndividualSharedData operation middleware
func (sh *strictHandler) GetIndividualSharedData(ctx *gin.Context, sharedDataId externalRef7.SharedDataId, params GetIndividualSharedDataParams) {
	var request GetIndividualSharedDataRequestObject

	request.SharedDataId = sharedDataId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetIndividualSharedData(ctx, request.(GetIndividualSharedDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIndividualSharedData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetIndividualSharedDataResponseObject); ok {
		if err := validResponse.VisitGetIndividualSharedDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemoveMultipleSubscriptionDataSubscriptions operation middleware
func (sh *strictHandler) RemoveMultipleSubscriptionDataSubscriptions(ctx *gin.Context, params RemoveMultipleSubscriptionDataSubscriptionsParams) {
	var request RemoveMultipleSubscriptionDataSubscriptionsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveMultipleSubscriptionDataSubscriptions(ctx, request.(RemoveMultipleSubscriptionDataSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveMultipleSubscriptionDataSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RemoveMultipleSubscriptionDataSubscriptionsResponseObject); ok {
		if err := validResponse.VisitRemoveMultipleSubscriptionDataSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QuerySubsToNotify operation middleware
func (sh *strictHandler) QuerySubsToNotify(ctx *gin.Context, params QuerySubsToNotifyParams) {
	var request QuerySubsToNotifyRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QuerySubsToNotify(ctx, request.(QuerySubsToNotifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QuerySubsToNotify")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QuerySubsToNotifyResponseObject); ok {
		if err := validResponse.VisitQuerySubsToNotifyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SubscriptionDataSubscriptions operation middleware
func (sh *strictHandler) SubscriptionDataSubscriptions(ctx *gin.Context) {
	var request SubscriptionDataSubscriptionsRequestObject

	var body SubscriptionDataSubscriptionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SubscriptionDataSubscriptions(ctx, request.(SubscriptionDataSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SubscriptionDataSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SubscriptionDataSubscriptionsResponseObject); ok {
		if err := validResponse.VisitSubscriptionDataSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemovesubscriptionDataSubscriptions operation middleware
func (sh *strictHandler) RemovesubscriptionDataSubscriptions(ctx *gin.Context, subsId string) {
	var request RemovesubscriptionDataSubscriptionsRequestObject

	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemovesubscriptionDataSubscriptions(ctx, request.(RemovesubscriptionDataSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemovesubscriptionDataSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RemovesubscriptionDataSubscriptionsResponseObject); ok {
		if err := validResponse.VisitRemovesubscriptionDataSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QuerySubscriptionDataSubscriptions operation middleware
func (sh *strictHandler) QuerySubscriptionDataSubscriptions(ctx *gin.Context, subsId string) {
	var request QuerySubscriptionDataSubscriptionsRequestObject

	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QuerySubscriptionDataSubscriptions(ctx, request.(QuerySubscriptionDataSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QuerySubscriptionDataSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QuerySubscriptionDataSubscriptionsResponseObject); ok {
		if err := validResponse.VisitQuerySubscriptionDataSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifysubscriptionDataSubscription operation middleware
func (sh *strictHandler) ModifysubscriptionDataSubscription(ctx *gin.Context, subsId string, params ModifysubscriptionDataSubscriptionParams) {
	var request ModifysubscriptionDataSubscriptionRequestObject

	request.SubsId = subsId
	request.Params = params

	var body ModifysubscriptionDataSubscriptionApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifysubscriptionDataSubscription(ctx, request.(ModifysubscriptionDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifysubscriptionDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifysubscriptionDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitModifysubscriptionDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAuthenticationStatus operation middleware
func (sh *strictHandler) DeleteAuthenticationStatus(ctx *gin.Context, ueId externalRef2.Supi) {
	var request DeleteAuthenticationStatusRequestObject

	request.UeId = ueId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAuthenticationStatus(ctx, request.(DeleteAuthenticationStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAuthenticationStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteAuthenticationStatusResponseObject); ok {
		if err := validResponse.VisitDeleteAuthenticationStatusResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryAuthenticationStatus operation middleware
func (sh *strictHandler) QueryAuthenticationStatus(ctx *gin.Context, ueId externalRef2.Supi, params QueryAuthenticationStatusParams) {
	var request QueryAuthenticationStatusRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryAuthenticationStatus(ctx, request.(QueryAuthenticationStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryAuthenticationStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryAuthenticationStatusResponseObject); ok {
		if err := validResponse.VisitQueryAuthenticationStatusResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAuthenticationStatus operation middleware
func (sh *strictHandler) CreateAuthenticationStatus(ctx *gin.Context, ueId externalRef2.Supi) {
	var request CreateAuthenticationStatusRequestObject

	request.UeId = ueId

	var body CreateAuthenticationStatusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAuthenticationStatus(ctx, request.(CreateAuthenticationStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAuthenticationStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateAuthenticationStatusResponseObject); ok {
		if err := validResponse.VisitCreateAuthenticationStatusResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIndividualAuthenticationStatus operation middleware
func (sh *strictHandler) DeleteIndividualAuthenticationStatus(ctx *gin.Context, ueId externalRef2.Supi, servingNetworkName externalRef8.ServingNetworkName) {
	var request DeleteIndividualAuthenticationStatusRequestObject

	request.UeId = ueId
	request.ServingNetworkName = servingNetworkName

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIndividualAuthenticationStatus(ctx, request.(DeleteIndividualAuthenticationStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIndividualAuthenticationStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteIndividualAuthenticationStatusResponseObject); ok {
		if err := validResponse.VisitDeleteIndividualAuthenticationStatusResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryIndividualAuthenticationStatus operation middleware
func (sh *strictHandler) QueryIndividualAuthenticationStatus(ctx *gin.Context, ueId externalRef2.Supi, servingNetworkName externalRef8.ServingNetworkName, params QueryIndividualAuthenticationStatusParams) {
	var request QueryIndividualAuthenticationStatusRequestObject

	request.UeId = ueId
	request.ServingNetworkName = servingNetworkName
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryIndividualAuthenticationStatus(ctx, request.(QueryIndividualAuthenticationStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryIndividualAuthenticationStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryIndividualAuthenticationStatusResponseObject); ok {
		if err := validResponse.VisitQueryIndividualAuthenticationStatusResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateIndividualAuthenticationStatus operation middleware
func (sh *strictHandler) CreateIndividualAuthenticationStatus(ctx *gin.Context, ueId externalRef2.Supi, servingNetworkName externalRef8.ServingNetworkName) {
	var request CreateIndividualAuthenticationStatusRequestObject

	request.UeId = ueId
	request.ServingNetworkName = servingNetworkName

	var body CreateIndividualAuthenticationStatusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateIndividualAuthenticationStatus(ctx, request.(CreateIndividualAuthenticationStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateIndividualAuthenticationStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateIndividualAuthenticationStatusResponseObject); ok {
		if err := validResponse.VisitCreateIndividualAuthenticationStatusResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryAuthSubsData operation middleware
func (sh *strictHandler) QueryAuthSubsData(ctx *gin.Context, ueId externalRef2.Supi, params QueryAuthSubsDataParams) {
	var request QueryAuthSubsDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryAuthSubsData(ctx, request.(QueryAuthSubsDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryAuthSubsData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryAuthSubsDataResponseObject); ok {
		if err := validResponse.VisitQueryAuthSubsDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifyAuthenticationSubscription operation middleware
func (sh *strictHandler) ModifyAuthenticationSubscription(ctx *gin.Context, ueId externalRef2.Supi, params ModifyAuthenticationSubscriptionParams) {
	var request ModifyAuthenticationSubscriptionRequestObject

	request.UeId = ueId
	request.Params = params

	var body ModifyAuthenticationSubscriptionApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifyAuthenticationSubscription(ctx, request.(ModifyAuthenticationSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifyAuthenticationSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifyAuthenticationSubscriptionResponseObject); ok {
		if err := validResponse.VisitModifyAuthenticationSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryContextData operation middleware
func (sh *strictHandler) QueryContextData(ctx *gin.Context, ueId externalRef2.VarUeId, params QueryContextDataParams) {
	var request QueryContextDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryContextData(ctx, request.(QueryContextDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryContextData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryContextDataResponseObject); ok {
		if err := validResponse.VisitQueryContextDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryAmfContext3gpp operation middleware
func (sh *strictHandler) QueryAmfContext3gpp(ctx *gin.Context, ueId externalRef2.VarUeId, params QueryAmfContext3gppParams) {
	var request QueryAmfContext3gppRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryAmfContext3gpp(ctx, request.(QueryAmfContext3gppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryAmfContext3gpp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryAmfContext3gppResponseObject); ok {
		if err := validResponse.VisitQueryAmfContext3gppResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AmfContext3gpp operation middleware
func (sh *strictHandler) AmfContext3gpp(ctx *gin.Context, ueId externalRef2.VarUeId, params AmfContext3gppParams) {
	var request AmfContext3gppRequestObject

	request.UeId = ueId
	request.Params = params

	var body AmfContext3gppApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AmfContext3gpp(ctx, request.(AmfContext3gppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AmfContext3gpp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AmfContext3gppResponseObject); ok {
		if err := validResponse.VisitAmfContext3gppResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAmfContext3gpp operation middleware
func (sh *strictHandler) CreateAmfContext3gpp(ctx *gin.Context, ueId externalRef2.VarUeId) {
	var request CreateAmfContext3gppRequestObject

	request.UeId = ueId

	var body CreateAmfContext3gppJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAmfContext3gpp(ctx, request.(CreateAmfContext3gppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAmfContext3gpp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateAmfContext3gppResponseObject); ok {
		if err := validResponse.VisitCreateAmfContext3gppResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryAmfContextNon3gpp operation middleware
func (sh *strictHandler) QueryAmfContextNon3gpp(ctx *gin.Context, ueId externalRef2.VarUeId, params QueryAmfContextNon3gppParams) {
	var request QueryAmfContextNon3gppRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryAmfContextNon3gpp(ctx, request.(QueryAmfContextNon3gppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryAmfContextNon3gpp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryAmfContextNon3gppResponseObject); ok {
		if err := validResponse.VisitQueryAmfContextNon3gppResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AmfContextNon3gpp operation middleware
func (sh *strictHandler) AmfContextNon3gpp(ctx *gin.Context, ueId externalRef2.VarUeId, params AmfContextNon3gppParams) {
	var request AmfContextNon3gppRequestObject

	request.UeId = ueId
	request.Params = params

	var body AmfContextNon3gppApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AmfContextNon3gpp(ctx, request.(AmfContextNon3gppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AmfContextNon3gpp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AmfContextNon3gppResponseObject); ok {
		if err := validResponse.VisitAmfContextNon3gppResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAmfContextNon3gpp operation middleware
func (sh *strictHandler) CreateAmfContextNon3gpp(ctx *gin.Context, ueId externalRef2.VarUeId) {
	var request CreateAmfContextNon3gppRequestObject

	request.UeId = ueId

	var body CreateAmfContextNon3gppJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAmfContextNon3gpp(ctx, request.(CreateAmfContextNon3gppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAmfContextNon3gpp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateAmfContextNon3gppResponseObject); ok {
		if err := validResponse.VisitCreateAmfContextNon3gppResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Queryeesubscriptions operation middleware
func (sh *strictHandler) Queryeesubscriptions(ctx *gin.Context, ueId externalRef2.VarUeId, params QueryeesubscriptionsParams) {
	var request QueryeesubscriptionsRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Queryeesubscriptions(ctx, request.(QueryeesubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Queryeesubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryeesubscriptionsResponseObject); ok {
		if err := validResponse.VisitQueryeesubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateEeSubscriptions operation middleware
func (sh *strictHandler) CreateEeSubscriptions(ctx *gin.Context, ueId externalRef2.VarUeId) {
	var request CreateEeSubscriptionsRequestObject

	request.UeId = ueId

	var body CreateEeSubscriptionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateEeSubscriptions(ctx, request.(CreateEeSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateEeSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateEeSubscriptionsResponseObject); ok {
		if err := validResponse.VisitCreateEeSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemoveeeSubscriptions operation middleware
func (sh *strictHandler) RemoveeeSubscriptions(ctx *gin.Context, ueId externalRef2.VarUeId, subsId string) {
	var request RemoveeeSubscriptionsRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveeeSubscriptions(ctx, request.(RemoveeeSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveeeSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RemoveeeSubscriptionsResponseObject); ok {
		if err := validResponse.VisitRemoveeeSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryeeSubscription operation middleware
func (sh *strictHandler) QueryeeSubscription(ctx *gin.Context, ueId externalRef2.VarUeId, subsId string) {
	var request QueryeeSubscriptionRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryeeSubscription(ctx, request.(QueryeeSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryeeSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryeeSubscriptionResponseObject); ok {
		if err := validResponse.VisitQueryeeSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifyEesubscription operation middleware
func (sh *strictHandler) ModifyEesubscription(ctx *gin.Context, ueId externalRef2.VarUeId, subsId string, params ModifyEesubscriptionParams) {
	var request ModifyEesubscriptionRequestObject

	request.UeId = ueId
	request.SubsId = subsId
	request.Params = params

	var body ModifyEesubscriptionApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifyEesubscription(ctx, request.(ModifyEesubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifyEesubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifyEesubscriptionResponseObject); ok {
		if err := validResponse.VisitModifyEesubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateEesubscriptions operation middleware
func (sh *strictHandler) UpdateEesubscriptions(ctx *gin.Context, ueId externalRef2.VarUeId, subsId string) {
	var request UpdateEesubscriptionsRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	var body UpdateEesubscriptionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateEesubscriptions(ctx, request.(UpdateEesubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateEesubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateEesubscriptionsResponseObject); ok {
		if err := validResponse.VisitUpdateEesubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemoveAmfSubscriptionsInfo operation middleware
func (sh *strictHandler) RemoveAmfSubscriptionsInfo(ctx *gin.Context, ueId externalRef2.VarUeId, subsId string) {
	var request RemoveAmfSubscriptionsInfoRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveAmfSubscriptionsInfo(ctx, request.(RemoveAmfSubscriptionsInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveAmfSubscriptionsInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RemoveAmfSubscriptionsInfoResponseObject); ok {
		if err := validResponse.VisitRemoveAmfSubscriptionsInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAmfSubscriptionInfo operation middleware
func (sh *strictHandler) GetAmfSubscriptionInfo(ctx *gin.Context, ueId externalRef2.VarUeId, subsId string) {
	var request GetAmfSubscriptionInfoRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAmfSubscriptionInfo(ctx, request.(GetAmfSubscriptionInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAmfSubscriptionInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAmfSubscriptionInfoResponseObject); ok {
		if err := validResponse.VisitGetAmfSubscriptionInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifyAmfSubscriptionInfo operation middleware
func (sh *strictHandler) ModifyAmfSubscriptionInfo(ctx *gin.Context, ueId externalRef2.VarUeId, subsId string, params ModifyAmfSubscriptionInfoParams) {
	var request ModifyAmfSubscriptionInfoRequestObject

	request.UeId = ueId
	request.SubsId = subsId
	request.Params = params

	var body ModifyAmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifyAmfSubscriptionInfo(ctx, request.(ModifyAmfSubscriptionInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifyAmfSubscriptionInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifyAmfSubscriptionInfoResponseObject); ok {
		if err := validResponse.VisitModifyAmfSubscriptionInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAMFSubscriptions operation middleware
func (sh *strictHandler) CreateAMFSubscriptions(ctx *gin.Context, ueId externalRef2.VarUeId, subsId string) {
	var request CreateAMFSubscriptionsRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	var body CreateAMFSubscriptionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAMFSubscriptions(ctx, request.(CreateAMFSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAMFSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateAMFSubscriptionsResponseObject); ok {
		if err := validResponse.VisitCreateAMFSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemoveHssSubscriptionsInfo operation middleware
func (sh *strictHandler) RemoveHssSubscriptionsInfo(ctx *gin.Context, ueId externalRef2.VarUeId, subsId string) {
	var request RemoveHssSubscriptionsInfoRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveHssSubscriptionsInfo(ctx, request.(RemoveHssSubscriptionsInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveHssSubscriptionsInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RemoveHssSubscriptionsInfoResponseObject); ok {
		if err := validResponse.VisitRemoveHssSubscriptionsInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHssSubscriptionInfo operation middleware
func (sh *strictHandler) GetHssSubscriptionInfo(ctx *gin.Context, ueId externalRef2.VarUeId, subsId string) {
	var request GetHssSubscriptionInfoRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetHssSubscriptionInfo(ctx, request.(GetHssSubscriptionInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHssSubscriptionInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetHssSubscriptionInfoResponseObject); ok {
		if err := validResponse.VisitGetHssSubscriptionInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifyHssSubscriptionInfo operation middleware
func (sh *strictHandler) ModifyHssSubscriptionInfo(ctx *gin.Context, ueId externalRef2.VarUeId, subsId string, params ModifyHssSubscriptionInfoParams) {
	var request ModifyHssSubscriptionInfoRequestObject

	request.UeId = ueId
	request.SubsId = subsId
	request.Params = params

	var body ModifyHssSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifyHssSubscriptionInfo(ctx, request.(ModifyHssSubscriptionInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifyHssSubscriptionInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifyHssSubscriptionInfoResponseObject); ok {
		if err := validResponse.VisitModifyHssSubscriptionInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateHSSSubscriptions operation middleware
func (sh *strictHandler) CreateHSSSubscriptions(ctx *gin.Context, ueId externalRef2.VarUeId, subsId string) {
	var request CreateHSSSubscriptionsRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	var body CreateHSSSubscriptionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateHSSSubscriptions(ctx, request.(CreateHSSSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateHSSSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateHSSSubscriptionsResponseObject); ok {
		if err := validResponse.VisitCreateHSSSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemoveSmfSubscriptionsInfo operation middleware
func (sh *strictHandler) RemoveSmfSubscriptionsInfo(ctx *gin.Context, ueId externalRef2.VarUeId, subsId string) {
	var request RemoveSmfSubscriptionsInfoRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveSmfSubscriptionsInfo(ctx, request.(RemoveSmfSubscriptionsInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveSmfSubscriptionsInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RemoveSmfSubscriptionsInfoResponseObject); ok {
		if err := validResponse.VisitRemoveSmfSubscriptionsInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSmfSubscriptionInfo operation middleware
func (sh *strictHandler) GetSmfSubscriptionInfo(ctx *gin.Context, ueId externalRef2.VarUeId, subsId string) {
	var request GetSmfSubscriptionInfoRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSmfSubscriptionInfo(ctx, request.(GetSmfSubscriptionInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSmfSubscriptionInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSmfSubscriptionInfoResponseObject); ok {
		if err := validResponse.VisitGetSmfSubscriptionInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifySmfSubscriptionInfo operation middleware
func (sh *strictHandler) ModifySmfSubscriptionInfo(ctx *gin.Context, ueId externalRef2.VarUeId, subsId string, params ModifySmfSubscriptionInfoParams) {
	var request ModifySmfSubscriptionInfoRequestObject

	request.UeId = ueId
	request.SubsId = subsId
	request.Params = params

	var body ModifySmfSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifySmfSubscriptionInfo(ctx, request.(ModifySmfSubscriptionInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifySmfSubscriptionInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifySmfSubscriptionInfoResponseObject); ok {
		if err := validResponse.VisitModifySmfSubscriptionInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSMFSubscriptions operation middleware
func (sh *strictHandler) CreateSMFSubscriptions(ctx *gin.Context, ueId externalRef2.VarUeId, subsId string) {
	var request CreateSMFSubscriptionsRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	var body CreateSMFSubscriptionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSMFSubscriptions(ctx, request.(CreateSMFSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSMFSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateSMFSubscriptionsResponseObject); ok {
		if err := validResponse.VisitCreateSMFSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIpSmGwContext operation middleware
func (sh *strictHandler) DeleteIpSmGwContext(ctx *gin.Context, ueId externalRef2.VarUeId) {
	var request DeleteIpSmGwContextRequestObject

	request.UeId = ueId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIpSmGwContext(ctx, request.(DeleteIpSmGwContextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIpSmGwContext")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteIpSmGwContextResponseObject); ok {
		if err := validResponse.VisitDeleteIpSmGwContextResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryIpSmGwContext operation middleware
func (sh *strictHandler) QueryIpSmGwContext(ctx *gin.Context, ueId externalRef2.VarUeId, params QueryIpSmGwContextParams) {
	var request QueryIpSmGwContextRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryIpSmGwContext(ctx, request.(QueryIpSmGwContextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryIpSmGwContext")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryIpSmGwContextResponseObject); ok {
		if err := validResponse.VisitQueryIpSmGwContextResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifyIpSmGwContext operation middleware
func (sh *strictHandler) ModifyIpSmGwContext(ctx *gin.Context, ueId externalRef2.VarUeId) {
	var request ModifyIpSmGwContextRequestObject

	request.UeId = ueId

	var body ModifyIpSmGwContextApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifyIpSmGwContext(ctx, request.(ModifyIpSmGwContextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifyIpSmGwContext")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifyIpSmGwContextResponseObject); ok {
		if err := validResponse.VisitModifyIpSmGwContextResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateIpSmGwContext operation middleware
func (sh *strictHandler) CreateIpSmGwContext(ctx *gin.Context, ueId externalRef2.VarUeId) {
	var request CreateIpSmGwContextRequestObject

	request.UeId = ueId

	var body CreateIpSmGwContextJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateIpSmGwContext(ctx, request.(CreateIpSmGwContextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateIpSmGwContext")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateIpSmGwContextResponseObject); ok {
		if err := validResponse.VisitCreateIpSmGwContextResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryUeLocation operation middleware
func (sh *strictHandler) QueryUeLocation(ctx *gin.Context, ueId externalRef2.VarUeId, params QueryUeLocationParams) {
	var request QueryUeLocationRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryUeLocation(ctx, request.(QueryUeLocationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryUeLocation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryUeLocationResponseObject); ok {
		if err := validResponse.VisitQueryUeLocationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteMessageWaitingData operation middleware
func (sh *strictHandler) DeleteMessageWaitingData(ctx *gin.Context, ueId externalRef2.VarUeId) {
	var request DeleteMessageWaitingDataRequestObject

	request.UeId = ueId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteMessageWaitingData(ctx, request.(DeleteMessageWaitingDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteMessageWaitingData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteMessageWaitingDataResponseObject); ok {
		if err := validResponse.VisitDeleteMessageWaitingDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryMessageWaitingData operation middleware
func (sh *strictHandler) QueryMessageWaitingData(ctx *gin.Context, ueId externalRef2.VarUeId, params QueryMessageWaitingDataParams) {
	var request QueryMessageWaitingDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryMessageWaitingData(ctx, request.(QueryMessageWaitingDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryMessageWaitingData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryMessageWaitingDataResponseObject); ok {
		if err := validResponse.VisitQueryMessageWaitingDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifyMessageWaitingData operation middleware
func (sh *strictHandler) ModifyMessageWaitingData(ctx *gin.Context, ueId externalRef2.VarUeId) {
	var request ModifyMessageWaitingDataRequestObject

	request.UeId = ueId

	var body ModifyMessageWaitingDataApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifyMessageWaitingData(ctx, request.(ModifyMessageWaitingDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifyMessageWaitingData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifyMessageWaitingDataResponseObject); ok {
		if err := validResponse.VisitModifyMessageWaitingDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateMessageWaitingData operation middleware
func (sh *strictHandler) CreateMessageWaitingData(ctx *gin.Context, ueId externalRef2.VarUeId) {
	var request CreateMessageWaitingDataRequestObject

	request.UeId = ueId

	var body CreateMessageWaitingDataJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateMessageWaitingData(ctx, request.(CreateMessageWaitingDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateMessageWaitingData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateMessageWaitingDataResponseObject); ok {
		if err := validResponse.VisitCreateMessageWaitingDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Querysdmsubscriptions operation middleware
func (sh *strictHandler) Querysdmsubscriptions(ctx *gin.Context, ueId externalRef2.VarUeId, params QuerysdmsubscriptionsParams) {
	var request QuerysdmsubscriptionsRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Querysdmsubscriptions(ctx, request.(QuerysdmsubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Querysdmsubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QuerysdmsubscriptionsResponseObject); ok {
		if err := validResponse.VisitQuerysdmsubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSdmSubscriptions operation middleware
func (sh *strictHandler) CreateSdmSubscriptions(ctx *gin.Context, ueId externalRef2.VarUeId) {
	var request CreateSdmSubscriptionsRequestObject

	request.UeId = ueId

	var body CreateSdmSubscriptionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSdmSubscriptions(ctx, request.(CreateSdmSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSdmSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateSdmSubscriptionsResponseObject); ok {
		if err := validResponse.VisitCreateSdmSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemovesdmSubscriptions operation middleware
func (sh *strictHandler) RemovesdmSubscriptions(ctx *gin.Context, ueId externalRef2.VarUeId, subsId string) {
	var request RemovesdmSubscriptionsRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemovesdmSubscriptions(ctx, request.(RemovesdmSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemovesdmSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RemovesdmSubscriptionsResponseObject); ok {
		if err := validResponse.VisitRemovesdmSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QuerysdmSubscription operation middleware
func (sh *strictHandler) QuerysdmSubscription(ctx *gin.Context, ueId externalRef2.VarUeId, subsId string) {
	var request QuerysdmSubscriptionRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QuerysdmSubscription(ctx, request.(QuerysdmSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QuerysdmSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QuerysdmSubscriptionResponseObject); ok {
		if err := validResponse.VisitQuerysdmSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifysdmSubscription operation middleware
func (sh *strictHandler) ModifysdmSubscription(ctx *gin.Context, ueId externalRef2.VarUeId, subsId string, params ModifysdmSubscriptionParams) {
	var request ModifysdmSubscriptionRequestObject

	request.UeId = ueId
	request.SubsId = subsId
	request.Params = params

	var body ModifysdmSubscriptionApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifysdmSubscription(ctx, request.(ModifysdmSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifysdmSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifysdmSubscriptionResponseObject); ok {
		if err := validResponse.VisitModifysdmSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Updatesdmsubscriptions operation middleware
func (sh *strictHandler) Updatesdmsubscriptions(ctx *gin.Context, ueId externalRef2.VarUeId, subsId string) {
	var request UpdatesdmsubscriptionsRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	var body UpdatesdmsubscriptionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Updatesdmsubscriptions(ctx, request.(UpdatesdmsubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Updatesdmsubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdatesdmsubscriptionsResponseObject); ok {
		if err := validResponse.VisitUpdatesdmsubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemoveHssSDMSubscriptionsInfo operation middleware
func (sh *strictHandler) RemoveHssSDMSubscriptionsInfo(ctx *gin.Context, ueId externalRef2.VarUeId, subsId string) {
	var request RemoveHssSDMSubscriptionsInfoRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveHssSDMSubscriptionsInfo(ctx, request.(RemoveHssSDMSubscriptionsInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveHssSDMSubscriptionsInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RemoveHssSDMSubscriptionsInfoResponseObject); ok {
		if err := validResponse.VisitRemoveHssSDMSubscriptionsInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHssSDMSubscriptionInfo operation middleware
func (sh *strictHandler) GetHssSDMSubscriptionInfo(ctx *gin.Context, ueId externalRef2.VarUeId, subsId string) {
	var request GetHssSDMSubscriptionInfoRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetHssSDMSubscriptionInfo(ctx, request.(GetHssSDMSubscriptionInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHssSDMSubscriptionInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetHssSDMSubscriptionInfoResponseObject); ok {
		if err := validResponse.VisitGetHssSDMSubscriptionInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifyHssSDMSubscriptionInfo operation middleware
func (sh *strictHandler) ModifyHssSDMSubscriptionInfo(ctx *gin.Context, ueId externalRef2.VarUeId, subsId string, params ModifyHssSDMSubscriptionInfoParams) {
	var request ModifyHssSDMSubscriptionInfoRequestObject

	request.UeId = ueId
	request.SubsId = subsId
	request.Params = params

	var body ModifyHssSDMSubscriptionInfoApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifyHssSDMSubscriptionInfo(ctx, request.(ModifyHssSDMSubscriptionInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifyHssSDMSubscriptionInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifyHssSDMSubscriptionInfoResponseObject); ok {
		if err := validResponse.VisitModifyHssSDMSubscriptionInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateHSSSDMSubscriptions operation middleware
func (sh *strictHandler) CreateHSSSDMSubscriptions(ctx *gin.Context, ueId externalRef2.VarUeId, subsId string) {
	var request CreateHSSSDMSubscriptionsRequestObject

	request.UeId = ueId
	request.SubsId = subsId

	var body CreateHSSSDMSubscriptionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateHSSSDMSubscriptions(ctx, request.(CreateHSSSDMSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateHSSSDMSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateHSSSDMSubscriptionsResponseObject); ok {
		if err := validResponse.VisitCreateHSSSDMSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QuerySmfRegList operation middleware
func (sh *strictHandler) QuerySmfRegList(ctx *gin.Context, ueId externalRef2.VarUeId, params QuerySmfRegListParams) {
	var request QuerySmfRegListRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QuerySmfRegList(ctx, request.(QuerySmfRegListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QuerySmfRegList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QuerySmfRegListResponseObject); ok {
		if err := validResponse.VisitQuerySmfRegListResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSmfRegistration operation middleware
func (sh *strictHandler) DeleteSmfRegistration(ctx *gin.Context, ueId externalRef2.VarUeId, pduSessionId externalRef2.PduSessionId) {
	var request DeleteSmfRegistrationRequestObject

	request.UeId = ueId
	request.PduSessionId = pduSessionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSmfRegistration(ctx, request.(DeleteSmfRegistrationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSmfRegistration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteSmfRegistrationResponseObject); ok {
		if err := validResponse.VisitDeleteSmfRegistrationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QuerySmfRegistration operation middleware
func (sh *strictHandler) QuerySmfRegistration(ctx *gin.Context, ueId externalRef2.VarUeId, pduSessionId externalRef2.PduSessionId, params QuerySmfRegistrationParams) {
	var request QuerySmfRegistrationRequestObject

	request.UeId = ueId
	request.PduSessionId = pduSessionId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QuerySmfRegistration(ctx, request.(QuerySmfRegistrationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QuerySmfRegistration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QuerySmfRegistrationResponseObject); ok {
		if err := validResponse.VisitQuerySmfRegistrationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateOrUpdateSmfRegistration operation middleware
func (sh *strictHandler) CreateOrUpdateSmfRegistration(ctx *gin.Context, ueId externalRef2.VarUeId, pduSessionId externalRef2.PduSessionId) {
	var request CreateOrUpdateSmfRegistrationRequestObject

	request.UeId = ueId
	request.PduSessionId = pduSessionId

	var body CreateOrUpdateSmfRegistrationJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOrUpdateSmfRegistration(ctx, request.(CreateOrUpdateSmfRegistrationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOrUpdateSmfRegistration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateOrUpdateSmfRegistrationResponseObject); ok {
		if err := validResponse.VisitCreateOrUpdateSmfRegistrationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSmsfContext3gpp operation middleware
func (sh *strictHandler) DeleteSmsfContext3gpp(ctx *gin.Context, ueId externalRef2.VarUeId) {
	var request DeleteSmsfContext3gppRequestObject

	request.UeId = ueId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSmsfContext3gpp(ctx, request.(DeleteSmsfContext3gppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSmsfContext3gpp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteSmsfContext3gppResponseObject); ok {
		if err := validResponse.VisitDeleteSmsfContext3gppResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QuerySmsfContext3gpp operation middleware
func (sh *strictHandler) QuerySmsfContext3gpp(ctx *gin.Context, ueId externalRef2.VarUeId, params QuerySmsfContext3gppParams) {
	var request QuerySmsfContext3gppRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QuerySmsfContext3gpp(ctx, request.(QuerySmsfContext3gppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QuerySmsfContext3gpp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QuerySmsfContext3gppResponseObject); ok {
		if err := validResponse.VisitQuerySmsfContext3gppResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSmsfContext3gpp operation middleware
func (sh *strictHandler) CreateSmsfContext3gpp(ctx *gin.Context, ueId externalRef2.VarUeId) {
	var request CreateSmsfContext3gppRequestObject

	request.UeId = ueId

	var body CreateSmsfContext3gppJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSmsfContext3gpp(ctx, request.(CreateSmsfContext3gppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSmsfContext3gpp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateSmsfContext3gppResponseObject); ok {
		if err := validResponse.VisitCreateSmsfContext3gppResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSmsfContextNon3gpp operation middleware
func (sh *strictHandler) DeleteSmsfContextNon3gpp(ctx *gin.Context, ueId externalRef2.VarUeId) {
	var request DeleteSmsfContextNon3gppRequestObject

	request.UeId = ueId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSmsfContextNon3gpp(ctx, request.(DeleteSmsfContextNon3gppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSmsfContextNon3gpp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteSmsfContextNon3gppResponseObject); ok {
		if err := validResponse.VisitDeleteSmsfContextNon3gppResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QuerySmsfContextNon3gpp operation middleware
func (sh *strictHandler) QuerySmsfContextNon3gpp(ctx *gin.Context, ueId externalRef2.VarUeId, params QuerySmsfContextNon3gppParams) {
	var request QuerySmsfContextNon3gppRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QuerySmsfContextNon3gpp(ctx, request.(QuerySmsfContextNon3gppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QuerySmsfContextNon3gpp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QuerySmsfContextNon3gppResponseObject); ok {
		if err := validResponse.VisitQuerySmsfContextNon3gppResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSmsfContextNon3gpp operation middleware
func (sh *strictHandler) CreateSmsfContextNon3gpp(ctx *gin.Context, ueId externalRef2.VarUeId) {
	var request CreateSmsfContextNon3gppRequestObject

	request.UeId = ueId

	var body CreateSmsfContextNon3gppJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSmsfContextNon3gpp(ctx, request.(CreateSmsfContextNon3gppRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSmsfContextNon3gpp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateSmsfContextNon3gppResponseObject); ok {
		if err := validResponse.VisitCreateSmsfContextNon3gppResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryCoverageRestrictionData operation middleware
func (sh *strictHandler) QueryCoverageRestrictionData(ctx *gin.Context, ueId externalRef2.VarUeId, params QueryCoverageRestrictionDataParams) {
	var request QueryCoverageRestrictionDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryCoverageRestrictionData(ctx, request.(QueryCoverageRestrictionDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryCoverageRestrictionData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryCoverageRestrictionDataResponseObject); ok {
		if err := validResponse.VisitQueryCoverageRestrictionDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryEEData operation middleware
func (sh *strictHandler) QueryEEData(ctx *gin.Context, ueId externalRef2.VarUeId, params QueryEEDataParams) {
	var request QueryEEDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryEEData(ctx, request.(QueryEEDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryEEData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryEEDataResponseObject); ok {
		if err := validResponse.VisitQueryEEDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetIdentityData operation middleware
func (sh *strictHandler) GetIdentityData(ctx *gin.Context, ueId externalRef2.VarUeId, params GetIdentityDataParams) {
	var request GetIdentityDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetIdentityData(ctx, request.(GetIdentityDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIdentityData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetIdentityDataResponseObject); ok {
		if err := validResponse.VisitGetIdentityDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryLcsMoData operation middleware
func (sh *strictHandler) QueryLcsMoData(ctx *gin.Context, ueId externalRef2.VarUeId, params QueryLcsMoDataParams) {
	var request QueryLcsMoDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryLcsMoData(ctx, request.(QueryLcsMoDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryLcsMoData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryLcsMoDataResponseObject); ok {
		if err := validResponse.VisitQueryLcsMoDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryLcsPrivacyData operation middleware
func (sh *strictHandler) QueryLcsPrivacyData(ctx *gin.Context, ueId externalRef2.VarUeId, params QueryLcsPrivacyDataParams) {
	var request QueryLcsPrivacyDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryLcsPrivacyData(ctx, request.(QueryLcsPrivacyDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryLcsPrivacyData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryLcsPrivacyDataResponseObject); ok {
		if err := validResponse.VisitQueryLcsPrivacyDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNiddAuData operation middleware
func (sh *strictHandler) GetNiddAuData(ctx *gin.Context, ueId string, params GetNiddAuDataParams) {
	var request GetNiddAuDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetNiddAuData(ctx, request.(GetNiddAuDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNiddAuData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetNiddAuDataResponseObject); ok {
		if err := validResponse.VisitGetNiddAuDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetOdbData operation middleware
func (sh *strictHandler) GetOdbData(ctx *gin.Context, ueId externalRef2.VarUeId) {
	var request GetOdbDataRequestObject

	request.UeId = ueId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOdbData(ctx, request.(GetOdbDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOdbData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetOdbDataResponseObject); ok {
		if err := validResponse.VisitGetOdbDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryOperSpecData operation middleware
func (sh *strictHandler) QueryOperSpecData(ctx *gin.Context, ueId externalRef2.VarUeId, params QueryOperSpecDataParams) {
	var request QueryOperSpecDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryOperSpecData(ctx, request.(QueryOperSpecDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryOperSpecData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryOperSpecDataResponseObject); ok {
		if err := validResponse.VisitQueryOperSpecDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifyOperSpecData operation middleware
func (sh *strictHandler) ModifyOperSpecData(ctx *gin.Context, ueId externalRef2.VarUeId, params ModifyOperSpecDataParams) {
	var request ModifyOperSpecDataRequestObject

	request.UeId = ueId
	request.Params = params

	var body ModifyOperSpecDataApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifyOperSpecData(ctx, request.(ModifyOperSpecDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifyOperSpecData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifyOperSpecDataResponseObject); ok {
		if err := validResponse.VisitModifyOperSpecDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetppData operation middleware
func (sh *strictHandler) GetppData(ctx *gin.Context, ueId externalRef2.VarUeId, params GetppDataParams) {
	var request GetppDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetppData(ctx, request.(GetppDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetppData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetppDataResponseObject); ok {
		if err := validResponse.VisitGetppDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifyPpData operation middleware
func (sh *strictHandler) ModifyPpData(ctx *gin.Context, ueId externalRef2.VarUeId, params ModifyPpDataParams) {
	var request ModifyPpDataRequestObject

	request.UeId = ueId
	request.Params = params

	var body ModifyPpDataApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifyPpData(ctx, request.(ModifyPpDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifyPpData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifyPpDataResponseObject); ok {
		if err := validResponse.VisitModifyPpDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryPPData operation middleware
func (sh *strictHandler) QueryPPData(ctx *gin.Context, ueId externalRef2.VarUeId, params QueryPPDataParams) {
	var request QueryPPDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryPPData(ctx, request.(QueryPPDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryPPData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryPPDataResponseObject); ok {
		if err := validResponse.VisitQueryPPDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryAuthSoR operation middleware
func (sh *strictHandler) QueryAuthSoR(ctx *gin.Context, ueId externalRef2.Supi, params QueryAuthSoRParams) {
	var request QueryAuthSoRRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryAuthSoR(ctx, request.(QueryAuthSoRRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryAuthSoR")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryAuthSoRResponseObject); ok {
		if err := validResponse.VisitQueryAuthSoRResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAuthenticationSoR operation middleware
func (sh *strictHandler) CreateAuthenticationSoR(ctx *gin.Context, ueId externalRef2.Supi, params CreateAuthenticationSoRParams) {
	var request CreateAuthenticationSoRRequestObject

	request.UeId = ueId
	request.Params = params

	var body CreateAuthenticationSoRJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAuthenticationSoR(ctx, request.(CreateAuthenticationSoRRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAuthenticationSoR")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateAuthenticationSoRResponseObject); ok {
		if err := validResponse.VisitCreateAuthenticationSoRResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryCagAck operation middleware
func (sh *strictHandler) QueryCagAck(ctx *gin.Context, ueId externalRef2.Supi, params QueryCagAckParams) {
	var request QueryCagAckRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryCagAck(ctx, request.(QueryCagAckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryCagAck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryCagAckResponseObject); ok {
		if err := validResponse.VisitQueryCagAckResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateCagUpdateAck operation middleware
func (sh *strictHandler) CreateCagUpdateAck(ctx *gin.Context, ueId externalRef2.Supi, params CreateCagUpdateAckParams) {
	var request CreateCagUpdateAckRequestObject

	request.UeId = ueId
	request.Params = params

	var body CreateCagUpdateAckJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCagUpdateAck(ctx, request.(CreateCagUpdateAckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCagUpdateAck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateCagUpdateAckResponseObject); ok {
		if err := validResponse.VisitCreateCagUpdateAckResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryNssaiAck operation middleware
func (sh *strictHandler) QueryNssaiAck(ctx *gin.Context, ueId externalRef2.Supi, params QueryNssaiAckParams) {
	var request QueryNssaiAckRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryNssaiAck(ctx, request.(QueryNssaiAckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryNssaiAck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryNssaiAckResponseObject); ok {
		if err := validResponse.VisitQueryNssaiAckResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateOrUpdateNssaiAck operation middleware
func (sh *strictHandler) CreateOrUpdateNssaiAck(ctx *gin.Context, ueId externalRef2.Supi, params CreateOrUpdateNssaiAckParams) {
	var request CreateOrUpdateNssaiAckRequestObject

	request.UeId = ueId
	request.Params = params

	var body CreateOrUpdateNssaiAckJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOrUpdateNssaiAck(ctx, request.(CreateOrUpdateNssaiAckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOrUpdateNssaiAck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateOrUpdateNssaiAckResponseObject); ok {
		if err := validResponse.VisitCreateOrUpdateNssaiAckResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryAuthUPU operation middleware
func (sh *strictHandler) QueryAuthUPU(ctx *gin.Context, ueId externalRef2.Supi, params QueryAuthUPUParams) {
	var request QueryAuthUPURequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryAuthUPU(ctx, request.(QueryAuthUPURequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryAuthUPU")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryAuthUPUResponseObject); ok {
		if err := validResponse.VisitQueryAuthUPUResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAuthenticationUPU operation middleware
func (sh *strictHandler) CreateAuthenticationUPU(ctx *gin.Context, ueId externalRef2.Supi, params CreateAuthenticationUPUParams) {
	var request CreateAuthenticationUPURequestObject

	request.UeId = ueId
	request.Params = params

	var body CreateAuthenticationUPUJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAuthenticationUPU(ctx, request.(CreateAuthenticationUPURequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAuthenticationUPU")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateAuthenticationUPUResponseObject); ok {
		if err := validResponse.VisitCreateAuthenticationUPUResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryV2xData operation middleware
func (sh *strictHandler) QueryV2xData(ctx *gin.Context, ueId externalRef2.VarUeId, params QueryV2xDataParams) {
	var request QueryV2xDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryV2xData(ctx, request.(QueryV2xDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryV2xData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryV2xDataResponseObject); ok {
		if err := validResponse.VisitQueryV2xDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryProvisionedData operation middleware
func (sh *strictHandler) QueryProvisionedData(ctx *gin.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params QueryProvisionedDataParams) {
	var request QueryProvisionedDataRequestObject

	request.UeId = ueId
	request.ServingPlmnId = servingPlmnId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryProvisionedData(ctx, request.(QueryProvisionedDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryProvisionedData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryProvisionedDataResponseObject); ok {
		if err := validResponse.VisitQueryProvisionedDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryAmData operation middleware
func (sh *strictHandler) QueryAmData(ctx *gin.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params QueryAmDataParams) {
	var request QueryAmDataRequestObject

	request.UeId = ueId
	request.ServingPlmnId = servingPlmnId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryAmData(ctx, request.(QueryAmDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryAmData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryAmDataResponseObject); ok {
		if err := validResponse.VisitQueryAmDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryLcsBcaData operation middleware
func (sh *strictHandler) QueryLcsBcaData(ctx *gin.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params QueryLcsBcaDataParams) {
	var request QueryLcsBcaDataRequestObject

	request.UeId = ueId
	request.ServingPlmnId = servingPlmnId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryLcsBcaData(ctx, request.(QueryLcsBcaDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryLcsBcaData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryLcsBcaDataResponseObject); ok {
		if err := validResponse.VisitQueryLcsBcaDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QuerySmData operation middleware
func (sh *strictHandler) QuerySmData(ctx *gin.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params QuerySmDataParams) {
	var request QuerySmDataRequestObject

	request.UeId = ueId
	request.ServingPlmnId = servingPlmnId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QuerySmData(ctx, request.(QuerySmDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QuerySmData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QuerySmDataResponseObject); ok {
		if err := validResponse.VisitQuerySmDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QuerySmfSelectData operation middleware
func (sh *strictHandler) QuerySmfSelectData(ctx *gin.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params QuerySmfSelectDataParams) {
	var request QuerySmfSelectDataRequestObject

	request.UeId = ueId
	request.ServingPlmnId = servingPlmnId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QuerySmfSelectData(ctx, request.(QuerySmfSelectDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QuerySmfSelectData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QuerySmfSelectDataResponseObject); ok {
		if err := validResponse.VisitQuerySmfSelectDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QuerySmsData operation middleware
func (sh *strictHandler) QuerySmsData(ctx *gin.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params QuerySmsDataParams) {
	var request QuerySmsDataRequestObject

	request.UeId = ueId
	request.ServingPlmnId = servingPlmnId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QuerySmsData(ctx, request.(QuerySmsDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QuerySmsData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QuerySmsDataResponseObject); ok {
		if err := validResponse.VisitQuerySmsDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QuerySmsMngData operation middleware
func (sh *strictHandler) QuerySmsMngData(ctx *gin.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params QuerySmsMngDataParams) {
	var request QuerySmsMngDataRequestObject

	request.UeId = ueId
	request.ServingPlmnId = servingPlmnId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QuerySmsMngData(ctx, request.(QuerySmsMngDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QuerySmsMngData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QuerySmsMngDataResponseObject); ok {
		if err := validResponse.VisitQuerySmsMngDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryTraceData operation middleware
func (sh *strictHandler) QueryTraceData(ctx *gin.Context, ueId externalRef2.VarUeId, servingPlmnId VarPlmnId, params QueryTraceDataParams) {
	var request QueryTraceDataRequestObject

	request.UeId = ueId
	request.ServingPlmnId = servingPlmnId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.QueryTraceData(ctx, request.(QueryTraceDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryTraceData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(QueryTraceDataResponseObject); ok {
		if err := validResponse.VisitQueryTraceDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
